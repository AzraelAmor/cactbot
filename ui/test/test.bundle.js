/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./resources/overlay_plugin_api.ts
// OverlayPlugin API setup
let inited = false;
let wsUrl = null;
let ws = null;
let queue = [];
let rseqCounter = 0;
const responsePromises = {};
const subscribers = {};

const sendMessage = (msg, cb) => {
  if (ws) {
    if (queue) queue.push(msg);else ws.send(JSON.stringify(msg));
  } else {
    if (queue) queue.push([msg, cb]);else window.OverlayPluginApi.callHandler(JSON.stringify(msg), cb);
  }
};

const processEvent = msg => {
  init();
  const subs = subscribers[msg.type];
  subs === null || subs === void 0 ? void 0 : subs.forEach(sub => {
    try {
      sub(msg);
    } catch (e) {
      console.error(e);
    }
  });
};

const dispatchOverlayEvent = processEvent;
const addOverlayListener = (event, cb) => {
  var _subscribers$event;

  init();

  if (!subscribers[event]) {
    subscribers[event] = [];

    if (!queue) {
      sendMessage({
        call: 'subscribe',
        events: [event]
      });
    }
  }

  (_subscribers$event = subscribers[event]) === null || _subscribers$event === void 0 ? void 0 : _subscribers$event.push(cb);
};
const removeOverlayListener = (event, cb) => {
  init();

  if (subscribers[event]) {
    const list = subscribers[event];
    const pos = list === null || list === void 0 ? void 0 : list.indexOf(cb);
    if (pos !== undefined && pos > -1) list === null || list === void 0 ? void 0 : list.splice(pos, 1);
  }
};

const callOverlayHandlerInternal = (_msg // eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  init();
  const msg = { ..._msg,
    rseq: 0
  };
  let p;

  if (ws) {
    msg.rseq = rseqCounter++;
    p = new Promise((resolve, reject) => {
      responsePromises[msg.rseq] = {
        resolve: resolve,
        reject: reject
      };
    });
    sendMessage(msg);
  } else {
    p = new Promise((resolve, reject) => {
      sendMessage(msg, data => {
        if (!data) {
          resolve(data);
          return;
        }

        const parsed = JSON.parse(data);
        if (parsed['$error']) reject(parsed);else resolve(parsed);
      });
    });
  }

  return p;
};

const callOverlayHandlerOverrideMap = {};
const callOverlayHandler = (_msg // eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  var _callOverlayHandlerOv;

  init(); // If this `as` is incorrect, then it will not find an override.
  // TODO: we could also replace this with a type guard.

  const type = _msg.call;
  const callFunc = (_callOverlayHandlerOv = callOverlayHandlerOverrideMap[type]) !== null && _callOverlayHandlerOv !== void 0 ? _callOverlayHandlerOv : callOverlayHandlerInternal; // The `IOverlayHandler` type guarantees that parameters/return type match
  // one of the overlay handlers.  The OverrideMap also only stores functions
  // that match by the discriminating `call` field, and so any overrides
  // should be correct here.
  // eslint-disable-next-line max-len
  // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument

  return callFunc(_msg);
};
const setOverlayHandlerOverride = (type, override) => {
  if (!override) {
    delete callOverlayHandlerOverrideMap[type];
    return;
  }

  callOverlayHandlerOverrideMap[type] = override;
};
const init = () => {
  if (inited) return;

  if (typeof window !== 'undefined') {
    wsUrl = new URLSearchParams(window.location.search).get('OVERLAY_WS');

    if (wsUrl !== null) {
      const connectWs = function (wsUrl) {
        ws = new WebSocket(wsUrl);
        ws.addEventListener('error', e => {
          console.error(e);
        });
        ws.addEventListener('open', () => {
          var _queue;

          console.log('Connected!');
          const q = (_queue = queue) !== null && _queue !== void 0 ? _queue : [];
          queue = null;
          sendMessage({
            call: 'subscribe',
            events: Object.keys(subscribers)
          });

          for (const msg of q) {
            if (!Array.isArray(msg)) sendMessage(msg);
          }
        });
        ws.addEventListener('message', _msg => {
          try {
            if (typeof _msg.data !== 'string') {
              console.error('Invalid message data received: ', _msg);
              return;
            }

            const msg = JSON.parse(_msg.data);
            const promiseFuncs = (msg === null || msg === void 0 ? void 0 : msg.rseq) !== undefined ? responsePromises[msg.rseq] : undefined;

            if (msg.rseq !== undefined && promiseFuncs) {
              if (msg['$error']) promiseFuncs.reject(msg);else promiseFuncs.resolve(msg);
              delete responsePromises[msg.rseq];
            } else {
              processEvent(msg);
            }
          } catch (e) {
            console.error('Invalid message received: ', _msg);
            return;
          }
        });
        ws.addEventListener('close', () => {
          queue = null;
          console.log('Trying to reconnect...'); // Don't spam the server with retries.

          window.setTimeout(() => {
            connectWs(wsUrl);
          }, 300);
        });
      };

      connectWs(wsUrl);
    } else {
      const waitForApi = function () {
        var _window$OverlayPlugin, _queue2;

        if (!((_window$OverlayPlugin = window.OverlayPluginApi) !== null && _window$OverlayPlugin !== void 0 && _window$OverlayPlugin.ready)) {
          window.setTimeout(waitForApi, 300);
          return;
        }

        const q = (_queue2 = queue) !== null && _queue2 !== void 0 ? _queue2 : [];
        queue = null;
        window.__OverlayCallback = processEvent;
        sendMessage({
          call: 'subscribe',
          events: Object.keys(subscribers)
        });

        for (const item of q) {
          if (Array.isArray(item)) sendMessage(item[0], item[1]);
        }
      };

      waitForApi();
    } // Here the OverlayPlugin API is registered to the window object,
    // but this is mainly for backwards compatibility.For cactbot's built-in files,
    // it is recommended to use the various functions exported in resources/overlay_plugin_api.ts.


    window.addOverlayListener = addOverlayListener;
    window.removeOverlayListener = removeOverlayListener;
    window.callOverlayHandler = callOverlayHandler;
    window.dispatchOverlayEvent = dispatchOverlayEvent;
  }

  inited = true;
};
;// CONCATENATED MODULE: ./ui/test/test.ts


addOverlayListener('ChangeZone', e => {
  const currentZone = document.getElementById('currentZone');
  if (currentZone) currentZone.innerText = `currentZone: ${e.zoneName} (${e.zoneID})`;
});
addOverlayListener('onInCombatChangedEvent', e => {
  const inCombat = document.getElementById('inCombat');

  if (inCombat) {
    inCombat.innerText = `inCombat: act: ${e.detail.inACTCombat ? 'yes' : 'no'} game: ${e.detail.inGameCombat ? 'yes' : 'no'}`;
  }
});
addOverlayListener('onPlayerChangedEvent', e => {
  const name = document.getElementById('name');
  if (name) name.innerText = e.detail.name;
  const playerId = document.getElementById('playerId');
  if (playerId) playerId.innerText = e.detail.id.toString(16);
  const hp = document.getElementById('hp');
  if (hp) hp.innerText = `${e.detail.currentHP}/${e.detail.maxHP} (${e.detail.currentShield})`;
  const mp = document.getElementById('mp');
  if (mp) mp.innerText = `${e.detail.currentMP}/${e.detail.maxMP}`;
  const cp = document.getElementById('cp');
  if (cp) cp.innerText = `${e.detail.currentCP}/${e.detail.maxCP}`;
  const gp = document.getElementById('gp');
  if (gp) gp.innerText = `${e.detail.currentGP}/${e.detail.maxGP}`;
  const job = document.getElementById('job');
  if (job) job.innerText = `${e.detail.level} ${e.detail.job}`;
  const debug = document.getElementById('debug');
  if (debug) debug.innerText = e.detail.debugJob;
  const jobInfo = document.getElementById('jobinfo');

  if (jobInfo) {
    const detail = e.detail;

    if (detail.job === 'RDM' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.whiteMana} | ${detail.jobDetail.blackMana} | ${detail.jobDetail.manaStacks}`;
    } else if (detail.job === 'WAR' && detail.jobDetail) {
      jobInfo.innerText = detail.jobDetail.beast.toString();
    } else if (detail.job === 'DRK' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.blood} | ${detail.jobDetail.darksideMilliseconds} | ${detail.jobDetail.darkArts.toString()} | ${detail.jobDetail.livingShadowMilliseconds}`;
    } else if (detail.job === 'GNB' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.cartridges} | ${detail.jobDetail.continuationState}`;
    } else if (detail.job === 'PLD' && detail.jobDetail) {
      jobInfo.innerText = detail.jobDetail.oath.toString();
    } else if (detail.job === 'BRD' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.songName} | ${detail.jobDetail.lastPlayed} | ${detail.jobDetail.songProcs} | ${detail.jobDetail.soulGauge} | ${detail.jobDetail.songMilliseconds} | [${detail.jobDetail.coda.join(', ')}]`;
    } else if (detail.job === 'DNC' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.feathers} | ${detail.jobDetail.esprit} | [${detail.jobDetail.steps.join(', ')}] | ${detail.jobDetail.currentStep}`;
    } else if (detail.job === 'NIN' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.hutonMilliseconds} | ${detail.jobDetail.ninkiAmount}`;
    } else if (detail.job === 'DRG' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.bloodMilliseconds} | ${detail.jobDetail.lifeMilliseconds} | ${detail.jobDetail.eyesAmount} | ${detail.jobDetail.firstmindsFocus}`;
    } else if (detail.job === 'BLM' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.umbralStacks} (${detail.jobDetail.umbralMilliseconds}) | ${detail.jobDetail.umbralHearts} | ${detail.jobDetail.polyglot} ${detail.jobDetail.enochian.toString()} (${detail.jobDetail.nextPolyglotMilliseconds}) | ${detail.jobDetail.paradox.toString()}`;
    } else if (detail.job === 'THM' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.umbralStacks} (${detail.jobDetail.umbralMilliseconds})`;
    } else if (detail.job === 'WHM' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.lilyStacks} (${detail.jobDetail.lilyMilliseconds}) | ${detail.jobDetail.bloodlilyStacks}`;
    } else if (detail.job === 'SMN' && detail.jobDetail) {
      var _detail$jobDetail$act;

      jobInfo.innerText = `${detail.jobDetail.aetherflowStacks} | ${detail.jobDetail.tranceMilliseconds} | ${detail.jobDetail.attunement} | ${detail.jobDetail.attunementMilliseconds} | ${(_detail$jobDetail$act = detail.jobDetail.activePrimal) !== null && _detail$jobDetail$act !== void 0 ? _detail$jobDetail$act : '-'} | [${detail.jobDetail.usableArcanum.join(', ')}] | ${detail.jobDetail.nextSummoned}`;
    } else if (detail.job === 'SCH' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.aetherflowStacks} | ${detail.jobDetail.fairyGauge} | ${detail.jobDetail.fairyStatus} (${detail.jobDetail.fairyMilliseconds})`;
    } else if (detail.job === 'ACN' && detail.jobDetail) {
      jobInfo.innerText = detail.jobDetail.aetherflowStacks.toString();
    } else if (detail.job === 'AST' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.heldCard} | ${detail.jobDetail.crownCard} | [${detail.jobDetail.arcanums.join(', ')}]`;
    } else if (detail.job === 'MNK' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.chakraStacks} | ${detail.jobDetail.lunarNadi.toString()} | ${detail.jobDetail.solarNadi.toString()} | [${detail.jobDetail.beastChakra.join(', ')}]`;
    } else if (detail.job === 'MCH' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.heat} (${detail.jobDetail.overheatMilliseconds}) | ${detail.jobDetail.battery} (${detail.jobDetail.batteryMilliseconds}) | last: ${detail.jobDetail.lastBatteryAmount} | ${detail.jobDetail.overheatActive.toString()} | ${detail.jobDetail.robotActive.toString()}`;
    } else if (detail.job === 'SAM' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.kenki} | ${detail.jobDetail.meditationStacks}(${detail.jobDetail.setsu.toString()},${detail.jobDetail.getsu.toString()},${detail.jobDetail.ka.toString()})`;
    } else if (detail.job === 'SGE' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.addersgall} (${detail.jobDetail.addersgallMilliseconds}) | ${detail.jobDetail.addersting} | ${detail.jobDetail.eukrasia.toString()}`;
    } else if (detail.job === 'RPR' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.soul} | ${detail.jobDetail.shroud} | ${detail.jobDetail.enshroudMilliseconds} | ${detail.jobDetail.lemureShroud} | ${detail.jobDetail.voidShroud}`;
    } else {
      jobInfo.innerText = '';
    }
  }

  const pos = document.getElementById('pos');

  if (pos) {
    pos.innerText = `${e.detail.pos.x.toFixed(2)},${e.detail.pos.y.toFixed(2)},${e.detail.pos.z.toFixed(2)}`;
  }

  const rotation = document.getElementById('rotation');
  if (rotation) rotation.innerText = e.detail.rotation.toString();
  const bait = document.getElementById('bait');
  if (bait) bait.innerText = e.detail.bait.toString();
});
addOverlayListener('EnmityTargetData', e => {
  const target = document.getElementById('target');
  if (target) target.innerText = e.Target ? e.Target.Name : '--';
  const tid = document.getElementById('tid');
  if (tid) tid.innerText = e.Target ? e.Target.ID.toString(16) : '';
  const tdistance = document.getElementById('tdistance');
  if (tdistance) tdistance.innerText = e.Target ? e.Target.Distance.toString() : '';
});
addOverlayListener('onGameExistsEvent', _e => {// console.log("Game exists: " + e.detail.exists);
});
addOverlayListener('onGameActiveChangedEvent', _e => {// console.log("Game active: " + e.detail.active);
});
addOverlayListener('onLogEvent', e => {
  e.detail.logs.forEach(log => {
    // Match "/echo tts:<stuff>"
    const r = /00:0038:tts:(.*)/.exec(log);

    if (r && r[1]) {
      void callOverlayHandler({
        call: 'cactbotSay',
        text: r[1]
      });
    }
  });
});
addOverlayListener('onUserFileChanged', e => {
  console.log(`User file ${e.file} changed!`);
});
addOverlayListener('FileChanged', e => {
  console.log(`File ${e.file} changed!`);
});
void callOverlayHandler({
  call: 'cactbotRequestState'
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUQsSUFBTztFQUM3Q0MsT0FBTyxDQUFDbUMsR0FBUixDQUFhLGFBQVlwQyxDQUFDLENBQUMrSyxJQUFLLFdBQWhDO0FBQ0QsQ0FGaUIsQ0FBbEI7QUFJQTNLLGtCQUFrQixDQUFDLGFBQUQsRUFBaUJKLENBQUQsSUFBTztFQUN2Q0MsT0FBTyxDQUFDbUMsR0FBUixDQUFhLFFBQU9wQyxDQUFDLENBQUMrSyxJQUFLLFdBQTNCO0FBQ0QsQ0FGaUIsQ0FBbEI7QUFJQSxLQUFLdEosa0JBQWtCLENBQUM7RUFBRW5CLElBQUksRUFBRTtBQUFSLENBQUQsQ0FBdkIsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvb3ZlcmxheV9wbHVnaW5fYXBpLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS90ZXN0L3Rlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gT3ZlcmxheVBsdWdpbiBBUEkgc2V0dXBcclxuXHJcbmltcG9ydCB7XHJcbiAgRXZlbnRNYXAsXHJcbiAgRXZlbnRUeXBlLFxyXG4gIElPdmVybGF5SGFuZGxlcixcclxuICBPdmVybGF5SGFuZGxlckZ1bmNzLFxyXG4gIE92ZXJsYXlIYW5kbGVyVHlwZXMsXHJcbn0gZnJvbSAnLi4vdHlwZXMvZXZlbnQnO1xyXG5cclxudHlwZSBCYXNlUmVzcG9uc2UgPSB7IHJzZXE/OiBudW1iZXI7ICckZXJyb3InPzogYm9vbGVhbiB9O1xyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgX19PdmVybGF5Q2FsbGJhY2s6IEV2ZW50TWFwW0V2ZW50VHlwZV07XHJcbiAgICBkaXNwYXRjaE92ZXJsYXlFdmVudD86IHR5cGVvZiBwcm9jZXNzRXZlbnQ7XHJcbiAgICBPdmVybGF5UGx1Z2luQXBpOiB7XHJcbiAgICAgIHJlYWR5OiBib29sZWFuO1xyXG4gICAgICBjYWxsSGFuZGxlcjogKG1zZzogc3RyaW5nLCBjYj86ICh2YWx1ZTogc3RyaW5nKSA9PiB1bmtub3duKSA9PiB2b2lkO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgVGhpcyBpcyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cclxuICAgICAqXHJcbiAgICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0byBpbXBvcnQgZnJvbSB0aGlzIGZpbGU6XHJcbiAgICAgKlxyXG4gICAgICogYGltcG9ydCB7IGFkZE92ZXJsYXlMaXN0ZW5lciB9IGZyb20gJy9wYXRoL3RvL292ZXJsYXlfcGx1Z2luX2FwaSc7YFxyXG4gICAgICovXHJcbiAgICBhZGRPdmVybGF5TGlzdGVuZXI6IElBZGRPdmVybGF5TGlzdGVuZXI7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIFRoaXMgaXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXHJcbiAgICAgKlxyXG4gICAgICogSXQgaXMgcmVjb21tZW5kZWQgdG8gaW1wb3J0IGZyb20gdGhpcyBmaWxlOlxyXG4gICAgICpcclxuICAgICAqIGBpbXBvcnQgeyByZW1vdmVPdmVybGF5TGlzdGVuZXIgfSBmcm9tICcvcGF0aC90by9vdmVybGF5X3BsdWdpbl9hcGknO2BcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlT3ZlcmxheUxpc3RlbmVyOiBJUmVtb3ZlT3ZlcmxheUxpc3RlbmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIGlzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxyXG4gICAgICpcclxuICAgICAqIEl0IGlzIHJlY29tbWVuZGVkIHRvIGltcG9ydCBmcm9tIHRoaXMgZmlsZTpcclxuICAgICAqXHJcbiAgICAgKiBgaW1wb3J0IHsgY2FsbE92ZXJsYXlIYW5kbGVyIH0gZnJvbSAnL3BhdGgvdG8vb3ZlcmxheV9wbHVnaW5fYXBpJztgXHJcbiAgICAgKi9cclxuICAgIGNhbGxPdmVybGF5SGFuZGxlcjogSU92ZXJsYXlIYW5kbGVyO1xyXG4gIH1cclxufVxyXG5cclxudHlwZSBJQWRkT3ZlcmxheUxpc3RlbmVyID0gPFQgZXh0ZW5kcyBFdmVudFR5cGU+KGV2ZW50OiBULCBjYjogRXZlbnRNYXBbVF0pID0+IHZvaWQ7XHJcbnR5cGUgSVJlbW92ZU92ZXJsYXlMaXN0ZW5lciA9IDxUIGV4dGVuZHMgRXZlbnRUeXBlPihldmVudDogVCwgY2I6IEV2ZW50TWFwW1RdKSA9PiB2b2lkO1xyXG5cclxudHlwZSBTdWJzY3JpYmVyPFQ+ID0ge1xyXG4gIFtrZXkgaW4gRXZlbnRUeXBlXT86IFRbXTtcclxufTtcclxudHlwZSBFdmVudFBhcmFtZXRlciA9IFBhcmFtZXRlcnM8RXZlbnRNYXBbRXZlbnRUeXBlXT5bMF07XHJcbnR5cGUgVm9pZEZ1bmM8VD4gPSAoLi4uYXJnczogVFtdKSA9PiB2b2lkO1xyXG5cclxubGV0IGluaXRlZCA9IGZhbHNlO1xyXG5cclxubGV0IHdzVXJsOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxubGV0IHdzOiBXZWJTb2NrZXQgfCBudWxsID0gbnVsbDtcclxubGV0IHF1ZXVlOiAoXHJcbiAgfCB7IFtzOiBzdHJpbmddOiB1bmtub3duIH1cclxuICB8IFt7IFtzOiBzdHJpbmddOiB1bmtub3duIH0sICgodmFsdWU6IHN0cmluZyB8IG51bGwpID0+IHVua25vd24pIHwgdW5kZWZpbmVkXVxyXG4pW10gfCBudWxsID0gW107XHJcbmxldCByc2VxQ291bnRlciA9IDA7XHJcbnR5cGUgUHJvbWlzZUZ1bmNzID0ge1xyXG4gIHJlc29sdmU6ICh2YWx1ZTogdW5rbm93bikgPT4gdm9pZDtcclxuICByZWplY3Q6ICh2YWx1ZTogdW5rbm93bikgPT4gdm9pZDtcclxufTtcclxuY29uc3QgcmVzcG9uc2VQcm9taXNlczogeyBbcnNlcUlkeDogbnVtYmVyXTogUHJvbWlzZUZ1bmNzIH0gPSB7fTtcclxuXHJcbmNvbnN0IHN1YnNjcmliZXJzOiBTdWJzY3JpYmVyPFZvaWRGdW5jPHVua25vd24+PiA9IHt9O1xyXG5cclxuY29uc3Qgc2VuZE1lc3NhZ2UgPSAoXHJcbiAgbXNnOiB7IFtzOiBzdHJpbmddOiB1bmtub3duIH0sXHJcbiAgY2I/OiAodmFsdWU6IHN0cmluZyB8IG51bGwpID0+IHVua25vd24sXHJcbik6IHZvaWQgPT4ge1xyXG4gIGlmICh3cykge1xyXG4gICAgaWYgKHF1ZXVlKVxyXG4gICAgICBxdWV1ZS5wdXNoKG1zZyk7XHJcbiAgICBlbHNlXHJcbiAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkobXNnKSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmIChxdWV1ZSlcclxuICAgICAgcXVldWUucHVzaChbbXNnLCBjYl0pO1xyXG4gICAgZWxzZVxyXG4gICAgICB3aW5kb3cuT3ZlcmxheVBsdWdpbkFwaS5jYWxsSGFuZGxlcihKU09OLnN0cmluZ2lmeShtc2cpLCBjYik7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgcHJvY2Vzc0V2ZW50ID0gPFQgZXh0ZW5kcyBFdmVudFR5cGU+KG1zZzogUGFyYW1ldGVyczxFdmVudE1hcFtUXT5bMF0pOiB2b2lkID0+IHtcclxuICBpbml0KCk7XHJcblxyXG4gIGNvbnN0IHN1YnMgPSBzdWJzY3JpYmVyc1ttc2cudHlwZV07XHJcbiAgc3Vicz8uZm9yRWFjaCgoc3ViKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBzdWIobXNnKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgIH1cclxuICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBkaXNwYXRjaE92ZXJsYXlFdmVudCA9IHByb2Nlc3NFdmVudDtcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRPdmVybGF5TGlzdGVuZXI6IElBZGRPdmVybGF5TGlzdGVuZXIgPSAoZXZlbnQsIGNiKTogdm9pZCA9PiB7XHJcbiAgaW5pdCgpO1xyXG5cclxuICBpZiAoIXN1YnNjcmliZXJzW2V2ZW50XSkge1xyXG4gICAgc3Vic2NyaWJlcnNbZXZlbnRdID0gW107XHJcblxyXG4gICAgaWYgKCFxdWV1ZSkge1xyXG4gICAgICBzZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgY2FsbDogJ3N1YnNjcmliZScsXHJcbiAgICAgICAgZXZlbnRzOiBbZXZlbnRdLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN1YnNjcmliZXJzW2V2ZW50XT8ucHVzaChjYiBhcyBWb2lkRnVuYzx1bmtub3duPik7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlT3ZlcmxheUxpc3RlbmVyOiBJUmVtb3ZlT3ZlcmxheUxpc3RlbmVyID0gKGV2ZW50LCBjYik6IHZvaWQgPT4ge1xyXG4gIGluaXQoKTtcclxuXHJcbiAgaWYgKHN1YnNjcmliZXJzW2V2ZW50XSkge1xyXG4gICAgY29uc3QgbGlzdCA9IHN1YnNjcmliZXJzW2V2ZW50XTtcclxuICAgIGNvbnN0IHBvcyA9IGxpc3Q/LmluZGV4T2YoY2IgYXMgVm9pZEZ1bmM8dW5rbm93bj4pO1xyXG5cclxuICAgIGlmIChwb3MgIT09IHVuZGVmaW5lZCAmJiBwb3MgPiAtMSlcclxuICAgICAgbGlzdD8uc3BsaWNlKHBvcywgMSk7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgY2FsbE92ZXJsYXlIYW5kbGVySW50ZXJuYWw6IElPdmVybGF5SGFuZGxlciA9IChcclxuICBfbXNnOiB7IFtzOiBzdHJpbmddOiB1bmtub3duIH0sXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICBpbml0KCk7XHJcblxyXG4gIGNvbnN0IG1zZyA9IHtcclxuICAgIC4uLl9tc2csXHJcbiAgICByc2VxOiAwLFxyXG4gIH07XHJcbiAgbGV0IHA6IFByb21pc2U8dW5rbm93bj47XHJcblxyXG4gIGlmICh3cykge1xyXG4gICAgbXNnLnJzZXEgPSByc2VxQ291bnRlcisrO1xyXG4gICAgcCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgcmVzcG9uc2VQcm9taXNlc1ttc2cucnNlcV0gPSB7IHJlc29sdmU6IHJlc29sdmUsIHJlamVjdDogcmVqZWN0IH07XHJcbiAgICB9KTtcclxuXHJcbiAgICBzZW5kTWVzc2FnZShtc2cpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBzZW5kTWVzc2FnZShtc2csIChkYXRhKSA9PiB7XHJcbiAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKGRhdGEpIGFzIEJhc2VSZXNwb25zZTtcclxuICAgICAgICBpZiAocGFyc2VkWyckZXJyb3InXSlcclxuICAgICAgICAgIHJlamVjdChwYXJzZWQpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIHJlc29sdmUocGFyc2VkKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBwO1xyXG59O1xyXG5cclxudHlwZSBPdmVycmlkZU1hcCA9IHsgW2NhbGwgaW4gT3ZlcmxheUhhbmRsZXJUeXBlc10/OiBPdmVybGF5SGFuZGxlckZ1bmNzW2NhbGxdIH07XHJcbmNvbnN0IGNhbGxPdmVybGF5SGFuZGxlck92ZXJyaWRlTWFwOiBPdmVycmlkZU1hcCA9IHt9O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNhbGxPdmVybGF5SGFuZGxlcjogSU92ZXJsYXlIYW5kbGVyID0gKFxyXG4gIF9tc2c6IHsgW3M6IHN0cmluZ106IHVua25vd24gfSxcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4pOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gIGluaXQoKTtcclxuXHJcbiAgLy8gSWYgdGhpcyBgYXNgIGlzIGluY29ycmVjdCwgdGhlbiBpdCB3aWxsIG5vdCBmaW5kIGFuIG92ZXJyaWRlLlxyXG4gIC8vIFRPRE86IHdlIGNvdWxkIGFsc28gcmVwbGFjZSB0aGlzIHdpdGggYSB0eXBlIGd1YXJkLlxyXG4gIGNvbnN0IHR5cGUgPSBfbXNnLmNhbGwgYXMga2V5b2YgT3ZlcnJpZGVNYXA7XHJcbiAgY29uc3QgY2FsbEZ1bmMgPSBjYWxsT3ZlcmxheUhhbmRsZXJPdmVycmlkZU1hcFt0eXBlXSA/PyBjYWxsT3ZlcmxheUhhbmRsZXJJbnRlcm5hbDtcclxuXHJcbiAgLy8gVGhlIGBJT3ZlcmxheUhhbmRsZXJgIHR5cGUgZ3VhcmFudGVlcyB0aGF0IHBhcmFtZXRlcnMvcmV0dXJuIHR5cGUgbWF0Y2hcclxuICAvLyBvbmUgb2YgdGhlIG92ZXJsYXkgaGFuZGxlcnMuICBUaGUgT3ZlcnJpZGVNYXAgYWxzbyBvbmx5IHN0b3JlcyBmdW5jdGlvbnNcclxuICAvLyB0aGF0IG1hdGNoIGJ5IHRoZSBkaXNjcmltaW5hdGluZyBgY2FsbGAgZmllbGQsIGFuZCBzbyBhbnkgb3ZlcnJpZGVzXHJcbiAgLy8gc2hvdWxkIGJlIGNvcnJlY3QgaGVyZS5cclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcclxuICByZXR1cm4gY2FsbEZ1bmMoX21zZyBhcyBhbnkpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHNldE92ZXJsYXlIYW5kbGVyT3ZlcnJpZGUgPSA8VCBleHRlbmRzIGtleW9mIE92ZXJsYXlIYW5kbGVyRnVuY3M+KFxyXG4gIHR5cGU6IFQsXHJcbiAgb3ZlcnJpZGU/OiBPdmVybGF5SGFuZGxlckZ1bmNzW1RdLFxyXG4pOiB2b2lkID0+IHtcclxuICBpZiAoIW92ZXJyaWRlKSB7XHJcbiAgICBkZWxldGUgY2FsbE92ZXJsYXlIYW5kbGVyT3ZlcnJpZGVNYXBbdHlwZV07XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNhbGxPdmVybGF5SGFuZGxlck92ZXJyaWRlTWFwW3R5cGVdID0gb3ZlcnJpZGU7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaW5pdCA9ICgpOiB2b2lkID0+IHtcclxuICBpZiAoaW5pdGVkKVxyXG4gICAgcmV0dXJuO1xyXG5cclxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHdzVXJsID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKS5nZXQoJ09WRVJMQVlfV1MnKTtcclxuICAgIGlmICh3c1VybCAhPT0gbnVsbCkge1xyXG4gICAgICBjb25zdCBjb25uZWN0V3MgPSBmdW5jdGlvbih3c1VybDogc3RyaW5nKSB7XHJcbiAgICAgICAgd3MgPSBuZXcgV2ViU29ja2V0KHdzVXJsKTtcclxuXHJcbiAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoZSkgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsICgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdDb25uZWN0ZWQhJyk7XHJcblxyXG4gICAgICAgICAgY29uc3QgcSA9IHF1ZXVlID8/IFtdO1xyXG4gICAgICAgICAgcXVldWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgIHNlbmRNZXNzYWdlKHtcclxuICAgICAgICAgICAgY2FsbDogJ3N1YnNjcmliZScsXHJcbiAgICAgICAgICAgIGV2ZW50czogT2JqZWN0LmtleXMoc3Vic2NyaWJlcnMpLFxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgZm9yIChjb25zdCBtc2cgb2YgcSkge1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobXNnKSlcclxuICAgICAgICAgICAgICBzZW5kTWVzc2FnZShtc2cpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB3cy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKF9tc2cpID0+IHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgX21zZy5kYXRhICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgbWVzc2FnZSBkYXRhIHJlY2VpdmVkOiAnLCBfbXNnKTtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbXNnID0gSlNPTi5wYXJzZShfbXNnLmRhdGEpIGFzIEV2ZW50UGFyYW1ldGVyICYgQmFzZVJlc3BvbnNlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcHJvbWlzZUZ1bmNzID0gbXNnPy5yc2VxICE9PSB1bmRlZmluZWQgPyByZXNwb25zZVByb21pc2VzW21zZy5yc2VxXSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgaWYgKG1zZy5yc2VxICE9PSB1bmRlZmluZWQgJiYgcHJvbWlzZUZ1bmNzKSB7XHJcbiAgICAgICAgICAgICAgaWYgKG1zZ1snJGVycm9yJ10pXHJcbiAgICAgICAgICAgICAgICBwcm9taXNlRnVuY3MucmVqZWN0KG1zZyk7XHJcbiAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcHJvbWlzZUZ1bmNzLnJlc29sdmUobXNnKTtcclxuICAgICAgICAgICAgICBkZWxldGUgcmVzcG9uc2VQcm9taXNlc1ttc2cucnNlcV07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcHJvY2Vzc0V2ZW50KG1zZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignSW52YWxpZCBtZXNzYWdlIHJlY2VpdmVkOiAnLCBfbXNnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB3cy5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHtcclxuICAgICAgICAgIHF1ZXVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnVHJ5aW5nIHRvIHJlY29ubmVjdC4uLicpO1xyXG4gICAgICAgICAgLy8gRG9uJ3Qgc3BhbSB0aGUgc2VydmVyIHdpdGggcmV0cmllcy5cclxuICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgY29ubmVjdFdzKHdzVXJsKTtcclxuICAgICAgICAgIH0sIDMwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25uZWN0V3Mod3NVcmwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3Qgd2FpdEZvckFwaSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghd2luZG93Lk92ZXJsYXlQbHVnaW5BcGk/LnJlYWR5KSB7XHJcbiAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCh3YWl0Rm9yQXBpLCAzMDApO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcSA9IHF1ZXVlID8/IFtdO1xyXG4gICAgICAgIHF1ZXVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgd2luZG93Ll9fT3ZlcmxheUNhbGxiYWNrID0gcHJvY2Vzc0V2ZW50O1xyXG5cclxuICAgICAgICBzZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgICBjYWxsOiAnc3Vic2NyaWJlJyxcclxuICAgICAgICAgIGV2ZW50czogT2JqZWN0LmtleXMoc3Vic2NyaWJlcnMpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgcSkge1xyXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpXHJcbiAgICAgICAgICAgIHNlbmRNZXNzYWdlKGl0ZW1bMF0sIGl0ZW1bMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHdhaXRGb3JBcGkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIZXJlIHRoZSBPdmVybGF5UGx1Z2luIEFQSSBpcyByZWdpc3RlcmVkIHRvIHRoZSB3aW5kb3cgb2JqZWN0LFxyXG4gICAgLy8gYnV0IHRoaXMgaXMgbWFpbmx5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5Gb3IgY2FjdGJvdCdzIGJ1aWx0LWluIGZpbGVzLFxyXG4gICAgLy8gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSB2YXJpb3VzIGZ1bmN0aW9ucyBleHBvcnRlZCBpbiByZXNvdXJjZXMvb3ZlcmxheV9wbHVnaW5fYXBpLnRzLlxyXG4gICAgd2luZG93LmFkZE92ZXJsYXlMaXN0ZW5lciA9IGFkZE92ZXJsYXlMaXN0ZW5lcjtcclxuICAgIHdpbmRvdy5yZW1vdmVPdmVybGF5TGlzdGVuZXIgPSByZW1vdmVPdmVybGF5TGlzdGVuZXI7XHJcbiAgICB3aW5kb3cuY2FsbE92ZXJsYXlIYW5kbGVyID0gY2FsbE92ZXJsYXlIYW5kbGVyO1xyXG4gICAgd2luZG93LmRpc3BhdGNoT3ZlcmxheUV2ZW50ID0gZGlzcGF0Y2hPdmVybGF5RXZlbnQ7XHJcbiAgfVxyXG5cclxuICBpbml0ZWQgPSB0cnVlO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBhZGRPdmVybGF5TGlzdGVuZXIsIGNhbGxPdmVybGF5SGFuZGxlciB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9vdmVybGF5X3BsdWdpbl9hcGknO1xyXG5cclxuaW1wb3J0ICcuLi8uLi9yZXNvdXJjZXMvZGVmYXVsdHMuY3NzJztcclxuXHJcbmFkZE92ZXJsYXlMaXN0ZW5lcignQ2hhbmdlWm9uZScsIChlKSA9PiB7XHJcbiAgY29uc3QgY3VycmVudFpvbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VycmVudFpvbmUnKTtcclxuICBpZiAoY3VycmVudFpvbmUpXHJcbiAgICBjdXJyZW50Wm9uZS5pbm5lclRleHQgPSBgY3VycmVudFpvbmU6ICR7ZS56b25lTmFtZX0gKCR7ZS56b25lSUR9KWA7XHJcbn0pO1xyXG5cclxuYWRkT3ZlcmxheUxpc3RlbmVyKCdvbkluQ29tYmF0Q2hhbmdlZEV2ZW50JywgKGUpID0+IHtcclxuICBjb25zdCBpbkNvbWJhdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbkNvbWJhdCcpO1xyXG4gIGlmIChpbkNvbWJhdCkge1xyXG4gICAgaW5Db21iYXQuaW5uZXJUZXh0ID0gYGluQ29tYmF0OiBhY3Q6ICR7XHJcbiAgICAgIGUuZGV0YWlsLmluQUNUQ29tYmF0ID8gJ3llcycgOiAnbm8nXHJcbiAgICB9IGdhbWU6ICR7KGUuZGV0YWlsLmluR2FtZUNvbWJhdCA/ICd5ZXMnIDogJ25vJyl9YDtcclxuICB9XHJcbn0pO1xyXG5cclxuYWRkT3ZlcmxheUxpc3RlbmVyKCdvblBsYXllckNoYW5nZWRFdmVudCcsIChlKSA9PiB7XHJcbiAgY29uc3QgbmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYW1lJyk7XHJcbiAgaWYgKG5hbWUpXHJcbiAgICBuYW1lLmlubmVyVGV4dCA9IGUuZGV0YWlsLm5hbWU7XHJcbiAgY29uc3QgcGxheWVySWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxheWVySWQnKTtcclxuICBpZiAocGxheWVySWQpXHJcbiAgICBwbGF5ZXJJZC5pbm5lclRleHQgPSBlLmRldGFpbC5pZC50b1N0cmluZygxNik7XHJcbiAgY29uc3QgaHAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaHAnKTtcclxuICBpZiAoaHApXHJcbiAgICBocC5pbm5lclRleHQgPSBgJHtlLmRldGFpbC5jdXJyZW50SFB9LyR7ZS5kZXRhaWwubWF4SFB9ICgke2UuZGV0YWlsLmN1cnJlbnRTaGllbGR9KWA7XHJcbiAgY29uc3QgbXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXAnKTtcclxuICBpZiAobXApXHJcbiAgICBtcC5pbm5lclRleHQgPSBgJHtlLmRldGFpbC5jdXJyZW50TVB9LyR7ZS5kZXRhaWwubWF4TVB9YDtcclxuICBjb25zdCBjcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjcCcpO1xyXG4gIGlmIChjcClcclxuICAgIGNwLmlubmVyVGV4dCA9IGAke2UuZGV0YWlsLmN1cnJlbnRDUH0vJHtlLmRldGFpbC5tYXhDUH1gO1xyXG4gIGNvbnN0IGdwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dwJyk7XHJcbiAgaWYgKGdwKVxyXG4gICAgZ3AuaW5uZXJUZXh0ID0gYCR7ZS5kZXRhaWwuY3VycmVudEdQfS8ke2UuZGV0YWlsLm1heEdQfWA7XHJcbiAgY29uc3Qgam9iID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYicpO1xyXG4gIGlmIChqb2IpXHJcbiAgICBqb2IuaW5uZXJUZXh0ID0gYCR7ZS5kZXRhaWwubGV2ZWx9ICR7ZS5kZXRhaWwuam9ifWA7XHJcbiAgY29uc3QgZGVidWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVidWcnKTtcclxuICBpZiAoZGVidWcpXHJcbiAgICBkZWJ1Zy5pbm5lclRleHQgPSBlLmRldGFpbC5kZWJ1Z0pvYjtcclxuXHJcbiAgY29uc3Qgam9iSW5mbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqb2JpbmZvJyk7XHJcbiAgaWYgKGpvYkluZm8pIHtcclxuICAgIGNvbnN0IGRldGFpbCA9IGUuZGV0YWlsO1xyXG4gICAgaWYgKGRldGFpbC5qb2IgPT09ICdSRE0nICYmIGRldGFpbC5qb2JEZXRhaWwpIHtcclxuICAgICAgam9iSW5mby5pbm5lclRleHQgPVxyXG4gICAgICAgIGAke2RldGFpbC5qb2JEZXRhaWwud2hpdGVNYW5hfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5ibGFja01hbmF9IHwgJHtkZXRhaWwuam9iRGV0YWlsLm1hbmFTdGFja3N9YDtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ1dBUicgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9IGRldGFpbC5qb2JEZXRhaWwuYmVhc3QudG9TdHJpbmcoKTtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ0RSSycgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9XHJcbiAgICAgICAgYCR7ZGV0YWlsLmpvYkRldGFpbC5ibG9vZH0gfCAke2RldGFpbC5qb2JEZXRhaWwuZGFya3NpZGVNaWxsaXNlY29uZHN9IHwgJHtkZXRhaWwuam9iRGV0YWlsLmRhcmtBcnRzLnRvU3RyaW5nKCl9IHwgJHtkZXRhaWwuam9iRGV0YWlsLmxpdmluZ1NoYWRvd01pbGxpc2Vjb25kc31gO1xyXG4gICAgfSBlbHNlIGlmIChkZXRhaWwuam9iID09PSAnR05CJyAmJiBkZXRhaWwuam9iRGV0YWlsKSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID0gYCR7ZGV0YWlsLmpvYkRldGFpbC5jYXJ0cmlkZ2VzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5jb250aW51YXRpb25TdGF0ZX1gO1xyXG4gICAgfSBlbHNlIGlmIChkZXRhaWwuam9iID09PSAnUExEJyAmJiBkZXRhaWwuam9iRGV0YWlsKSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID0gZGV0YWlsLmpvYkRldGFpbC5vYXRoLnRvU3RyaW5nKCk7XHJcbiAgICB9IGVsc2UgaWYgKGRldGFpbC5qb2IgPT09ICdCUkQnICYmIGRldGFpbC5qb2JEZXRhaWwpIHtcclxuICAgICAgam9iSW5mby5pbm5lclRleHQgPVxyXG4gICAgICAgIGAke2RldGFpbC5qb2JEZXRhaWwuc29uZ05hbWV9IHwgJHtkZXRhaWwuam9iRGV0YWlsLmxhc3RQbGF5ZWR9IHwgJHtkZXRhaWwuam9iRGV0YWlsLnNvbmdQcm9jc30gfCAke2RldGFpbC5qb2JEZXRhaWwuc291bEdhdWdlfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5zb25nTWlsbGlzZWNvbmRzfSB8IFske1xyXG4gICAgICAgICAgZGV0YWlsLmpvYkRldGFpbC5jb2RhLmpvaW4oJywgJylcclxuICAgICAgICB9XWA7XHJcbiAgICB9IGVsc2UgaWYgKGRldGFpbC5qb2IgPT09ICdETkMnICYmIGRldGFpbC5qb2JEZXRhaWwpIHtcclxuICAgICAgam9iSW5mby5pbm5lclRleHQgPSBgJHtkZXRhaWwuam9iRGV0YWlsLmZlYXRoZXJzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5lc3ByaXR9IHwgWyR7XHJcbiAgICAgICAgZGV0YWlsLmpvYkRldGFpbC5zdGVwcy5qb2luKCcsICcpXHJcbiAgICAgIH1dIHwgJHtkZXRhaWwuam9iRGV0YWlsLmN1cnJlbnRTdGVwfWA7XHJcbiAgICB9IGVsc2UgaWYgKGRldGFpbC5qb2IgPT09ICdOSU4nICYmIGRldGFpbC5qb2JEZXRhaWwpIHtcclxuICAgICAgam9iSW5mby5pbm5lclRleHQgPSBgJHtkZXRhaWwuam9iRGV0YWlsLmh1dG9uTWlsbGlzZWNvbmRzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5uaW5raUFtb3VudH1gO1xyXG4gICAgfSBlbHNlIGlmIChkZXRhaWwuam9iID09PSAnRFJHJyAmJiBkZXRhaWwuam9iRGV0YWlsKSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID1cclxuICAgICAgICBgJHtkZXRhaWwuam9iRGV0YWlsLmJsb29kTWlsbGlzZWNvbmRzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5saWZlTWlsbGlzZWNvbmRzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5leWVzQW1vdW50fSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5maXJzdG1pbmRzRm9jdXN9YDtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ0JMTScgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9XHJcbiAgICAgICAgYCR7ZGV0YWlsLmpvYkRldGFpbC51bWJyYWxTdGFja3N9ICgke2RldGFpbC5qb2JEZXRhaWwudW1icmFsTWlsbGlzZWNvbmRzfSkgfCAke2RldGFpbC5qb2JEZXRhaWwudW1icmFsSGVhcnRzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5wb2x5Z2xvdH0gJHtkZXRhaWwuam9iRGV0YWlsLmVub2NoaWFuLnRvU3RyaW5nKCl9ICgke2RldGFpbC5qb2JEZXRhaWwubmV4dFBvbHlnbG90TWlsbGlzZWNvbmRzfSkgfCAke2RldGFpbC5qb2JEZXRhaWwucGFyYWRveC50b1N0cmluZygpfWA7XHJcbiAgICB9IGVsc2UgaWYgKGRldGFpbC5qb2IgPT09ICdUSE0nICYmIGRldGFpbC5qb2JEZXRhaWwpIHtcclxuICAgICAgam9iSW5mby5pbm5lclRleHQgPVxyXG4gICAgICAgIGAke2RldGFpbC5qb2JEZXRhaWwudW1icmFsU3RhY2tzfSAoJHtkZXRhaWwuam9iRGV0YWlsLnVtYnJhbE1pbGxpc2Vjb25kc30pYDtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ1dITScgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9XHJcbiAgICAgICAgYCR7ZGV0YWlsLmpvYkRldGFpbC5saWx5U3RhY2tzfSAoJHtkZXRhaWwuam9iRGV0YWlsLmxpbHlNaWxsaXNlY29uZHN9KSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5ibG9vZGxpbHlTdGFja3N9YDtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ1NNTicgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9XHJcbiAgICAgICAgYCR7ZGV0YWlsLmpvYkRldGFpbC5hZXRoZXJmbG93U3RhY2tzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC50cmFuY2VNaWxsaXNlY29uZHN9IHwgJHtkZXRhaWwuam9iRGV0YWlsLmF0dHVuZW1lbnR9IHwgJHtkZXRhaWwuam9iRGV0YWlsLmF0dHVuZW1lbnRNaWxsaXNlY29uZHN9IHwgJHtkZXRhaWxcclxuICAgICAgICAgIC5qb2JEZXRhaWwuYWN0aXZlUHJpbWFsID8/ICctJ30gfCBbJHtcclxuICAgICAgICAgIGRldGFpbC5qb2JEZXRhaWwudXNhYmxlQXJjYW51bS5qb2luKCcsICcpXHJcbiAgICAgICAgfV0gfCAke2RldGFpbC5qb2JEZXRhaWwubmV4dFN1bW1vbmVkfWA7XHJcbiAgICB9IGVsc2UgaWYgKGRldGFpbC5qb2IgPT09ICdTQ0gnICYmIGRldGFpbC5qb2JEZXRhaWwpIHtcclxuICAgICAgam9iSW5mby5pbm5lclRleHQgPVxyXG4gICAgICAgIGAke2RldGFpbC5qb2JEZXRhaWwuYWV0aGVyZmxvd1N0YWNrc30gfCAke2RldGFpbC5qb2JEZXRhaWwuZmFpcnlHYXVnZX0gfCAke2RldGFpbC5qb2JEZXRhaWwuZmFpcnlTdGF0dXN9ICgke2RldGFpbC5qb2JEZXRhaWwuZmFpcnlNaWxsaXNlY29uZHN9KWA7XHJcbiAgICB9IGVsc2UgaWYgKGRldGFpbC5qb2IgPT09ICdBQ04nICYmIGRldGFpbC5qb2JEZXRhaWwpIHtcclxuICAgICAgam9iSW5mby5pbm5lclRleHQgPSBkZXRhaWwuam9iRGV0YWlsLmFldGhlcmZsb3dTdGFja3MudG9TdHJpbmcoKTtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ0FTVCcgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9IGAke2RldGFpbC5qb2JEZXRhaWwuaGVsZENhcmR9IHwgJHtkZXRhaWwuam9iRGV0YWlsLmNyb3duQ2FyZH0gfCBbJHtcclxuICAgICAgICBkZXRhaWwuam9iRGV0YWlsLmFyY2FudW1zLmpvaW4oJywgJylcclxuICAgICAgfV1gO1xyXG4gICAgfSBlbHNlIGlmIChkZXRhaWwuam9iID09PSAnTU5LJyAmJiBkZXRhaWwuam9iRGV0YWlsKSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID1cclxuICAgICAgICBgJHtkZXRhaWwuam9iRGV0YWlsLmNoYWtyYVN0YWNrc30gfCAke2RldGFpbC5qb2JEZXRhaWwubHVuYXJOYWRpLnRvU3RyaW5nKCl9IHwgJHtkZXRhaWwuam9iRGV0YWlsLnNvbGFyTmFkaS50b1N0cmluZygpfSB8IFske1xyXG4gICAgICAgICAgZGV0YWlsLmpvYkRldGFpbC5iZWFzdENoYWtyYS5qb2luKCcsICcpXHJcbiAgICAgICAgfV1gO1xyXG4gICAgfSBlbHNlIGlmIChkZXRhaWwuam9iID09PSAnTUNIJyAmJiBkZXRhaWwuam9iRGV0YWlsKSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID1cclxuICAgICAgICBgJHtkZXRhaWwuam9iRGV0YWlsLmhlYXR9ICgke2RldGFpbC5qb2JEZXRhaWwub3ZlcmhlYXRNaWxsaXNlY29uZHN9KSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5iYXR0ZXJ5fSAoJHtkZXRhaWwuam9iRGV0YWlsLmJhdHRlcnlNaWxsaXNlY29uZHN9KSB8IGxhc3Q6ICR7ZGV0YWlsLmpvYkRldGFpbC5sYXN0QmF0dGVyeUFtb3VudH0gfCAke2RldGFpbC5qb2JEZXRhaWwub3ZlcmhlYXRBY3RpdmUudG9TdHJpbmcoKX0gfCAke2RldGFpbC5qb2JEZXRhaWwucm9ib3RBY3RpdmUudG9TdHJpbmcoKX1gO1xyXG4gICAgfSBlbHNlIGlmIChkZXRhaWwuam9iID09PSAnU0FNJyAmJiBkZXRhaWwuam9iRGV0YWlsKSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID1cclxuICAgICAgICBgJHtkZXRhaWwuam9iRGV0YWlsLmtlbmtpfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5tZWRpdGF0aW9uU3RhY2tzfSgke2RldGFpbC5qb2JEZXRhaWwuc2V0c3UudG9TdHJpbmcoKX0sJHtkZXRhaWwuam9iRGV0YWlsLmdldHN1LnRvU3RyaW5nKCl9LCR7ZGV0YWlsLmpvYkRldGFpbC5rYS50b1N0cmluZygpfSlgO1xyXG4gICAgfSBlbHNlIGlmIChkZXRhaWwuam9iID09PSAnU0dFJyAmJiBkZXRhaWwuam9iRGV0YWlsKSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID1cclxuICAgICAgICBgJHtkZXRhaWwuam9iRGV0YWlsLmFkZGVyc2dhbGx9ICgke2RldGFpbC5qb2JEZXRhaWwuYWRkZXJzZ2FsbE1pbGxpc2Vjb25kc30pIHwgJHtkZXRhaWwuam9iRGV0YWlsLmFkZGVyc3Rpbmd9IHwgJHtkZXRhaWwuam9iRGV0YWlsLmV1a3Jhc2lhLnRvU3RyaW5nKCl9YDtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ1JQUicgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9XHJcbiAgICAgICAgYCR7ZGV0YWlsLmpvYkRldGFpbC5zb3VsfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5zaHJvdWR9IHwgJHtkZXRhaWwuam9iRGV0YWlsLmVuc2hyb3VkTWlsbGlzZWNvbmRzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5sZW11cmVTaHJvdWR9IHwgJHtkZXRhaWwuam9iRGV0YWlsLnZvaWRTaHJvdWR9YDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID0gJyc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBwb3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9zJyk7XHJcbiAgaWYgKHBvcykge1xyXG4gICAgcG9zLmlubmVyVGV4dCA9IGAke2UuZGV0YWlsLnBvcy54LnRvRml4ZWQoMil9LCR7ZS5kZXRhaWwucG9zLnkudG9GaXhlZCgyKX0sJHtcclxuICAgICAgZS5kZXRhaWwucG9zLnoudG9GaXhlZCgyKVxyXG4gICAgfWA7XHJcbiAgfVxyXG4gIGNvbnN0IHJvdGF0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvdGF0aW9uJyk7XHJcbiAgaWYgKHJvdGF0aW9uKVxyXG4gICAgcm90YXRpb24uaW5uZXJUZXh0ID0gZS5kZXRhaWwucm90YXRpb24udG9TdHJpbmcoKTtcclxuICBjb25zdCBiYWl0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhaXQnKTtcclxuICBpZiAoYmFpdClcclxuICAgIGJhaXQuaW5uZXJUZXh0ID0gZS5kZXRhaWwuYmFpdC50b1N0cmluZygpO1xyXG59KTtcclxuXHJcbmFkZE92ZXJsYXlMaXN0ZW5lcignRW5taXR5VGFyZ2V0RGF0YScsIChlKSA9PiB7XHJcbiAgY29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhcmdldCcpO1xyXG4gIGlmICh0YXJnZXQpXHJcbiAgICB0YXJnZXQuaW5uZXJUZXh0ID0gZS5UYXJnZXQgPyBlLlRhcmdldC5OYW1lIDogJy0tJztcclxuICBjb25zdCB0aWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGlkJyk7XHJcbiAgaWYgKHRpZClcclxuICAgIHRpZC5pbm5lclRleHQgPSBlLlRhcmdldCA/IGUuVGFyZ2V0LklELnRvU3RyaW5nKDE2KSA6ICcnO1xyXG4gIGNvbnN0IHRkaXN0YW5jZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZGlzdGFuY2UnKTtcclxuICBpZiAodGRpc3RhbmNlKVxyXG4gICAgdGRpc3RhbmNlLmlubmVyVGV4dCA9IGUuVGFyZ2V0ID8gZS5UYXJnZXQuRGlzdGFuY2UudG9TdHJpbmcoKSA6ICcnO1xyXG59KTtcclxuXHJcbmFkZE92ZXJsYXlMaXN0ZW5lcignb25HYW1lRXhpc3RzRXZlbnQnLCAoX2UpID0+IHtcclxuICAvLyBjb25zb2xlLmxvZyhcIkdhbWUgZXhpc3RzOiBcIiArIGUuZGV0YWlsLmV4aXN0cyk7XHJcbn0pO1xyXG5cclxuYWRkT3ZlcmxheUxpc3RlbmVyKCdvbkdhbWVBY3RpdmVDaGFuZ2VkRXZlbnQnLCAoX2UpID0+IHtcclxuICAvLyBjb25zb2xlLmxvZyhcIkdhbWUgYWN0aXZlOiBcIiArIGUuZGV0YWlsLmFjdGl2ZSk7XHJcbn0pO1xyXG5cclxuYWRkT3ZlcmxheUxpc3RlbmVyKCdvbkxvZ0V2ZW50JywgKGUpID0+IHtcclxuICBlLmRldGFpbC5sb2dzLmZvckVhY2goKGxvZykgPT4ge1xyXG4gICAgLy8gTWF0Y2ggXCIvZWNobyB0dHM6PHN0dWZmPlwiXHJcbiAgICBjb25zdCByID0gLzAwOjAwMzg6dHRzOiguKikvLmV4ZWMobG9nKTtcclxuICAgIGlmIChyICYmIHJbMV0pIHtcclxuICAgICAgdm9pZCBjYWxsT3ZlcmxheUhhbmRsZXIoe1xyXG4gICAgICAgIGNhbGw6ICdjYWN0Ym90U2F5JyxcclxuICAgICAgICB0ZXh0OiByWzFdLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcblxyXG5hZGRPdmVybGF5TGlzdGVuZXIoJ29uVXNlckZpbGVDaGFuZ2VkJywgKGUpID0+IHtcclxuICBjb25zb2xlLmxvZyhgVXNlciBmaWxlICR7ZS5maWxlfSBjaGFuZ2VkIWApO1xyXG59KTtcclxuXHJcbmFkZE92ZXJsYXlMaXN0ZW5lcignRmlsZUNoYW5nZWQnLCAoZSkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKGBGaWxlICR7ZS5maWxlfSBjaGFuZ2VkIWApO1xyXG59KTtcclxuXHJcbnZvaWQgY2FsbE92ZXJsYXlIYW5kbGVyKHsgY2FsbDogJ2NhY3Rib3RSZXF1ZXN0U3RhdGUnIH0pO1xyXG4iXSwibmFtZXMiOlsiaW5pdGVkIiwid3NVcmwiLCJ3cyIsInF1ZXVlIiwicnNlcUNvdW50ZXIiLCJyZXNwb25zZVByb21pc2VzIiwic3Vic2NyaWJlcnMiLCJzZW5kTWVzc2FnZSIsIm1zZyIsImNiIiwicHVzaCIsInNlbmQiLCJKU09OIiwic3RyaW5naWZ5Iiwid2luZG93IiwiT3ZlcmxheVBsdWdpbkFwaSIsImNhbGxIYW5kbGVyIiwicHJvY2Vzc0V2ZW50IiwiaW5pdCIsInN1YnMiLCJ0eXBlIiwiZm9yRWFjaCIsInN1YiIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJkaXNwYXRjaE92ZXJsYXlFdmVudCIsImFkZE92ZXJsYXlMaXN0ZW5lciIsImV2ZW50IiwiY2FsbCIsImV2ZW50cyIsInJlbW92ZU92ZXJsYXlMaXN0ZW5lciIsImxpc3QiLCJwb3MiLCJpbmRleE9mIiwidW5kZWZpbmVkIiwic3BsaWNlIiwiY2FsbE92ZXJsYXlIYW5kbGVySW50ZXJuYWwiLCJfbXNnIiwicnNlcSIsInAiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRhdGEiLCJwYXJzZWQiLCJwYXJzZSIsImNhbGxPdmVybGF5SGFuZGxlck92ZXJyaWRlTWFwIiwiY2FsbE92ZXJsYXlIYW5kbGVyIiwiY2FsbEZ1bmMiLCJzZXRPdmVybGF5SGFuZGxlck92ZXJyaWRlIiwib3ZlcnJpZGUiLCJVUkxTZWFyY2hQYXJhbXMiLCJsb2NhdGlvbiIsInNlYXJjaCIsImdldCIsImNvbm5lY3RXcyIsIldlYlNvY2tldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJsb2ciLCJxIiwiT2JqZWN0Iiwia2V5cyIsIkFycmF5IiwiaXNBcnJheSIsInByb21pc2VGdW5jcyIsInNldFRpbWVvdXQiLCJ3YWl0Rm9yQXBpIiwicmVhZHkiLCJfX092ZXJsYXlDYWxsYmFjayIsIml0ZW0iLCJjdXJyZW50Wm9uZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lclRleHQiLCJ6b25lTmFtZSIsInpvbmVJRCIsImluQ29tYmF0IiwiZGV0YWlsIiwiaW5BQ1RDb21iYXQiLCJpbkdhbWVDb21iYXQiLCJuYW1lIiwicGxheWVySWQiLCJpZCIsInRvU3RyaW5nIiwiaHAiLCJjdXJyZW50SFAiLCJtYXhIUCIsImN1cnJlbnRTaGllbGQiLCJtcCIsImN1cnJlbnRNUCIsIm1heE1QIiwiY3AiLCJjdXJyZW50Q1AiLCJtYXhDUCIsImdwIiwiY3VycmVudEdQIiwibWF4R1AiLCJqb2IiLCJsZXZlbCIsImRlYnVnIiwiZGVidWdKb2IiLCJqb2JJbmZvIiwiam9iRGV0YWlsIiwid2hpdGVNYW5hIiwiYmxhY2tNYW5hIiwibWFuYVN0YWNrcyIsImJlYXN0IiwiYmxvb2QiLCJkYXJrc2lkZU1pbGxpc2Vjb25kcyIsImRhcmtBcnRzIiwibGl2aW5nU2hhZG93TWlsbGlzZWNvbmRzIiwiY2FydHJpZGdlcyIsImNvbnRpbnVhdGlvblN0YXRlIiwib2F0aCIsInNvbmdOYW1lIiwibGFzdFBsYXllZCIsInNvbmdQcm9jcyIsInNvdWxHYXVnZSIsInNvbmdNaWxsaXNlY29uZHMiLCJjb2RhIiwiam9pbiIsImZlYXRoZXJzIiwiZXNwcml0Iiwic3RlcHMiLCJjdXJyZW50U3RlcCIsImh1dG9uTWlsbGlzZWNvbmRzIiwibmlua2lBbW91bnQiLCJibG9vZE1pbGxpc2Vjb25kcyIsImxpZmVNaWxsaXNlY29uZHMiLCJleWVzQW1vdW50IiwiZmlyc3RtaW5kc0ZvY3VzIiwidW1icmFsU3RhY2tzIiwidW1icmFsTWlsbGlzZWNvbmRzIiwidW1icmFsSGVhcnRzIiwicG9seWdsb3QiLCJlbm9jaGlhbiIsIm5leHRQb2x5Z2xvdE1pbGxpc2Vjb25kcyIsInBhcmFkb3giLCJsaWx5U3RhY2tzIiwibGlseU1pbGxpc2Vjb25kcyIsImJsb29kbGlseVN0YWNrcyIsImFldGhlcmZsb3dTdGFja3MiLCJ0cmFuY2VNaWxsaXNlY29uZHMiLCJhdHR1bmVtZW50IiwiYXR0dW5lbWVudE1pbGxpc2Vjb25kcyIsImFjdGl2ZVByaW1hbCIsInVzYWJsZUFyY2FudW0iLCJuZXh0U3VtbW9uZWQiLCJmYWlyeUdhdWdlIiwiZmFpcnlTdGF0dXMiLCJmYWlyeU1pbGxpc2Vjb25kcyIsImhlbGRDYXJkIiwiY3Jvd25DYXJkIiwiYXJjYW51bXMiLCJjaGFrcmFTdGFja3MiLCJsdW5hck5hZGkiLCJzb2xhck5hZGkiLCJiZWFzdENoYWtyYSIsImhlYXQiLCJvdmVyaGVhdE1pbGxpc2Vjb25kcyIsImJhdHRlcnkiLCJiYXR0ZXJ5TWlsbGlzZWNvbmRzIiwibGFzdEJhdHRlcnlBbW91bnQiLCJvdmVyaGVhdEFjdGl2ZSIsInJvYm90QWN0aXZlIiwia2Vua2kiLCJtZWRpdGF0aW9uU3RhY2tzIiwic2V0c3UiLCJnZXRzdSIsImthIiwiYWRkZXJzZ2FsbCIsImFkZGVyc2dhbGxNaWxsaXNlY29uZHMiLCJhZGRlcnN0aW5nIiwiZXVrcmFzaWEiLCJzb3VsIiwic2hyb3VkIiwiZW5zaHJvdWRNaWxsaXNlY29uZHMiLCJsZW11cmVTaHJvdWQiLCJ2b2lkU2hyb3VkIiwieCIsInRvRml4ZWQiLCJ5IiwieiIsInJvdGF0aW9uIiwiYmFpdCIsInRhcmdldCIsIlRhcmdldCIsIk5hbWUiLCJ0aWQiLCJJRCIsInRkaXN0YW5jZSIsIkRpc3RhbmNlIiwiX2UiLCJsb2dzIiwiciIsImV4ZWMiLCJ0ZXh0IiwiZmlsZSJdLCJzb3VyY2VSb290IjoiIn0=