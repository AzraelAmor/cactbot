/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 446:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// For consistency with Responses, Conditions
// are also functions.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  targetIsYou() {
    return (data, matches) => data.me === (matches === null || matches === void 0 ? void 0 : matches.target);
  },

  targetIsNotYou() {
    return (data, matches) => data.me !== (matches === null || matches === void 0 ? void 0 : matches.target);
  },

  caresAboutAOE() {
    return data => data.role === 'tank' || data.role === 'healer' || data.CanAddle() || data.job === 'BLU';
  },

  caresAboutMagical() {
    return data => data.role === 'tank' || data.role === 'healer' || data.CanAddle() || data.job === 'BLU';
  },

  caresAboutPhysical() {
    return data => data.role === 'tank' || data.role === 'healer' || data.CanFeint() || data.job === 'BLU';
  }

});

/***/ }),

/***/ 873:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
  'BeastTribeQuests': 13,
  'Companions': 12,
  'CustomDeliveries': 25,
  'DeepDungeons': 21,
  'DisciplesOfTheHand': 17,
  'DisciplesOfTheLand': 16,
  'Dungeons': 2,
  'DutyRoulette': 1,
  'Eureka': 26,
  'Fates': 8,
  'GoldSaucer': 19,
  'GrandCompany': 11,
  'Guildhests': 3,
  'Levequests': 10,
  'OverallCompletion': 14,
  'PlayerCommendation': 15,
  'Pvp': 6,
  'QuestBattles': 7,
  'Raids': 5,
  'RetainerVentures': 18,
  'TreasureHunt': 9,
  'Trials': 4,
  'UltimateRaids': 28,
  'WondrousTails': 24
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);

/***/ }),

/***/ 619:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Go": () => (/* binding */ langToLocale),
/* harmony export */   "jd": () => (/* binding */ isLang)
/* harmony export */ });
/* unused harmony exports languages, langMap, browserLanguagesToLang */
const languages = ['en', 'de', 'fr', 'ja', 'cn', 'ko'];
const langMap = {
  en: {
    en: 'English',
    de: 'German',
    fr: 'French',
    ja: 'Japanese',
    cn: 'Chinese',
    ko: 'Korean'
  },
  de: {
    en: 'Englisch',
    de: 'Deutsch',
    fr: 'Französisch',
    ja: 'Japanisch',
    cn: 'Chinesisch',
    ko: 'Koreanisch'
  },
  fr: {
    en: 'Anglais',
    de: 'Allemand',
    fr: 'Français',
    ja: 'Japonais',
    cn: 'Chinois',
    ko: 'Coréen'
  },
  ja: {
    en: '英語',
    de: 'ドイツ語',
    fr: 'フランス語',
    ja: '日本語',
    cn: '中国語',
    ko: '韓国語'
  },
  cn: {
    en: '英文',
    de: '德文',
    fr: '法文',
    ja: '日文',
    cn: '中文',
    ko: '韩文'
  },
  ko: {
    en: '영어',
    de: '독일어',
    fr: '프랑스어',
    ja: '일본어',
    cn: '중국어',
    ko: '한국어'
  }
};
const isLang = lang => {
  const langStrs = languages;
  if (lang === undefined) return false;
  return langStrs.includes(lang);
};
const langToLocale = lang => {
  return {
    en: 'en',
    de: 'de',
    fr: 'fr',
    ja: 'ja',
    cn: 'zh-CN',
    ko: 'ko'
  }[lang];
};
const browserLanguagesToLang = languages => {
  const lang = [...navigator.languages, 'en'].map(l => l.substring(0, 2)) // Remap `zh` to `cn` to match cactbot languages
  .map(l => l === 'zh' ? 'cn' : l).filter(l => languages.includes(l))[0];
  return isLang(lang) ? lang : 'en';
};

/***/ }),

/***/ 21:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "W": () => (/* binding */ logDefinitionsVersions),
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const latestLogDefinitions = {
  GameLog: {
    type: '00',
    name: 'GameLog',
    messageType: 'ChatLog',
    fields: {
      type: 0,
      timestamp: 1,
      code: 2,
      name: 3,
      line: 4
    },
    subFields: {
      code: {
        '0039': {
          name: 'message',
          canAnonymize: true
        },
        '0038': {
          name: 'echo',
          canAnonymize: true
        },
        '0044': {
          name: 'dialog',
          canAnonymize: true
        },
        '0839': {
          name: 'message',
          canAnonymize: true
        }
      }
    },
    firstOptionalField: undefined
  },
  ChangeZone: {
    type: '01',
    name: 'ChangeZone',
    messageType: 'Territory',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3
    },
    lastInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  ChangedPlayer: {
    type: '02',
    name: 'ChangedPlayer',
    messageType: 'ChangePrimaryPlayer',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3
    },
    playerIds: {
      2: 3
    },
    lastInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  AddedCombatant: {
    type: '03',
    name: 'AddedCombatant',
    messageType: 'AddCombatant',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      job: 4,
      level: 5,
      ownerId: 6,
      worldId: 7,
      world: 8,
      npcNameId: 9,
      npcBaseId: 10,
      currentHp: 11,
      hp: 12,
      currentMp: 13,
      mp: 14,
      // maxTp: 15,
      // tp: 16,
      x: 17,
      y: 18,
      z: 19,
      heading: 20
    },
    playerIds: {
      2: 3,
      6: null
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  RemovedCombatant: {
    type: '04',
    name: 'RemovedCombatant',
    messageType: 'RemoveCombatant',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      job: 4,
      level: 5,
      owner: 6,
      world: 8,
      npcNameId: 9,
      npcBaseId: 10,
      hp: 12,
      x: 17,
      y: 18,
      z: 19,
      heading: 20
    },
    playerIds: {
      2: 3,
      6: null
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  PartyList: {
    type: '11',
    name: 'PartyList',
    messageType: 'PartyList',
    fields: {
      type: 0,
      timestamp: 1,
      partyCount: 2,
      id0: 3,
      id1: 4,
      id2: 5,
      id3: 6,
      id4: 7,
      id5: 8,
      id6: 9,
      id7: 10,
      id8: 11,
      id9: 12,
      id10: 13,
      id11: 14,
      id12: 15,
      id13: 16,
      id14: 17,
      id15: 18,
      id16: 19,
      id17: 20,
      id18: 21,
      id19: 22,
      id20: 23,
      id21: 24,
      id22: 25,
      id23: 26
    },
    playerIds: {
      3: null,
      4: null,
      5: null,
      6: null,
      7: null,
      8: null,
      9: null,
      10: null,
      11: null,
      12: null,
      13: null,
      14: null,
      15: null,
      16: null,
      17: null,
      18: null,
      19: null,
      20: null,
      21: null,
      22: null,
      23: null,
      24: null,
      25: null,
      26: null
    },
    firstOptionalField: 3,
    canAnonymize: true,
    lastInclude: true
  },
  PlayerStats: {
    type: '12',
    name: 'PlayerStats',
    messageType: 'PlayerStats',
    fields: {
      type: 0,
      timestamp: 1,
      job: 2,
      strength: 3,
      dexterity: 4,
      vitality: 5,
      intelligence: 6,
      mind: 7,
      piety: 8,
      attackPower: 9,
      directHit: 10,
      criticalHit: 11,
      attackMagicPotency: 12,
      healMagicPotency: 13,
      determination: 14,
      skillSpeed: 15,
      spellSpeed: 16,
      tenacity: 18,
      localContentId: 19
    },
    canAnonymize: true,
    lastInclude: true,
    firstOptionalField: undefined
  },
  StartsUsing: {
    type: '20',
    name: 'StartsUsing',
    messageType: 'StartsCasting',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      castTime: 8,
      x: 9,
      y: 10,
      z: 11,
      heading: 12
    },
    blankFields: [6],
    playerIds: {
      2: 3,
      6: 7
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Ability: {
    type: '21',
    name: 'Ability',
    messageType: 'ActionEffect',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      flags: 8,
      damage: 9,
      targetCurrentHp: 24,
      targetMaxHp: 25,
      targetCurrentMp: 26,
      targetMaxMp: 27,
      // targetCurrentTp: 28,
      // targetMaxTp: 29,
      targetX: 30,
      targetY: 31,
      targetZ: 32,
      targetHeading: 33,
      currentHp: 34,
      maxHp: 35,
      currentMp: 36,
      maxMp: 37,
      // currentTp: 38;
      // maxTp: 39;
      x: 40,
      y: 41,
      z: 42,
      heading: 43,
      sequence: 44,
      targetIndex: 45,
      targetCount: 46
    },
    playerIds: {
      2: 3,
      6: 7
    },
    blankFields: [6],
    firstUnknownField: 44,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkAOEAbility: {
    type: '22',
    name: 'NetworkAOEAbility',
    messageType: 'AOEActionEffect',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      flags: 8,
      damage: 9,
      targetCurrentHp: 24,
      targetMaxHp: 25,
      targetCurrentMp: 26,
      targetMaxMp: 27,
      // targetCurrentTp: 28,
      // targetMaxTp: 29,
      targetX: 30,
      targetY: 31,
      targetZ: 32,
      targetHeading: 33,
      currentHp: 34,
      maxHp: 35,
      currentMp: 36,
      maxMp: 37,
      // currentTp: 38;
      // maxTp: 39;
      x: 40,
      y: 41,
      z: 42,
      heading: 43,
      sequence: 44,
      targetIndex: 45,
      targetCount: 46
    },
    playerIds: {
      2: 3,
      6: 7
    },
    blankFields: [6],
    firstUnknownField: 44,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkCancelAbility: {
    type: '23',
    name: 'NetworkCancelAbility',
    messageType: 'CancelAction',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      name: 5,
      reason: 6
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkDoT: {
    type: '24',
    name: 'NetworkDoT',
    messageType: 'DoTHoT',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      which: 4,
      effectId: 5,
      damage: 6,
      currentHp: 7,
      maxHp: 8,
      currentMp: 9,
      maxMp: 10,
      // currentTp: 11,
      // maxTp: 12,
      x: 13,
      y: 14,
      z: 15,
      heading: 16
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  WasDefeated: {
    type: '25',
    name: 'WasDefeated',
    messageType: 'Death',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      sourceId: 4,
      source: 5
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  GainsEffect: {
    type: '26',
    name: 'GainsEffect',
    messageType: 'StatusAdd',
    fields: {
      type: 0,
      timestamp: 1,
      effectId: 2,
      effect: 3,
      duration: 4,
      sourceId: 5,
      source: 6,
      targetId: 7,
      target: 8,
      count: 9,
      targetMaxHp: 10,
      sourceMaxHp: 11
    },
    playerIds: {
      5: 6,
      7: 8
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  HeadMarker: {
    type: '27',
    name: 'HeadMarker',
    messageType: 'TargetIcon',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      id: 6
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkRaidMarker: {
    type: '28',
    name: 'NetworkRaidMarker',
    messageType: 'WaymarkMarker',
    fields: {
      type: 0,
      timestamp: 1,
      operation: 2,
      waymark: 3,
      id: 4,
      name: 5,
      x: 6,
      y: 7,
      z: 8
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkTargetMarker: {
    type: '29',
    name: 'NetworkTargetMarker',
    messageType: 'SignMarker',
    fields: {
      type: 0,
      timestamp: 1,
      operation: 2,
      // Add, Update, Delete
      waymark: 3,
      id: 4,
      name: 5,
      targetId: 6,
      targetName: 7
    },
    playerIds: {
      4: null,
      5: null
    },
    firstOptionalField: undefined
  },
  LosesEffect: {
    type: '30',
    name: 'LosesEffect',
    messageType: 'StatusRemove',
    fields: {
      type: 0,
      timestamp: 1,
      effectId: 2,
      effect: 3,
      sourceId: 5,
      source: 6,
      targetId: 7,
      target: 8,
      count: 9
    },
    playerIds: {
      5: 6,
      7: 8
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkGauge: {
    type: '31',
    name: 'NetworkGauge',
    messageType: 'Gauge',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      data0: 3,
      data1: 4,
      data2: 5,
      data3: 6
    },
    playerIds: {
      2: null
    },
    // Sometimes this last field looks like a player id.
    // For safety, anonymize all of the gauge data.
    firstUnknownField: 3,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkWorld: {
    type: '32',
    name: 'NetworkWorld',
    messageType: 'World',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true,
    firstOptionalField: undefined
  },
  ActorControl: {
    type: '33',
    name: 'ActorControl',
    messageType: 'Director',
    fields: {
      type: 0,
      timestamp: 1,
      instance: 2,
      command: 3,
      data0: 4,
      data1: 5,
      data2: 6,
      data3: 7
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NameToggle: {
    type: '34',
    name: 'NameToggle',
    messageType: 'NameToggle',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      targetId: 4,
      targetName: 5,
      toggle: 6
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Tether: {
    type: '35',
    name: 'Tether',
    messageType: 'Tether',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      targetId: 4,
      target: 5,
      id: 8
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstUnknownField: 9,
    firstOptionalField: undefined
  },
  LimitBreak: {
    type: '36',
    name: 'LimitBreak',
    messageType: 'LimitBreak',
    fields: {
      type: 0,
      timestamp: 1,
      valueHex: 2,
      bars: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkEffectResult: {
    type: '37',
    name: 'NetworkEffectResult',
    messageType: 'EffectResult',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      sequenceId: 4,
      currentHp: 5,
      maxHp: 6,
      currentMp: 7,
      maxMp: 8,
      // currentTp: 9,
      // maxTp: 10,
      x: 11,
      y: 12,
      z: 13,
      heading: 14
    },
    playerIds: {
      2: 3
    },
    firstUnknownField: 22,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  StatusEffect: {
    type: '38',
    name: 'StatusEffect',
    messageType: 'StatusList',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      jobLevelData: 4,
      hp: 5,
      maxHp: 6,
      mp: 7,
      maxMp: 8,
      x: 11,
      y: 12,
      z: 13,
      heading: 14,
      data0: 15,
      data1: 16,
      data2: 17,
      data3: 18,
      data4: 19,
      data5: 20 // Variable number of triplets here, but at least one.

    },
    playerIds: {
      2: 3
    },
    firstUnknownField: 20,
    canAnonymize: true,
    firstOptionalField: 18
  },
  NetworkUpdateHP: {
    type: '39',
    name: 'NetworkUpdateHP',
    messageType: 'UpdateHp',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      currentHp: 4,
      maxHp: 5,
      currentMp: 6,
      maxMp: 7,
      // currentTp: 8,
      // maxTp: 9,
      x: 10,
      y: 11,
      z: 12,
      heading: 13
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Map: {
    type: '40',
    name: 'Map',
    messageType: 'ChangeMap',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      regionName: 3,
      placeName: 4,
      placeNameSub: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  SystemLogMessage: {
    type: '41',
    name: 'SystemLogMessage',
    messageType: 'SystemLogMessage',
    fields: {
      type: 0,
      timestamp: 1,
      instance: 2,
      id: 3,
      param0: 4,
      param1: 5,
      param2: 6
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  StatusList3: {
    type: '42',
    name: 'StatusList3',
    messageType: 'StatusList3',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3 // triplets of fields from here (effectId, data, playerId)?

    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: 4,
    firstUnknownField: 4
  },
  ParserInfo: {
    type: '249',
    name: 'ParserInfo',
    messageType: 'Settings',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  ProcessInfo: {
    type: '250',
    name: 'ProcessInfo',
    messageType: 'Process',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Debug: {
    type: '251',
    name: 'Debug',
    messageType: 'Debug',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: false,
    firstOptionalField: undefined
  },
  PacketDump: {
    type: '252',
    name: 'PacketDump',
    messageType: 'PacketDump',
    fields: {
      type: 0,
      timestamp: 1
    },
    canAnonymize: false,
    firstOptionalField: undefined
  },
  Version: {
    type: '253',
    name: 'Version',
    messageType: 'Version',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Error: {
    type: '254',
    name: 'Error',
    messageType: 'Error',
    fields: {
      type: 0,
      timestamp: 1
    },
    canAnonymize: false,
    firstOptionalField: undefined
  },
  None: {
    type: '[0-9]+',
    name: 'None',
    messageType: 'None',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true,
    firstOptionalField: undefined
  }
};
const logDefinitionsVersions = {
  'latest': latestLogDefinitions
}; // Verify that this has the right type, but export `as const`.

const assertLogDefinitions = logDefinitionsVersions;
console.assert(assertLogDefinitions);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logDefinitionsVersions['latest']);

/***/ }),

/***/ 622:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ NetRegexes)
/* harmony export */ });
/* harmony import */ var _netlog_defs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/* harmony import */ var _regexes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(402);


const separator = '\\|';
const matchDefault = '[^|]*'; // If NetRegexes.setFlagTranslationsNeeded is set to true, then any
// regex created that requires a translation will begin with this string
// and match the magicStringRegex.  This is maybe a bit goofy, but is
// a pretty straightforward way to mark regexes for translations.
// If issue #1306 is ever resolved, we can remove this.

const magicTranslationString = `^^`;
const magicStringRegex = /^\^\^/;
const keysThatRequireTranslation = ['ability', 'name', 'source', 'target', 'line'];

const defaultParams = (type, version, include) => {
  var _include;

  (_include = include) !== null && _include !== void 0 ? _include : include = Object.keys(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].fields);
  const params = {};
  const firstOptionalField = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].firstOptionalField;

  for (const [prop, index] of Object.entries(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].fields)) {
    if (!include.includes(prop)) continue;
    const param = {
      field: prop,
      optional: firstOptionalField !== undefined && index >= firstOptionalField
    };
    if (prop === 'type') param.value = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].type;
    params[index] = param;
  }

  return params;
};

const parseHelper = (params, funcName, fields) => {
  var _params;

  params = (_params = params) !== null && _params !== void 0 ? _params : {};
  const validFields = [];

  for (const index in fields) {
    const field = fields[index];
    if (field) validFields.push(field.field);
  }

  _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].validateParams */ .Z.validateParams(params, funcName, ['capture', ...validFields]); // Find the last key we care about, so we can shorten the regex if needed.

  const capture = _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].trueIfUndefined */ .Z.trueIfUndefined(params.capture);
  const fieldKeys = Object.keys(fields).sort((a, b) => parseInt(a) - parseInt(b));
  let maxKeyStr;

  if (capture) {
    const keys = [];

    for (const key in fields) keys.push(key);

    let tmpKey = keys.pop();

    if (tmpKey === undefined) {
      var _fieldKeys;

      maxKeyStr = (_fieldKeys = fieldKeys[fieldKeys.length - 1]) !== null && _fieldKeys !== void 0 ? _fieldKeys : '0';
    } else {
      var _tmpKey;

      while ((_fields$tmpKey = fields[tmpKey]) !== null && _fields$tmpKey !== void 0 && _fields$tmpKey.optional && !(((_fields$tmpKey$field = (_fields$tmpKey2 = fields[tmpKey]) === null || _fields$tmpKey2 === void 0 ? void 0 : _fields$tmpKey2.field) !== null && _fields$tmpKey$field !== void 0 ? _fields$tmpKey$field : '') in params)) {
        var _fields$tmpKey, _fields$tmpKey$field, _fields$tmpKey2;

        tmpKey = keys.pop();
      }

      maxKeyStr = (_tmpKey = tmpKey) !== null && _tmpKey !== void 0 ? _tmpKey : '0';
    }
  } else {
    maxKeyStr = '0';

    for (const key in fields) {
      var _fields$key, _fields$key2;

      const value = (_fields$key = fields[key]) !== null && _fields$key !== void 0 ? _fields$key : {};
      if (typeof value !== 'object') continue;
      const fieldName = (_fields$key2 = fields[key]) === null || _fields$key2 === void 0 ? void 0 : _fields$key2.field;
      if (fieldName !== undefined && fieldName in params) maxKeyStr = key;
    }
  }

  const maxKey = parseInt(maxKeyStr); // For testing, it's useful to know if this is a regex that requires
  // translation.  We test this by seeing if there are any specified
  // fields, and if so, inserting a magic string that we can detect.
  // This lets us differentiate between "regex that should be translated"
  // e.g. a regex with `target` specified, and "regex that shouldn't"
  // e.g. a gains effect with just effectId specified.

  const transParams = Object.keys(params).filter(k => keysThatRequireTranslation.includes(k));
  const needsTranslations = NetRegexes.flagTranslationsNeeded && transParams.length > 0; // Build the regex from the fields.

  let str = needsTranslations ? magicTranslationString : '^';
  let lastKey = -1;

  for (const keyStr in fields) {
    var _fields$keyStr, _fields$keyStr$value$, _fields$keyStr2, _fields$keyStr2$value;

    const key = parseInt(keyStr); // Fill in blanks.

    const missingFields = key - lastKey - 1;
    if (missingFields === 1) str += '\\y{NetField}';else if (missingFields > 1) str += `\\y{NetField}{${missingFields}}`;
    lastKey = key;
    const value = fields[keyStr];
    if (typeof value !== 'object') throw new Error(`${funcName}: invalid value: ${JSON.stringify(value)}`);
    const fieldName = (_fields$keyStr = fields[keyStr]) === null || _fields$keyStr === void 0 ? void 0 : _fields$keyStr.field;
    const fieldValue = (_fields$keyStr$value$ = (_fields$keyStr2 = fields[keyStr]) === null || _fields$keyStr2 === void 0 ? void 0 : (_fields$keyStr2$value = _fields$keyStr2.value) === null || _fields$keyStr2$value === void 0 ? void 0 : _fields$keyStr2$value.toString()) !== null && _fields$keyStr$value$ !== void 0 ? _fields$keyStr$value$ : matchDefault;

    if (fieldName !== undefined) {
      str += _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].maybeCapture */ .Z.maybeCapture( // more accurate type instead of `as` cast
      // maybe this function needs a refactoring
      capture, fieldName, params[fieldName], fieldValue) + separator;
    } else {
      str += fieldValue + separator;
    } // Stop if we're not capturing and don't care about future fields.


    if (key >= maxKey) break;
  }

  return _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].parse */ .Z.parse(str);
};

class NetRegexes {
  static logVersion = 'latest';
  static flagTranslationsNeeded = false;

  static setFlagTranslationsNeeded(value) {
    NetRegexes.flagTranslationsNeeded = value;
  }

  static doesNetRegexNeedTranslation(regex) {
    // Need to `setFlagTranslationsNeeded` before calling this function.
    console.assert(NetRegexes.flagTranslationsNeeded);
    const str = typeof regex === 'string' ? regex : regex.source;
    return !!magicStringRegex.exec(str);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-20-0x14-networkstartscasting
   */


  static startsUsing(params) {
    return parseHelper(params, 'startsUsing', defaultParams('StartsUsing', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   */


  static ability(params) {
    return parseHelper(params, 'ability', { ...defaultParams('Ability', NetRegexes.logVersion),
      // Override type
      0: {
        field: 'type',
        value: '2[12]',
        optional: false
      }
    });
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   *
   * @deprecated Use `ability` instead
   */


  static abilityFull(params) {
    return this.ability(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-27-0x1b-networktargeticon-head-marker
   */


  static headMarker(params) {
    return parseHelper(params, 'headMarker', defaultParams('HeadMarker', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */


  static addedCombatant(params) {
    return parseHelper(params, 'addedCombatant', defaultParams('AddedCombatant', NetRegexes.logVersion, ['type', 'timestamp', 'id', 'name']));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */


  static addedCombatantFull(params) {
    return parseHelper(params, 'addedCombatantFull', defaultParams('AddedCombatant', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-04-0x04-removecombatant
   */


  static removingCombatant(params) {
    return parseHelper(params, 'removingCombatant', defaultParams('RemovedCombatant', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-26-0x1a-networkbuff
   */


  static gainsEffect(params) {
    return parseHelper(params, 'gainsEffect', defaultParams('GainsEffect', NetRegexes.logVersion));
  }
  /**
   * Prefer gainsEffect over this function unless you really need extra data.
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-38-0x26-networkstatuseffects
   */


  static statusEffectExplicit(params) {
    return parseHelper(params, 'statusEffectExplicit', defaultParams('StatusEffect', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-30-0x1e-networkbuffremove
   */


  static losesEffect(params) {
    return parseHelper(params, 'losesEffect', defaultParams('LosesEffect', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-35-0x23-networktether
   */


  static tether(params) {
    return parseHelper(params, 'tether', defaultParams('Tether', NetRegexes.logVersion));
  }
  /**
   * 'target' was defeated by 'source'
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-25-0x19-networkdeath
   */


  static wasDefeated(params) {
    return parseHelper(params, 'wasDefeated', defaultParams('WasDefeated', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-24-0x18-networkdot
   */


  static networkDoT(params) {
    return parseHelper(params, 'networkDoT', defaultParams('NetworkDoT', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static echo(params) {
    if (typeof params === 'undefined') params = {};
    _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].validateParams */ .Z.validateParams(params, 'echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0038';
    return NetRegexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static dialog(params) {
    if (typeof params === 'undefined') params = {};
    _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].validateParams */ .Z.validateParams(params, 'dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0044';
    return NetRegexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static message(params) {
    if (typeof params === 'undefined') params = {};
    _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].validateParams */ .Z.validateParams(params, 'message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0839';
    return NetRegexes.gameLog(params);
  }
  /**
   * fields: code, name, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static gameLog(params) {
    return parseHelper(params, 'gameLog', defaultParams('GameLog', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static gameNameLog(params) {
    // Backwards compatability.
    return NetRegexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-12-0x0c-playerstats
   */


  static statChange(params) {
    return parseHelper(params, 'statChange', defaultParams('PlayerStats', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-01-0x01-changezone
   */


  static changeZone(params) {
    return parseHelper(params, 'changeZone', defaultParams('ChangeZone', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-33-0x21-network6d-actor-control
   */


  static network6d(params) {
    return parseHelper(params, 'network6d', defaultParams('ActorControl', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-34-0x22-networknametoggle
   */


  static nameToggle(params) {
    return parseHelper(params, 'nameToggle', defaultParams('NameToggle', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-40-0x28-map
   */


  static map(params) {
    return parseHelper(params, 'map', defaultParams('Map', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-41-0x29-systemlogmessage
   */


  static systemLogMessage(params) {
    return parseHelper(params, 'systemLogMessage', defaultParams('SystemLogMessage', NetRegexes.logVersion));
  }

}

/***/ }),

/***/ 62:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ UnreachableCode)
/* harmony export */ });
// Helper Error for TypeScript situations where the programmer thinks they
// know better than TypeScript that some situation will never occur.
// The intention here is that the programmer does not expect a particular
// bit of code to happen, and so has not written careful error handling.
// If it does occur, at least there will be an error and we can figure out why.
// This is preferable to casting or disabling TypeScript altogether in order to
// avoid syntax errors.
// One common example is a regex, where if the regex matches then all of the
// (non-optional) regex groups will also be valid, but TypeScript doesn't know.
class UnreachableCode extends Error {
  constructor() {
    super('This code shouldn\'t be reached');
  }

}

/***/ }),

/***/ 81:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Output strings for now require a field for every language, so this is a
// helper function to generate one for literal numbers.
const numberToOutputString = function (n) {
  const str = n.toString();
  return {
    en: str,
    de: str,
    fr: str,
    ja: str,
    cn: str,
    ko: str
  };
}; // General guidelines:
// * property names should closely match English text
// * use OnPlayer suffix for things with `${player}`
// * use OnTarget suffix for things with `${name}`
// * any other parameters (of which there are none, currently) should use consistent suffixes.
// * the value of each property should be a single object with localized keys


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  aoe: {
    en: 'aoe',
    de: 'AoE',
    fr: 'AoE',
    ja: 'AoE',
    cn: 'AoE',
    ko: '전체 공격'
  },
  bigAoe: {
    en: 'big aoe!',
    de: 'Große AoE!',
    fr: 'Grosse AoE !',
    ja: '大ダメージAoE',
    cn: '大AoE伤害！',
    ko: '강한 전체 공격!'
  },
  tankBuster: {
    en: 'Tank Buster',
    de: 'Tank buster',
    fr: 'Tank buster',
    ja: 'タンクバスター',
    cn: '坦克死刑',
    ko: '탱버'
  },
  miniBuster: {
    en: 'Mini Buster',
    de: 'Kleiner Tankbuster',
    fr: 'Mini Buster',
    ja: 'ミニバスター',
    cn: '小死刑',
    ko: '약한 탱버'
  },
  tankBusterOnPlayer: {
    en: 'Tank Buster on ${player}',
    de: 'Tank buster auf ${player}',
    fr: 'Tank buster sur ${player}',
    ja: '${player}にタンクバスター',
    cn: '死刑 点 ${player}',
    ko: '"${player}" 탱버'
  },
  tankBusterOnYou: {
    en: 'Tank Buster on YOU',
    de: 'Tank buster auf DIR',
    fr: 'Tank buster sur VOUS',
    ja: '自分にタンクバスター',
    cn: '死刑点名',
    ko: '탱버 대상자'
  },
  // when there are multiple tankbusters going out
  tankBusters: {
    en: 'Tank Busters',
    de: 'Tank buster',
    fr: 'Tank busters',
    ja: 'タンクバスター',
    cn: '坦克死刑',
    ko: '탱버'
  },
  tankCleave: {
    en: 'Tank cleave',
    de: 'Tank Cleave',
    fr: 'Tank cleave',
    ja: '前方範囲攻撃',
    cn: '顺劈',
    ko: '광역 탱버'
  },
  avoidTankCleave: {
    en: 'Avoid tank cleave',
    de: 'Tank Cleave ausweichen',
    fr: 'Évitez le tank cleave',
    ja: '前方範囲攻撃を避ける',
    cn: '远离顺劈',
    ko: '광역 탱버 피하기'
  },
  tankCleaveOnYou: {
    en: 'Tank cleave on YOU',
    de: 'Tank Cleave aud DIR',
    fr: 'Tank cleave sur VOUS',
    ja: '自分に前方範囲攻撃',
    cn: '顺劈点名',
    ko: '나에게 광역 탱버'
  },
  sharedTankbuster: {
    en: 'Shared Tank Buster',
    fr: 'Partagez le Tank buster',
    cn: '分摊死刑',
    ko: '쉐어 탱버'
  },
  sharedTankbusterOnYou: {
    en: 'Shared Tank Buster on YOU',
    de: 'geteilter Tankbuster auf DIR',
    fr: 'Tank buster à partager sur VOUS',
    ja: '自分にタンクシェア',
    cn: '分摊死刑点名',
    ko: '쉐어 탱버 대상자'
  },
  sharedTankbusterOnPlayer: {
    en: 'Shared Tank Buster on ${player}',
    de: 'geteilter Tankbuster on ${player}',
    fr: 'Tank buster à partager sur ${player}',
    ja: '${player} にタンクシェア',
    cn: '分摊死刑点 ${player}',
    ko: '"${player}" 쉐어 탱버'
  },
  tankSwap: {
    en: 'Tank Swap!',
    de: 'Tankwechsel!',
    fr: 'Tank swap !',
    ja: 'タンクスイッチ!',
    cn: '换T！',
    ko: '탱 교대'
  },
  spread: {
    en: 'Spread',
    de: 'Verteilen',
    fr: 'Dispersez-vous',
    ja: '散開',
    cn: '分散',
    ko: '산개'
  },
  stackMarker: {
    // for stack marker situations
    en: 'Stack',
    de: 'Sammeln',
    fr: 'Packez-vous',
    ja: '頭割り',
    cn: '分摊',
    ko: '쉐어뎀'
  },
  getTogether: {
    // for getting together without stack marker
    en: 'Stack',
    de: 'Sammeln',
    fr: 'Packez-vous',
    ja: '集合',
    cn: '集合',
    ko: '모이기'
  },
  stackOnYou: {
    en: 'Stack on YOU',
    de: 'Auf DIR sammeln',
    fr: 'Package sur VOUS',
    ja: '自分に集合',
    cn: '集合点名',
    ko: '쉐어징 대상자'
  },
  stackOnPlayer: {
    en: 'Stack on ${player}',
    de: 'Auf ${player} sammeln',
    fr: 'Packez-vous sur ${player}',
    ja: '${player}に集合',
    cn: '靠近 ${player}集合',
    ko: '"${player}" 쉐어징'
  },
  stackMiddle: {
    en: 'Stack in middle',
    de: 'In der Mitte sammeln',
    fr: 'Packez-vous au milieu',
    ja: '中央で集合',
    cn: '中间集合',
    ko: '중앙에서 모이기'
  },
  doritoStack: {
    en: 'Dorito Stack',
    de: 'Mit Marker sammeln',
    fr: 'Packez les marquages',
    ja: 'マーカー付けた人と集合',
    cn: '点名集合',
    ko: '징끼리 모이기'
  },
  spreadThenStack: {
    en: 'Spread => Stack',
    de: 'Verteilen => Sammeln',
    fr: 'Dispersion => Package',
    ja: '散開 => 集合',
    cn: '分散 => 集合',
    ko: '산개 => 집합'
  },
  stackThenSpread: {
    en: 'Stack => Spread',
    de: 'Sammeln => Verteilen',
    fr: 'Package => Dispersion',
    ja: 'スタック => 散開',
    cn: '集合 => 分散',
    ko: '집합 => 산개'
  },
  drawIn: {
    // Opposite of a knockback.
    en: 'Draw In',
    de: 'Einzug',
    fr: 'Attraction',
    ja: '吸込み',
    cn: '吸引',
    ko: '끌어당김'
  },
  knockback: {
    en: 'Knockback',
    de: 'Rückstoß',
    fr: 'Poussée',
    ja: 'ノックバック',
    cn: '击退',
    ko: '넉백'
  },
  knockbackOnYou: {
    en: 'Knockback on YOU',
    de: 'Rückstoß auf DIR',
    fr: 'Poussée sur VOUS',
    ja: '自分にノックバック',
    cn: '击退点名',
    ko: '넉백징 대상자'
  },
  knockbackOnPlayer: {
    en: 'Knockback on ${player}',
    de: 'Rückstoß auf ${player}',
    fr: 'Poussée sur ${player}',
    ja: '${player}にノックバック',
    cn: '击退点名${player}',
    ko: '"${player}" 넉백징'
  },
  lookTowardsBoss: {
    en: 'Look Towards Boss',
    de: 'Anschauen Boss',
    fr: 'Regardez le boss',
    ja: 'ボスを見る',
    cn: '面向Boss',
    ko: '쳐다보기'
  },
  lookAway: {
    en: 'Look Away',
    de: 'Wegschauen',
    fr: 'Regardez ailleurs',
    ja: 'ボスを見ない',
    cn: '背对Boss',
    ko: '뒤돌기'
  },
  lookAwayFromPlayer: {
    en: 'Look Away from ${player}',
    de: 'Schau weg von ${player}',
    fr: 'Ne regardez pas ${player}',
    ja: '${player}を見ない',
    cn: '背对${player}',
    ko: '${player}에게서 뒤돌기'
  },
  lookAwayFromTarget: {
    en: 'Look Away from ${name}',
    de: 'Schau weg von ${name}',
    fr: 'Ne regardez pas ${name}',
    ja: '${name}を見ない',
    cn: '背对${name}',
    ko: '${name}에게서 뒤돌기'
  },
  getBehind: {
    en: 'Get Behind',
    de: 'Hinter ihn',
    fr: 'Passez derrière',
    ja: '背面へ',
    cn: '去背后',
    ko: '보스 뒤로'
  },
  goFrontOrSides: {
    en: 'Go Front / Sides',
    de: 'Gehe nach Vorne/ zu den Seiten',
    fr: 'Allez Devant / Côtés',
    ja: '前／横へ',
    cn: '去前侧方',
    ko: '보스 후방 피하기'
  },
  goFront: {
    en: 'Go Front',
    de: 'Geh nach vorn',
    fr: 'Allez Devant',
    ja: '前へ',
    cn: '去前面',
    ko: '앞으로'
  },
  // getUnder is used when you have to get into the bosses hitbox
  getUnder: {
    en: 'Get Under',
    de: 'Unter ihn',
    fr: 'En dessous',
    ja: 'ボスに貼り付く',
    cn: '去脚下',
    ko: '보스 아래로'
  },
  // in is more like "get close but maybe even melee range is fine"
  in: {
    en: 'In',
    de: 'Rein',
    fr: 'Intérieur',
    ja: '中へ',
    cn: '靠近',
    ko: '안으로'
  },
  // out means get far away
  out: {
    en: 'Out',
    de: 'Raus',
    fr: 'Extérieur',
    ja: '外へ',
    cn: '远离',
    ko: '밖으로'
  },
  outOfMelee: {
    en: 'Out of melee',
    de: 'Raus aus Nahkampf',
    fr: 'Sortez de la mêlée',
    ja: '近接最大レンジ',
    cn: '近战最远距离回避',
    ko: '근접범위 밖으로'
  },
  inThenOut: {
    en: 'In, then out',
    de: 'Rein, dann raus',
    fr: 'Intérieur, puis extérieur',
    ja: '中 => 外',
    cn: '先靠近，再远离',
    ko: '안으로 => 밖으로'
  },
  outThenIn: {
    en: 'Out, then in',
    de: 'Raus, dann rein',
    fr: 'Extérieur, puis intérieur',
    ja: '外 => 中',
    cn: '先远离，再靠近',
    ko: '밖으로 => 안으로'
  },
  backThenFront: {
    en: 'Back Then Front',
    de: 'Nach Hinten, danach nach Vorne',
    fr: 'Derrière puis devant',
    ja: '後ろ => 前',
    cn: '后 => 前',
    ko: '뒤로 => 앞으로'
  },
  frontThenBack: {
    en: 'Front Then Back',
    de: 'Nach Vorne, danach nach Hinten',
    fr: 'Devant puis derrière',
    ja: '前 => 後ろ',
    cn: '前 => 后',
    ko: '앞으로 => 뒤로'
  },
  goIntoMiddle: {
    en: 'Get Middle',
    de: 'in die Mitte gehen',
    fr: 'Allez au milieu',
    ja: '中へ',
    cn: '去中间',
    ko: '중앙으로'
  },
  right: {
    en: 'Right',
    de: 'Rechts',
    fr: 'À droite',
    ja: '右へ',
    cn: '右',
    ko: '오른쪽'
  },
  left: {
    en: 'Left',
    de: 'Links',
    fr: 'À gauche',
    ja: '左へ',
    cn: '左',
    ko: '왼쪽'
  },
  getLeftAndWest: {
    en: '<= Get Left/West',
    de: '<= Nach Links/Westen',
    fr: '<= Allez à Gauche/Ouest',
    ja: '<= 左/西へ',
    cn: '<= 去左/西边',
    ko: '<= 왼쪽으로'
  },
  getRightAndEast: {
    en: 'Get Right/East =>',
    de: 'Nach Rechts/Osten =>',
    fr: 'Allez à Droite/Est =>',
    ja: '右/東へ =>',
    cn: '去右/东边 =>',
    ko: '오른쪽으로 =>'
  },
  goFrontBack: {
    en: 'Go Front/Back',
    de: 'Geh nach Vorne/Hinten',
    fr: 'Allez Devant/Derrière',
    ja: '縦へ',
    cn: '去前后',
    ko: '앞/뒤로'
  },
  sides: {
    en: 'Sides',
    de: 'Seiten',
    fr: 'Côtés',
    ja: '横へ',
    cn: '去侧面',
    ko: '양옆으로'
  },
  middle: {
    en: 'Middle',
    de: 'Mitte',
    fr: 'Milieu',
    ja: '中へ',
    cn: '中间',
    ko: '중앙'
  },
  // killAdds is used for adds that will always be available
  killAdds: {
    en: 'Kill adds',
    de: 'Adds besiegen',
    fr: 'Tuez les adds',
    ja: '雑魚を処理',
    cn: '击杀小怪',
    ko: '쫄 잡기'
  },
  // killExtraAdd is used for adds that appear if a mechanic was not played correctly
  killExtraAdd: {
    en: 'Kill Extra Add',
    de: 'Add besiegen',
    fr: 'Tuez l\'add',
    ja: '雑魚を倒す',
    cn: '击杀小怪',
    ko: '쫄 잡기'
  },
  awayFromFront: {
    en: 'Away From Front',
    de: 'Weg von Vorne',
    fr: 'Éloignez-vous du devant',
    ja: '前方から離れる',
    cn: '远离正面',
    ko: '보스 전방 피하기'
  },
  sleepTarget: {
    en: 'Sleep ${name}',
    de: 'Schlaf auf ${name}',
    fr: 'Sommeil sur ${name}',
    ja: '${name} にスリプル',
    cn: '催眠 ${name}',
    ko: '${name} 슬리플'
  },
  stunTarget: {
    en: 'Stun ${name}',
    de: 'Betäubung auf ${name}',
    fr: 'Étourdissez ${name}',
    ja: '${name} にスタン',
    cn: '眩晕 ${name}',
    ko: '${name}기절'
  },
  interruptTarget: {
    en: 'interrupt ${name}',
    de: 'unterbreche ${name}',
    fr: 'Interrompez ${name}',
    ja: '${name} に沈黙',
    cn: '打断${name}',
    ko: '${name}기술 시전 끊기'
  },
  preyOnYou: {
    en: 'Prey on YOU',
    de: 'Marker auf DIR',
    fr: 'Marquage sur VOUS',
    ja: '自分に捕食',
    cn: '掠食点名',
    ko: '홍옥징 대상자'
  },
  preyOnPlayer: {
    en: 'Prey on ${player}',
    de: 'Marker auf ${player}',
    fr: 'Marquage sur ${player}',
    ja: '${player}に捕食',
    cn: '掠食点名${player}',
    ko: '"${player}" 홍옥징'
  },
  awayFromGroup: {
    en: 'Away from Group',
    de: 'Weg von der Gruppe',
    fr: 'Éloignez-vous du groupe',
    ja: '外へ',
    cn: '远离人群',
    ko: '다른 사람들과 떨어지기'
  },
  awayFromPlayer: {
    en: 'Away from ${player}',
    de: 'Weg von ${player}',
    fr: 'Éloignez-vous de ${player}',
    ja: '${player}から離れる',
    cn: '远离${player}',
    ko: '"${player}"에게서 멀어지기'
  },
  meteorOnYou: {
    en: 'Meteor on YOU',
    de: 'Meteor auf DIR',
    fr: 'Météore sur VOUS',
    ja: '自分にメテオ',
    cn: '陨石点名',
    ko: '나에게 메테오징'
  },
  stopMoving: {
    en: 'Stop Moving!',
    de: 'Bewegung stoppen!',
    fr: 'Ne bougez pas !',
    ja: '移動禁止！',
    cn: '停止移动！',
    ko: '이동 멈추기!'
  },
  stopEverything: {
    en: 'Stop Everything!',
    de: 'Stoppe Alles!',
    fr: 'Arrêtez TOUT !',
    ja: '行動禁止！',
    cn: '停止行动！',
    ko: '행동 멈추기!'
  },
  moveAway: {
    // move away to dodge aoes
    en: 'Move!',
    de: 'Bewegen!',
    fr: 'Bougez !',
    ja: '避けて！',
    cn: '快躲开！',
    ko: '이동하기!'
  },
  moveAround: {
    // move around (e.g. jumping) to avoid being frozen
    en: 'Move!',
    de: 'Bewegen!',
    fr: 'Bougez !',
    ja: '動く！',
    cn: '快动！',
    ko: '움직이기!'
  },
  breakChains: {
    en: 'Break chains',
    de: 'Kette zerbrechen',
    fr: 'Brisez les chaines',
    ja: '線を切る',
    cn: '切断连线',
    ko: '선 끊기'
  },
  moveChainsTogether: {
    en: 'Move chains together',
    de: 'Ketten zusammen bewegen',
    fr: 'Bougez les chaines ensemble',
    ja: '線同士一緒に移動',
    cn: '连线一起移动',
    ko: '선 붙어서 같이 움직이기'
  },
  earthshakerOnYou: {
    en: 'Earth Shaker on YOU',
    de: 'Erdstoß auf DIR',
    fr: 'Marque de terre sur VOUS',
    ja: '自分にアースシェイカー',
    cn: '大地摇动点名',
    ko: '어스징 대상자'
  },
  wakeUp: {
    en: 'WAKE UP',
    de: 'AUFWACHEN',
    fr: 'RÉVEILLE-TOI',
    ja: '目を覚まして！',
    cn: '醒醒！动一动！！',
    ko: '일어나세요!'
  },
  closeTethersWithPlayer: {
    en: 'Close Tethers (${player})',
    de: 'Nahe Verbindungen (${player})',
    fr: 'Liens proches avec (${player})',
    ja: '(${player})に近づく',
    cn: '靠近连线 (${player})',
    ko: '상대와 가까이 붙기 (${player})'
  },
  farTethersWithPlayer: {
    en: 'Far Tethers (${player})',
    de: 'Entfernte Verbindungen (${player})',
    fr: 'Liens éloignés avec (${player})',
    ja: ' (${player})から離れる',
    cn: '远离连线 (${player})',
    ko: '상대와 떨어지기 (${player})'
  },
  unknown: {
    en: '???',
    de: '???',
    fr: '???',
    ja: '???',
    cn: '???',
    ko: '???'
  },
  north: {
    en: 'North',
    de: 'Norden',
    fr: 'Nord',
    ja: '北',
    cn: '上(北)',
    ko: '북쪽'
  },
  south: {
    en: 'South',
    de: 'Süden',
    fr: 'Sud',
    ja: '南',
    cn: '下(南)',
    ko: '남쪽'
  },
  east: {
    en: 'East',
    de: 'Osten',
    fr: 'Est',
    ja: '東',
    cn: '右(东)',
    ko: '동쪽'
  },
  west: {
    en: 'West',
    de: 'Westen',
    fr: 'Ouest',
    ja: '西',
    cn: '左(西)',
    ko: '서쪽'
  },
  northwest: {
    en: 'Northwest',
    de: 'Nordwesten',
    fr: 'Nord-Ouest',
    ja: '北西',
    cn: '左上(西北)',
    ko: '북서쪽'
  },
  northeast: {
    en: 'Northeast',
    de: 'Nordosten',
    fr: 'Nord-Est',
    ja: '北東',
    cn: '右上(东北)',
    ko: '북동쪽'
  },
  southwest: {
    en: 'Southwest',
    de: 'Südwesten',
    fr: 'Sud-Ouest',
    ja: '南西',
    cn: '左下(西南)',
    ko: '남서쪽'
  },
  southeast: {
    en: 'Southeast',
    de: 'Südosten',
    fr: 'Sud-Est',
    ja: '南東',
    cn: '右下(东南)',
    ko: '남동쪽'
  },
  dirN: {
    en: 'N',
    de: 'N',
    fr: 'N',
    ja: '北',
    cn: '上(北)',
    ko: '북'
  },
  dirS: {
    en: 'S',
    de: 'S',
    fr: 'S',
    ja: '南',
    cn: '下(南)',
    ko: '남'
  },
  dirE: {
    en: 'E',
    de: 'O',
    fr: 'E',
    ja: '東',
    cn: '右(东)',
    ko: '동'
  },
  dirW: {
    en: 'W',
    de: 'W',
    fr: 'O',
    ja: '西',
    cn: '左(西)',
    ko: '서'
  },
  dirNW: {
    en: 'NW',
    de: 'NW',
    fr: 'NO',
    ja: '北西',
    cn: '左上(西北)',
    ko: '북서'
  },
  dirNE: {
    en: 'NE',
    de: 'NO',
    fr: 'NE',
    ja: '北東',
    cn: '右上(东北)',
    ko: '북동'
  },
  dirSW: {
    en: 'SW',
    de: 'SW',
    fr: 'SO',
    ja: '南西',
    cn: '左下(西南)',
    ko: '남서'
  },
  dirSE: {
    en: 'SE',
    de: 'SO',
    fr: 'SE',
    ja: '南東',
    cn: '右下(东南)',
    ko: '남동'
  },
  // Literal numbers.
  num0: numberToOutputString(0),
  num1: numberToOutputString(1),
  num2: numberToOutputString(2),
  num3: numberToOutputString(3),
  num4: numberToOutputString(4),
  num5: numberToOutputString(5),
  num6: numberToOutputString(6),
  num7: numberToOutputString(7),
  num8: numberToOutputString(8),
  num9: numberToOutputString(9)
});

/***/ }),

/***/ 959:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PS": () => (/* binding */ addOverlayListener),
/* harmony export */   "ae": () => (/* binding */ callOverlayHandler)
/* harmony export */ });
/* unused harmony exports dispatchOverlayEvent, removeOverlayListener, setOverlayHandlerOverride, init */
// OverlayPlugin API setup
let inited = false;
let wsUrl = null;
let ws = null;
let queue = [];
let rseqCounter = 0;
const responsePromises = {};
const subscribers = {};

const sendMessage = (msg, cb) => {
  if (ws) {
    if (queue) queue.push(msg);else ws.send(JSON.stringify(msg));
  } else {
    if (queue) queue.push([msg, cb]);else window.OverlayPluginApi.callHandler(JSON.stringify(msg), cb);
  }
};

const processEvent = msg => {
  init();
  const subs = subscribers[msg.type];
  subs === null || subs === void 0 ? void 0 : subs.forEach(sub => {
    try {
      sub(msg);
    } catch (e) {
      console.error(e);
    }
  });
};

const dispatchOverlayEvent = processEvent;
const addOverlayListener = (event, cb) => {
  var _subscribers$event;

  init();

  if (!subscribers[event]) {
    subscribers[event] = [];

    if (!queue) {
      sendMessage({
        call: 'subscribe',
        events: [event]
      });
    }
  }

  (_subscribers$event = subscribers[event]) === null || _subscribers$event === void 0 ? void 0 : _subscribers$event.push(cb);
};
const removeOverlayListener = (event, cb) => {
  init();

  if (subscribers[event]) {
    const list = subscribers[event];
    const pos = list === null || list === void 0 ? void 0 : list.indexOf(cb);
    if (pos !== undefined && pos > -1) list === null || list === void 0 ? void 0 : list.splice(pos, 1);
  }
};

const callOverlayHandlerInternal = (_msg // eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  init();
  const msg = { ..._msg,
    rseq: 0
  };
  let p;

  if (ws) {
    msg.rseq = rseqCounter++;
    p = new Promise((resolve, reject) => {
      responsePromises[msg.rseq] = {
        resolve: resolve,
        reject: reject
      };
    });
    sendMessage(msg);
  } else {
    p = new Promise((resolve, reject) => {
      sendMessage(msg, data => {
        if (data === null) {
          resolve(data);
          return;
        }

        const parsed = JSON.parse(data);
        if (parsed['$error']) reject(parsed);else resolve(parsed);
      });
    });
  }

  return p;
};

const callOverlayHandlerOverrideMap = {};
const callOverlayHandler = (_msg // eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  var _callOverlayHandlerOv;

  init(); // If this `as` is incorrect, then it will not find an override.
  // TODO: we could also replace this with a type guard.

  const type = _msg.call;
  const callFunc = (_callOverlayHandlerOv = callOverlayHandlerOverrideMap[type]) !== null && _callOverlayHandlerOv !== void 0 ? _callOverlayHandlerOv : callOverlayHandlerInternal; // The `IOverlayHandler` type guarantees that parameters/return type match
  // one of the overlay handlers.  The OverrideMap also only stores functions
  // that match by the discriminating `call` field, and so any overrides
  // should be correct here.
  // eslint-disable-next-line max-len
  // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument

  return callFunc(_msg);
};
const setOverlayHandlerOverride = (type, override) => {
  if (!override) {
    delete callOverlayHandlerOverrideMap[type];
    return;
  }

  callOverlayHandlerOverrideMap[type] = override;
};
const init = () => {
  if (inited) return;

  if (typeof window !== 'undefined') {
    wsUrl = new URLSearchParams(window.location.search).get('OVERLAY_WS');

    if (wsUrl !== null) {
      const connectWs = function (wsUrl) {
        ws = new WebSocket(wsUrl);
        ws.addEventListener('error', e => {
          console.error(e);
        });
        ws.addEventListener('open', () => {
          var _queue;

          console.log('Connected!');
          const q = (_queue = queue) !== null && _queue !== void 0 ? _queue : [];
          queue = null;
          sendMessage({
            call: 'subscribe',
            events: Object.keys(subscribers)
          });

          for (const msg of q) {
            if (!Array.isArray(msg)) sendMessage(msg);
          }
        });
        ws.addEventListener('message', _msg => {
          try {
            if (typeof _msg.data !== 'string') {
              console.error('Invalid message data received: ', _msg);
              return;
            }

            const msg = JSON.parse(_msg.data);
            const promiseFuncs = (msg === null || msg === void 0 ? void 0 : msg.rseq) !== undefined ? responsePromises[msg.rseq] : undefined;

            if (msg.rseq !== undefined && promiseFuncs) {
              if (msg['$error']) promiseFuncs.reject(msg);else promiseFuncs.resolve(msg);
              delete responsePromises[msg.rseq];
            } else {
              processEvent(msg);
            }
          } catch (e) {
            console.error('Invalid message received: ', _msg);
            return;
          }
        });
        ws.addEventListener('close', () => {
          queue = null;
          console.log('Trying to reconnect...'); // Don't spam the server with retries.

          window.setTimeout(() => {
            connectWs(wsUrl);
          }, 300);
        });
      };

      connectWs(wsUrl);
    } else {
      const waitForApi = function () {
        var _window$OverlayPlugin, _queue2;

        if (!((_window$OverlayPlugin = window.OverlayPluginApi) !== null && _window$OverlayPlugin !== void 0 && _window$OverlayPlugin.ready)) {
          window.setTimeout(waitForApi, 300);
          return;
        }

        const q = (_queue2 = queue) !== null && _queue2 !== void 0 ? _queue2 : [];
        queue = null;
        window.__OverlayCallback = processEvent;
        sendMessage({
          call: 'subscribe',
          events: Object.keys(subscribers)
        });

        for (const item of q) {
          if (Array.isArray(item)) sendMessage(item[0], item[1]);
        }
      };

      waitForApi();
    } // Here the OverlayPlugin API is registered to the window object,
    // but this is mainly for backwards compatibility.For cactbot's built-in files,
    // it is recommended to use the various functions exported in resources/overlay_plugin_api.ts.


    window.addOverlayListener = addOverlayListener;
    window.removeOverlayListener = removeOverlayListener;
    window.callOverlayHandler = callOverlayHandler;
    window.dispatchOverlayEvent = dispatchOverlayEvent;
  }

  inited = true;
};

/***/ }),

/***/ 402:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ Regexes)
/* harmony export */ });
/* harmony import */ var _netlog_defs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);

const separator = ':';
const matchDefault = '[^:]*';
const matchWithColonsDefault = '(?:[^:]|: )*?';
const fieldsWithPotentialColons = ['effect', 'ability'];

const defaultParams = (type, version, include) => {
  var _include;

  (_include = include) !== null && _include !== void 0 ? _include : include = Object.keys(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].fields);
  const params = {};
  const firstOptionalField = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].firstOptionalField;

  for (const [prop, index] of Object.entries(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].fields)) {
    if (!include.includes(prop)) continue;
    const param = {
      field: prop,
      optional: firstOptionalField !== undefined && index >= firstOptionalField
    };
    if (prop === 'type') param.value = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].type;
    params[index] = param;
  }

  return params;
};

const parseHelper = (params, defKey, fields) => {
  var _params;

  params = (_params = params) !== null && _params !== void 0 ? _params : {};
  const validFields = [];

  for (const index in fields) {
    const field = fields[index];
    if (field) validFields.push(field.field);
  }

  Regexes.validateParams(params, defKey, ['capture', ...validFields]); // Find the last key we care about, so we can shorten the regex if needed.

  const capture = Regexes.trueIfUndefined(params.capture);
  const fieldKeys = Object.keys(fields).sort((a, b) => parseInt(a) - parseInt(b));
  let maxKeyStr;

  if (capture) {
    const keys = [];

    for (const key in fields) keys.push(key);

    let tmpKey = keys.pop();

    if (tmpKey === undefined) {
      var _fieldKeys;

      maxKeyStr = (_fieldKeys = fieldKeys[fieldKeys.length - 1]) !== null && _fieldKeys !== void 0 ? _fieldKeys : '0';
    } else {
      var _tmpKey;

      while ((_fields$tmpKey = fields[tmpKey]) !== null && _fields$tmpKey !== void 0 && _fields$tmpKey.optional && !(((_fields$tmpKey$field = (_fields$tmpKey2 = fields[tmpKey]) === null || _fields$tmpKey2 === void 0 ? void 0 : _fields$tmpKey2.field) !== null && _fields$tmpKey$field !== void 0 ? _fields$tmpKey$field : '') in params)) {
        var _fields$tmpKey, _fields$tmpKey$field, _fields$tmpKey2;

        tmpKey = keys.pop();
      }

      maxKeyStr = (_tmpKey = tmpKey) !== null && _tmpKey !== void 0 ? _tmpKey : '0';
    }
  } else {
    maxKeyStr = '0';

    for (const key in fields) {
      var _fields$key, _fields$key2;

      const value = (_fields$key = fields[key]) !== null && _fields$key !== void 0 ? _fields$key : {};
      if (typeof value !== 'object') continue;
      const fieldName = (_fields$key2 = fields[key]) === null || _fields$key2 === void 0 ? void 0 : _fields$key2.field;
      if (fieldName !== undefined && fieldName in params) maxKeyStr = key;
    }
  }

  const maxKey = parseInt(maxKeyStr); // Special case for Ability to handle aoe and non-aoe.

  const abilityMessageType = `(?:${_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].Ability.messageType */ .Z.Ability.messageType}|${_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].NetworkAOEAbility.messageType */ .Z.NetworkAOEAbility.messageType})`;
  const abilityHexCode = '(?:15|16)'; // Build the regex from the fields.

  const prefix = defKey !== 'Ability' ? _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z[defKey].messageType : abilityMessageType;
  const hexCode = defKey !== 'Ability' ? `00${parseInt(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z[defKey].type).toString(16)}`.slice(-2).toUpperCase() : abilityHexCode;
  let str = '';
  if (capture) str += `(?<timestamp>\\y{Timestamp}) ${prefix} (?<type>${hexCode})`;else str += `\\y{Timestamp} ${prefix} ${hexCode}`;
  let lastKey = 1;

  for (const keyStr in fields) {
    var _fields$keyStr, _fields$keyStr$value$, _fields$keyStr2, _fields$keyStr2$value;

    const fieldName = (_fields$keyStr = fields[keyStr]) === null || _fields$keyStr === void 0 ? void 0 : _fields$keyStr.field; // Regex handles these manually above in the `str` initialization.

    if (fieldName === 'timestamp' || fieldName === 'type') continue;
    const key = parseInt(keyStr); // Fill in blanks.

    const missingFields = key - lastKey - 1;
    if (missingFields === 1) str += `${separator}${matchDefault}`;else if (missingFields > 1) str += `(?:${separator}${matchDefault}){${missingFields}}`;
    lastKey = key;
    str += separator;
    const value = fields[keyStr];
    if (typeof value !== 'object') throw new Error(`${defKey}: invalid value: ${JSON.stringify(value)}`);
    const fieldDefault = fieldName !== undefined && fieldsWithPotentialColons.includes(fieldName) ? matchWithColonsDefault : matchDefault;
    const fieldValue = (_fields$keyStr$value$ = (_fields$keyStr2 = fields[keyStr]) === null || _fields$keyStr2 === void 0 ? void 0 : (_fields$keyStr2$value = _fields$keyStr2.value) === null || _fields$keyStr2$value === void 0 ? void 0 : _fields$keyStr2$value.toString()) !== null && _fields$keyStr$value$ !== void 0 ? _fields$keyStr$value$ : fieldDefault;

    if (fieldName !== undefined) {
      str += Regexes.maybeCapture( // more accurate type instead of `as` cast
      // maybe this function needs a refactoring
      capture, fieldName, params[fieldName], fieldValue);
    } else {
      str += fieldValue;
    } // Stop if we're not capturing and don't care about future fields.


    if (key >= maxKey) break;
  }

  str += '(?:$|:)';
  return Regexes.parse(str);
};

class Regexes {
  static logVersion = 'latest';
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-20-0x14-networkstartscasting
   */

  static startsUsing(params) {
    return parseHelper(params, 'StartsUsing', defaultParams('StartsUsing', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   */


  static ability(params) {
    return parseHelper(params, 'Ability', defaultParams('Ability', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   *
   * @deprecated Use `ability` instead
   */


  static abilityFull(params) {
    return this.ability(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-27-0x1b-networktargeticon-head-marker
   */


  static headMarker(params) {
    return parseHelper(params, 'HeadMarker', defaultParams('HeadMarker', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */


  static addedCombatant(params) {
    return parseHelper(params, 'AddedCombatant', defaultParams('AddedCombatant', Regexes.logVersion, ['type', 'timestamp', 'id', 'name']));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */


  static addedCombatantFull(params) {
    return parseHelper(params, 'AddedCombatant', defaultParams('AddedCombatant', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-04-0x04-removecombatant
   */


  static removingCombatant(params) {
    return parseHelper(params, 'RemovedCombatant', defaultParams('RemovedCombatant', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-26-0x1a-networkbuff
   */


  static gainsEffect(params) {
    return parseHelper(params, 'GainsEffect', defaultParams('GainsEffect', Regexes.logVersion));
  }
  /**
   * Prefer gainsEffect over this function unless you really need extra data.
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-38-0x26-networkstatuseffects
   */


  static statusEffectExplicit(params) {
    return parseHelper(params, 'StatusEffect', defaultParams('StatusEffect', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-30-0x1e-networkbuffremove
   */


  static losesEffect(params) {
    return parseHelper(params, 'LosesEffect', defaultParams('LosesEffect', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-35-0x23-networktether
   */


  static tether(params) {
    return parseHelper(params, 'Tether', defaultParams('Tether', Regexes.logVersion));
  }
  /**
   * 'target' was defeated by 'source'
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-25-0x19-networkdeath
   */


  static wasDefeated(params) {
    return parseHelper(params, 'WasDefeated', defaultParams('WasDefeated', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-24-0x18-networkdot
   */


  static networkDoT(params) {
    return parseHelper(params, 'NetworkDoT', defaultParams('NetworkDoT', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static echo(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0038';
    return Regexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static dialog(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0044';
    return Regexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static message(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0839';
    return Regexes.gameLog(params);
  }
  /**
   * fields: code, name, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static gameLog(params) {
    return parseHelper(params, 'GameLog', defaultParams('GameLog', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static gameNameLog(params) {
    // Backwards compatability.
    return Regexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-12-0x0c-playerstats
   */


  static statChange(params) {
    return parseHelper(params, 'PlayerStats', defaultParams('PlayerStats', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-01-0x01-changezone
   */


  static changeZone(params) {
    return parseHelper(params, 'ChangeZone', defaultParams('ChangeZone', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-33-0x21-network6d-actor-control
   */


  static network6d(params) {
    return parseHelper(params, 'ActorControl', defaultParams('ActorControl', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-34-0x22-networknametoggle
   */


  static nameToggle(params) {
    return parseHelper(params, 'NameToggle', defaultParams('NameToggle', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-40-0x28-map
   */


  static map(params) {
    return parseHelper(params, 'Map', defaultParams('Map', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-41-0x29-systemlogmessage
   */


  static systemLogMessage(params) {
    return parseHelper(params, 'SystemLogMessage', defaultParams('SystemLogMessage', Regexes.logVersion));
  }
  /**
   * Helper function for building named capture group
   */


  static maybeCapture(capture, name, value, defaultValue) {
    if (value === undefined) value = defaultValue !== null && defaultValue !== void 0 ? defaultValue : matchDefault;
    value = Regexes.anyOf(value);
    return capture ? Regexes.namedCapture(name, value) : value;
  }

  static optional(str) {
    return `(?:${str})?`;
  } // Creates a named regex capture group named |name| for the match |value|.


  static namedCapture(name, value) {
    if (name.includes('>')) console.error('"' + name + '" contains ">".');
    if (name.includes('<')) console.error('"' + name + '" contains ">".');
    return '(?<' + name + '>' + value + ')';
  }
  /**
   * Convenience for turning multiple args into a unioned regular expression.
   * anyOf(x, y, z) or anyOf([x, y, z]) do the same thing, and return (?:x|y|z).
   * anyOf(x) or anyOf(x) on its own simplifies to just x.
   * args may be strings or RegExp, although any additional markers to RegExp
   * like /insensitive/i are dropped.
   */


  static anyOf(...args) {
    const anyOfArray = array => {
      const [elem] = array;
      if (elem !== undefined && array.length === 1) return `${elem instanceof RegExp ? elem.source : elem}`;
      return `(?:${array.map(elem => elem instanceof RegExp ? elem.source : elem).join('|')})`;
    };

    let array = [];

    if (args.length === 1) {
      if (Array.isArray(args[0])) array = args[0];else if (args[0] !== undefined) array = [args[0]];else array = [];
    } else {
      // TODO: more accurate type instead of `as` cast
      array = args;
    }

    return anyOfArray(array);
  }

  static parse(regexpString) {
    const kCactbotCategories = {
      Timestamp: '^.{14}',
      NetTimestamp: '.{33}',
      NetField: '(?:[^|]*\\|)',
      LogType: '[0-9A-Fa-f]{2}',
      AbilityCode: '[0-9A-Fa-f]{1,8}',
      ObjectId: '[0-9A-F]{8}',
      // Matches any character name (including empty strings which the FFXIV
      // ACT plugin can generate when unknown).
      Name: '(?:[^\\s:|]+(?: [^\\s:|]+)?|)',
      // Floats can have comma as separator in FFXIV plugin output: https://github.com/ravahn/FFXIV_ACT_Plugin/issues/137
      Float: '-?[0-9]+(?:[.,][0-9]+)?(?:E-?[0-9]+)?'
    }; // All regexes in cactbot are case insensitive.
    // This avoids headaches as things like `Vice and Vanity` turns into
    // `Vice And Vanity`, especially for French and German.  It appears to
    // have a ~20% regex parsing overhead, but at least they work.

    let modifiers = 'i';

    if (regexpString instanceof RegExp) {
      modifiers += (regexpString.global ? 'g' : '') + (regexpString.multiline ? 'm' : '');
      regexpString = regexpString.source;
    }

    regexpString = regexpString.replace(/\\y\{(.*?)\}/g, (match, group) => {
      return kCactbotCategories[group] || match;
    });
    return new RegExp(regexpString, modifiers);
  } // Like Regex.Regexes.parse, but force global flag.


  static parseGlobal(regexpString) {
    const regex = Regexes.parse(regexpString);
    let modifiers = 'gi';
    if (regexpString instanceof RegExp) modifiers += regexpString.multiline ? 'm' : '';
    return new RegExp(regex.source, modifiers);
  }

  static trueIfUndefined(value) {
    if (typeof value === 'undefined') return true;
    return !!value;
  }

  static validateParams(f, funcName, params) {
    if (f === null) return;
    if (typeof f !== 'object') return;
    const keys = Object.keys(f);

    for (const key of keys) {
      if (!params.includes(key)) {
        throw new Error(`${funcName}: invalid parameter '${key}'.  ` + `Valid params: ${JSON.stringify(params)}`);
      }
    }
  }

}

/***/ }),

/***/ 469:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n3": () => (/* binding */ Responses)
/* harmony export */ });
/* unused harmony exports severityList, builtInResponseStr, triggerFunctions, triggerTextOutputFunctions, triggerOutputFunctions, severityMap */
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81);
// This is meant to be used in a trigger as such:
// {
//   id: 'Some tankbuster',
//   regex: Regexes.startsUsing({source: 'Ye Olde Bosse', id: '666'}),
//   condition: Conditions.caresAboutMagical(data),
//   response: Responses.tankbuster(),
// },
//
// Note: Breaking out the condition like this lets people override it if they
// always (or never) want to know about it, rather than hiding the logic inside
// the tankbuster callback with a "is healer" check.
//
// If data.role is used, it should be only to differentiate between alert levels,
// and not whether a message is sent at all.
//
// Although this is not true of `response: ` fields on triggers in general,
// all responses in this file should either return an object or a single
// function that sets outputStrings and returns an object without doing
// anything with data or matches.  See `responses_test.js`.

const severityList = (/* unused pure expression or super */ null && (['info', 'alert', 'alarm']));
const builtInResponseStr = 'cactbot-builtin-response'; // All valid trigger fields.

const triggerFunctions = (/* unused pure expression or super */ null && (['alarmText', 'alertText', 'condition', 'delaySeconds', 'disabled', 'durationSeconds', 'id', 'type', 'infoText', 'preRun', 'promise', 'response', 'run', 'sound', 'soundVolume', 'suppressSeconds', 'tts', 'outputStrings'])); // Trigger fields that can produce text output.

const triggerTextOutputFunctions = ['alarmText', 'alertText', 'infoText', 'response', 'tts']; // If a trigger has any of these, then it has a visible/audio effect.

const triggerOutputFunctions = [...triggerTextOutputFunctions, 'sound'];
const severityMap = {
  'info': 'infoText',
  'alert': 'alertText',
  'alarm': 'alarmText'
};

const getText = sev => {
  if (!(sev in severityMap)) throw new Error(`Invalid severity: ${sev}.`);
  return severityMap[sev];
};

const defaultInfoText = sev => {
  if (!sev) return 'infoText';
  return getText(sev);
};

const defaultAlertText = sev => {
  if (!sev) return 'alertText';
  return getText(sev);
};

const defaultAlarmText = sev => {
  if (!sev) return 'alarmText';
  return getText(sev);
};

const getTarget = matches => {
  // Often tankbusters can be casted by the boss on the boss.
  // Consider this as "not having a target".
  if (matches.target === matches.source) return;
  return matches.target;
};

const getSource = matches => {
  return matches === null || matches === void 0 ? void 0 : matches.source;
}; // FIXME: make this work for any number of pairs of params


const combineFuncs = function (text1, func1, text2, func2) {
  const obj = {};

  if (text1 !== text2) {
    obj[text1] = func1;
    obj[text2] = func2;
  } else {
    obj[text1] = (data, matches, output) => {
      var _func;

      return (_func = func1(data, matches, output)) !== null && _func !== void 0 ? _func : func2(data, matches, output);
    };
  }

  return obj;
};

const isPlayerId = id => {
  return id !== undefined && id[0] !== '4';
}; // For responses that unconditionally return static text.


const staticResponse = (field, text) => {
  return (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      text: text
    };
    return {
      [field]: (_data, _matches, output) => {
        var _output$text;

        return (_output$text = output.text) === null || _output$text === void 0 ? void 0 : _output$text.call(output);
      }
    };
  };
};

const Responses = {
  tankBuster: (targetSev, otherSev) => {
    const outputStrings = {
      noTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBuster */ .Z.tankBuster,
      busterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnYou */ .Z.tankBusterOnYou,
      busterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnPlayer */ .Z.tankBusterOnPlayer
    };

    const targetFunc = (data, matches, output) => {
      var _output$busterOnYou;

      const target = getTarget(matches);

      if (target === undefined) {
        var _output$noTarget;

        if (data.role !== 'tank' && data.role !== 'healer') return;
        return (_output$noTarget = output.noTarget) === null || _output$noTarget === void 0 ? void 0 : _output$noTarget.call(output);
      }

      if (target === data.me) return (_output$busterOnYou = output.busterOnYou) === null || _output$busterOnYou === void 0 ? void 0 : _output$busterOnYou.call(output);
    };

    const otherFunc = (data, matches, output) => {
      var _output$busterOnTarge;

      const target = getTarget(matches);

      if (target === undefined) {
        var _output$noTarget2;

        if (data.role === 'tank' || data.role === 'healer') return;
        return (_output$noTarget2 = output.noTarget) === null || _output$noTarget2 === void 0 ? void 0 : _output$noTarget2.call(output);
      }

      if (target === data.me) return;
      return (_output$busterOnTarge = output.busterOnTarget) === null || _output$busterOnTarge === void 0 ? void 0 : _output$busterOnTarge.call(output, {
        player: data.ShortName(target)
      });
    };

    const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  tankBusterSwap: (busterSev, swapSev) => {
    const outputStrings = {
      tankSwap: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankSwap */ .Z.tankSwap,
      busterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnYou */ .Z.tankBusterOnYou,
      busterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnPlayer */ .Z.tankBusterOnPlayer
    }; // Note: busterSev and swapSev can be the same priority.

    const tankSwapFunc = (data, matches, output) => {
      var _output$tankSwap;

      const target = getTarget(matches);
      if (data.role === 'tank' && target !== data.me) return (_output$tankSwap = output.tankSwap) === null || _output$tankSwap === void 0 ? void 0 : _output$tankSwap.call(output);
    };

    const busterFunc = (data, matches, output) => {
      var _output$busterOnYou2, _output$busterOnTarge2;

      const target = getTarget(matches);
      if (data.role === 'tank' && target !== data.me) return;
      if (target === data.me) return (_output$busterOnYou2 = output.busterOnYou) === null || _output$busterOnYou2 === void 0 ? void 0 : _output$busterOnYou2.call(output);
      return (_output$busterOnTarge2 = output.busterOnTarget) === null || _output$busterOnTarge2 === void 0 ? void 0 : _output$busterOnTarge2.call(output, {
        player: data.ShortName(target)
      });
    };

    const combined = combineFuncs(defaultAlarmText(swapSev), tankSwapFunc, defaultAlertText(busterSev), busterFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  tankCleave: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      cleaveOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankCleaveOnYou */ .Z.tankCleaveOnYou,
      cleaveNoTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankCleave */ .Z.tankCleave,
      avoidCleave: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].avoidTankCleave */ .Z.avoidTankCleave
    };
    return {
      [defaultInfoText(sev)]: (data, matches, output) => {
        var _output$cleaveOnYou, _output$avoidCleave;

        const target = getTarget(matches);
        if (target === data.me) return (_output$cleaveOnYou = output.cleaveOnYou) === null || _output$cleaveOnYou === void 0 ? void 0 : _output$cleaveOnYou.call(output);

        if (data.role === 'tank' || data.job === 'BLU') {
          var _output$cleaveNoTarge;

          // targetless tank cleave
          // BLU players should always get this generic cleave message.
          // We have no robust way to determine whether they have tank Mimicry on,
          // and it's really annoying for a BLU tank to be told to avoid cleaves when they can't.
          return (_output$cleaveNoTarge = output.cleaveNoTarget) === null || _output$cleaveNoTarge === void 0 ? void 0 : _output$cleaveNoTarge.call(output);
        }

        return (_output$avoidCleave = output.avoidCleave) === null || _output$avoidCleave === void 0 ? void 0 : _output$avoidCleave.call(output);
      }
    };
  },
  sharedTankBuster: (targetSev, otherSev) => {
    const outputStrings = {
      sharedTankbusterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sharedTankbusterOnYou */ .Z.sharedTankbusterOnYou,
      sharedTankbusterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sharedTankbusterOnPlayer */ .Z.sharedTankbusterOnPlayer,
      sharedTankbuster: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sharedTankbuster */ .Z.sharedTankbuster,
      avoidCleave: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].avoidTankCleave */ .Z.avoidTankCleave
    };

    const targetFunc = (data, matches, output) => {
      var _output$sharedTankbus2, _output$sharedTankbus3;

      const target = getTarget(matches);

      if (target === undefined) {
        var _output$sharedTankbus;

        if (data.role !== 'tank' && data.role !== 'healer') return;
        return (_output$sharedTankbus = output.sharedTankbuster) === null || _output$sharedTankbus === void 0 ? void 0 : _output$sharedTankbus.call(output);
      }

      if (target === data.me) return (_output$sharedTankbus2 = output.sharedTankbusterOnYou) === null || _output$sharedTankbus2 === void 0 ? void 0 : _output$sharedTankbus2.call(output);
      if (data.role === 'tank' || data.role === 'healer') return (_output$sharedTankbus3 = output.sharedTankbusterOnTarget) === null || _output$sharedTankbus3 === void 0 ? void 0 : _output$sharedTankbus3.call(output, {
        player: data.ShortName(target)
      });
    };

    const otherFunc = (data, matches, output) => {
      var _output$avoidCleave3;

      const target = getTarget(matches);

      if (target === undefined) {
        var _output$avoidCleave2;

        if (data.role === 'tank' || data.role === 'healer') return;
        return (_output$avoidCleave2 = output.avoidCleave) === null || _output$avoidCleave2 === void 0 ? void 0 : _output$avoidCleave2.call(output);
      }

      if (target === data.me || data.role === 'tank' || data.role === 'healer') return;
      return (_output$avoidCleave3 = output.avoidCleave) === null || _output$avoidCleave3 === void 0 ? void 0 : _output$avoidCleave3.call(output);
    };

    const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  miniBuster: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].miniBuster */ .Z.miniBuster),
  aoe: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].aoe */ .Z.aoe),
  bigAoe: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].bigAoe */ .Z.bigAoe),
  spread: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].spread */ .Z.spread),
  // for stack marker situations.
  stackMarker: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackMarker */ .Z.stackMarker),
  // for getting together without stack marker
  getTogether: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getTogether */ .Z.getTogether),
  stackMarkerOn: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      stackOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackOnYou */ .Z.stackOnYou,
      stackOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackOnPlayer */ .Z.stackOnPlayer
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        var _output$stackOnYou, _output$stackOnTarget;

        const target = getTarget(matches);
        if (target === data.me) return (_output$stackOnYou = output.stackOnYou) === null || _output$stackOnYou === void 0 ? void 0 : _output$stackOnYou.call(output);
        return (_output$stackOnTarget = output.stackOnTarget) === null || _output$stackOnTarget === void 0 ? void 0 : _output$stackOnTarget.call(output, {
          player: data.ShortName(target)
        });
      }
    };
  },
  stackMiddle: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackMiddle */ .Z.stackMiddle),
  doritoStack: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].doritoStack */ .Z.doritoStack),
  spreadThenStack: sev => {
    return staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].spreadThenStack */ .Z.spreadThenStack);
  },
  stackThenSpread: sev => {
    return staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackThenSpread */ .Z.stackThenSpread);
  },
  knockback: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockback */ .Z.knockback),
  knockbackOn: (targetSev, otherSev) => {
    const outputStrings = {
      knockbackOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockbackOnYou */ .Z.knockbackOnYou,
      knockbackOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockbackOnPlayer */ .Z.knockbackOnPlayer
    };

    const targetFunc = (data, matches, output) => {
      var _output$knockbackOnYo;

      const target = getTarget(matches);
      if (target === data.me) return (_output$knockbackOnYo = output.knockbackOnYou) === null || _output$knockbackOnYo === void 0 ? void 0 : _output$knockbackOnYo.call(output);
    };

    const otherFunc = (data, matches, output) => {
      var _output$knockbackOnTa;

      const target = getTarget(matches);
      if (target !== data.me) return (_output$knockbackOnTa = output.knockbackOnTarget) === null || _output$knockbackOnTa === void 0 ? void 0 : _output$knockbackOnTa.call(output, {
        player: data.ShortName(target)
      });
    };

    const combined = combineFuncs(defaultInfoText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  drawIn: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].drawIn */ .Z.drawIn),
  lookTowards: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookTowardsBoss */ .Z.lookTowardsBoss),
  lookAway: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAway */ .Z.lookAway),
  lookAwayFromTarget: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      lookAwayFrom: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAwayFromTarget */ .Z.lookAwayFromTarget
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        var _output$lookAwayFrom;

        const target = getTarget(matches);
        if (target === data.me) return;
        const name = isPlayerId(matches === null || matches === void 0 ? void 0 : matches.targetId) ? data.ShortName(target) : target;
        return (_output$lookAwayFrom = output.lookAwayFrom) === null || _output$lookAwayFrom === void 0 ? void 0 : _output$lookAwayFrom.call(output, {
          name: name
        });
      }
    };
  },
  lookAwayFromSource: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      lookAwayFrom: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAwayFromTarget */ .Z.lookAwayFromTarget
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        var _output$lookAwayFrom2;

        const source = getSource(matches);
        if (source === data.me) return;
        const name = isPlayerId(matches === null || matches === void 0 ? void 0 : matches.sourceId) ? data.ShortName(source) : source;
        return (_output$lookAwayFrom2 = output.lookAwayFrom) === null || _output$lookAwayFrom2 === void 0 ? void 0 : _output$lookAwayFrom2.call(output, {
          name: name
        });
      }
    };
  },
  getBehind: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getBehind */ .Z.getBehind),
  goFrontOrSides: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goFrontOrSides */ .Z.goFrontOrSides),
  // .getUnder() is used when you have to get into the bosses hitbox
  getUnder: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getUnder */ .Z.getUnder),
  // .getIn() is more like "get close but maybe even melee range is fine"
  getIn: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"]["in"] */ .Z["in"]),
  // .getOut() means get far away
  getOut: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].out */ .Z.out),
  outOfMelee: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].outOfMelee */ .Z.outOfMelee),
  getInThenOut: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].inThenOut */ .Z.inThenOut),
  getOutThenIn: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].outThenIn */ .Z.outThenIn),
  getBackThenFront: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].backThenFront */ .Z.backThenFront),
  getFrontThenBack: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].frontThenBack */ .Z.frontThenBack),
  goMiddle: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goIntoMiddle */ .Z.goIntoMiddle),
  goRight: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].right */ .Z.right),
  goLeft: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].left */ .Z.left),
  goWest: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getLeftAndWest */ .Z.getLeftAndWest),
  goEast: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getRightAndEast */ .Z.getRightAndEast),
  goFrontBack: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goFrontBack */ .Z.goFrontBack),
  goSides: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sides */ .Z.sides),
  // .killAdds() is used for adds that will always be available
  killAdds: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].killAdds */ .Z.killAdds),
  // .killExtraAdd() is used for adds that appear if a mechanic was not played correctly
  killExtraAdd: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].killExtraAdd */ .Z.killExtraAdd),
  awayFromFront: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].awayFromFront */ .Z.awayFromFront),
  sleep: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      sleep: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sleepTarget */ .Z.sleepTarget
    };
    return {
      [defaultAlertText(sev)]: (_data, matches, output) => {
        var _output$sleep;

        const source = getSource(matches);
        return (_output$sleep = output.sleep) === null || _output$sleep === void 0 ? void 0 : _output$sleep.call(output, {
          name: source
        });
      }
    };
  },
  stunOrInterruptIfPossible: sev => {
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = {
        stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stunTarget */ .Z.stunTarget,
        interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].interruptTarget */ .Z.interruptTarget
      };
      return {
        [defaultAlertText(sev)]: (data, matches, output) => {
          var _output$interrupt, _output$stun;

          const source = getSource(matches);
          if (data.CanSilence()) return (_output$interrupt = output.interrupt) === null || _output$interrupt === void 0 ? void 0 : _output$interrupt.call(output, {
            name: source
          });else if (data.CanStun()) return (_output$stun = output.stun) === null || _output$stun === void 0 ? void 0 : _output$stun.call(output, {
            name: source
          });
        }
      };
    };
  },
  stun: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stunTarget */ .Z.stunTarget
    };
    return {
      [defaultAlertText(sev)]: (_data, matches, output) => {
        var _output$stun2;

        const source = getSource(matches);
        return (_output$stun2 = output.stun) === null || _output$stun2 === void 0 ? void 0 : _output$stun2.call(output, {
          name: source
        });
      }
    };
  },
  interrupt: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].interruptTarget */ .Z.interruptTarget
    };
    return {
      [defaultAlertText(sev)]: (_data, matches, output) => {
        var _output$interrupt2;

        const source = getSource(matches);
        return (_output$interrupt2 = output.interrupt) === null || _output$interrupt2 === void 0 ? void 0 : _output$interrupt2.call(output, {
          name: source
        });
      }
    };
  },
  preyOn: (targetSev, otherSev) => {
    const outputStrings = {
      preyOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].preyOnYou */ .Z.preyOnYou,
      preyOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].preyOnPlayer */ .Z.preyOnPlayer
    };

    const targetFunc = (data, matches, output) => {
      var _output$preyOnYou;

      const target = getTarget(matches);
      if (data.me === target) return (_output$preyOnYou = output.preyOnYou) === null || _output$preyOnYou === void 0 ? void 0 : _output$preyOnYou.call(output);
    };

    const otherFunc = (data, matches, output) => {
      var _output$preyOnTarget;

      const target = getTarget(matches);
      if (target !== data.me) return (_output$preyOnTarget = output.preyOnTarget) === null || _output$preyOnTarget === void 0 ? void 0 : _output$preyOnTarget.call(output, {
        player: data.ShortName(target)
      });
    };

    const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  awayFrom: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      awayFromGroup: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].awayFromGroup */ .Z.awayFromGroup,
      awayFromTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].awayFromPlayer */ .Z.awayFromPlayer
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        var _output$awayFromGroup, _output$awayFromTarge;

        const target = getTarget(matches);
        if (data.me === target) return (_output$awayFromGroup = output.awayFromGroup) === null || _output$awayFromGroup === void 0 ? void 0 : _output$awayFromGroup.call(output);
        return (_output$awayFromTarge = output.awayFromTarget) === null || _output$awayFromTarge === void 0 ? void 0 : _output$awayFromTarge.call(output, {
          player: data.ShortName(target)
        });
      }
    };
  },
  meteorOnYou: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].meteorOnYou */ .Z.meteorOnYou),
  stopMoving: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stopMoving */ .Z.stopMoving),
  stopEverything: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stopEverything */ .Z.stopEverything),
  // move away to dodge aoes
  moveAway: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].moveAway */ .Z.moveAway),
  // move around (e.g. jumping) to avoid being frozen
  moveAround: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].moveAround */ .Z.moveAround),
  breakChains: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].breakChains */ .Z.breakChains),
  moveChainsTogether: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].moveChainsTogether */ .Z.moveChainsTogether),
  earthshaker: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      earthshaker: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].earthshakerOnYou */ .Z.earthshakerOnYou
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        var _output$earthshaker;

        const target = getTarget(matches);
        if (target !== data.me) return;
        return (_output$earthshaker = output.earthshaker) === null || _output$earthshaker === void 0 ? void 0 : _output$earthshaker.call(output);
      }
    };
  },
  wakeUp: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].wakeUp */ .Z.wakeUp)
}; // Don't give `Responses` a type in its declaration so that it can be treated as more strict
// than `ResponsesMap`, but do assert that its type is correct.  This allows callers to know
// which properties are defined in Responses without having to conditionally check for undefined.

const responseMapTypeAssertion = Responses; // Suppress unused variable warning.

console.assert(responseMapTypeAssertion);

/***/ }),

/***/ 456:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _languages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(619);
/* harmony import */ var _overlay_plugin_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(959);
/* harmony import */ var _not_reached__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62);
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(446);
/* harmony import */ var _content_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(873);
/* harmony import */ var _netregexes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(622);
/* harmony import */ var _regexes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(402);
/* harmony import */ var _responses__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(469);
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(81);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(509);
/* harmony import */ var _zone_id__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(588);
/* harmony import */ var _zone_info__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(902);
// TODO: Fix import/order

/* eslint-disable import/order */


 // TODO:
// The convention of "import X as _X; const X = _X;" is currently
// being used as a method to workaround for downstream code
// that is running via eval(). Because importing statements do not
// create a variable of the same name, the eval()'d code does not know
// about the import, and thus throws ReferenceErrors.
// Used by downstream eval


const Conditions = _conditions__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z;

const ContentType = _content_type__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z;

const NetRegexes = _netregexes__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z;

const Regexes = _regexes__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z;

const Responses = _responses__WEBPACK_IMPORTED_MODULE_7__/* .Responses */ .n3;

const Outputs = _outputs__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z;

const Util = _util__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z;

const ZoneId = _zone_id__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z;

const ZoneInfo = _zone_info__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z; // Convince TypeScript and eslint that these are used.  TypeScript doesn't have a great way
// to disable individual rules, so this is safer than disabling all rules.

console.assert(Conditions);
console.assert(ContentType);
console.assert(NetRegexes);
console.assert(Regexes);
console.assert(Responses);
console.assert(Outputs);
console.assert(Util);
console.assert(ZoneId);
console.assert(ZoneInfo); // TODO: move all of these to config.js?

class UserConfig {
  optionTemplates = {};
  userFileCallbacks = {};
  savedConfig = {};

  getDefaultBaseOptions() {
    return {
      ParserLanguage: 'en',
      ShortLocale: 'en',
      DisplayLanguage: 'en',
      TextAlertsEnabled: true,
      SoundAlertsEnabled: true,
      SpokenAlertsEnabled: false,
      GroupSpokenAlertsEnabled: false,
      SystemInfo: {
        cactbotVersion: '0.0.0.0',
        overlayPluginVersion: '0.0.0.0',
        ffxivPluginVersion: '0.0.0.0',
        actVersion: '0.0.0.0',
        gameRegion: 'International'
      },
      Debug: false
    };
  }

  evalUserFile(content, options) {
    const Options = options;
    console.assert(Options); // Used by eval.
    // This is the one eval cactbot should ever need, which is for handling user files.
    // Because user files can be located anywhere on disk and there's backwards compat
    // issues, it's unlikely that these will be able to be anything but eval forever.
    //

    /* eslint-disable no-eval */

    eval(content);
    /* eslint-enable no-eval */
  }

  registerOptions(overlayName, optionTemplate, userFileCallback) {
    this.optionTemplates[overlayName] = optionTemplate;
    if (userFileCallback) this.userFileCallbacks[overlayName] = userFileCallback;
  }

  sortUserFiles(keys) {
    // Helper data structure for subdirectories.
    const splitKeyMap = {};

    for (const key of keys) splitKeyMap[key] = key.toUpperCase().split(/[/\\]/); // Sort paths as a depth-first case-insensitive alphabetical subdirectory walk, followed by
    // all files sorted case-insensitive alphabetically once a subdir has been processed, e.g.
    //  * a/some.js
    //  * b/subdir1/z/z/z/nested_file.js
    //  * b/subdir1/file.js
    //  * b/subdir2/first.js
    //  * b/subdir2/second.js
    //  * b/some_file.js
    //  * root_file1.js
    //  * root_file2.js


    return keys.sort((keyA, keyB) => {
      const listA = splitKeyMap[keyA];
      const listB = splitKeyMap[keyB];
      if (listA === undefined || listB === undefined) throw new _not_reached__WEBPACK_IMPORTED_MODULE_2__/* .UnreachableCode */ .$();
      const maxLen = Math.max(listA.length, listB.length);

      for (let idx = 0; idx < maxLen; ++idx) {
        const entryA = listA[idx];
        const entryB = listB[idx]; // In practice, there's always at least one entry.

        if (entryA === undefined || entryB === undefined) throw new _not_reached__WEBPACK_IMPORTED_MODULE_2__/* .UnreachableCode */ .$(); // If both subdirectories or both files, then compare names.

        const isLastA = listA.length - 1 === idx;
        const isLastB = listB.length - 1 === idx;

        if (isLastA && isLastB) {
          // If both last, then this is a filename comparison.
          // First, compare filename without extension.
          const fileA = entryA.replace(/\.[^\.]*$/, '');
          const fileB = entryB.replace(/\.[^\.]*$/, '');
          const filenameOnlyDiff = fileA.localeCompare(fileB);
          if (filenameOnlyDiff) return filenameOnlyDiff; // Second, compare including the extension.
          // Always return something here, see note below.

          return entryA.localeCompare(entryB);
        } else if (!isLastA && !isLastB) {
          // If both not last, this is a subdirectory comparison.
          const diff = entryA.localeCompare(entryB);
          if (diff) return diff;
        } // At this point, if idx is the final for each, we would have returned above.
        // So, check if either a or b is at the final entry in splitKeyMap.
        // If so, then there's a mismatch in number of directories, and we know one
        // the one with a filename should be sorted last.


        if (listA.length - 1 <= idx) {
          // a has fewer subdirectories, so should be sorted last.
          return 1;
        }

        if (listB.length - 1 <= idx) {
          // a has more subdirectories, so should be sorted first.
          return -1;
        }
      }

      return 0;
    });
  } // Given a set of paths, an overlayName, and an extension, return all paths with
  // that extension that have `overlayName` either as their entire filename (no subdir)
  // or are inside a root-level subdirectory named `overlayName`/  The extension should
  // include the period separator, e.g. ".js".  All comparisons are case insensitive.


  filterUserFiles(paths, origOverlayName, origExtension) {
    const extension = origExtension.toLowerCase();
    const overlayName = origOverlayName.toLowerCase();
    return paths.filter(origPath => {
      const path = origPath.toLowerCase();
      if (!path.endsWith(extension)) return false;
      if (path === `${overlayName}${extension}`) return true;
      if (path.startsWith(`${overlayName}/`) || path.startsWith(`${overlayName}\\`)) return true;
      return false;
    });
  }

  getUserConfigLocation(overlayName, options, callback) {
    let currentlyReloading = false;

    const reloadOnce = () => {
      if (currentlyReloading) return;
      currentlyReloading = true;
      window.location.reload();
    };

    (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_1__/* .addOverlayListener */ .PS)('onUserFileChanged', () => {
      reloadOnce();
    });
    (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_1__/* .addOverlayListener */ .PS)('onForceReload', () => {
      reloadOnce();
    });
    this.loadUserFiles(overlayName, options, callback);
  }

  loadUserFiles(overlayName, options, callback) {
    const readOptions = (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_1__/* .callOverlayHandler */ .ae)({
      call: 'cactbotLoadData',
      overlay: 'options'
    });

    const loadUser = async e => {
      var _await$readOptions$da, _await$readOptions, _this$savedConfig$ove;

      // The basePath isn't using for anything other than cosmetic printing of full paths,
      // so replace any slashes here for uniformity.  In case anybody is using cactbot on
      // Linux (?!?), support any style of slashes elsewhere.
      const basePath = e.detail.userLocation.replace(/[/\\]*$/, '') + '\\';
      const localFiles = e.detail.localUserFiles;
      options.SystemInfo = {
        cactbotVersion: e.detail.cactbotVersion,
        overlayPluginVersion: e.detail.overlayPluginVersion,
        ffxivPluginVersion: e.detail.ffxivPluginVersion,
        actVersion: e.detail.actVersion,
        gameRegion: e.detail.gameRegion
      }; // The plugin auto-detects the language, so set this first.
      // If options files want to override it, they can for testing.
      // Backward compatibility (language is now separated to three types.)

      if (e.detail.language) {
        options.ParserLanguage = e.detail.language;
        options.ShortLocale = e.detail.language;
        options.DisplayLanguage = e.detail.language;
      } // Parser Language


      if (e.detail.parserLanguage) {
        options.ParserLanguage = e.detail.parserLanguage; // Backward compatibility, everything "Language" should be changed to "ParserLanguage"

        options.Language = e.detail.parserLanguage;
      } // System Language


      if (e.detail.systemLocale) {
        options.SystemLocale = e.detail.systemLocale;
        let shortLocale = e.detail.systemLocale.substring(0, 2);
        if (shortLocale === 'zh') shortLocale = 'cn';
        if ((0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .isLang */ .jd)(shortLocale)) options.ShortLocale = shortLocale;else options.ShortLocale = options.ParserLanguage;
      } // User's setting Language


      const displayLang = e.detail.displayLanguage;
      if ((0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .isLang */ .jd)(displayLang)) options.DisplayLanguage = displayLang;else options.DisplayLanguage = options.ParserLanguage || 'en'; // TODO: left for now as backwards compatibility with user css.  Remove this later??

      document.documentElement.classList.add(`lang-${options.DisplayLanguage}`);
      document.documentElement.lang = (0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .langToLocale */ .Go)(options.DisplayLanguage);
      this.addUnlockText(options.DisplayLanguage); // Handle processOptions after default language selection above,
      // but before css below which may load skin files.
      // processOptions needs to be called whether or not there are
      // any userOptions saved, as it sets up the defaults.

      this.savedConfig = (_await$readOptions$da = (_await$readOptions = await readOptions) === null || _await$readOptions === void 0 ? void 0 : _await$readOptions.data) !== null && _await$readOptions$da !== void 0 ? _await$readOptions$da : {};
      this.processOptions(options, (_this$savedConfig$ove = this.savedConfig[overlayName]) !== null && _this$savedConfig$ove !== void 0 ? _this$savedConfig$ove : {}, this.optionTemplates[overlayName]); // If the overlay has a "Debug" setting, set to true via the config tool,
      // then also print out user files that have been loaded.

      const debug = options.Debug !== undefined && options.Debug !== false;
      const printUserFile = debug ? x => console.log(x) : () => {
        /* noop */
      }; // With user files being arbitrary javascript, and having multiple files
      // in user folders, it's possible for later files to accidentally remove
      // things that previous files have added.  Warn about this, since most
      // users are not programmers.

      const warnOnVariableResetMap = {
        raidboss: ['Triggers']
      };
      warnOnVariableResetMap[overlayName] = warnOnVariableResetMap[overlayName] || []; // The values of each `warnOnVariableResetMap` field are initially set
      // after the first file, so that if there is only one file, there are
      // not any warnings.
      // The fields that a user file sets in Options can be anything (pun not intended)
      // and so we use `any` here.  The only operation done on this field is a !==
      // for change detection to see if the the user file has modified it.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any

      const variableTracker = {};

      if (localFiles) {
        // localFiles may be null if there is no valid user directory.
        const sortedFiles = this.sortUserFiles(Object.keys(localFiles));
        const jsFiles = this.filterUserFiles(sortedFiles, overlayName, '.js');
        const cssFiles = this.filterUserFiles(sortedFiles, overlayName, '.css');

        for (const jsFile of jsFiles) {
          try {
            var _localFiles$jsFile, _this$userFileCallbac, _this$userFileCallbac2;

            printUserFile(`local user file: ${basePath}${jsFile}`);
            this.evalUserFile((_localFiles$jsFile = localFiles[jsFile]) !== null && _localFiles$jsFile !== void 0 ? _localFiles$jsFile : '', options);

            for (const field of (_warnOnVariableResetM = warnOnVariableResetMap[overlayName]) !== null && _warnOnVariableResetM !== void 0 ? _warnOnVariableResetM : []) {
              var _warnOnVariableResetM;

              const value = variableTracker[field];

              if (value !== null && value !== undefined && value !== options[field]) {
                // Ideally users should do something like `Options.Triggers.push([etc]);`
                // instead of `Options.Triggers = [etc];`
                console.log(`*** WARNING: ${basePath}${jsFile} overwrites Options.${field} from previous files.`);
              }

              variableTracker[field] = options[field];
            }

            (_this$userFileCallbac = (_this$userFileCallbac2 = this.userFileCallbacks)[overlayName]) === null || _this$userFileCallbac === void 0 ? void 0 : _this$userFileCallbac.call(_this$userFileCallbac2, jsFile, localFiles, options, basePath);
          } catch (e) {
            // Be very visible for users.
            console.log('*** ERROR IN USER FILE ***');
            console.log(e);
          }
        } // This is a bit awkward to handle skin settings here, but
        // doing it after user config files and before user css files
        // allows user css to override skin-specific css as well.


        if (options.Skin !== undefined) this.handleSkin(options.Skin);

        for (const cssFile of cssFiles) {
          printUserFile(`local user file: ${basePath}${cssFile}`);
          const userCssText = document.createElement('style');
          const contents = localFiles[cssFile];
          if (contents !== undefined) userCssText.innerText = contents;
          const head = document.getElementsByTagName('head')[0];
          if (head) head.appendChild(userCssText);
        }
      } // Post this callback so that the js and css can be executed first.


      callback();
      void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_1__/* .callOverlayHandler */ .ae)({
        call: 'cactbotRequestState'
      });
    };

    void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_1__/* .callOverlayHandler */ .ae)({
      call: 'cactbotLoadUser',
      source: location.href,
      overlayName: overlayName
    }).then(e => {
      // Wait for DOMContentLoaded if needed.
      if (document.readyState !== 'loading') {
        void loadUser(e);
        return;
      }

      document.addEventListener('DOMContentLoaded', () => {
        void loadUser(e);
      });
    });
  }

  handleSkin(skinName) {
    if (!skinName || skinName === 'default') return;
    let basePath = document.location.toString();
    const slashIdx = basePath.lastIndexOf('/');
    if (slashIdx !== -1) basePath = basePath.substr(0, slashIdx);
    if (basePath.slice(-1) !== '/') basePath += '/';
    const skinHref = basePath + 'skins/' + skinName + '/' + skinName + '.css';
    this.appendCSSLink(skinHref);
  }

  appendJSLink(src) {
    const userJS = document.createElement('script');
    userJS.setAttribute('type', 'text/javascript');
    userJS.setAttribute('src', src);
    userJS.setAttribute('async', 'false');
    const head = document.getElementsByTagName('head')[0];
    if (head) head.appendChild(userJS);
  }

  appendCSSLink(href) {
    const userCSS = document.createElement('link');
    userCSS.setAttribute('rel', 'stylesheet');
    userCSS.setAttribute('type', 'text/css');
    userCSS.setAttribute('href', href);
    const head = document.getElementsByTagName('head')[0];
    if (head) head.appendChild(userCSS);
  }

  processOptions(options, savedConfig, template) {
    // Take options from the template, find them in savedConfig,
    // and apply them to options. This also handles setting
    // defaults for anything in the template, even if it does not
    // exist in savedConfig.
    // Not all overlays have option templates.
    if (!template) return;
    const templateOptions = template.options;

    for (const opt of templateOptions) {
      // Grab the saved value or the default to set in options.
      let value = opt.default;

      if (typeof savedConfig === 'object' && !Array.isArray(savedConfig)) {
        if (opt.id in savedConfig) {
          const newValue = savedConfig[opt.id];
          if (newValue !== undefined) value = newValue;
        }
      } // Options can provide custom logic to turn a value into options settings.
      // If this doesn't exist, just set the value directly.
      // Option template ids are identical to field names on Options.


      if (opt.setterFunc) {
        opt.setterFunc(options, value);
      } else if (opt.type === 'integer') {
        if (typeof value === 'number') options[opt.id] = Math.floor(value);else if (typeof value === 'string') options[opt.id] = parseInt(value);
      } else if (opt.type === 'float') {
        if (typeof value === 'number') options[opt.id] = value;else if (typeof value === 'string') options[opt.id] = parseFloat(value);
      } else {
        options[opt.id] = value;
      }
    } // For things like raidboss that build extra UI, also give them a chance
    // to handle anything that has been set on that UI.


    if (template.processExtraOptions) template.processExtraOptions(options, savedConfig);
  }

  addUnlockText(lang) {
    const unlockText = {
      en: '🔓 Unlocked (lock overlay before using)',
      de: '🔓 Entsperrt (Sperre das Overlay vor der Nutzung)',
      fr: '🔓 Débloqué (Bloquez l\'overlay avant utilisation)',
      ja: '🔓 ロック解除 (オーバーレイを使用する前にロックしてください)',
      cn: '🔓 已解除锁定 (你需要将此悬浮窗锁定后方可使用)',
      ko: '🔓 위치 잠금 해제됨 (사용하기 전에 위치 잠금을 설정하세요)'
    };
    const id = 'cactbot-unlocked-text';
    let textElem = document.getElementById(id);

    if (!textElem) {
      textElem = document.createElement('div');
      textElem.id = id;
      textElem.classList.add('text'); // Set element display to none in case the page has not included defaults.css.

      textElem.style.display = 'none';
      document.body.append(textElem);
    }

    textElem.innerHTML = unlockText[lang] || unlockText['en'];
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new UserConfig());

if (typeof document !== 'undefined') {
  // This event comes early and is not cached, so set up event listener immediately.
  document.addEventListener('onOverlayStateUpdate', e => {
    const docClassList = document.documentElement.classList;
    if (e.detail.isLocked) docClassList.remove('resize-handle', 'unlocked');else docClassList.add('resize-handle', 'unlocked');
  });
}

/***/ }),

/***/ 509:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _overlay_plugin_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(959);
 // TODO: it'd be nice to not repeat job names, but at least Record enforces that all are set.

const nameToJobEnum = {
  NONE: 0,
  GLA: 1,
  PGL: 2,
  MRD: 3,
  LNC: 4,
  ARC: 5,
  CNJ: 6,
  THM: 7,
  CRP: 8,
  BSM: 9,
  ARM: 10,
  GSM: 11,
  LTW: 12,
  WVR: 13,
  ALC: 14,
  CUL: 15,
  MIN: 16,
  BTN: 17,
  FSH: 18,
  PLD: 19,
  MNK: 20,
  WAR: 21,
  DRG: 22,
  BRD: 23,
  WHM: 24,
  BLM: 25,
  ACN: 26,
  SMN: 27,
  SCH: 28,
  ROG: 29,
  NIN: 30,
  MCH: 31,
  DRK: 32,
  AST: 33,
  SAM: 34,
  RDM: 35,
  BLU: 36,
  GNB: 37,
  DNC: 38,
  RPR: 39,
  SGE: 40
};
const allJobs = Object.keys(nameToJobEnum);
const allRoles = ['tank', 'healer', 'dps', 'crafter', 'gatherer', 'none'];
const tankJobs = ['GLA', 'PLD', 'MRD', 'WAR', 'DRK', 'GNB'];
const healerJobs = ['CNJ', 'WHM', 'SCH', 'AST', 'SGE'];
const meleeDpsJobs = ['PGL', 'MNK', 'LNC', 'DRG', 'ROG', 'NIN', 'SAM', 'RPR'];
const rangedDpsJobs = ['ARC', 'BRD', 'DNC', 'MCH'];
const casterDpsJobs = ['BLU', 'RDM', 'BLM', 'SMN', 'ACN', 'THM'];
const dpsJobs = [...meleeDpsJobs, ...rangedDpsJobs, ...casterDpsJobs];
const craftingJobs = ['CRP', 'BSM', 'ARM', 'GSM', 'LTW', 'WVR', 'ALC', 'CUL'];
const gatheringJobs = ['MIN', 'BTN', 'FSH'];
const stunJobs = ['BLU', ...tankJobs, ...meleeDpsJobs];
const silenceJobs = ['BLU', ...tankJobs, ...rangedDpsJobs];
const sleepJobs = ['BLM', 'BLU', ...healerJobs];
const feintJobs = [...meleeDpsJobs];
const addleJobs = [...casterDpsJobs];
const cleanseJobs = ['BLU', 'BRD', ...healerJobs];

const jobToRoleMap = (() => {
  const addToMap = (map, jobs, role) => {
    jobs.forEach(job => map.set(job, role));
  };

  const map = new Map([['NONE', 'none']]);
  addToMap(map, tankJobs, 'tank');
  addToMap(map, healerJobs, 'healer');
  addToMap(map, dpsJobs, 'dps');
  addToMap(map, craftingJobs, 'crafter');
  addToMap(map, gatheringJobs, 'gatherer');
  return map;
})();

const watchCombatantMap = [];

const shouldCancelWatch = (params, entry) => {
  if (entry.cancel) return true;
  if (params.maxDuration !== undefined && Date.now() - entry.start > params.maxDuration) return true;
  return false;
};

const defaultWatchCombatant = (params, func) => {
  return new Promise((res, rej) => {
    var _params$delay;

    const delay = (_params$delay = params.delay) !== null && _params$delay !== void 0 ? _params$delay : 1000;
    const call = {
      call: 'getCombatants'
    };
    if (params.ids) call.ids = params.ids;
    if (params.names) call.names = params.names;
    if (params.props) call.props = params.props;
    const entry = {
      cancel: false,
      start: Date.now()
    };
    watchCombatantMap.push(entry);

    const checkFunc = () => {
      if (shouldCancelWatch(params, entry)) {
        rej();
        return;
      }

      void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_0__/* .callOverlayHandler */ .ae)(call).then(response => {
        if (entry.cancel) {
          rej();
          return;
        }

        if (func(response)) res();else window.setTimeout(checkFunc, delay);
      });
    };

    window.setTimeout(checkFunc, delay);
  });
};

let watchCombatantOverride;
let clearCombatantsOverride;

const defaultClearCombatants = () => {
  while (watchCombatantMap.length > 0) {
    const watch = watchCombatantMap.pop();
    if (watch) watch.cancel = true;
  }
};

const watchCombatant = (params, func) => {
  if (watchCombatantOverride) return watchCombatantOverride(params, func);
  return defaultWatchCombatant(params, func);
};

const Util = {
  jobEnumToJob: id => {
    const job = allJobs.find(job => nameToJobEnum[job] === id);
    return job !== null && job !== void 0 ? job : 'NONE';
  },
  jobToJobEnum: job => nameToJobEnum[job],
  jobToRole: job => {
    const role = jobToRoleMap.get(job);
    return role !== null && role !== void 0 ? role : 'none';
  },
  getAllRoles: () => allRoles,
  isTankJob: job => tankJobs.includes(job),
  isHealerJob: job => healerJobs.includes(job),
  isMeleeDpsJob: job => meleeDpsJobs.includes(job),
  isRangedDpsJob: job => rangedDpsJobs.includes(job),
  isCasterDpsJob: job => casterDpsJobs.includes(job),
  isDpsJob: job => dpsJobs.includes(job),
  isCraftingJob: job => craftingJobs.includes(job),
  isGatheringJob: job => gatheringJobs.includes(job),
  isCombatJob: job => {
    return !craftingJobs.includes(job) && !gatheringJobs.includes(job);
  },
  canStun: job => stunJobs.includes(job),
  canSilence: job => silenceJobs.includes(job),
  canSleep: job => sleepJobs.includes(job),
  canCleanse: job => cleanseJobs.includes(job),
  canFeint: job => feintJobs.includes(job),
  canAddle: job => addleJobs.includes(job),
  watchCombatant: watchCombatant,
  clearWatchCombatants: () => {
    if (clearCombatantsOverride !== undefined) clearCombatantsOverride();else defaultClearCombatants();
  },
  setWatchCombatantOverride: (watchFunc, clearFunc) => {
    watchCombatantOverride = watchFunc;
    clearCombatantsOverride = clearFunc;
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Util);

/***/ }),

/***/ 588:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
  'ABloodyReunion': 560,
  'AFrostyReception': 1010,
  'APathUnveiled': 1015,
  'ARelicRebornTheChimera': 368,
  'ARelicRebornTheHydra': 369,
  'ARequiemForHeroes': 830,
  'ASleepDisturbed': 914,
  'ASpectacleForTheAges': 533,
  'AccrueEnmityFromMultipleTargets': 540,
  'Aglaia': 1054,
  'AirForceOne': 832,
  'AkadaemiaAnyder': 841,
  'AlaMhigo': 689,
  'AlexanderTheArmOfTheFather': 444,
  'AlexanderTheArmOfTheFatherSavage': 451,
  'AlexanderTheArmOfTheSon': 522,
  'AlexanderTheArmOfTheSonSavage': 531,
  'AlexanderTheBreathOfTheCreator': 581,
  'AlexanderTheBreathOfTheCreatorSavage': 585,
  'AlexanderTheBurdenOfTheFather': 445,
  'AlexanderTheBurdenOfTheFatherSavage': 452,
  'AlexanderTheBurdenOfTheSon': 523,
  'AlexanderTheBurdenOfTheSonSavage': 532,
  'AlexanderTheCuffOfTheFather': 443,
  'AlexanderTheCuffOfTheFatherSavage': 450,
  'AlexanderTheCuffOfTheSon': 521,
  'AlexanderTheCuffOfTheSonSavage': 530,
  'AlexanderTheEyesOfTheCreator': 580,
  'AlexanderTheEyesOfTheCreatorSavage': 584,
  'AlexanderTheFistOfTheFather': 442,
  'AlexanderTheFistOfTheFatherSavage': 449,
  'AlexanderTheFistOfTheSon': 520,
  'AlexanderTheFistOfTheSonSavage': 529,
  'AlexanderTheHeartOfTheCreator': 582,
  'AlexanderTheHeartOfTheCreatorSavage': 586,
  'AlexanderTheSoulOfTheCreator': 583,
  'AlexanderTheSoulOfTheCreatorSavage': 587,
  'AllsWellThatEndsInTheWell': 220,
  'AllsWellThatStartsWell': 796,
  'AlphascapeV10': 798,
  'AlphascapeV10Savage': 802,
  'AlphascapeV20': 799,
  'AlphascapeV20Savage': 803,
  'AlphascapeV30': 800,
  'AlphascapeV30Savage': 804,
  'AlphascapeV40': 801,
  'AlphascapeV40Savage': 805,
  'AlzadaalsLegacy': 1050,
  'Amaurot': 838,
  'AmdaporKeep': 167,
  'AmdaporKeepHard': 189,
  'AmhAraeng': 815,
  'AnamnesisAnyder': 898,
  'AnnoyTheVoid': 222,
  'AsTheHeartBids': 894,
  'AsTheHeavensBurn': 1012,
  'AsphodelosTheFirstCircle': 1002,
  'AsphodelosTheFirstCircleSavage': 1003,
  'AsphodelosTheFourthCircle': 1008,
  'AsphodelosTheFourthCircleSavage': 1009,
  'AsphodelosTheSecondCircle': 1004,
  'AsphodelosTheSecondCircleSavage': 1005,
  'AsphodelosTheThirdCircle': 1006,
  'AsphodelosTheThirdCircleSavage': 1007,
  'AssistAlliesInDefeatingATarget': 544,
  'Astragalos': 729,
  'AvoidAreaOfEffectAttacks': 537,
  'AzysLla': 402,
  'BaelsarsWall': 615,
  'BardamsMettle': 623,
  'BasicTrainingEnemyParties': 214,
  'BasicTrainingEnemyStrongholds': 215,
  'BattleInTheBigKeep': 396,
  'BattleOnTheBigBridge': 366,
  'BloodOnTheDeck': 708,
  'BrayfloxsLongstop': 1041,
  'BrayfloxsLongstopHard': 362,
  'CapeWestwind': 1049,
  'CastrumAbania': 661,
  'CastrumFluminis': 778,
  'CastrumMarinum': 934,
  'CastrumMarinumDrydocks': 967,
  'CastrumMarinumExtreme': 935,
  'CastrumMeridianum': 1043,
  'CentralShroud': 148,
  'CentralThanalan': 141,
  'ChocoboRaceCostaDelSol': 389,
  'ChocoboRaceSagoliiRoad': 390,
  'ChocoboRaceTranquilPaths': 391,
  'ChocoboRaceTutorial': 417,
  'CinderDrift': 897,
  'CinderDriftExtreme': 912,
  'CloudNine': 1034,
  'CoerthasCentralHighlands': 155,
  'CoerthasWesternHighlands': 397,
  'ComingClean': 860,
  'ContainmentBayP1T6': 576,
  'ContainmentBayP1T6Extreme': 577,
  'ContainmentBayS1T7': 517,
  'ContainmentBayS1T7Extreme': 524,
  'ContainmentBayZ1T9': 637,
  'ContainmentBayZ1T9Extreme': 638,
  'CopperbellMines': 1038,
  'CopperbellMinesHard': 349,
  'CrystallineConflictCustomMatchCloudNine': 1060,
  'CrystallineConflictCustomMatchThePalaistra': 1058,
  'CrystallineConflictCustomMatchTheVolcanicHeart': 1059,
  'CuriousGorgeMeetsHisMatch': 717,
  'CuttersCry': 170,
  'DarkAsTheNightSky': 713,
  'DeathUntoDawn': 977,
  'DefeatAnOccupiedTarget': 545,
  'DeltascapeV10': 691,
  'DeltascapeV10Savage': 695,
  'DeltascapeV20': 692,
  'DeltascapeV20Savage': 696,
  'DeltascapeV30': 693,
  'DeltascapeV30Savage': 697,
  'DeltascapeV40': 694,
  'DeltascapeV40Savage': 698,
  'DelubrumReginae': 936,
  'DelubrumReginaeSavage': 937,
  'Devastation': 1052,
  'DohnMheg': 821,
  'DomaCastle': 660,
  'DragonSound': 714,
  'DragonsongsRepriseUltimate': 968,
  'DunScaith': 627,
  'DzemaelDarkhold': 171,
  'EastShroud': 152,
  'EasternLaNoscea': 137,
  'EasternThanalan': 145,
  'EdensGateDescent': 850,
  'EdensGateDescentSavage': 854,
  'EdensGateInundation': 851,
  'EdensGateInundationSavage': 855,
  'EdensGateResurrection': 849,
  'EdensGateResurrectionSavage': 853,
  'EdensGateSepulture': 852,
  'EdensGateSepultureSavage': 856,
  'EdensPromiseAnamorphosis': 944,
  'EdensPromiseAnamorphosisSavage': 948,
  'EdensPromiseEternity': 945,
  'EdensPromiseEternitySavage': 949,
  'EdensPromiseLitany': 943,
  'EdensPromiseLitanySavage': 947,
  'EdensPromiseUmbra': 942,
  'EdensPromiseUmbraSavage': 946,
  'EdensVerseFulmination': 902,
  'EdensVerseFulminationSavage': 906,
  'EdensVerseFuror': 903,
  'EdensVerseFurorSavage': 907,
  'EdensVerseIconoclasm': 904,
  'EdensVerseIconoclasmSavage': 908,
  'EdensVerseRefulgence': 905,
  'EdensVerseRefulgenceSavage': 909,
  'Elpis': 961,
  'Emanation': 719,
  'EmanationExtreme': 720,
  'EmissaryOfTheDawn': 769,
  'Endwalker': 1013,
  'EngageMultipleTargets': 541,
  'Eulmore': 820,
  'EverMarchHeavensward': 1018,
  'ExecuteAComboInBattle': 539,
  'ExecuteAComboToIncreaseEnmity': 538,
  'ExecuteARangedAttackToIncreaseEnmity': 542,
  'FadedMemories': 932,
  'FinalExercise': 552,
  'FitForAQueen': 955,
  'FlickingSticksAndTakingNames': 219,
  'ForlornGlory': 1051,
  'Foundation': 418,
  'FourPlayerMahjongQuickMatchKuitanDisabled': 831,
  'Garlemald': 958,
  'Halatali': 162,
  'HalataliHard': 360,
  'HaukkeManor': 1040,
  'HaukkeManorHard': 350,
  'HealAnAlly': 549,
  'HealMultipleAllies': 550,
  'HeavenOnHighFloors11_20': 771,
  'HeavenOnHighFloors1_10': 770,
  'HeavenOnHighFloors21_30': 772,
  'HeavenOnHighFloors31_40': 782,
  'HeavenOnHighFloors41_50': 773,
  'HeavenOnHighFloors51_60': 783,
  'HeavenOnHighFloors61_70': 774,
  'HeavenOnHighFloors71_80': 784,
  'HeavenOnHighFloors81_90': 775,
  'HeavenOnHighFloors91_100': 785,
  'HellsKier': 810,
  'HellsKierExtreme': 811,
  'HellsLid': 742,
  'HeroOnTheHalfShell': 216,
  'HiddenGorge': 791,
  'HolminsterSwitch': 837,
  'HullbreakerIsle': 361,
  'HullbreakerIsleHard': 557,
  'Idyllshire': 478,
  'IlMheg': 816,
  'InFromTheCold': 1011,
  'InThalsName': 705,
  'InteractWithTheBattlefield': 548,
  'InterdimensionalRift': 690,
  'ItsProbablyATrap': 665,
  'Kholusia': 814,
  'KtisisHyperboreia': 974,
  'Kugane': 628,
  'KuganeCastle': 662,
  'KuganeOhashi': 806,
  'Labyrinthos': 956,
  'LaidToRest': 1017,
  'Lakeland': 813,
  'LegendOfTheNotSoHiddenTemple': 859,
  'LifeEphemeralPathEternal': 1023,
  'LimsaLominsaLowerDecks': 129,
  'LimsaLominsaUpperDecks': 128,
  'LongLiveTheQueen': 298,
  'LovmMasterTournament': 506,
  'LovmPlayerBattleNonRp': 591,
  'LovmPlayerBattleRp': 589,
  'LovmTournament': 590,
  'LowerLaNoscea': 135,
  'MalikahsWell': 836,
  'MareLamentorum': 959,
  'MatchAll': null,
  'MatoyasRelict': 933,
  'MatsubaMayhem': 710,
  'MemoriaMiseraExtreme': 913,
  'MessengerOfTheWinds': 834,
  'MiddleLaNoscea': 134,
  'Mist': 136,
  'MorDhona': 156,
  'MoreThanAFeeler': 221,
  'MtGulg': 822,
  'Naadam': 688,
  'Neverreap': 420,
  'NewGridania': 132,
  'NorthShroud': 154,
  'NorthernThanalan': 147,
  'NyelbertsLament': 876,
  'OceanFishing': 900,
  'OldGridania': 133,
  'OldSharlayan': 962,
  'OneLifeForOneWorld': 592,
  'OnsalHakairDanshigNaadam': 888,
  'OurCompromise': 716,
  'OurUnsungHeroes': 722,
  'OuterLaNoscea': 180,
  'Paglthan': 938,
  'PharosSirius': 160,
  'PharosSiriusHard': 510,
  'PullingPoisonPosies': 191,
  'RadzAtHan': 963,
  'RaisingTheSword': 706,
  'ReturnOfTheBull': 403,
  'RhalgrsReach': 635,
  'SagesFocus': 1022,
  'SaintMociannesArboretum': 511,
  'SaintMociannesArboretumHard': 788,
  'Sastasha': 1036,
  'SastashaHard': 387,
  'SealRockSeize': 431,
  'ShadowAndClaw': 223,
  'ShisuiOfTheVioletTides': 616,
  'SigmascapeV10': 748,
  'SigmascapeV10Savage': 752,
  'SigmascapeV20': 749,
  'SigmascapeV20Savage': 753,
  'SigmascapeV30': 750,
  'SigmascapeV30Savage': 754,
  'SigmascapeV40': 751,
  'SigmascapeV40Savage': 755,
  'Smileton': 976,
  'Snowcloak': 371,
  'SohmAl': 441,
  'SohmAlHard': 617,
  'SohrKhai': 555,
  'SolemnTrinity': 300,
  'SouthShroud': 153,
  'SouthernThanalan': 146,
  'SpecialEventI': 353,
  'SpecialEventIi': 354,
  'SpecialEventIii': 509,
  'StingingBack': 192,
  'SyrcusTower': 372,
  'Thavnair': 957,
  'TheAery': 435,
  'TheAetherochemicalResearchFacility': 438,
  'TheAitiascope': 978,
  'TheAkhAfahAmphitheatreExtreme': 378,
  'TheAkhAfahAmphitheatreHard': 377,
  'TheAkhAfahAmphitheatreUnreal': 930,
  'TheAntitower': 516,
  'TheAquapolis': 558,
  'TheAurumVale': 172,
  'TheAzimSteppe': 622,
  'TheBattleOnBekko': 711,
  'TheBindingCoilOfBahamutTurn1': 241,
  'TheBindingCoilOfBahamutTurn2': 242,
  'TheBindingCoilOfBahamutTurn3': 243,
  'TheBindingCoilOfBahamutTurn4': 244,
  'TheBindingCoilOfBahamutTurn5': 245,
  'TheBorderlandRuinsSecure': 376,
  'TheBowlOfEmbers': 1045,
  'TheBowlOfEmbersExtreme': 295,
  'TheBowlOfEmbersHard': 292,
  'TheBozjaIncident': 911,
  'TheBozjanSouthernFront': 920,
  'TheBurn': 789,
  'TheCalamityRetold': 790,
  'TheCarteneauFlatsHeliodrome': 633,
  'TheChrysalis': 426,
  'TheChurningMists': 400,
  'TheCloudDeck': 950,
  'TheCloudDeckExtreme': 951,
  'TheCopiedFactory': 882,
  'TheCrownOfTheImmaculate': 846,
  'TheCrownOfTheImmaculateExtreme': 848,
  'TheCrystarium': 819,
  'TheDancingPlague': 845,
  'TheDancingPlagueExtreme': 858,
  'TheDarkInside': 992,
  'TheDeadEnds': 973,
  'TheDiadem': 929,
  'TheDiademEasy': 512,
  'TheDiademHard': 515,
  'TheDiademHuntingGrounds': 625,
  'TheDiademHuntingGroundsEasy': 624,
  'TheDiademTrialsOfTheFury': 630,
  'TheDiademTrialsOfTheMatron': 656,
  'TheDomanEnclave': 759,
  'TheDragonsNeck': 142,
  'TheDravanianForelands': 398,
  'TheDravanianHinterlands': 399,
  'TheDrownedCityOfSkalla': 731,
  'TheDungeonsOfLyheGhiah': 879,
  'TheDuskVigil': 434,
  'TheDyingGasp': 847,
  'TheEpicOfAlexanderUltimate': 887,
  'TheExcitatron6000': 1000,
  'TheFaceOfTrueEvil': 709,
  'TheFieldsOfGloryShatter': 554,
  'TheFinalCoilOfBahamutTurn1': 193,
  'TheFinalCoilOfBahamutTurn2': 194,
  'TheFinalCoilOfBahamutTurn3': 195,
  'TheFinalCoilOfBahamutTurn4': 196,
  'TheFinalDay': 997,
  'TheFinalStepsOfFaith': 559,
  'TheForbiddenLandEurekaAnemos': 732,
  'TheForbiddenLandEurekaHydatos': 827,
  'TheForbiddenLandEurekaPagos': 763,
  'TheForbiddenLandEurekaPyros': 795,
  'TheFractalContinuum': 430,
  'TheFractalContinuumHard': 743,
  'TheFringes': 612,
  'TheGhimlytDark': 793,
  'TheGiftOfMercy': 1019,
  'TheGrandCosmos': 884,
  'TheGreatGubalLibrary': 416,
  'TheGreatGubalLibraryHard': 578,
  'TheGreatHunt': 761,
  'TheGreatHuntExtreme': 762,
  'TheGreatShipVylbrand': 954,
  'TheHardenedHeart': 873,
  'TheHarvestBegins': 1020,
  'TheHauntedManor': 571,
  'TheHeartOfTheProblem': 718,
  'TheHeroesGauntlet': 916,
  'TheHiddenCanalsOfUznair': 725,
  'TheHowlingEye': 1047,
  'TheHowlingEyeExtreme': 297,
  'TheHowlingEyeHard': 294,
  'TheHuntersLegacy': 875,
  'TheJadeStoa': 746,
  'TheJadeStoaExtreme': 758,
  'TheKeeperOfTheLake': 150,
  'TheKillingArt': 1021,
  'TheLabyrinthOfTheAncients': 174,
  'TheLimitlessBlueExtreme': 447,
  'TheLimitlessBlueHard': 436,
  'TheLochs': 621,
  'TheLostAndTheFound': 874,
  'TheLostCanalsOfUznair': 712,
  'TheLostCityOfAmdapor': 363,
  'TheLostCityOfAmdaporHard': 519,
  'TheMinstrelsBalladEndsingersAria': 998,
  'TheMinstrelsBalladHadessElegy': 885,
  'TheMinstrelsBalladHydaelynsCall': 996,
  'TheMinstrelsBalladNidhoggsRage': 566,
  'TheMinstrelsBalladShinryusDomain': 730,
  'TheMinstrelsBalladThordansReign': 448,
  'TheMinstrelsBalladTsukuyomisPain': 779,
  'TheMinstrelsBalladUltimasBane': 348,
  'TheMinstrelsBalladZodiarksFall': 993,
  'TheMothercrystal': 995,
  'TheNavel': 1046,
  'TheNavelExtreme': 296,
  'TheNavelHard': 293,
  'TheNavelUnreal': 953,
  'TheOrbonneMonastery': 826,
  'TheOrphansAndTheBrokenBlade': 715,
  'ThePalaceOfTheDeadFloors101_110': 598,
  'ThePalaceOfTheDeadFloors111_120': 599,
  'ThePalaceOfTheDeadFloors11_20': 562,
  'ThePalaceOfTheDeadFloors121_130': 600,
  'ThePalaceOfTheDeadFloors131_140': 601,
  'ThePalaceOfTheDeadFloors141_150': 602,
  'ThePalaceOfTheDeadFloors151_160': 603,
  'ThePalaceOfTheDeadFloors161_170': 604,
  'ThePalaceOfTheDeadFloors171_180': 605,
  'ThePalaceOfTheDeadFloors181_190': 606,
  'ThePalaceOfTheDeadFloors191_200': 607,
  'ThePalaceOfTheDeadFloors1_10': 561,
  'ThePalaceOfTheDeadFloors21_30': 563,
  'ThePalaceOfTheDeadFloors31_40': 564,
  'ThePalaceOfTheDeadFloors41_50': 565,
  'ThePalaceOfTheDeadFloors51_60': 593,
  'ThePalaceOfTheDeadFloors61_70': 594,
  'ThePalaceOfTheDeadFloors71_80': 595,
  'ThePalaceOfTheDeadFloors81_90': 596,
  'ThePalaceOfTheDeadFloors91_100': 597,
  'ThePalaistra': 1032,
  'ThePeaks': 620,
  'ThePhantomsFeast': 994,
  'ThePillars': 419,
  'ThePoolOfTribute': 674,
  'ThePoolOfTributeExtreme': 677,
  'ThePortaDecumana': 1048,
  'ThePraetorium': 1044,
  'ThePuppetsBunker': 917,
  'TheQitanaRavel': 823,
  'TheRaktikaGreatwood': 817,
  'TheResonant': 684,
  'TheRidoranaLighthouse': 776,
  'TheRoyalCityOfRabanastre': 734,
  'TheRoyalMenagerie': 679,
  'TheRubySea': 613,
  'TheSeaOfClouds': 401,
  'TheSeatOfSacrifice': 922,
  'TheSeatOfSacrificeExtreme': 923,
  'TheSecondCoilOfBahamutSavageTurn1': 380,
  'TheSecondCoilOfBahamutSavageTurn2': 381,
  'TheSecondCoilOfBahamutSavageTurn3': 382,
  'TheSecondCoilOfBahamutSavageTurn4': 383,
  'TheSecondCoilOfBahamutTurn1': 355,
  'TheSecondCoilOfBahamutTurn2': 356,
  'TheSecondCoilOfBahamutTurn3': 357,
  'TheSecondCoilOfBahamutTurn4': 358,
  'TheShiftingAltarsOfUznair': 794,
  'TheShiftingOubliettesOfLyheGhiah': 924,
  'TheSingularityReactor': 437,
  'TheSirensongSea': 626,
  'TheStepsOfFaith': 143,
  'TheStigmaDreamscape': 986,
  'TheStoneVigil': 1042,
  'TheStoneVigilHard': 365,
  'TheStrikingTreeExtreme': 375,
  'TheStrikingTreeHard': 374,
  'TheSunkenTempleOfQarn': 163,
  'TheSunkenTempleOfQarnHard': 367,
  'TheSwallowsCompass': 768,
  'TheTamTaraDeepcroft': 1037,
  'TheTamTaraDeepcroftHard': 373,
  'TheTempest': 818,
  'TheTempleOfTheFist': 663,
  'TheThousandMawsOfTotoRak': 1039,
  'TheTowerAtParadigmsBreach': 966,
  'TheTowerOfBabil': 969,
  'TheTowerOfZot': 952,
  'TheTripleTriadBattlehall': 579,
  'TheTwinning': 840,
  'TheUnendingCoilOfBahamutUltimate': 733,
  'TheValentionesCeremony': 741,
  'TheVault': 421,
  'TheVoidArk': 508,
  'TheVolcanicHeart': 1033,
  'TheWanderersPalace': 159,
  'TheWanderersPalaceHard': 188,
  'TheWeaponsRefrainUltimate': 777,
  'TheWeepingCityOfMhach': 556,
  'TheWhorleaterExtreme': 359,
  'TheWhorleaterHard': 281,
  'TheWhorleaterUnreal': 972,
  'TheWillOfTheMoon': 797,
  'TheWorldOfDarkness': 151,
  'TheWreathOfSnakes': 824,
  'TheWreathOfSnakesExtreme': 825,
  'ThokAstThokExtreme': 446,
  'ThokAstThokHard': 432,
  'ThornmarchExtreme': 364,
  'ThornmarchHard': 207,
  'ToCalmerSeas': 1016,
  'TripleTriadInvitationalParlor': 941,
  'TripleTriadOpenTournament': 940,
  'UldahStepsOfNald': 130,
  'UldahStepsOfThal': 131,
  'UltimaThule': 960,
  'UltimasBaneUnreal': 1035,
  'UnderTheArmor': 190,
  'UpperLaNoscea': 139,
  'UrthsFount': 394,
  'Vanaspati': 970,
  'VowsOfVirtueDeedsOfCruelty': 893,
  'WardUp': 299,
  'WesternLaNoscea': 138,
  'WesternThanalan': 140,
  'WhenClansCollide': 723,
  'WithHeartAndSteel': 707,
  'WolvesDenPier': 250,
  'WorthyOfHisBack': 1014,
  'Xelphatol': 572,
  'Yanxia': 614,
  'Zadnor': 975
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);

/***/ }),

/***/ 902:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
  1000: {
    'contentType': 9,
    'exVersion': 4,
    'name': {
      'cn': '惊奇百宝城',
      'de': 'Euphoratron',
      'en': 'The Excitatron 6000',
      'fr': 'Le Ludodrome',
      'ja': '宝物庫 エキサイトロン',
      'ko': '보물고 익사이트론'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1002: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱1',
      'de': 'Asphodelos - Erster Kreis',
      'en': 'Asphodelos: The First Circle',
      'fr': 'Les Limbes du Pandæmonium - Parvis',
      'ja': '万魔殿パンデモニウム：辺獄編1',
      'ko': '마의 전당 판데모니움: 변옥편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1003: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱1',
      'de': 'Asphodelos - Erster Kreis (episch)',
      'en': 'Asphodelos: The First Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Parvis (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編1',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1004: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱2',
      'de': 'Asphodelos - Zweiter Kreis',
      'en': 'Asphodelos: The Second Circle',
      'fr': 'Les Limbes du Pandæmonium - Cloaque',
      'ja': '万魔殿パンデモニウム：辺獄編2',
      'ko': '마의 전당 판데모니움: 변옥편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1005: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱2',
      'de': 'Asphodelos - Zweiter Kreis (episch)',
      'en': 'Asphodelos: The Second Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Cloaque (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編2',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1006: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱3',
      'de': 'Asphodelos - Dritter Kreis',
      'en': 'Asphodelos: The Third Circle',
      'fr': 'Les Limbes du Pandæmonium - Fournaise',
      'ja': '万魔殿パンデモニウム：辺獄編3',
      'ko': '마의 전당 판데모니움: 변옥편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1007: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱3',
      'de': 'Asphodelos - Dritter Kreis (episch)',
      'en': 'Asphodelos: The Third Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Fournaise (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編3',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1008: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱4',
      'de': 'Asphodelos - Vierter Kreis',
      'en': 'Asphodelos: The Fourth Circle',
      'fr': 'Les Limbes du Pandæmonium - Abîme',
      'ja': '万魔殿パンデモニウム：辺獄編4',
      'ko': '마의 전당 판데모니움: 변옥편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1009: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱4',
      'de': 'Asphodelos - Vierter Kreis (episch)',
      'en': 'Asphodelos: The Fourth Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Abîme (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編4',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1010: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '踏破风雪',
      'de': 'Ein frostiger Empfang',
      'en': 'A Frosty Reception',
      'fr': 'Un accueil glacial',
      'ja': '霜雪を踏みしめて',
      'ko': '눈서리를 밟고'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1011: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '无尽寒夜',
      'de': 'In fremder Haut',
      'en': 'In from the Cold',
      'fr': 'Le voleur de corps',
      'ja': '寒夜のこと',
      'ko': '어느 추운 밤에'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 27
  },
  1012: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '扩散的末日',
      'de': 'Rote Himmel, roter Schnee',
      'en': 'As the Heavens Burn',
      'fr': 'L\'arène des neiges',
      'ja': '拡がる終末',
      'ko': '퍼져가는 종말'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 141
  },
  1013: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '晓月之终途',
      'de': 'Endschreiter',
      'en': 'Endwalker',
      'fr': 'Arpenteur des finitudes',
      'ja': '暁月のフィナーレ',
      'ko': '효월의 종언'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 100,
    'weatherRate': 143
  },
  1014: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '上一任阿谢姆的教导',
      'de': ' Es reimt sich auf Gebell',
      'en': 'Worthy of His Back',
      'fr': 'Le défi de l\'ancienne Azem',
      'ja': '前代アゼムの手ほどき',
      'ko': '선대 아젬과의 대련'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 134
  },
  1015: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '未来之路',
      'de': 'Offen für neue Wege',
      'en': 'A Path Unveiled',
      'fr': 'Des esprits et des hommes',
      'ja': '開かれた道の先へ',
      'ko': '열린 길 저편으로'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  1016: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '驶向融合的巨轮',
      'de': 'Im Hafen des Friedens',
      'en': 'To Calmer Seas',
      'fr': 'Cap sur la paix',
      'ja': '融和への船出',
      'ko': '화합을 향한 출항'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1017: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '英魂安息',
      'de': 'Domanisches Begräbnis',
      'en': 'Laid to Rest',
      'fr': 'Des adieux domiens',
      'ja': 'ドマの弔い',
      'ko': '도마의 추도'
    },
    'offsetX': 240,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1018: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '仰望苍穹，不断迈进',
      'de': 'Der Weg zur Erneuerung',
      'en': 'Ever March Heavensward',
      'fr': 'La voie du renouveau',
      'ja': '蒼天を仰ぎ、歩み続ける',
      'ko': '창천을 보며 나아가자'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 114
  },
  1019: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '目送生者前行',
      'de': 'Trauer und Hoffnung',
      'en': 'The Gift of Mercy',
      'fr': 'Acceptation',
      'ja': '僕たちは還り、君を見送ろう',
      'ko': '우리는 돌아가 그대를 보내리'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1020: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '大镰的意义',
      'de': 'Die Bedeutung der Sense',
      'en': 'The Harvest Begins',
      'fr': 'La vraie puissance de la faux',
      'ja': '大鎌の意味',
      'ko': '큰낫의 의미'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1021: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '暗杀道',
      'de': 'Die Kunst des Tötens',
      'en': 'The Killing Art',
      'fr': 'La voie du néant',
      'ja': '暗殺道',
      'ko': '암살의 길'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  1022: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '贤者的短杖',
      'de': 'Des Weisen wundersames Werkzeug',
      'en': 'Sage\'s Focus',
      'fr': 'Les armes du sage',
      'ja': '賢者の短杖',
      'ko': '현자의 짧은 지팡이'
    },
    'offsetX': 40,
    'offsetY': 6,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1023: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '生命瞬逝，术道恒久',
      'de': 'Das Leben ist kurz, die Kunst ist lang',
      'en': 'Life Ephemeral, Path Eternal',
      'fr': 'Existences éphémères et savoir éternel',
      'ja': '人命は儚く、術のみちは永久に',
      'ko': '생명은 덧없으나 기술은 영원하리'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 50
  },
  1032: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '角力学校',
      'de': 'Die Palästra',
      'en': 'The Palaistra',
      'fr': 'Le Palestre',
      'ja': 'パライストラ'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1033: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '火山之心',
      'de': 'Das Herz des Vulkans',
      'en': 'The Volcanic Heart',
      'fr': 'Le Cœur volcanique',
      'ja': 'ヴォルカニック・ハート'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1034: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '九霄云上',
      'de': 'Wolke Sieben',
      'en': 'Cloud Nine',
      'fr': 'Le Petit Nuage',
      'ja': 'クラウドナイン'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1035: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '究极神兵幻巧战',
      'de': 'Traumprüfung - Ultima',
      'en': 'Ultima\'s Bane (Unreal)',
      'fr': 'Le fléau d\'Ultima (irréel)',
      'ja': '幻アルテマウェポン破壊作戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 31
  },
  1036: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '天然要害沙斯塔夏溶洞',
      'de': 'Sastasha',
      'en': 'Sastasha',
      'fr': 'Sastasha',
      'ja': '天然要害 サスタシャ浸食洞',
      'ko': '사스타샤 침식 동굴'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1037: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '地下灵殿塔姆·塔拉墓园',
      'de': 'Totenacker Tam-Tara',
      'en': 'The Tam–Tara Deepcroft',
      'fr': 'L\'Hypogée de Tam-Tara',
      'ja': '地下霊殿 タムタラの墓所',
      'ko': '탐타라 묘소'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 300,
    'weatherRate': 0
  },
  1038: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '封锁坑道铜铃铜山',
      'de': 'Kupferglocken-Mine',
      'en': 'Copperbell Mines',
      'fr': 'Les Mines de Clochecuivre',
      'ja': '封鎖坑道 カッパーベル銅山',
      'ko': '구리종 광산'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1039: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '监狱废墟托托·拉克千狱',
      'de': 'Tausend Löcher von Toto-Rak',
      'en': 'The Thousand Maws of Toto–Rak',
      'fr': 'Les Mille Gueules de Toto-Rak',
      'ja': '監獄廃墟 トトラクの千獄',
      'ko': '토토라크 감옥'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1040: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '名门府邸静语庄园',
      'de': 'Haukke-Herrenhaus',
      'en': 'Haukke Manor',
      'fr': 'Le Manoir des Haukke',
      'ja': '名門屋敷 ハウケタ御用邸',
      'ko': '하우케타 별궁'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1041: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '休养胜地布雷福洛克斯野营地',
      'de': 'Brüllvolx\' Langrast',
      'en': 'Brayflox\'s Longstop',
      'fr': 'Le Bivouac de Brayflox',
      'ja': '奪還支援 ブレイフロクスの野営地',
      'ko': '브레이플록스의 야영지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1042: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '对龙城塞石卫塔',
      'de': 'Steinerne Wacht',
      'en': 'The Stone Vigil',
      'fr': 'Le Vigile de Pierre',
      'ja': '城塞攻略 ストーンヴィジル',
      'ko': '돌방패 경계초소'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 27
  },
  1043: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '帝国南方堡外围激战',
      'de': 'Castrum Meridianum - Außenbereich',
      'en': 'Castrum Meridianum',
      'fr': 'Castrum Meridianum',
      'ja': '外郭攻略 カストルム・メリディアヌム',
      'ko': '카스트룸 메리디아눔'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1044: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '天幕魔导城最终决战',
      'de': 'Castrum Meridianum - Praetorium',
      'en': 'The Praetorium',
      'fr': 'Le Praetorium',
      'ja': '最終決戦 魔導城プラエトリウム',
      'ko': '마도성 프라이토리움'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1045: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '伊弗利特讨伐战',
      'de': 'Das Grab der Lohe',
      'en': 'The Bowl of Embers',
      'fr': 'Le Cratère des tisons',
      'ja': 'イフリート討伐戦',
      'ko': '이프리트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 25
  },
  1046: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '泰坦讨伐战',
      'de': 'Der Nabel',
      'en': 'The Navel',
      'fr': 'Le Nombril',
      'ja': 'タイタン討伐戦',
      'ko': '타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  1047: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '迦楼罗讨伐战',
      'de': 'Das Tosende Auge',
      'en': 'The Howling Eye',
      'fr': 'Hurlœil',
      'ja': 'ガルーダ討伐戦',
      'ko': '가루다 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  1048: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '究极神兵破坏作战',
      'de': 'Porta Decumana',
      'en': 'The Porta Decumana',
      'fr': 'Porta Decumana',
      'ja': 'アルテマウェポン破壊作戦'
    },
    'offsetX': 772,
    'offsetY': 600,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1049: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'cn': '里塔提恩强攻战',
      'de': 'Kap Westwind',
      'en': 'Cape Westwind',
      'fr': 'Le Cap Vendouest',
      'ja': 'リットアティン強襲戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1050: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '近东秘宝阿尔扎达尔海底遗迹群',
      'de': 'Alzadaals Vermächtnis',
      'en': 'Alzadaal\'s Legacy',
      'fr': 'Le legs d\'Alzadaal',
      'ja': '近東秘宝 アルザダール海底遺跡群'
    },
    'offsetX': 15,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1051: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '涅尔瓦的帝国',
      'de': 'Nervas Reich',
      'en': 'Forlorn Glory',
      'fr': 'Nerva, le patriote',
      'ja': 'ネルウァの帝国'
    },
    'offsetX': -230,
    'offsetY': -250,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  1052: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'cn': '拉哈布雷亚讨伐战',
      'de': 'Das Antlitz der Kaltblütigkeit',
      'en': 'Devastation',
      'fr': 'Le Praetorium en flammes',
      'ja': 'アシエン・ラハブレア討伐戦'
    },
    'offsetX': 704,
    'offsetY': -480,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1054: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '灿烂神域阿格莱亚',
      'de': 'Aglaia',
      'en': 'Aglaia',
      'fr': 'Domaine divin - Aglaé',
      'ja': '輝ける神域 アグライア'
    },
    'offsetX': -80,
    'offsetY': -550,
    'sizeFactor': 200,
    'weatherRate': 147
  },
  1058: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '水晶冲突（角力学校：自定赛）',
      'de': 'Crystalline Conflict: Die Palästra (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - The Palaistra)',
      'fr': 'Crystalline Conflict (partie personnalisée - Le Palestre)',
      'ja': 'クリスタルコンフリクト(パライストラ：カスタムマッチ)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1059: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '水晶冲突（火山之心：自定赛）',
      'de': 'Crystalline Conflict: Das Herz des Vulkans (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - The Volcanic Heart)',
      'fr': 'Crystalline Conflict (partie personnalisée - Le Cœur volcanique)',
      'ja': 'クリスタルコンフリクト(ヴォルカニック・ハート：カスタムマッチ)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1060: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '水晶冲突（九霄云上：自定赛）',
      'de': 'Crystalline Conflict: Wolke Sieben (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - Cloud Nine)',
      'fr': 'Crystalline Conflict (partie personnalisée - Le Petit Nuage)',
      'ja': 'クリスタルコンフリクト(クラウドナイン：カスタムマッチ)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  128: {
    'exVersion': 0,
    'name': {
      'cn': '利姆萨·罗敏萨上层甲板',
      'de': 'Obere Decks',
      'en': 'Limsa Lominsa Upper Decks',
      'fr': 'Limsa Lominsa - Le Tillac',
      'ja': 'リムサ・ロミンサ：上甲板層',
      'ko': '림사 로민사 상층 갑판'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 14
  },
  129: {
    'exVersion': 0,
    'name': {
      'cn': '利姆萨·罗敏萨下层甲板',
      'de': 'Untere Decks',
      'en': 'Limsa Lominsa Lower Decks',
      'fr': 'Limsa Lominsa - L\'Entrepont',
      'ja': 'リムサ・ロミンサ：下甲板層',
      'ko': '림사 로민사 하층 갑판'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 15
  },
  130: {
    'exVersion': 0,
    'name': {
      'cn': '乌尔达哈现世回廊',
      'de': 'Nald-Kreuzgang',
      'en': 'Ul\'dah - Steps of Nald',
      'fr': 'Ul\'dah - Faubourg de Nald',
      'ja': 'ウルダハ：ナル回廊',
      'ko': '울다하 날 회랑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 7
  },
  131: {
    'exVersion': 0,
    'name': {
      'cn': '乌尔达哈来生回廊',
      'de': 'Thal-Kreuzgang',
      'en': 'Ul\'dah - Steps of Thal',
      'fr': 'Ul\'dah - Faubourg de Thal',
      'ja': 'ウルダハ：ザル回廊',
      'ko': '울다하 달 회랑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 8
  },
  132: {
    'exVersion': 0,
    'name': {
      'cn': '格里达尼亚新街',
      'de': 'Neu-Gridania',
      'en': 'New Gridania',
      'fr': 'Nouvelle Gridania',
      'ja': 'グリダニア：新市街',
      'ko': '그리다니아 신시가지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 1
  },
  133: {
    'exVersion': 0,
    'name': {
      'cn': '格里达尼亚旧街',
      'de': 'Alt-Gridania',
      'en': 'Old Gridania',
      'fr': 'Vieille Gridania',
      'ja': 'グリダニア：旧市街',
      'ko': '그리다니아 구시가지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 2
  },
  134: {
    'exVersion': 0,
    'name': {
      'cn': '中拉诺西亚',
      'de': 'Zentrales La Noscea',
      'en': 'Middle La Noscea',
      'fr': 'Noscea centrale',
      'ja': '中央ラノシア',
      'ko': '중부 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 16
  },
  135: {
    'exVersion': 0,
    'name': {
      'cn': '拉诺西亚低地',
      'de': 'Unteres La Noscea',
      'en': 'Lower La Noscea',
      'fr': 'Basse-Noscea',
      'ja': '低地ラノシア',
      'ko': '저지 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 17
  },
  136: {
    'exVersion': 0,
    'name': {
      'cn': '海雾村',
      'de': 'Dorf des Nebels',
      'en': 'Mist',
      'fr': 'Brumée',
      'ja': 'ミスト・ヴィレッジ',
      'ko': '안갯빛 마을'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 14
  },
  137: {
    'exVersion': 0,
    'name': {
      'cn': '东拉诺西亚',
      'de': 'Östliches La Noscea',
      'en': 'Eastern La Noscea',
      'fr': 'Noscea orientale',
      'ja': '東ラノシア',
      'ko': '동부 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 18
  },
  138: {
    'exVersion': 0,
    'name': {
      'cn': '西拉诺西亚',
      'de': 'Westliches La Noscea',
      'en': 'Western La Noscea',
      'fr': 'Noscea occidentale',
      'ja': '西ラノシア',
      'ko': '서부 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 19
  },
  139: {
    'exVersion': 0,
    'name': {
      'cn': '拉诺西亚高地',
      'de': 'Oberes La Noscea',
      'en': 'Upper La Noscea',
      'fr': 'Haute-Noscea',
      'ja': '高地ラノシア',
      'ko': '고지 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 20
  },
  140: {
    'exVersion': 0,
    'name': {
      'cn': '西萨纳兰',
      'de': 'Westliches Thanalan',
      'en': 'Western Thanalan',
      'fr': 'Thanalan occidental',
      'ja': '西ザナラーン',
      'ko': '서부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 9
  },
  141: {
    'exVersion': 0,
    'name': {
      'cn': '中萨纳兰',
      'de': 'Zentrales Thanalan',
      'en': 'Central Thanalan',
      'fr': 'Thanalan central',
      'ja': '中央ザナラーン',
      'ko': '중부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 10
  },
  142: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '艾玛吉娜杯斗技大会决赛',
      'de': 'Das Drachenhals-Kolosseum',
      'en': 'The Dragon\'s Neck',
      'fr': 'Le Col du dragon',
      'ja': 'アマジナ杯闘技会決勝戦',
      'ko': '아마지나배 투기대회 결승전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  143: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '皇都伊修加德保卫战',
      'de': 'Der Schicksalsweg',
      'en': 'The Steps of Faith',
      'fr': 'Le Siège de la sainte Cité d\'Ishgard',
      'ja': '皇都イシュガルド防衛戦',
      'ko': '성도 이슈가르드 방어전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  145: {
    'exVersion': 0,
    'name': {
      'cn': '东萨纳兰',
      'de': 'Östliches Thanalan',
      'en': 'Eastern Thanalan',
      'fr': 'Thanalan oriental',
      'ja': '東ザナラーン',
      'ko': '동부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 11
  },
  146: {
    'exVersion': 0,
    'name': {
      'cn': '南萨纳兰',
      'de': 'Südliches Thanalan',
      'en': 'Southern Thanalan',
      'fr': 'Thanalan méridional',
      'ja': '南ザナラーン',
      'ko': '남부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 12
  },
  147: {
    'exVersion': 0,
    'name': {
      'cn': '北萨纳兰',
      'de': 'Nördliches Thanalan',
      'en': 'Northern Thanalan',
      'fr': 'Thanalan septentrional',
      'ja': '北ザナラーン',
      'ko': '북부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 13
  },
  148: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林中央林区',
      'de': 'Tiefer Wald',
      'en': 'Central Shroud',
      'fr': 'Forêt centrale',
      'ja': '黒衣森：中央森林',
      'ko': '검은장막 숲 중부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  150: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '幻龙残骸密约之塔',
      'de': 'Hüter des Sees',
      'en': 'The Keeper of the Lake',
      'fr': 'Le Gardien du lac',
      'ja': '幻龍残骸 黙約の塔',
      'ko': '묵약의 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 74
  },
  151: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '水晶塔 暗之世界',
      'de': 'Die Welt der Dunkelheit',
      'en': 'The World of Darkness',
      'fr': 'La Tour de Cristal - Monde des Ténèbres',
      'ja': 'クリスタルタワー：闇の世界',
      'ko': '크리스탈 타워: 어둠의 세계'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  152: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林东部林区',
      'de': 'Ostwald',
      'en': 'East Shroud',
      'fr': 'Forêt de l\'est',
      'ja': '黒衣森：東部森林',
      'ko': '검은장막 숲 동부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 4
  },
  153: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林南部林区',
      'de': 'Südwald',
      'en': 'South Shroud',
      'fr': 'Forêt du sud',
      'ja': '黒衣森：南部森林',
      'ko': '검은장막 숲 남부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 5
  },
  154: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林北部林区',
      'de': 'Nordwald',
      'en': 'North Shroud',
      'fr': 'Forêt du nord',
      'ja': '黒衣森：北部森林',
      'ko': '검은장막 숲 북부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 6
  },
  155: {
    'exVersion': 0,
    'name': {
      'cn': '库尔札斯中央高地',
      'de': 'Zentrales Hochland von Coerthas',
      'en': 'Coerthas Central Highlands',
      'fr': 'Hautes terres du Coerthas central',
      'ja': 'クルザス中央高地',
      'ko': '커르다스 중앙고지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  156: {
    'exVersion': 0,
    'name': {
      'cn': '摩杜纳',
      'de': 'Mor Dhona',
      'en': 'Mor Dhona',
      'fr': 'Mor Dhona',
      'ja': 'モードゥナ',
      'ko': '모르도나'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 22
  },
  159: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '神灵圣域放浪神古神殿',
      'de': 'Palast des Wanderers',
      'en': 'The Wanderer\'s Palace',
      'fr': 'Le Palais du Vagabond',
      'ja': '旅神聖域 ワンダラーパレス',
      'ko': '방랑자의 궁전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  160: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '领航明灯天狼星灯塔',
      'de': 'Pharos Sirius',
      'en': 'Pharos Sirius',
      'fr': 'Le Phare de Sirius',
      'ja': '怪鳥巨塔 シリウス大灯台',
      'ko': '시리우스 대등대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  162: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '魔兽领域日影地修炼所',
      'de': 'Halatali',
      'en': 'Halatali',
      'fr': 'Halatali',
      'ja': '魔獣領域 ハラタリ修練所',
      'ko': '할라탈리 수련장'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  163: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '古代遗迹喀恩埋没圣堂',
      'de': 'Versunkener Tempel von Qarn',
      'en': 'The Sunken Temple of Qarn',
      'fr': 'Le Temple enseveli de Qarn',
      'ja': '遺跡探索 カルン埋没寺院',
      'ko': '카른의 무너진 사원'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  167: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '邪教驻地无限城古堡',
      'de': 'Die Ruinen von Amdapor',
      'en': 'Amdapor Keep',
      'fr': 'Le Château d\'Amdapor',
      'ja': '邪教排撃 古城アムダプール',
      'ko': '옛 암다포르 성'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  170: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '流沙迷宫樵鸣洞',
      'de': 'Sägerschrei',
      'en': 'Cutter\'s Cry',
      'fr': 'Le Gouffre hurlant',
      'ja': '流砂迷宮 カッターズクライ',
      'ko': '나무꾼의 비명'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  171: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '山中战线泽梅尔要塞',
      'de': 'Die Feste Dzemael',
      'en': 'Dzemael Darkhold',
      'fr': 'La Forteresse de Dzemael',
      'ja': '掃討作戦 ゼーメル要塞',
      'ko': '제멜 요새'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  172: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '毒雾洞窟黄金谷',
      'de': 'Goldklamm',
      'en': 'The Aurum Vale',
      'fr': 'Le Val d\'Aurum',
      'ja': '霧中行軍 オーラムヴェイル',
      'ko': '금빛 골짜기'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  174: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '水晶塔 古代人迷宫',
      'de': 'Kristallturm - Das Labyrinth der Alten',
      'en': 'The Labyrinth of the Ancients',
      'fr': 'La Tour de Cristal - Dédale antique',
      'ja': 'クリスタルタワー：古代の民の迷宮',
      'ko': '크리스탈 타워: 고대인의 미궁'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  180: {
    'exVersion': 0,
    'name': {
      'cn': '拉诺西亚外地',
      'de': 'Äußeres La Noscea',
      'en': 'Outer La Noscea',
      'fr': 'Noscea extérieure',
      'ja': '外地ラノシア',
      'ko': '외지 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 24
  },
  188: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '武装圣域放浪神古神殿',
      'de': 'Palast des Wanderers (schwer)',
      'en': 'The Wanderer\'s Palace (Hard)',
      'fr': 'Le Palais du Vagabond (brutal)',
      'ja': '武装聖域 ワンダラーパレス (Hard)',
      'ko': '방랑자의 궁전(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  189: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '邪念妖地无限城古堡',
      'de': 'Die Ruinen von Amdapor (schwer)',
      'en': 'Amdapor Keep (Hard)',
      'fr': 'Le Château d\'Amdapor (brutal)',
      'ja': '邪念排撃 古城アムダプール (Hard)',
      'ko': '옛 암다포르 성(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  190: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐彷徨死灵！',
      'de': 'Bockmanns Gefolge',
      'en': 'Under the Armor',
      'fr': 'Chasse au fantôme fantoche',
      'ja': '彷徨う死霊を討て！',
      'ko': '방황하는 사령을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  191: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '驱除剧毒妖花！',
      'de': 'Unkraut jäten',
      'en': 'Pulling Poison Posies',
      'fr': 'Opération fleurs du mal',
      'ja': '有毒妖花を駆除せよ！',
      'ko': '독성 요괴꽃을 제거하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 4
  },
  192: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '消灭恶徒团伙寄生蜂团！',
      'de': 'Ins Wespennest stechen',
      'en': 'Stinging Back',
      'fr': 'Expédition punitive contre les Ventrerouge',
      'ja': '無法者「似我蜂団」を撃滅せよ！',
      'ko': '무법자 집단 \'나나니단\'을 섬멸하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 5
  },
  193: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章1',
      'de': 'Verschlungene Schatten 3 - 1',
      'en': 'The Final Coil of Bahamut - Turn 1',
      'fr': 'L\'Abîme de Bahamut I',
      'ja': '大迷宮バハムート：真成編1',
      'ko': '대미궁 바하무트: 진성편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  194: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章2',
      'de': 'Verschlungene Schatten 3 - 2',
      'en': 'The Final Coil of Bahamut - Turn 2',
      'fr': 'L\'Abîme de Bahamut II',
      'ja': '大迷宮バハムート：真成編2',
      'ko': '대미궁 바하무트: 진성편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  195: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章3',
      'de': 'Verschlungene Schatten 3 - 3',
      'en': 'The Final Coil of Bahamut - Turn 3',
      'fr': 'L\'Abîme de Bahamut III',
      'ja': '大迷宮バハムート：真成編3',
      'ko': '대미궁 바하무트: 진성편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  196: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章4',
      'de': 'Verschlungene Schatten 3 - 4',
      'en': 'The Final Coil of Bahamut - Turn 4',
      'fr': 'L\'Abîme de Bahamut IV',
      'ja': '大迷宮バハムート：真成編4',
      'ko': '대미궁 바하무트: 진성편 4'
    },
    'offsetX': -448,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 44
  },
  207: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '莫古力贤王歼灭战',
      'de': 'Königliche Konfrontation (schwer)',
      'en': 'Thornmarch (Hard)',
      'fr': 'La Lisière de ronces (brutal)',
      'ja': '善王モグル・モグXII世討滅戦',
      'ko': '선왕 모그루 모그 XII세 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 30
  },
  214: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '完成集团战训练！',
      'de': 'Einer für alle, alle für einen',
      'en': 'Basic Training: Enemy Parties',
      'fr': 'Entraînement<Indent/>: groupes d\'ennemis',
      'ja': '集団戦訓練をくぐり抜けろ！',
      'ko': '집단전 훈련을 완수하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 16
  },
  215: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '突破所有关门，讨伐最深处的敌人！',
      'de': 'Sturmkommando',
      'en': 'Basic Training: Enemy Strongholds',
      'fr': 'Entraînement<Indent/>: in<SoftHyphen/>fil<SoftHyphen/>tra<SoftHyphen/>tion en base ennemie',
      'ja': '全関門を突破し、最深部の敵を討て！',
      'ko': '관문을 돌파하고 최심부의 적을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 9
  },
  216: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '捕获金币龟！',
      'de': 'Gil oder Leben',
      'en': 'Hero on the Half Shell',
      'fr': 'Reconquête d\'une carapace escamotée',
      'ja': 'ギルガメを捕獲せよ！',
      'ko': '길거북을 사로잡아라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 10
  },
  219: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '击溃哥布林炸弹军团！',
      'de': 'Bombige Goblins',
      'en': 'Flicking Sticks and Taking Names',
      'fr': 'Les Gobelins bombardiers',
      'ja': '爆弾魔ゴブリン軍団を撃滅せよ！',
      'ko': '폭탄광 고블린 군단을 섬멸하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  220: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐梦幻之布拉奇希奥！',
      'de': 'Briaxio ausschalten',
      'en': 'All\'s Well that Ends in the Well',
      'fr': 'Briaxio à bras raccourcis',
      'ja': '夢幻のブラキシオを討て！',
      'ko': '몽환의 브라크시오를 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 5
  },
  221: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐污染源头魔界花！',
      'de': 'Tödliches Rankenspiel',
      'en': 'More than a Feeler',
      'fr': 'Sus au morbol pollueur',
      'ja': '汚染源モルボルを討て！',
      'ko': '오염원 몰볼을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 20
  },
  222: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐坑道中出现的妖异！',
      'de': 'Gefahr aus dem Nichts',
      'en': 'Annoy the Void',
      'fr': 'Buso l\'immolateur',
      'ja': '坑道に現れた妖異ブソを討て！',
      'ko': '갱도에 나타난 요마 부소를 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 17
  },
  223: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '注意无敌的眷属，讨伐大型妖异！',
      'de': 'Kampf gegen Schatten',
      'en': 'Shadow and Claw',
      'fr': 'Ombres et griffes',
      'ja': '無敵の眷属を従えし、大型妖異を討て！',
      'ko': '무적의 부하를 조종하는 요마를 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  241: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章1',
      'de': 'Verschlungene Schatten 1',
      'en': 'The Binding Coil of Bahamut - Turn 1',
      'fr': 'Le Labyrinthe de Bahamut I',
      'ja': '大迷宮バハムート：邂逅編1',
      'ko': '대미궁 바하무트: 해후편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  242: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章2',
      'de': 'Verschlungene Schatten 2',
      'en': 'The Binding Coil of Bahamut - Turn 2',
      'fr': 'Le Labyrinthe de Bahamut II',
      'ja': '大迷宮バハムート：邂逅編2',
      'ko': '대미궁 바하무트: 해후편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  243: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章3',
      'de': 'Verschlungene Schatten 3',
      'en': 'The Binding Coil of Bahamut - Turn 3',
      'fr': 'Le Labyrinthe de Bahamut III',
      'ja': '大迷宮バハムート：邂逅編3',
      'ko': '대미궁 바하무트: 해후편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  244: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章4',
      'de': 'Verschlungene Schatten 4',
      'en': 'The Binding Coil of Bahamut - Turn 4',
      'fr': 'Le Labyrinthe de Bahamut IV',
      'ja': '大迷宮バハムート：邂逅編4',
      'ko': '대미궁 바하무트: 해후편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  245: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章5',
      'de': 'Verschlungene Schatten 5',
      'en': 'The Binding Coil of Bahamut - Turn 5',
      'fr': 'Le Labyrinthe de Bahamut V',
      'ja': '大迷宮バハムート：邂逅編5',
      'ko': '대미궁 바하무트: 해후편 5'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  250: {
    'exVersion': 0,
    'name': {
      'cn': '狼狱停船场',
      'de': 'Wolfshöhlen-Pier',
      'en': 'Wolves\' Den Pier',
      'fr': 'Jetée de l\'Antre des loups',
      'ja': 'ウルヴズジェイル係船場',
      'ko': '늑대우리 부두'
    },
    'offsetX': -77,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 29
  },
  281: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '利维亚桑歼灭战',
      'de': 'Götterdämmerung - Leviathan',
      'en': 'The <Emphasis>Whorleater</Emphasis> (Hard)',
      'fr': 'Le Briseur de marées (brutal)',
      'ja': '真リヴァイアサン討滅戦',
      'ko': '진 리바이어선 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  292: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '伊弗利特歼灭战',
      'de': 'Götterdämmerung - Ifrit',
      'en': 'The Bowl of Embers (Hard)',
      'fr': 'Le Cratère des tisons (brutal)',
      'ja': '真イフリート討滅戦',
      'ko': '진 이프리트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 25
  },
  293: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '泰坦歼灭战',
      'de': 'Götterdämmerung - Titan',
      'en': 'The Navel (Hard)',
      'fr': 'Le Nombril (brutal)',
      'ja': '真タイタン討滅戦',
      'ko': '진 타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  294: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '迦楼罗歼灭战',
      'de': 'Götterdämmerung - Garuda',
      'en': 'The Howling Eye (Hard)',
      'fr': 'Hurlœil (brutal)',
      'ja': '真ガルーダ討滅戦',
      'ko': '진 가루다 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  295: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '伊弗利特歼殛战',
      'de': 'Zenit der Götter - Ifrit',
      'en': 'The Bowl of Embers (Extreme)',
      'fr': 'Le Cratère des tisons (extrême)',
      'ja': '極イフリート討滅戦',
      'ko': '극 이프리트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 25
  },
  296: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '泰坦歼殛战',
      'de': 'Zenit der Götter - Titan',
      'en': 'The Navel (Extreme)',
      'fr': 'Le Nombril (extrême)',
      'ja': '極タイタン討滅戦',
      'ko': '극 타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  297: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '迦楼罗歼殛战',
      'de': 'Zenit der Götter - Garuda',
      'en': 'The Howling Eye (Extreme)',
      'fr': 'Hurlœil (extrême)',
      'ja': '極ガルーダ討滅戦',
      'ko': '극 가루다 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  298: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐爆弹怪的女王！',
      'de': 'Miss Bombastic',
      'en': 'Long Live the Queen',
      'fr': 'Longue vie à la Reine',
      'ja': 'ボムを率いる「ボムクイーン」を討て！',
      'ko': '봄을 거느린 \'봄 여왕\'을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  299: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '歼灭特殊阵型的妖异！',
      'de': 'Unzertrennlich',
      'en': 'Ward Up',
      'fr': 'Quintettes infernaux',
      'ja': '不気味な陣形を組む妖異をせん滅せよ！',
      'ko': '불길한 진형을 짜는 요마를 섬멸하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 22
  },
  300: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '制止三方混战的巨人族，守住遗物！',
      'de': 'Wuchtige Dreifaltigkeit',
      'en': 'Solemn Trinity',
      'fr': 'Trinité sinistre',
      'ja': '三つ巴の巨人族を制し、遺物を守れ！',
      'ko': '세 거인족을 제압하여 유물을 지켜내라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 22
  },
  348: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '究极神兵破坏作战',
      'de': 'Heldenlied von Ultima',
      'en': 'The Minstrel\'s Ballad: Ultima\'s Bane',
      'fr': 'Le fléau d\'Ultima',
      'ja': '究極幻想 アルテマウェポン破壊作戦',
      'ko': '알테마 웨폰 파괴작전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 31
  },
  349: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '骚乱坑道铜铃铜山',
      'de': 'Kupferglocken-Mine (schwer)',
      'en': 'Copperbell Mines (Hard)',
      'fr': 'Les Mines de Clochecuivre (brutal)',
      'ja': '騒乱坑道 カッパーベル銅山 (Hard)',
      'ko': '구리종 광산(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  350: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '恶灵府邸静语庄园',
      'de': 'Haukke-Herrenhaus (schwer)',
      'en': 'Haukke Manor (Hard)',
      'fr': 'Le Manoir des Haukke (brutal)',
      'ja': '妖異屋敷 ハウケタ御用邸 (Hard)',
      'ko': '하우케타 별궁(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  353: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '活动挑战2',
      'de': 'Event-Inhalt 1',
      'en': 'Special Event I',
      'fr': 'Défi spécial I',
      'ja': 'イベント用コンテンツ：1',
      'ko': '이벤트용 임무: 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  354: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '活动挑战3',
      'de': 'Event-Inhalt 2',
      'en': 'Special Event II',
      'fr': 'Défi spécial II',
      'ja': 'イベント用コンテンツ：2',
      'ko': '이벤트용 임무: 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 103
  },
  355: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章1',
      'de': 'Verschlungene Schatten 2 - 1',
      'en': 'The Second Coil of Bahamut - Turn 1',
      'fr': 'Les Méandres de Bahamut I',
      'ja': '大迷宮バハムート：侵攻編1',
      'ko': '대미궁 바하무트: 침공편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  356: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章2',
      'de': 'Verschlungene Schatten 2 - 2',
      'en': 'The Second Coil of Bahamut - Turn 2',
      'fr': 'Les Méandres de Bahamut II',
      'ja': '大迷宮バハムート：侵攻編2',
      'ko': '대미궁 바하무트: 침공편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  357: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章3',
      'de': 'Verschlungene Schatten 2 - 3',
      'en': 'The Second Coil of Bahamut - Turn 3',
      'fr': 'Les Méandres de Bahamut III',
      'ja': '大迷宮バハムート：侵攻編3',
      'ko': '대미궁 바하무트: 침공편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  358: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章4',
      'de': 'Verschlungene Schatten 2 - 4',
      'en': 'The Second Coil of Bahamut - Turn 4',
      'fr': 'Les Méandres de Bahamut IV',
      'ja': '大迷宮バハムート：侵攻編4',
      'ko': '대미궁 바하무트: 침공편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  359: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '利维亚桑歼殛战',
      'de': 'Zenit der Götter - Leviathan',
      'en': 'The <Emphasis>Whorleater</Emphasis> (Extreme)',
      'fr': 'Le Briseur de marées (extrême)',
      'ja': '極リヴァイアサン討滅戦',
      'ko': '극 리바이어선 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  360: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '剑斗领域日影地修炼所',
      'de': 'Halatali (schwer)',
      'en': 'Halatali (Hard)',
      'fr': 'Halatali (brutal)',
      'ja': '剣闘領域 ハラタリ修練所 (Hard)',
      'ko': '할라탈리 수련장(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  361: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '财宝传说破舰岛',
      'de': 'Schiffbrecher-Insel',
      'en': 'Hullbreaker Isle',
      'fr': 'L\'Île de Crèvecarène',
      'ja': '財宝伝説 ハルブレーカー・アイル',
      'ko': '난파선의 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  362: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '纷争要地布雷福洛克斯野营地',
      'de': 'Brüllvolx\' Langrast (schwer)',
      'en': 'Brayflox\'s Longstop (Hard)',
      'fr': 'Le Bivouac de Brayflox (brutal)',
      'ja': '盟友支援 ブレイフロクスの野営地 (Hard)',
      'ko': '브레이플록스의 야영지(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 37
  },
  363: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '腐坏遗迹无限城市街古迹',
      'de': 'Historisches Amdapor',
      'en': 'The Lost City of Amdapor',
      'fr': 'Les Vestiges de la cité d\'Amdapor',
      'ja': '腐敗遺跡 古アムダプール市街',
      'ko': '옛 암다포르 시가지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  364: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '莫古力贤王歼殛战',
      'de': 'Königliche Konfrontation (extrem)',
      'en': 'Thornmarch (Extreme)',
      'fr': 'La Lisière de ronces (extrême)',
      'ja': '極王モグル・モグXII世討滅戦',
      'ko': '극왕 모그루 모그 XII세 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 30
  },
  365: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '激战城塞石卫塔',
      'de': 'Steinerne Wacht (schwer)',
      'en': 'The Stone Vigil (Hard)',
      'fr': 'Le Vigile de Pierre (brutal)',
      'ja': '城塞奪回 ストーンヴィジル (Hard)',
      'ko': '돌방패 경계초소(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  366: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '大桥上的决斗',
      'de': 'Duell auf der großen Brücke',
      'en': 'Battle on the Big Bridge',
      'fr': 'Affrontement sur le grand pont',
      'ja': 'ギルガメッシュ討伐戦',
      'ko': '길가메시 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  367: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '苏醒遗迹喀恩埋没圣堂',
      'de': 'Versunkener Tempel von Qarn (schwer)',
      'en': 'The Sunken Temple of Qarn (Hard)',
      'fr': 'Le Temple enseveli de Qarn (brutal)',
      'ja': '遺跡救援 カルン埋没寺院 (Hard)',
      'ko': '카른의 무너진 사원(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 41
  },
  368: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '死化奇美拉讨伐战',
      'de': 'Kampf gegen die Dhorme-Chimära',
      'en': 'A Relic Reborn: the Chimera',
      'fr': 'La chimère dhorme du Coerthas',
      'ja': 'ドルムキマイラ討伐戦',
      'ko': '도름 키마이라 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  369: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '海德拉讨伐战',
      'de': 'Kampf gegen die Hydra',
      'en': 'A Relic Reborn: the Hydra',
      'fr': 'L\'hydre d\'Halatali',
      'ja': 'ハイドラ討伐戦',
      'ko': '하이드라 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  371: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '凛冽洞天披雪大冰壁',
      'de': 'Das Schneekleid',
      'en': 'Snowcloak',
      'fr': 'Manteneige',
      'ja': '氷結潜窟 スノークローク大氷壁',
      'ko': '얼음외투 대빙벽'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  372: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '水晶塔 希尔科斯塔',
      'de': 'Kristallturm - Der Syrcus-Turm',
      'en': 'Syrcus Tower',
      'fr': 'La Tour de Cristal - Tour de Syrcus',
      'ja': 'クリスタルタワー：シルクスの塔',
      'ko': '크리스탈 타워: 시르쿠스 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  373: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '惨剧灵殿塔姆·塔拉墓园',
      'de': 'Totenacker Tam-Tara (schwer)',
      'en': 'The Tam–Tara Deepcroft (Hard)',
      'fr': 'L\'Hypogée de Tam-Tara (brutal)',
      'ja': '惨劇霊殿 タムタラの墓所 (Hard)',
      'ko': '탐타라 묘소(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 300,
    'weatherRate': 0
  },
  374: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '拉姆歼灭战',
      'de': 'Götterdämmerung - Ramuh',
      'en': 'The Striking Tree (Hard)',
      'fr': 'L\'Arbre du jugement (brutal)',
      'ja': '真ラムウ討滅戦',
      'ko': '진 라무 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 43
  },
  375: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '拉姆歼殛战',
      'de': 'Zenit der Götter - Ramuh',
      'en': 'The Striking Tree (Extreme)',
      'fr': 'L\'Arbre du jugement (extrême)',
      'ja': '極ラムウ討滅戦',
      'ko': '극 라무 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 43
  },
  376: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '周边遗迹群 (阵地战)',
      'de': 'Äußere Ruinen (Sicherung)',
      'en': 'The Borderland Ruins (Secure)',
      'fr': 'Les Ruines frontalières (annexion)',
      'ja': '外縁遺跡群 (制圧戦)',
      'ko': '외곽 유적지대(제압전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  377: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '希瓦歼灭战',
      'de': 'Götterdämmerung - Shiva',
      'en': 'The Akh Afah Amphitheatre (Hard)',
      'fr': 'L\'Amphithéâtre d\'Akh Afah (brutal)',
      'ja': '真シヴァ討滅戦',
      'ko': '진 시바 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  378: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '希瓦歼殛战',
      'de': 'Zenit der Götter - Shiva',
      'en': 'The Akh Afah Amphitheatre (Extreme)',
      'fr': 'L\'Amphithéâtre d\'Akh Afah (extrême)',
      'ja': '極シヴァ討滅戦',
      'ko': '극 시바 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  380: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章1',
      'de': 'Verschlungene Schatten 2 - 1 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 1',
      'fr': 'Les Méandres de Bahamut I (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編1',
      'ko': '대미궁 바하무트: 침공편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  381: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章2',
      'de': 'Verschlungene Schatten 2 - 2 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 2',
      'fr': 'Les Méandres de Bahamut II (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編2',
      'ko': '대미궁 바하무트: 침공편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  382: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章3',
      'de': 'Verschlungene Schatten 2 - 3 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 3',
      'fr': 'Les Méandres de Bahamut III (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編3',
      'ko': '대미궁 바하무트: 침공편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  383: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章4',
      'de': 'Verschlungene Schatten 2 - 4 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 4',
      'fr': 'Les Méandres de Bahamut IV (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編4',
      'ko': '대미궁 바하무트: 침공편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  387: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '逆转要害沙斯塔夏溶洞',
      'de': 'Sastasha (schwer)',
      'en': 'Sastasha (Hard)',
      'fr': 'Sastasha (brutal)',
      'ja': '逆襲要害 サスタシャ浸食洞 (Hard)',
      'ko': '사스타샤 침식 동굴(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  389: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：太阳海岸',
      'de': 'Chocobo-Rennen: Sonnenküste',
      'en': 'Chocobo Race: Costa del Sol',
      'fr': 'Course de chocobos<Indent/>: Costa del Sol',
      'ja': 'チョコボレース：コスタ・デル・ソル',
      'ko': '초코보 경주: 코스타 델 솔'
    },
    'offsetX': -472,
    'offsetY': -424,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  390: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：荒野大道',
      'de': 'Chocobo-Rennen: Sagolii-Straße',
      'en': 'Chocobo Race: Sagolii Road',
      'fr': 'Course de chocobos<Indent/>: Route de Sagolii',
      'ja': 'チョコボレース：サゴリーロード',
      'ko': '초코보 경주: 사골리 사막'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  391: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：恬静小路',
      'de': 'Chocobo-Rennen: Pfad der Seelenruhe',
      'en': 'Chocobo Race: Tranquil Paths',
      'fr': 'Course de chocobos<Indent/>: Sentes tranquilles',
      'ja': 'チョコボレース：トランキルパス',
      'ko': '초코보 경주: 고요한 야영지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  394: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '奥丁歼灭战',
      'de': 'Jenseits Urths Quelle',
      'en': 'Urth\'s Fount',
      'fr': 'La Fontaine d\'Urth',
      'ja': '闘神オーディン討滅戦',
      'ko': '투신 오딘 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 45
  },
  396: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '无限城的死斗',
      'de': 'Revanche in den Ruinen',
      'en': 'Battle in the Big Keep',
      'fr': 'Revanche au vieux château',
      'ja': '真ギルガメッシュ討滅戦',
      'ko': '진 길가메시 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  397: {
    'exVersion': 1,
    'name': {
      'cn': '库尔札斯西部高地',
      'de': 'Westliches Hochland von Coerthas',
      'en': 'Coerthas Western Highlands',
      'fr': 'Hautes terres du Coerthas occidental',
      'ja': 'クルザス西部高地',
      'ko': '커르다스 서부고지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 49
  },
  398: {
    'exVersion': 1,
    'name': {
      'cn': '龙堡参天高地',
      'de': 'Dravanisches Vorland',
      'en': 'The Dravanian Forelands',
      'fr': 'Avant-pays dravanien',
      'ja': '高地ドラヴァニア',
      'ko': '고지 드라바니아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 50
  },
  399: {
    'exVersion': 1,
    'name': {
      'cn': '龙堡内陆低地',
      'de': 'Dravanisches Hinterland',
      'en': 'The Dravanian Hinterlands',
      'fr': 'Arrière-pays dravanien',
      'ja': '低地ドラヴァニア',
      'ko': '저지 드라바니아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 51
  },
  400: {
    'exVersion': 1,
    'name': {
      'cn': '翻云雾海',
      'de': 'Wallende Nebel',
      'en': 'The Churning Mists',
      'fr': 'L\'Écume des cieux de Dravania',
      'ja': 'ドラヴァニア雲海',
      'ko': '드라바니아 구름바다'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 52
  },
  401: {
    'exVersion': 1,
    'name': {
      'cn': '阿巴拉提亚云海',
      'de': 'Abalathisches Wolkenmeer',
      'en': 'The Sea of Clouds',
      'fr': 'L\'Écume des cieux d\'Abalathia',
      'ja': 'アバラシア雲海',
      'ko': '아발라시아 구름바다'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 53
  },
  402: {
    'exVersion': 1,
    'name': {
      'cn': '魔大陆阿济兹拉',
      'de': 'Azys Lla',
      'en': 'Azys Lla',
      'fr': 'Azys Lla',
      'ja': 'アジス・ラー',
      'ko': '아지스 라'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 54
  },
  403: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '英雄归来',
      'de': 'Verrat der Qalyana',
      'en': 'Return of the Bull',
      'fr': 'Retour au bercail',
      'ja': '英雄の帰還',
      'ko': '영웅의 귀환'
    },
    'offsetX': -250,
    'offsetY': 128,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  416: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '学识宝库迦巴勒幻想图书馆',
      'de': 'Große Gubal-Bibliothek',
      'en': 'The Great Gubal Library',
      'fr': 'La Grande bibliothèque de Gubal',
      'ja': '禁書回収 グブラ幻想図書館',
      'ko': '구브라 환상도서관'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  417: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：竞赛教学',
      'de': 'Chocobo-Rennen: Übungsbahn',
      'en': 'Chocobo Race: Tutorial',
      'fr': 'Course d\'appentissage',
      'ja': 'チョコボレース：チュートリアル',
      'ko': '초코보 경주: 튜토리얼'
    },
    'offsetX': 0,
    'offsetY': -690,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  418: {
    'exVersion': 1,
    'name': {
      'cn': '伊修加德基础层',
      'de': 'Fundamente',
      'en': 'Foundation',
      'fr': 'Ishgard - L\'Assise',
      'ja': 'イシュガルド：下層',
      'ko': '이슈가르드 하층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 47
  },
  419: {
    'exVersion': 1,
    'name': {
      'cn': '伊修加德砥柱层',
      'de': 'Strebewerk',
      'en': 'The Pillars',
      'fr': 'Ishgard - Les Contreforts',
      'ja': 'イシュガルド：上層',
      'ko': '이슈가르드 상층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 48
  },
  420: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '空中神域不获岛',
      'de': 'Nimmerreich',
      'en': 'Neverreap',
      'fr': 'Nalloncques',
      'ja': '神域浮島 ネバーリープ',
      'ko': '거두지 않는 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  421: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '圣教中枢伊修加德教皇厅',
      'de': 'Erzbasilika',
      'en': 'The Vault',
      'fr': 'La Voûte',
      'ja': '強硬突入 イシュガルド教皇庁',
      'ko': '이슈가르드 교황청'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  426: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '那布里亚勒斯讨伐战',
      'de': 'Chrysalis',
      'en': 'The Chrysalis',
      'fr': 'La Chrysalide',
      'ja': 'アシエン・ナプリアレス討伐戦',
      'ko': '아씨엔 나브리알레스 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  430: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '博物战舰无限回廊',
      'de': 'Die Fraktal-Kontinuum',
      'en': 'The Fractal Continuum',
      'fr': 'Le Continuum fractal',
      'ja': '博物戦艦 フラクタル・コンティニアム',
      'ko': '무한연속 박물함'
    },
    'offsetX': 0,
    'offsetY': -213,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  431: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '尘封秘岩 (争夺战)',
      'de': 'Robbenholm (Eroberung)',
      'en': 'Seal Rock (Seize)',
      'fr': 'Le Rocher des tréfonds (invasion)',
      'ja': 'シールロック (争奪戦)',
      'ko': '봉인된 바위섬(쟁탈전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 59
  },
  432: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '罗波那歼灭战',
      'de': 'Götterdämmerung - Ravana',
      'en': 'Thok ast Thok (Hard)',
      'fr': 'Thok ast Thok (brutal)',
      'ja': '真ラーヴァナ討滅戦',
      'ko': '진 라바나 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 57
  },
  434: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '冰雪废堡暮卫塔',
      'de': 'Abendrot-Wacht',
      'en': 'The Dusk Vigil',
      'fr': 'Le Vigile du Crépuscule',
      'ja': '廃砦捜索 ダスクヴィジル',
      'ko': '어스름 요새'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  435: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '邪龙王座龙巢神殿',
      'de': 'Nest des Drachen',
      'en': 'The Aery',
      'fr': 'L\'Aire',
      'ja': '邪竜血戦 ドラゴンズエアリー',
      'ko': '용의 둥지'
    },
    'offsetX': -40,
    'offsetY': 55,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  436: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '俾斯麦歼灭战',
      'de': 'Götterdämmerung - Bismarck',
      'en': 'The Limitless Blue (Hard)',
      'fr': 'L\'Immensité bleue (brutal)',
      'ja': '真ビスマルク討滅戦',
      'ko': '진 비스마르크 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  437: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '圆桌骑士歼灭战',
      'de': 'Singularitäts-Reaktor',
      'en': 'The Singularity Reactor',
      'fr': 'Le Réacteur de singularité',
      'ja': 'ナイツ・オブ・ラウンド討滅戦',
      'ko': '나이츠 오브 라운드 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 56
  },
  438: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '血战苍穹魔科学研究所',
      'de': 'Ätherochemisches For<SoftHyphen/>schungs<SoftHyphen/>labor',
      'en': 'The Aetherochemical Research Facility',
      'fr': 'Le Laboratoire de magismologie',
      'ja': '蒼天聖戦 魔科学研究所',
      'ko': '마과학 연구소'
    },
    'offsetX': -18,
    'offsetY': 149,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  441: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天山绝顶索姆阿尔灵峰',
      'de': 'Sohm Al',
      'en': 'Sohm Al',
      'fr': 'Sohm Al',
      'ja': '霊峰踏破 ソーム・アル',
      'ko': '솜 알'
    },
    'offsetX': 185,
    'offsetY': 51,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  442: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章1',
      'de': 'Alexander - Faust des Vaters',
      'en': 'Alexander - The Fist of the Father',
      'fr': 'Alexander - Le Poing du Père',
      'ja': '機工城アレキサンダー：起動編1',
      'ko': '기공성 알렉산더: 기동편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  443: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章2',
      'de': 'Alexander - Elle des Vaters',
      'en': 'Alexander - The Cuff of the Father',
      'fr': 'Alexander - Le Poignet du Père',
      'ja': '機工城アレキサンダー：起動編2',
      'ko': '기공성 알렉산더: 기동편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  444: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章3',
      'de': 'Alexander - Arm des Vaters',
      'en': 'Alexander - The Arm of the Father',
      'fr': 'Alexander - Le Bras du Père',
      'ja': '機工城アレキサンダー：起動編3',
      'ko': '기공성 알렉산더: 기동편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  445: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章4',
      'de': 'Alexander - Last des Vaters',
      'en': 'Alexander - The Burden of the Father',
      'fr': 'Alexander - Le Fardeau du Père',
      'ja': '機工城アレキサンダー：起動編4',
      'ko': '기공성 알렉산더: 기동편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  446: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '罗波那歼殛战',
      'de': 'Zenit der Götter - Ravana',
      'en': 'Thok ast Thok (Extreme)',
      'fr': 'Thok ast Thok (extrême)',
      'ja': '極ラーヴァナ討滅戦',
      'ko': '극 라바나 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 57
  },
  447: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '俾斯麦歼殛战',
      'de': 'Zenit der Götter - Bismarck',
      'en': 'The Limitless Blue (Extreme)',
      'fr': 'L\'Immensité bleue (extrême)',
      'ja': '極ビスマルク討滅戦',
      'ko': '극 비스마르크 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  448: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '圆桌骑士幻想歼灭战',
      'de': 'Heldenlied von Thordans Fall',
      'en': 'The Minstrel\'s Ballad: Thordan\'s Reign',
      'fr': 'Le règne de Thordan',
      'ja': '蒼天幻想 ナイツ・オブ・ラウンド討滅戦',
      'ko': '극 나이츠 오브 라운드 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 56
  },
  449: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章1',
      'de': 'Alexander - Faust des Vaters (episch)',
      'en': 'Alexander - The Fist of the Father (Savage)',
      'fr': 'Alexander - Le Poing du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編1',
      'ko': '기공성 알렉산더: 기동편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  450: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章2',
      'de': 'Alexander - Elle des Vaters (episch)',
      'en': 'Alexander - The Cuff of the Father (Savage)',
      'fr': 'Alexander - Le Poignet du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編2',
      'ko': '기공성 알렉산더: 기동편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  451: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章3',
      'de': 'Alexander - Arm des Vaters (episch)',
      'en': 'Alexander - The Arm of the Father (Savage)',
      'fr': 'Alexander - Le Bras du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編3',
      'ko': '기공성 알렉산더: 기동편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  452: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章4',
      'de': 'Alexander - Last des Vaters (episch)',
      'en': 'Alexander - The Burden of the Father (Savage)',
      'fr': 'Alexander - Le Fardeau du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編4',
      'ko': '기공성 알렉산더: 기동편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  478: {
    'exVersion': 1,
    'name': {
      'cn': '田园郡',
      'de': 'Frohehalde',
      'en': 'Idyllshire',
      'fr': 'Idyllée',
      'ja': 'イディルシャイア',
      'ko': '이딜샤이어'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 55
  },
  506: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：大赛对战（人机对战）',
      'de': 'Kampf der Trabanten: Turnier (gegen Arenameister)',
      'en': 'LoVM: Master Tournament',
      'fr': 'Bataille de tournoi contre l\'ordinateur',
      'ja': 'LoVM：大会対戦 (CPU対戦)',
      'ko': '꼬마 친구 공방전: 대회 대결(인공 지능 대결)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  508: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '魔航船虚无方舟',
      'de': 'Die Nichts-Arche',
      'en': 'The Void Ark',
      'fr': 'L\'Arche du néant',
      'ja': '魔航船ヴォイドアーク',
      'ko': '보이드의 방주'
    },
    'offsetX': 289,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 37
  },
  509: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '活动挑战1',
      'de': 'Event-Inhalt 3',
      'en': 'Special Event III',
      'fr': 'Défi spécial III',
      'ja': 'イベント用コンテンツ：3',
      'ko': '이벤트용 임무: 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  510: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '地脉灵灯天狼星灯塔',
      'de': 'Pharos Sirius (schwer)',
      'en': 'Pharos Sirius (Hard)',
      'fr': 'Le Phare de Sirius (brutal)',
      'ja': '制圧巨塔 シリウス大灯台 (Hard)',
      'ko': '시리우스 대등대(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  511: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '草木庭园圣茉夏娜植物园',
      'de': 'Sankt Mocianne-Arboretum',
      'en': 'Saint Mocianne\'s Arboretum',
      'fr': 'L\'Arboretum Sainte-Mocianne',
      'ja': '草木庭園 聖モシャーヌ植物園',
      'ko': '성 모샨 식물원'
    },
    'offsetX': 40,
    'offsetY': 6,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  512: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛白昼探索',
      'de': 'Das Diadem (leicht)',
      'en': 'The Diadem (Easy)',
      'fr': 'Le Diadème (facile)',
      'ja': '雲海探索 ディアデム諸島 (Easy)',
      'ko': '디아뎀 제도(쉬움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 60
  },
  515: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛夜晚探索',
      'de': 'Das Diadem (schwer)',
      'en': 'The Diadem (Hard)',
      'fr': 'Le Diadème (brutal)',
      'ja': '雲海探索 ディアデム諸島 (Hard)',
      'ko': '디아뎀 제도(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 62
  },
  516: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '星海空间颠倒塔',
      'de': 'Antiturm',
      'en': 'The Antitower',
      'fr': 'L\'Antitour',
      'ja': '星海観測 逆さの塔',
      'ko': '거꾸로 선 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  517: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '萨菲洛特歼灭战',
      'de': 'Götterdämmerung - Sephirot',
      'en': 'Containment Bay S1T7',
      'fr': 'Unité de contention S1P7',
      'ja': '魔神セフィロト討滅戦',
      'ko': '마신 세피로트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 66
  },
  519: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '神圣遗迹无限城市街古迹',
      'de': 'Historisches Amdapor (schwer)',
      'en': 'The Lost City of Amdapor (Hard)',
      'fr': 'Les Vestiges de la cité d\'Amdapor (brutal)',
      'ja': '神聖遺跡 古アムダプール市街 (Hard)',
      'ko': '옛 암다포르 시가지(어려움)'
    },
    'offsetX': 64,
    'offsetY': 315,
    'sizeFactor': 200,
    'weatherRate': 63
  },
  520: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章1',
      'de': 'Alexander - Faust des Sohnes',
      'en': 'Alexander - The Fist of the Son',
      'fr': 'Alexander - Le Poing du Fils',
      'ja': '機工城アレキサンダー：律動編1',
      'ko': '기공성 알렉산더: 율동편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  521: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章2',
      'de': 'Alexander - Elle des Sohnes',
      'en': 'Alexander - The Cuff of the Son',
      'fr': 'Alexander - Le Poignet du Fils',
      'ja': '機工城アレキサンダー：律動編2',
      'ko': '기공성 알렉산더: 율동편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  522: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章3',
      'de': 'Alexander - Arm des Sohnes',
      'en': 'Alexander - The Arm of the Son',
      'fr': 'Alexander - Le Bras du Fils',
      'ja': '機工城アレキサンダー：律動編3',
      'ko': '기공성 알렉산더: 율동편 3'
    },
    'offsetX': -110,
    'offsetY': -170,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  523: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章4',
      'de': 'Alexander - Last des Sohnes',
      'en': 'Alexander - The Burden of the Son',
      'fr': 'Alexander - Le Fardeau du Fils',
      'ja': '機工城アレキサンダー：律動編4',
      'ko': '기공성 알렉산더: 율동편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  524: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '萨菲洛特歼殛战',
      'de': 'Zenit der Götter - Sephirot',
      'en': 'Containment Bay S1T7 (Extreme)',
      'fr': 'Unité de contention S1P7 (extrême)',
      'ja': '極魔神セフィロト討滅戦',
      'ko': '극 마신 세피로트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 66
  },
  529: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章1',
      'de': 'Alexander - Faust des Sohnes (episch)',
      'en': 'Alexander - The Fist of the Son (Savage)',
      'fr': 'Alexander - Le Poing du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編1',
      'ko': '기공성 알렉산더: 율동편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  530: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章2',
      'de': 'Alexander - Elle des Sohnes (episch)',
      'en': 'Alexander - The Cuff of the Son (Savage)',
      'fr': 'Alexander - Le Poignet du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編2',
      'ko': '기공성 알렉산더: 율동편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  531: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章3',
      'de': 'Alexander - Arm des Sohnes (episch)',
      'en': 'Alexander - The Arm of the Son (Savage)',
      'fr': 'Alexander - Le Bras du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編3',
      'ko': '기공성 알렉산더: 율동편(영웅) 3'
    },
    'offsetX': -110,
    'offsetY': -170,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  532: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章4',
      'de': 'Alexander - Last des Sohnes (episch)',
      'en': 'Alexander - The Burden of the Son (Savage)',
      'fr': 'Alexander - Le Fardeau du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編4',
      'ko': '기공성 알렉산더: 율동편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  533: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '四国联合军演',
      'de': 'Truppenübung der Eorzäischen Allianz',
      'en': 'A Spectacle for the Ages',
      'fr': 'La grande manœuvre éorzéenne',
      'ja': '四国合同演習',
      'ko': '4개국 합동 훈련'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  537: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '躲避范围攻击',
      'de': 'Flächenangriffen ausweichen',
      'en': 'Avoid Area of Effect Attacks',
      'fr': 'Éviter les attaques à aire d\'effet',
      'ja': '範囲攻撃を避けよう！',
      'ko': '범위 공격을 피하자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  538: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '掌握仇恨连击',
      'de': 'Mit Kombos Feindseligkeit auf sich ziehen',
      'en': 'Execute a Combo to Increase Enmity',
      'fr': 'Générer de l\'inimitié avec un combo',
      'ja': 'コンボで敵視を集めよう！',
      'ko': '콤보를 이어 적개심을 끌자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  539: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '控制敌人的仇恨',
      'de': 'Kombos im Kampf einsetzen',
      'en': 'Execute a Combo in Battle',
      'fr': 'Effectuer le combo en combat',
      'ja': '実戦でコンボに挑戦しよう！',
      'ko': '실전에서 콤보를 사용해보자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  540: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '控制多个敌人的仇恨',
      'de': 'Feindseligkeit mehrerer Gegner auf sich ziehen',
      'en': 'Accrue Enmity from Multiple Targets',
      'fr': 'Attirer l\'inimitié de plusieurs ennemis sur soi',
      'ja': '複数の敵から敵視を集めよう！',
      'ko': '다수의 적에게서 적개심을 끌자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  541: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '实战控制多个敌人的仇恨',
      'de': 'Gegen mehrere Gegner auf einmal kämpfen',
      'en': 'Engage Multiple Targets',
      'fr': 'Affronter plusieurs ennemis',
      'ja': '実戦で複数の敵と戦ってみよう！',
      'ko': '실전에서 다수의 적과 싸워보자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  542: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '控制远处敌人的仇恨',
      'de': 'Aus der Ferne Feindseligkeit auf sich ziehen',
      'en': 'Execute a Ranged Attack to Increase Enmity',
      'fr': 'Générer de l\'inimitié à distance',
      'ja': '遠距離から敵視を集めよう！',
      'ko': '멀리서 적개심을 끌자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  543: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '留心增援的敌人',
      'de': 'Feindliche Verstärkung aufhalten',
      'en': 'Engage Enemy Reinforcements',
      'fr': 'Faire face à des renforts ennemis',
      'ja': '敵の増援に対応しよう！',
      'ko': '적 지원군에 대처하자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  544: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '配合防护职业打倒单个敌人',
      'de': 'Gegner gemeinsam besiegen',
      'en': 'Assist Allies in Defeating a Target',
      'fr': 'Vaincre un ennemi en assistant des alliés',
      'ja': '味方と協力して敵を倒そう！',
      'ko': '파티원과 협력하여 적을 물리치자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  545: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '配合防护职业打倒多个敌人',
      'de': 'Den Gegner eines Verbündeten besiegen',
      'en': 'Defeat an Occupied Target',
      'fr': 'Vaincre un ennemi occupé par un allié',
      'ja': '味方が引きつけている敵を倒そう！',
      'ko': '파티원과 같은 적을 공격하자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  546: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '躲避范围攻击的同时进行战斗',
      'de': 'Angriffen ausweichen',
      'en': 'Avoid Engaged Targets',
      'fr': 'Combattre en évitant les attaques ennemies',
      'ja': '敵の攻撃を避けながら戦おう！',
      'ko': '적의 공격을 피하면서 싸우자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  548: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '灵活运用场地机关',
      'de': 'Mit dem Gelände interagieren',
      'en': 'Interact with the Battlefield',
      'fr': 'Interagir avec le décor en combat',
      'ja': 'ギミックを活用して戦おう！',
      'ko': '특수 장치를 활용하며 싸우자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  549: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '治疗防护职业',
      'de': 'Verbündete heilen',
      'en': 'Heal an Ally',
      'fr': 'Soigner un allié',
      'ja': '味方を回復しよう！',
      'ko': '파티원을 회복시키자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  550: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '治疗小队队员',
      'de': 'Mehrere Verbündete heilen',
      'en': 'Heal Multiple Allies',
      'fr': 'Soigner plusieurs alliés',
      'ja': '複数の味方を回復しよう！',
      'ko': '다수의 파티원을 회복시키자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  552: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '最终训练',
      'de': 'Letzte Übung',
      'en': 'Final Exercise',
      'fr': 'Exercice final',
      'ja': '最終訓練！',
      'ko': '마지막 훈련!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  554: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '荣誉野 (碎冰战)',
      'de': 'Feld der Ehre (Zersplitterung)',
      'en': 'The Fields of Glory (Shatter)',
      'fr': 'Les Champs de la Gloire (brise-glace)',
      'ja': 'フィールド・オブ・グローリー (砕氷戦)',
      'ko': '영광의 평원(쇄빙전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 67
  },
  555: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天龙宫殿忆罪宫',
      'de': 'Sohr Khai',
      'en': 'Sohr Khai',
      'fr': 'Sohr Khai',
      'ja': '天竜宮殿 ソール・カイ',
      'ko': '소르 카이'
    },
    'offsetX': 370,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  556: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '禁忌城邦玛哈',
      'de': 'Die Stadt der Tränen',
      'en': 'The Weeping City of Mhach',
      'fr': 'La Cité défendue de Mhach',
      'ja': '禁忌都市マハ',
      'ko': '금기도시 마하'
    },
    'offsetX': -40,
    'offsetY': -40,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  557: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '黑涡传说破舰岛',
      'de': 'Schiffbrecher-Insel (schwer)',
      'en': 'Hullbreaker Isle (Hard)',
      'fr': 'L\'Île de Crèvecarène (brutal)',
      'ja': '黒渦伝説 ハルブレーカー・アイル (Hard)',
      'ko': '난파선의 섬(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 68
  },
  558: {
    'contentType': 9,
    'exVersion': 0,
    'name': {
      'cn': '水城宝物库',
      'de': 'Aquapolis',
      'en': 'The Aquapolis',
      'fr': 'L\'Aquapole',
      'ja': '宝物庫 アクアポリス',
      'ko': '보물고 아쿠아폴리스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  559: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '尼德霍格征龙战',
      'de': 'Der letzte Schicksalsweg',
      'en': 'The Final Steps of Faith',
      'fr': 'La Dernière avancée de la Foi',
      'ja': 'ニーズヘッグ征竜戦',
      'ko': '니드호그 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  560: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '雷古拉·范·休著斯追击战',
      'de': 'Blutiges Wieder<SoftHyphen/>sehen',
      'en': 'A Bloody Reunion',
      'fr': 'Course-poursuite dans le laboratoire',
      'ja': 'レグラ・ヴァン・ヒュドルス追撃戦',
      'ko': '레굴라 반 히드루스 추격전'
    },
    'offsetX': -18,
    'offsetY': 149,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  561: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下1～10层',
      'de': 'Palast der Toten (Ebenen 1-10)',
      'en': 'The Palace of the Dead (Floors 1-10)',
      'fr': 'Le Palais des morts (sous-sols 1-10)',
      'ja': '死者の宮殿 B1～B10',
      'ko': '망자의 궁전 B1~B10'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  562: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下11～20层',
      'de': 'Palast der Toten (Ebenen 11-20)',
      'en': 'The Palace of the Dead (Floors 11-20)',
      'fr': 'Le Palais des morts (sous-sols 11-20)',
      'ja': '死者の宮殿 B11～B20',
      'ko': '망자의 궁전 B11~B20'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  563: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下21～30层',
      'de': 'Palast der Toten (Ebenen 21-30)',
      'en': 'The Palace of the Dead (Floors 21-30)',
      'fr': 'Le Palais des morts (sous-sols 21-30)',
      'ja': '死者の宮殿 B21～B30',
      'ko': '망자의 궁전 B21~B30'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  564: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下31～40层',
      'de': 'Palast der Toten (Ebenen 31-40)',
      'en': 'The Palace of the Dead (Floors 31-40)',
      'fr': 'Le Palais des morts (sous-sols 31-40)',
      'ja': '死者の宮殿 B31～B40',
      'ko': '망자의 궁전 B31~B40'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  565: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下41～50层',
      'de': 'Palast der Toten (Ebenen 41-50)',
      'en': 'The Palace of the Dead (Floors 41-50)',
      'fr': 'Le Palais des morts (sous-sols 41-50)',
      'ja': '死者の宮殿 B41～B50',
      'ko': '망자의 궁전 B41~B50'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  566: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '尼德霍格传奇征龙战',
      'de': 'Das Lied von Nidhoggs letztem Ruf',
      'en': 'The Minstrel\'s Ballad: Nidhogg\'s Rage',
      'fr': 'L\'ire de Nidhogg',
      'ja': '極ニーズヘッグ征竜戦',
      'ko': '극 니드호그 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  571: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '亡灵府邸闹鬼庄园',
      'de': 'Das Geisterschloss',
      'en': 'The Haunted Manor',
      'fr': 'Le Manoir hanté',
      'ja': '亡霊屋敷 ホーンテッドマナー',
      'ko': '유령의 집'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  572: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '险峻峡谷塞尔法特尔溪谷',
      'de': 'Xelphatol',
      'en': 'Xelphatol',
      'fr': 'Xelphatol',
      'ja': '峻厳渓谷 ゼルファトル',
      'ko': '젤파톨'
    },
    'offsetX': -148,
    'offsetY': 35,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  576: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '索菲娅歼灭战',
      'de': 'Götterdämmerung - Sophia',
      'en': 'Containment Bay P1T6',
      'fr': 'Unité de contention P1P6',
      'ja': '女神ソフィア討滅戦',
      'ko': '여신 소피아 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 69
  },
  577: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '索菲娅歼殛战',
      'de': 'Zenit der Götter - Sophia',
      'en': 'Containment Bay P1T6 (Extreme)',
      'fr': 'Unité de contention P1P6 (extrême)',
      'ja': '極女神ソフィア討滅戦',
      'ko': '극 여신 소피아 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 69
  },
  578: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '秘本宝库迦巴勒幻想图书馆',
      'de': 'Große Gubal-Bibliothek (schwer)',
      'en': 'The Great Gubal Library (Hard)',
      'fr': 'La Grande bibliothèque de Gubal (brutal)',
      'ja': '稀書回収 グブラ幻想図書館 (Hard)',
      'ko': '구브라 환상도서관(어려움)'
    },
    'offsetX': 116,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  579: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '九宫幻卡：幻卡对局室',
      'de': 'Triple Triad: Weltensalon',
      'en': 'The Triple Triad Battlehall',
      'fr': 'Arène Triple Triade',
      'ja': 'トリプルトライアド：カードバトルルーム',
      'ko': '트리플 트라이어드: 카드 대결장'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 800,
    'weatherRate': 0
  },
  580: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章1',
      'de': 'Alexander - Augen des Schöpfers',
      'en': 'Alexander - The Eyes of the Creator',
      'fr': 'Alexander - Les Yeux du Créateur',
      'ja': '機工城アレキサンダー：天動編1',
      'ko': '기공성 알렉산더: 천동편 1'
    },
    'offsetX': 75,
    'offsetY': 14,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  581: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章2',
      'de': 'Alexander - Atem des Schöpfers',
      'en': 'Alexander - The Breath of the Creator',
      'fr': 'Alexander - Le Souffle du Créateur',
      'ja': '機工城アレキサンダー：天動編2',
      'ko': '기공성 알렉산더: 천동편 2'
    },
    'offsetX': 0,
    'offsetY': -80,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  582: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章3',
      'de': 'Alexander - Herz des Schöpfers',
      'en': 'Alexander - The Heart of the Creator',
      'fr': 'Alexander - Le Cœur du Créateur',
      'ja': '機工城アレキサンダー：天動編3',
      'ko': '기공성 알렉산더: 천동편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  583: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章4',
      'de': 'Alexander - Seele des Schöpfers',
      'en': 'Alexander - The Soul of the Creator',
      'fr': 'Alexander - L\'Âme du Créateur',
      'ja': '機工城アレキサンダー：天動編4',
      'ko': '기공성 알렉산더: 천동편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  584: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章1',
      'de': 'Alexander - Augen des Schöpfers (episch)',
      'en': 'Alexander - The Eyes of the Creator (Savage)',
      'fr': 'Alexander - Les Yeux du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編1',
      'ko': '기공성 알렉산더: 천동편(영웅) 1'
    },
    'offsetX': 75,
    'offsetY': 14,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  585: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章2',
      'de': 'Alexander - Atem des Schöpfers (episch)',
      'en': 'Alexander - The Breath of the Creator (Savage)',
      'fr': 'Alexander - Le Souffle du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編2',
      'ko': '기공성 알렉산더: 천동편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': -80,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  586: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章3',
      'de': 'Alexander - Herz des Schöpfers (episch)',
      'en': 'Alexander - The Heart of the Creator (Savage)',
      'fr': 'Alexander - Le Cœur du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編3',
      'ko': '기공성 알렉산더: 천동편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  587: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章4',
      'de': 'Alexander - Seele des Schöpfers (episch)',
      'en': 'Alexander - The Soul of the Creator (Savage)',
      'fr': 'Alexander - L\'Âme du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編4',
      'ko': '기공성 알렉산더: 천동편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  589: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：玩家对战（绩点赛）',
      'de': 'Kampf der Trabanten: Gegen Spieler (um RP)',
      'en': 'LoVM: Player Battle (RP)',
      'fr': 'Bataille simple contre un joueur (avec PR)',
      'ja': 'LoVM：プレイヤー対戦 (RP変動あり)',
      'ko': '꼬마 친구 공방전: 플레이어 대결(RP 변동 있음)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  590: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：大赛对战（玩家对战）',
      'de': 'Kampf der Trabanten: Turnier (gegen Spieler)',
      'en': 'LoVM: Tournament',
      'fr': 'Bataille de tournoi contre des joueurs',
      'ja': 'LoVM：大会対戦 (プレイヤー対戦）',
      'ko': '꼬마 친구 공방전: 대회 대결(플레이어 대결)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  591: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：玩家对战（无绩点赛）',
      'de': 'Kampf der Trabanten: Gegen Spieler (ohne RP)',
      'en': 'LoVM: Player Battle (Non-RP)',
      'fr': 'Bataille simple contre un joueur (sans PR)',
      'ja': 'LoVM：プレイヤー対戦 (RP変動なし)',
      'ko': '꼬마 친구 공방전: 플레이어 대결(RP 변동 없음)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  592: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '纠缠不清的宿命',
      'de': 'Weltenübergreifendes Schicksal',
      'en': 'One Life for One World',
      'fr': 'Destins entrecroisés',
      'ja': '絡み合う宿命',
      'ko': '뒤얽히는 숙명'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  593: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下51～60层',
      'de': 'Palast der Toten (Ebenen 51 - 60)',
      'en': 'The Palace of the Dead (Floors 51-60)',
      'fr': 'Le Palais des morts (sous-sols 51-60)',
      'ja': '死者の宮殿 B51～B60',
      'ko': '망자의 궁전 B51~B60'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  594: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下61～70层',
      'de': 'Palast der Toten (Ebenen 61 - 70)',
      'en': 'The Palace of the Dead (Floors 61-70)',
      'fr': 'Le Palais des morts (sous-sols 61-70)',
      'ja': '死者の宮殿 B61～B70',
      'ko': '망자의 궁전 B61~B70'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  595: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下71～80层',
      'de': 'Palast der Toten (Ebenen 71 - 80)',
      'en': 'The Palace of the Dead (Floors 71-80)',
      'fr': 'Le Palais des morts (sous-sols 71-80)',
      'ja': '死者の宮殿 B71～B80',
      'ko': '망자의 궁전 B71~B80'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  596: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下81～90层',
      'de': 'Palast der Toten (Ebenen 81 - 90)',
      'en': 'The Palace of the Dead (Floors 81-90)',
      'fr': 'Le Palais des morts (sous-sols 81-90)',
      'ja': '死者の宮殿 B81～B90',
      'ko': '망자의 궁전 B81~B90'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  597: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下91～100层',
      'de': 'Palast der Toten (Ebenen 91 - 100)',
      'en': 'The Palace of the Dead (Floors 91-100)',
      'fr': 'Le Palais des morts (sous-sols 91-100)',
      'ja': '死者の宮殿 B91～B100',
      'ko': '망자의 궁전 B91~B100'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  598: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下101～110层',
      'de': 'Palast der Toten (Ebenen 101 - 110)',
      'en': 'The Palace of the Dead (Floors 101-110)',
      'fr': 'Le Palais des morts (sous-sols 101-110)',
      'ja': '死者の宮殿 B101～B110',
      'ko': '망자의 궁전 B101~B110'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  599: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下111～120层',
      'de': 'Palast der Toten (Ebenen 111 - 120)',
      'en': 'The Palace of the Dead (Floors 111-120)',
      'fr': 'Le Palais des morts (sous-sols 111-120)',
      'ja': '死者の宮殿 B111～B120',
      'ko': '망자의 궁전 B111~B120'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  600: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下121～130层',
      'de': 'Palast der Toten (Ebenen 121 - 130)',
      'en': 'The Palace of the Dead (Floors 121-130)',
      'fr': 'Le Palais des morts (sous-sols 121-130)',
      'ja': '死者の宮殿 B121～B130',
      'ko': '망자의 궁전 B121~B130'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  601: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下131～140层',
      'de': 'Palast der Toten (Ebenen 131 - 140)',
      'en': 'The Palace of the Dead (Floors 131-140)',
      'fr': 'Le Palais des morts (sous-sols 131-140)',
      'ja': '死者の宮殿 B131～B140',
      'ko': '망자의 궁전 B131~B140'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  602: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下141～150层',
      'de': 'Palast der Toten (Ebenen 141 - 150)',
      'en': 'The Palace of the Dead (Floors 141-150)',
      'fr': 'Le Palais des morts (sous-sols 141-150)',
      'ja': '死者の宮殿 B141～B150',
      'ko': '망자의 궁전 B141~B150'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  603: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下151～160层',
      'de': 'Palast der Toten (Ebenen 151 - 160)',
      'en': 'The Palace of the Dead (Floors 151-160)',
      'fr': 'Le Palais des morts (sous-sols 151-160)',
      'ja': '死者の宮殿 B151～B160',
      'ko': '망자의 궁전 B151~B160'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  604: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下161～170层',
      'de': 'Palast der Toten (Ebenen 161 - 170)',
      'en': 'The Palace of the Dead (Floors 161-170)',
      'fr': 'Le Palais des morts (sous-sols 161-170)',
      'ja': '死者の宮殿 B161～B170',
      'ko': '망자의 궁전 B161~B170'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  605: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下171～180层',
      'de': 'Palast der Toten (Ebenen 171 - 180)',
      'en': 'The Palace of the Dead (Floors 171-180)',
      'fr': 'Le Palais des morts (sous-sols 171-180)',
      'ja': '死者の宮殿 B171～B180',
      'ko': '망자의 궁전 B171~B180'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  606: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下181～190层',
      'de': 'Palast der Toten (Ebenen 181 - 190)',
      'en': 'The Palace of the Dead (Floors 181-190)',
      'fr': 'Le Palais des morts (sous-sols 181-190)',
      'ja': '死者の宮殿 B181～B190',
      'ko': '망자의 궁전 B181~B190'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  607: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下191～200层',
      'de': 'Palast der Toten (Ebenen 191 - 200)',
      'en': 'The Palace of the Dead (Floors 191-200)',
      'fr': 'Le Palais des morts (sous-sols 191-200)',
      'ja': '死者の宮殿 B191～B200',
      'ko': '망자의 궁전 B191~B200'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  612: {
    'exVersion': 2,
    'name': {
      'cn': '基拉巴尼亚边区',
      'de': 'Abanisches Grenzland',
      'en': 'The Fringes',
      'fr': 'Les Marges',
      'ja': 'ギラバニア辺境地帯',
      'ko': '기라바니아 변방지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 79
  },
  613: {
    'exVersion': 2,
    'name': {
      'cn': '红玉海',
      'de': 'Rubinsee',
      'en': 'The Ruby Sea',
      'fr': 'Mer de Rubis',
      'ja': '紅玉海',
      'ko': '홍옥해'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 83
  },
  614: {
    'exVersion': 2,
    'name': {
      'cn': '延夏',
      'de': 'Yanxia',
      'en': 'Yanxia',
      'fr': 'Yanxia',
      'ja': 'ヤンサ',
      'ko': '얀샤'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 84
  },
  615: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '坚牢铁壁巴埃萨长城',
      'de': 'Baelsar-Wall',
      'en': 'Baelsar\'s Wall',
      'fr': 'La Muraille de Baelsar',
      'ja': '巨大防壁 バエサルの長城',
      'ko': '바일사르 장성'
    },
    'offsetX': 182,
    'offsetY': 32,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  616: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '海底宫殿紫水宫',
      'de': 'Shisui',
      'en': 'Shisui of the Violet Tides',
      'fr': 'Le Palais aux Marées violettes',
      'ja': '海底宮殿 紫水宮',
      'ko': '시스이 궁'
    },
    'offsetX': 0,
    'offsetY': 35,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  617: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天山深境索姆阿尔灵峰',
      'de': 'Sohm Al (schwer)',
      'en': 'Sohm Al (Hard)',
      'fr': 'Sohm Al (brutal)',
      'ja': '霊峰浄化 ソーム・アル (Hard)',
      'ko': '솜 알(어려움)'
    },
    'offsetX': 128,
    'offsetY': -32,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  620: {
    'exVersion': 2,
    'name': {
      'cn': '基拉巴尼亚山区',
      'de': 'Die Zinnen',
      'en': 'The Peaks',
      'fr': 'Les Pics',
      'ja': 'ギラバニア山岳地帯',
      'ko': '기라바니아 산악지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 80
  },
  621: {
    'exVersion': 2,
    'name': {
      'cn': '基拉巴尼亚湖区',
      'de': 'Das Fenn',
      'en': 'The Lochs',
      'fr': 'Les Lacs',
      'ja': 'ギラバニア湖畔地帯',
      'ko': '기라바니아 호반지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 81
  },
  622: {
    'exVersion': 2,
    'name': {
      'cn': '太阳神草原',
      'de': 'Azim-Steppe',
      'en': 'The Azim Steppe',
      'fr': 'Steppe d\'Azim',
      'ja': 'アジムステップ',
      'ko': '아짐 대초원'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  623: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '试炼行路巴儿达木霸道',
      'de': 'Bardams Probe',
      'en': 'Bardam\'s Mettle',
      'fr': 'La Force de Bardam',
      'ja': '伝統試練 バルダム覇道',
      'ko': '바르담 패도'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  624: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛白昼探索（狩猎专用）',
      'de': 'Das Diadem - Jagdgründe (leicht)',
      'en': 'The Diadem Hunting Grounds (Easy)',
      'fr': 'Le Diadème<Indent/>: terrains de chasse (facile)',
      'ja': '雲海探索 ディアデム諸島：狩猟限定 (Easy)',
      'ko': '디아뎀 제도: 전투 한정(쉬움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 60
  },
  625: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛黄昏探索（狩猎专用）',
      'de': 'Das Diadem - Jagdgründe',
      'en': 'The Diadem Hunting Grounds',
      'fr': 'Le Diadème<Indent/>: terrains de chasse',
      'ja': '雲海探索 ディアデム諸島：狩猟限定',
      'ko': '디아뎀 제도: 전투 한정'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 61
  },
  626: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '漂流海域妖歌海',
      'de': 'Sirenen-See',
      'en': 'The Sirensong Sea',
      'fr': 'La Mer du Chant des sirènes',
      'ja': '漂流海域 セイレーン海',
      'ko': '세이렌 해'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 36
  },
  627: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '影之国',
      'de': 'Dun Scaith',
      'en': 'Dun Scaith',
      'fr': 'Dun Scaith',
      'ja': '影の国ダン・スカー',
      'ko': '둔 스카'
    },
    'offsetX': -350,
    'offsetY': -400,
    'sizeFactor': 200,
    'weatherRate': 58
  },
  628: {
    'exVersion': 2,
    'name': {
      'cn': '黄金港',
      'de': 'Kugane',
      'en': 'Kugane',
      'fr': 'Kugane',
      'ja': 'クガネ',
      'ko': '쿠가네'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 82
  },
  630: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛战争神猎场',
      'de': 'Das Diadem - Halones Prüfung',
      'en': 'The Diadem - Trials of the Fury',
      'fr': 'Le Diadème - Épreuves de Halone',
      'ja': '雲海探索 ディアデム諸島 (狩猟)',
      'ko': '디아뎀 제도: 전투'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 71
  },
  633: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '加尔提诺平原遭遇战',
      'de': 'Heliodrom',
      'en': 'The Carteneau Flats: Heliodrome',
      'fr': 'Rixe à l\'Héliodrome',
      'ja': 'カルテノー平原遭遇戦',
      'ko': '카르테노 평원 조우전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  635: {
    'exVersion': 2,
    'name': {
      'cn': '神拳痕',
      'de': 'Rhalgrs Wacht',
      'en': 'Rhalgr\'s Reach',
      'fr': 'L\'Étendue de Rhalgr',
      'ja': 'ラールガーズリーチ',
      'ko': '랄거의 손길'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 78
  },
  637: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '祖尔宛歼灭战',
      'de': 'Götterdämmerung - Zurvan',
      'en': 'Containment Bay Z1T9',
      'fr': 'Unité de contention Z1P9',
      'ja': '鬼神ズルワーン討滅戦',
      'ko': '귀신 주르반 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 75
  },
  638: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '祖尔宛歼殛战',
      'de': 'Zenit der Götter - Zurvan',
      'en': 'Containment Bay Z1T9 (Extreme)',
      'fr': 'Unité de contention Z1P9 (extrême)',
      'ja': '極鬼神ズルワーン討滅戦',
      'ko': '극 귀신 주르반 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 75
  },
  656: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛丰饶神福地',
      'de': 'Das Diadem - Nophicas Prüfung',
      'en': 'The Diadem - Trials of the Matron',
      'fr': 'Le Diadème - Épreuves de Nophica',
      'ja': '雲海探索 ディアデム諸島 (採集)',
      'ko': '디아뎀 제도: 채집'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 71
  },
  660: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '解放决战多玛王城',
      'de': 'Burg Doma',
      'en': 'Doma Castle',
      'fr': 'Le Château de Doma',
      'ja': '解放決戦 ドマ城',
      'ko': '도마 성'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  661: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '巨炮要塞帝国白山堡',
      'de': 'Castrum Abania',
      'en': 'Castrum Abania',
      'fr': 'Castrum Abania',
      'ja': '巨砲要塞 カストルム・アバニア',
      'ko': '카스트룸 아바니아'
    },
    'offsetX': 72,
    'offsetY': -186,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  662: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '恶党孤城黄金阁',
      'de': 'Schloss Kugane',
      'en': 'Kugane Castle',
      'fr': 'Le Château de Kugane',
      'ja': '悪党成敗 クガネ城',
      'ko': '쿠가네 성'
    },
    'offsetX': 70,
    'offsetY': 33,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  663: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '修行古刹星导寺',
      'de': 'Tempel der Faust',
      'en': 'The Temple of the Fist',
      'fr': 'Le Temple du Poing',
      'ja': '壊神修行 星導山寺院',
      'ko': '성도산 사원'
    },
    'offsetX': -427,
    'offsetY': -314,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  665: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '鱼道现身！',
      'de': 'Ein zweifelhaftes Angebot',
      'en': 'It\'s Probably a Trap',
      'fr': 'Un drôle de Namazu',
      'ja': 'ギョドウ現る！',
      'ko': '교도 등장!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  674: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '须佐之男歼灭战',
      'de': 'Götterdämmerung - Susano',
      'en': 'The Pool of Tribute',
      'fr': 'La Crique aux tributs',
      'ja': 'スサノオ討滅戦',
      'ko': '스사노오 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 77
  },
  677: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '须佐之男歼殛战',
      'de': 'Zenit der Götter - Susano',
      'en': 'The Pool of Tribute (Extreme)',
      'fr': 'La Crique aux tributs (extrême)',
      'ja': '極スサノオ討滅戦',
      'ko': '극 스사노오 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 77
  },
  679: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '神龙歼灭战',
      'de': 'Königliche Menagerie',
      'en': 'The Royal Menagerie',
      'fr': 'La Ménagerie royale',
      'ja': '神龍討滅戦',
      'ko': '신룡 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 76
  },
  684: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '于里昂热的秘策',
      'de': 'Wege zur Transzendenz',
      'en': 'The Resonant',
      'fr': 'La ruse d\'Urianger',
      'ja': 'ウリエンジェの秘策',
      'ko': '위리앙제의 비책'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  688: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '那达慕',
      'de': 'Naadam',
      'en': 'Naadam',
      'fr': 'La grande bataille du Naadam',
      'ja': '終節の合戦',
      'ko': '계절끝 합전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  689: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '鏖战红莲阿拉米格',
      'de': 'Ala Mhigo',
      'en': 'Ala Mhigo',
      'fr': 'Ala Mhigo',
      'ja': '紅蓮決戦 アラミゴ',
      'ko': '알라미고'
    },
    'offsetX': 292,
    'offsetY': -163,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  690: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '时空狭缝外缘',
      'de': 'Interdimensionaler Riss',
      'en': 'Interdimensional Rift',
      'fr': 'Fissure interdimensionnelle',
      'ja': '次元の狭間：外縁',
      'ko': '차원의 틈: 외곽'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 88
  },
  691: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境1',
      'de': 'Deltametrie 1.0',
      'en': 'Deltascape V1.0',
      'fr': 'Deltastice v1.0',
      'ja': '次元の狭間オメガ：デルタ編1',
      'ko': '차원의 틈 오메가: 델타편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  692: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境2',
      'de': 'Deltametrie 2.0',
      'en': 'Deltascape V2.0',
      'fr': 'Deltastice v2.0',
      'ja': '次元の狭間オメガ：デルタ編2',
      'ko': '차원의 틈 오메가: 델타편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  693: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境3',
      'de': 'Deltametrie 3.0',
      'en': 'Deltascape V3.0',
      'fr': 'Deltastice v3.0',
      'ja': '次元の狭間オメガ：デルタ編3',
      'ko': '차원의 틈 오메가: 델타편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  694: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境4',
      'de': 'Deltametrie 4.0',
      'en': 'Deltascape V4.0',
      'fr': 'Deltastice v4.0',
      'ja': '次元の狭間オメガ：デルタ編4',
      'ko': '차원의 틈 오메가: 델타편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  695: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境1',
      'de': 'Deltametrie 1.0 (episch)',
      'en': 'Deltascape V1.0 (Savage)',
      'fr': 'Deltastice v1.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編1',
      'ko': '차원의 틈 오메가: 델타편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  696: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境2',
      'de': 'Deltametrie 2.0 (episch)',
      'en': 'Deltascape V2.0 (Savage)',
      'fr': 'Deltastice v2.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編2',
      'ko': '차원의 틈 오메가: 델타편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  697: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境3',
      'de': 'Deltametrie 3.0 (episch)',
      'en': 'Deltascape V3.0 (Savage)',
      'fr': 'Deltastice v3.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編3',
      'ko': '차원의 틈 오메가: 델타편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  698: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境4',
      'de': 'Deltametrie 4.0 (episch)',
      'en': 'Deltascape V4.0 (Savage)',
      'fr': 'Deltastice v4.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編4',
      'ko': '차원의 틈 오메가: 델타편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  705: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '大会开始',
      'de': 'Thal zu Ehren',
      'en': 'In Thal\'s Name',
      'fr': 'Le tournoi commémoratif du sultanat',
      'ja': 'ウル王杯闘技会の始まり',
      'ko': '울다하 왕실배 투기대회'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 8
  },
  706: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '为了更强',
      'de': 'Die hohe Kunst des Schwertkampfs',
      'en': 'Raising the Sword',
      'fr': 'La finale des champions',
      'ja': 'さらなる剣術の高みへ',
      'ko': '더 높은 검술의 경지로'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 8
  },
  707: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '抗争之力',
      'de': 'Die Kraft des Widerstands',
      'en': 'With Heart and Steel',
      'fr': 'Transmigration démoniaque',
      'ja': '抗う力',
      'ko': '맞서는 힘'
    },
    'offsetX': 298,
    'offsetY': 350,
    'sizeFactor': 200,
    'weatherRate': 37
  },
  708: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '海都路人身首异',
      'de': 'Mord ist sein Hobby',
      'en': 'Blood on the Deck',
      'fr': 'La légende de Musosai<Indent/>: l\'assassin de Limsa Lominsa',
      'ja': '海都を震わす人斬りの宴！',
      'ko': '해양도시를 흔드는 살인자의 연회!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  709: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '极恶之人木枯',
      'de': 'Der Inbegriff des Bösen',
      'en': 'The Face of True Evil',
      'fr': 'L\'abominable Kogarashi',
      'ja': '極悪人コガラシ',
      'ko': '극악무도한 코가라시'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 49
  },
  710: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '松叶门外之变',
      'de': 'Vorfall auf dem Matsuba-Platz',
      'en': 'Matsuba Mayhem',
      'fr': 'Règlement de compte au square Matsuba',
      'ja': '松葉門外の変',
      'ko': '마츠바 사변'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 82
  },
  711: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '决战龟甲岛',
      'de': 'Ent<SoftHyphen/>schei<SoftHyphen/>dungs<SoftHyphen/>schlacht auf Bekko',
      'en': 'The Battle on Bekko',
      'fr': 'L\'af<SoftHyphen/>fron<SoftHyphen/>te<SoftHyphen/>ment de deux justices',
      'ja': 'ベッコウ島の決闘',
      'ko': '베코우 섬의 결투'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 83
  },
  712: {
    'contentType': 9,
    'exVersion': 2,
    'name': {
      'cn': '运河宝物库',
      'de': 'Kanäle von Uznair',
      'en': 'The Lost Canals of Uznair',
      'fr': 'Les Canaux perdus d\'Uznair',
      'ja': '宝物庫 ウズネアカナル',
      'ko': '보물고 우즈네어 운하'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  713: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '漆黑的巨龙',
      'de': 'Der tobende Drache',
      'en': 'Dark as the Night Sky',
      'fr': 'Aussi sombre que la nuit',
      'ja': '漆黒の巨竜',
      'ko': '칠흑의 거룡'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  714: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '红血之龙骑士',
      'de': 'Der Rubin-Drachenreiter',
      'en': 'Dragon Sound',
      'fr': 'Le Dragon écarlate',
      'ja': '紅の竜騎士',
      'ko': '붉은 용기사'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  715: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '遥远的憧憬',
      'de': 'Probe des Meisters',
      'en': 'The Orphans and the Broken Blade',
      'fr': 'L\'aspiration refoulée',
      'ja': 'あと三度、遥かな憧憬',
      'ko': '앞으로 세 번, 아득한 동경'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 86
  },
  716: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '再次相见',
      'de': 'Aus der Tiefe des Herzens',
      'en': 'Our Compromise',
      'fr': 'La dernière séparation',
      'ja': 'あと一度、君に会えたら',
      'ko': '앞으로 한 번, 너와 만날 수 있다면'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 28
  },
  717: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '原初的战士',
      'de': 'Die Urkraft in ihr',
      'en': 'Curious Gorge Meets His Match',
      'fr': 'L\'épreuve de force',
      'ja': '原初的な彼女',
      'ko': '원초적 그녀'
    },
    'offsetX': -77,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  718: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '燃烧吧高吉',
      'de': 'Kriegerische Leidenschaft',
      'en': 'The Heart of the Problem',
      'fr': 'Passion guerrière',
      'ja': '燃えよゴージ！',
      'ko': '불타올라라, 산골짜기!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  719: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '吉祥天女歼灭战',
      'de': 'Götterdämmerung - Lakshmi',
      'en': 'Emanation',
      'fr': 'Émanation',
      'ja': 'ラクシュミ討滅戦',
      'ko': '락슈미 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 87
  },
  720: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '吉祥天女歼殛战',
      'de': 'Zenit der Götter - Lakshmi',
      'en': 'Emanation (Extreme)',
      'fr': 'Émanation (extrême)',
      'ja': '極ラクシュミ討滅戦',
      'ko': '극 락슈미 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 87
  },
  722: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '穿越时空的夙愿',
      'de': 'Ein Wunsch aus alten Zeiten',
      'en': 'Our Unsung Heroes',
      'fr': 'L\'espoir en héritage',
      'ja': '時をかける願い',
      'ko': '시간을 뛰어넘은 염원'
    },
    'offsetX': -175,
    'offsetY': -297,
    'sizeFactor': 200,
    'weatherRate': 63
  },
  723: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '影隐忍法贴',
      'de': 'Aus dem Verborgenen',
      'en': 'When Clans Collide',
      'fr': 'La bataille des clans',
      'ja': '影隠忍法帖',
      'ko': '그림자 인법첩'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  725: {
    'contentType': 9,
    'exVersion': 2,
    'name': {
      'cn': '运河宝物库深层',
      'de': 'Vergessene Kanäle von Uznair',
      'en': 'The Hidden Canals of Uznair',
      'fr': 'Les Canaux cachés d\'Uznair',
      'ja': '宝物庫 ウズネアカナル深層',
      'ko': '보물고 우즈네어 운하 심층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  729: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '距骨研究所 (机动战)',
      'de': 'Astragalos',
      'en': 'Astragalos',
      'fr': 'Astragalos (machinerie)',
      'ja': 'アストラガロス (機工戦)',
      'ko': '아스트라갈로스(기공전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  730: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '神龙梦幻歼灭战',
      'de': 'Heldenlied von Shinryu',
      'en': 'The Minstrel\'s Ballad: Shinryu\'s Domain',
      'fr': 'Le domaine de Shinryu',
      'ja': '極神龍討滅戦',
      'ko': '극 신룡 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 76
  },
  731: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '沉没神殿斯卡拉遗迹',
      'de': 'Die versunkene Stadt Skalla',
      'en': 'The Drowned City of Skalla',
      'fr': 'La Cité engloutie de Skalla',
      'ja': '水没遺構 スカラ',
      'ko': '스칼라 유적'
    },
    'offsetX': 185,
    'offsetY': 5,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  732: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 常风之地',
      'de': 'Eureka Anemos',
      'en': 'The Forbidden Land, Eureka Anemos',
      'fr': 'Eurêka Anemos',
      'ja': '禁断の地 エウレカ：アネモス編',
      'ko': '금단의 땅 에우레카: 아네모스편'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 91
  },
  733: {
    'contentType': 28,
    'exVersion': 2,
    'name': {
      'cn': '巴哈姆特绝境战',
      'de': 'Endlose Schatten von Bahamut (fatal)',
      'en': 'The Unending Coil of Bahamut (Ultimate)',
      'fr': 'L\'Abîme infini de Bahamut (fatal)',
      'ja': '絶バハムート討滅戦',
      'ko': '절 바하무트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  734: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '失落之都拉巴纳斯塔',
      'de': 'Rabanastre',
      'en': 'The Royal City of Rabanastre',
      'fr': 'La Cité royale de Rabanastre',
      'ja': '失われた都 ラバナスタ',
      'ko': '왕도 라바나스터'
    },
    'offsetX': 300,
    'offsetY': -100,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  741: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '良缘仪式',
      'de': 'Valentionzeremonie',
      'en': 'The Valentione\'s Ceremony',
      'fr': 'La Cérémonie de la Valention',
      'ja': 'ヴァレンティオンセレモニー',
      'ko': '발렌티온 예식장'
    },
    'offsetX': 0,
    'offsetY': 125,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  742: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '红玉火山狱之盖',
      'de': 'Höllenspund',
      'en': 'Hells\' Lid',
      'fr': 'Le Couvercle des enfers',
      'ja': '紅玉火山 獄之蓋',
      'ko': '지옥뚜껑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  743: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '疯狂战舰无限回廊',
      'de': 'Die Fraktal-Kontinuum (schwer)',
      'en': 'The Fractal Continuum (Hard)',
      'fr': 'Le Continuum fractal (brutal)',
      'ja': '暴走戦艦 フラクタル・コンティニアム (Hard)',
      'ko': '무한연속 박물함(어려움)'
    },
    'offsetX': 0,
    'offsetY': 350,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  746: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '白虎镇魂战',
      'de': 'Seelentanz - Byakko',
      'en': 'The Jade Stoa',
      'fr': 'La Clairière de Jade',
      'ja': '白虎征魂戦',
      'ko': '백호 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 93
  },
  748: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境1',
      'de': 'Sigmametrie 1.0',
      'en': 'Sigmascape V1.0',
      'fr': 'Sigmastice v1.0',
      'ja': '次元の狭間オメガ：シグマ編1',
      'ko': '차원의 틈 오메가: 시그마편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  749: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境2',
      'de': 'Sigmametrie 2.0',
      'en': 'Sigmascape V2.0',
      'fr': 'Sigmastice v2.0',
      'ja': '次元の狭間オメガ：シグマ編2',
      'ko': '차원의 틈 오메가: 시그마편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  750: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境3',
      'de': 'Sigmametrie 3.0',
      'en': 'Sigmascape V3.0',
      'fr': 'Sigmastice v3.0',
      'ja': '次元の狭間オメガ：シグマ編3',
      'ko': '차원의 틈 오메가: 시그마편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  751: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境4',
      'de': 'Sigmametrie 4.0',
      'en': 'Sigmascape V4.0',
      'fr': 'Sigmastice v4.0',
      'ja': '次元の狭間オメガ：シグマ編4',
      'ko': '차원의 틈 오메가: 시그마편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  752: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境1',
      'de': 'Sigmametrie 1.0 (episch)',
      'en': 'Sigmascape V1.0 (Savage)',
      'fr': 'Sigmastice v1.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編1',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  753: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境2',
      'de': 'Sigmametrie 2.0 (episch)',
      'en': 'Sigmascape V2.0 (Savage)',
      'fr': 'Sigmastice v2.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編2',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  754: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境3',
      'de': 'Sigmametrie 3.0 (episch)',
      'en': 'Sigmascape V3.0 (Savage)',
      'fr': 'Sigmastice v3.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編3',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  755: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境4',
      'de': 'Sigmametrie 4.0 (episch)',
      'en': 'Sigmascape V4.0 (Savage)',
      'fr': 'Sigmastice v4.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編4',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  758: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '白虎诗魂战',
      'de': 'Seelensturm - Byakko',
      'en': 'The Jade Stoa (Extreme)',
      'fr': 'La Clairière de Jade (extrême)',
      'ja': '極白虎征魂戦',
      'ko': '극 백호 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 93
  },
  759: {
    'exVersion': 2,
    'name': {
      'cn': '多玛飞地',
      'de': 'Domanische Enklave',
      'en': 'The Doman Enclave',
      'fr': 'Quartier enclavé de Doma',
      'ja': 'ドマ町人地',
      'ko': '도마 도읍지'
    },
    'offsetX': 23,
    'offsetY': 34,
    'sizeFactor': 400,
    'weatherRate': 84
  },
  761: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '火龙狩猎战',
      'de': 'Jagd auf Rathalos',
      'en': 'The Great Hunt',
      'fr': 'Chasse au Rathalos',
      'ja': 'リオレウス狩猟戦',
      'ko': '리오레우스 수렵전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  762: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '火龙上位狩猎战',
      'de': 'Jagd auf Rathalos (schwer)',
      'en': 'The Great Hunt (Extreme)',
      'fr': 'Chasse au Rathalos (extrême)',
      'ja': '極リオレウス狩猟戦',
      'ko': '극 리오레우스 수렵전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  763: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 恒冰之地',
      'de': 'Eureka Pagos',
      'en': 'The Forbidden Land, Eureka Pagos',
      'fr': 'Eurêka Pagos',
      'ja': '禁断の地 エウレカ：パゴス編',
      'ko': '금단의 땅 에우레카: 파고스편'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 94
  },
  768: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '风水灵庙岩燕庙',
      'de': 'Kompass der Schwalbe',
      'en': 'The Swallow\'s Compass',
      'fr': 'Le Compas de l\'Hirondelle',
      'ja': '風水霊殿 ガンエン廟',
      'ko': '강엔 종묘'
    },
    'offsetX': 240,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  769: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '拂晓的少年',
      'de': 'Der Knabe der Morgenröte',
      'en': 'Emissary of the Dawn',
      'fr': 'Voyage en terre hostile',
      'ja': '「暁」の少年',
      'ko': '\'새벽\'의 소년'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  770: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 1～10层',
      'de': 'Himmelssäule (Ebenen 1-10)',
      'en': 'Heaven-on-High  (Floors 1-10)',
      'fr': 'Le Pilier des Cieux (étages 1-10)',
      'ja': 'アメノミハシラ 1～10層',
      'ko': '천궁탑 1~10층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  771: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 11～20层',
      'de': 'Himmelssäule (Ebenen 11-20)',
      'en': 'Heaven-on-High  (Floors 11-20)',
      'fr': 'Le Pilier des Cieux (étages 11-20)',
      'ja': 'アメノミハシラ 11～20層',
      'ko': '천궁탑 11~20층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  772: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 21～30层',
      'de': 'Himmelssäule (Ebenen 21-30)',
      'en': 'Heaven-on-High  (Floors 21-30)',
      'fr': 'Le Pilier des Cieux (étages 21-30)',
      'ja': 'アメノミハシラ 21～30層',
      'ko': '천궁탑 21~30층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  773: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 41～50层',
      'de': 'Himmelssäule (Ebenen 41-50)',
      'en': 'Heaven-on-High  (Floors 41-50)',
      'fr': 'Le Pilier des Cieux (étages 41-50)',
      'ja': 'アメノミハシラ 41～50層',
      'ko': '천궁탑 41~50층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  774: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 61～70层',
      'de': 'Himmelssäule (Ebenen 61-70)',
      'en': 'Heaven-on-High  (Floors 61-70)',
      'fr': 'Le Pilier des Cieux (étages 61-70)',
      'ja': 'アメノミハシラ 61～70層',
      'ko': '천궁탑 61~70층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  775: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 81～90层',
      'de': 'Himmelssäule (Ebenen 81-90)',
      'en': 'Heaven-on-High  (Floors 81-90)',
      'fr': 'Le Pilier des Cieux (étages 81-90)',
      'ja': 'アメノミハシラ 81～90層',
      'ko': '천궁탑 81~90층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  776: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '封闭圣塔黎铎拉纳大灯塔',
      'de': 'Richtfeuer von Ridorana',
      'en': 'The Ridorana Lighthouse',
      'fr': 'Le Phare de Ridorana',
      'ja': '封じられた聖塔 リドルアナ',
      'ko': '대등대 리도르아나'
    },
    'offsetX': 202,
    'offsetY': -92,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  777: {
    'contentType': 28,
    'exVersion': 2,
    'name': {
      'cn': '究极神兵绝境战',
      'de': 'Heldenlied von Ultima (fatal)',
      'en': 'The Weapon\'s Refrain (Ultimate)',
      'fr': 'La Fantasmagorie d\'Ultima (fatal)',
      'ja': '絶アルテマウェポン破壊作戦',
      'ko': '절 알테마 웨폰 파괴작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  778: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '月读歼灭战',
      'de': 'Götterdämmerung - Tsukuyomi',
      'en': 'Castrum Fluminis',
      'fr': 'Castrum Fluminis',
      'ja': 'ツクヨミ討滅戦',
      'ko': '츠쿠요미 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  779: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '月读幽夜歼灭战',
      'de': 'Zenit der Götter - Tsukuyomi',
      'en': 'The Minstrel\'s Ballad: Tsukuyomi\'s Pain',
      'fr': 'Castrum Fluminis (extrême)',
      'ja': '極ツクヨミ討滅戦',
      'ko': '극 츠쿠요미 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  782: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 31～40层',
      'de': 'Himmelssäule (Ebenen 31-40)',
      'en': 'Heaven-on-High  (Floors 31-40)',
      'fr': 'Le Pilier des Cieux (étages 31-40)',
      'ja': 'アメノミハシラ 31～40層',
      'ko': '천궁탑 31~40층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  783: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 51～60层',
      'de': 'Himmelssäule (Ebenen 51-60)',
      'en': 'Heaven-on-High  (Floors 51-60)',
      'fr': 'Le Pilier des Cieux (étages 51-60)',
      'ja': 'アメノミハシラ 51～60層',
      'ko': '천궁탑 51~60층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  784: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 71～80层',
      'de': 'Himmelssäule (Ebenen 71-80)',
      'en': 'Heaven-on-High  (Floors 71-80)',
      'fr': 'Le Pilier des Cieux (étages 71-80)',
      'ja': 'アメノミハシラ 71～80層',
      'ko': '천궁탑 71~80층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  785: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 91～100层',
      'de': 'Himmelssäule (Ebenen 91-100)',
      'en': 'Heaven-on-High  (Floors 91-100)',
      'fr': 'Le Pilier des Cieux (étages 91-100)',
      'ja': 'アメノミハシラ 91～100層',
      'ko': '천궁탑 91~100층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  788: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '污染庭园圣茉夏娜植物园',
      'de': 'Sankt Mocianne-Arboretum (schwer)',
      'en': 'Saint Mocianne\'s Arboretum (Hard)',
      'fr': 'L\'Arboretum Sainte-Mocianne (brutal)',
      'ja': '草木汚染 聖モシャーヌ植物園 (Hard)',
      'ko': '성 모샨 식물원(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  789: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '死亡大地终末焦土',
      'de': 'Das Kargland',
      'en': 'The Burn',
      'fr': 'L\'Escarre',
      'ja': '永久焦土 ザ・バーン',
      'ko': '영구 초토지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 97
  },
  790: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '灾厄重现军事演习',
      'de': 'Gedenkschlacht der Eorzäischen Allianz',
      'en': 'The Calamity Retold',
      'fr': 'Les grandes manœuvres commémoratives',
      'ja': '新生祭軍事演習',
      'ko': '신생제 군사훈련'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 95
  },
  791: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '隐塞 (机动战)',
      'de': 'Verborgene Schlucht',
      'en': 'Hidden Gorge',
      'fr': 'Gorge dérobée (machinerie)',
      'ja': 'ヒドゥンゴージ (機工戦)',
      'ko': '숨겨진 보루(기공전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  792: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '虚景跳跳乐大挑战',
      'de': 'Kaktor-Kletterwand',
      'en': 'Leap of Faith',
      'fr': 'Haute voltige',
      'ja': '挑戦！ ジャンピングアスレチック',
      'ko': '뛰어라! 점핑 운동회'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  793: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '国境防线基姆利特暗区',
      'de': 'Die Ghimlyt-Finsternis',
      'en': 'The Ghimlyt Dark',
      'fr': 'Les Ténèbres de Ghimlyt',
      'ja': '境界戦線 ギムリトダーク',
      'ko': '김리트 황야'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  794: {
    'contentType': 9,
    'exVersion': 2,
    'name': {
      'cn': '运河宝物库神殿',
      'de': 'Glücksaltäre von Uznair',
      'en': 'The Shifting Altars of Uznair',
      'fr': 'Le Temple sacré d\'Uznair',
      'ja': '宝物庫 ウズネアカナル祭殿',
      'ko': '보물고 우즈네어 운하 제전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  795: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 涌火之地',
      'de': 'Eureka Pyros',
      'en': 'The Forbidden Land, Eureka Pyros',
      'fr': 'Eurêka Pyros',
      'ja': '禁断の地 エウレカ：ピューロス編',
      'ko': '금단의 땅 에우레카: 피로스편'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 96
  },
  796: {
    'contentType': 27,
    'exVersion': 0,
    'name': {
      'cn': '出道战',
      'de': 'Debüt in der Himmlischen Arena',
      'en': 'All\'s Well That Starts Well',
      'fr': 'Début du spectacle',
      'ja': 'デビューマッチ',
      'ko': '데뷔전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  797: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '楔石洞',
      'de': 'Der Wille der Mondgöttin',
      'en': 'The Will of the Moon',
      'fr': 'Ralliement dans la steppe',
      'ja': '楔石の虚',
      'ko': '쐐기돌 동굴'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  798: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境1',
      'de': 'Alphametrie 1.0',
      'en': 'Alphascape V1.0',
      'fr': 'Alphastice v1.0',
      'ja': '次元の狭間オメガ：アルファ編1',
      'ko': '차원의 틈 오메가: 알파편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  799: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境2',
      'de': 'Alphametrie 2.0',
      'en': 'Alphascape V2.0',
      'fr': 'Alphastice v2.0',
      'ja': '次元の狭間オメガ：アルファ編2',
      'ko': '차원의 틈 오메가: 알파편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  800: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境3',
      'de': 'Alphametrie 3.0',
      'en': 'Alphascape V3.0',
      'fr': 'Alphastice v3.0',
      'ja': '次元の狭間オメガ：アルファ編3',
      'ko': '차원의 틈 오메가: 알파편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  801: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境4',
      'de': 'Alphametrie 4.0',
      'en': 'Alphascape V4.0',
      'fr': 'Alphastice v4.0',
      'ja': '次元の狭間オメガ：アルファ編4',
      'ko': '차원의 틈 오메가: 알파편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  802: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境1',
      'de': 'Alphametrie 1.0 (episch)',
      'en': 'Alphascape V1.0 (Savage)',
      'fr': 'Alphastice v1.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編1',
      'ko': '차원의 틈 오메가: 알파편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  803: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境2',
      'de': 'Alphametrie 2.0 (episch)',
      'en': 'Alphascape V2.0 (Savage)',
      'fr': 'Alphastice v2.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編2',
      'ko': '차원의 틈 오메가: 알파편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  804: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境3',
      'de': 'Alphametrie 3.0 (episch)',
      'en': 'Alphascape V3.0 (Savage)',
      'fr': 'Alphastice v3.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編3',
      'ko': '차원의 틈 오메가: 알파편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  805: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境4',
      'de': 'Alphametrie 4.0 (episch)',
      'en': 'Alphascape V4.0 (Savage)',
      'fr': 'Alphastice v4.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編4',
      'ko': '차원의 틈 오메가: 알파편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  806: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '保镖歼灭战',
      'de': 'Duell auf der Kugane-Brücke',
      'en': 'Kugane Ohashi',
      'fr': 'Le Pont Ohashi',
      'ja': '真ヨウジンボウ討滅戦',
      'ko': '진 요우진보 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  810: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '朱雀镇魂战',
      'de': 'Seelentanz - Suzaku',
      'en': 'Hells\' Kier',
      'fr': 'Le Nid des Lamentations',
      'ja': '朱雀征魂戦',
      'ko': '주작 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 98
  },
  811: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '朱雀诗魂战',
      'de': 'Seelensturm - Suzaku',
      'en': 'Hells\' Kier (Extreme)',
      'fr': 'Le Nid des Lamentations (extrême)',
      'ja': '極朱雀征魂戦',
      'ko': '극 주작 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 98
  },
  813: {
    'exVersion': 3,
    'name': {
      'cn': '雷克兰德',
      'de': 'Seenland',
      'en': 'Lakeland',
      'fr': 'Grand-Lac',
      'ja': 'レイクランド',
      'ko': '레이크랜드'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 106
  },
  814: {
    'exVersion': 3,
    'name': {
      'cn': '珂露西亚岛',
      'de': 'Kholusia',
      'en': 'Kholusia',
      'fr': 'Kholusia',
      'ja': 'コルシア島',
      'ko': '콜루시아 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 107
  },
  815: {
    'exVersion': 3,
    'name': {
      'cn': '安穆·艾兰',
      'de': 'Amh Araeng',
      'en': 'Amh Araeng',
      'fr': 'Amh Araeng',
      'ja': 'アム・アレーン',
      'ko': '아므 아랭'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 108
  },
  816: {
    'exVersion': 3,
    'name': {
      'cn': '伊尔美格',
      'de': 'Il Mheg',
      'en': 'Il Mheg',
      'fr': 'Il Mheg',
      'ja': 'イル・メグ',
      'ko': '일 메그'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 109
  },
  817: {
    'exVersion': 3,
    'name': {
      'cn': '拉凯提卡大森林',
      'de': 'Der Große Wald Rak\'tika',
      'en': 'The Rak\'tika Greatwood',
      'fr': 'Rak\'tika',
      'ja': 'ラケティカ大森林',
      'ko': '라케티카 대삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 110
  },
  818: {
    'exVersion': 3,
    'name': {
      'cn': '黑风海',
      'de': 'Tempest',
      'en': 'The Tempest',
      'fr': 'La Tempête',
      'ja': 'テンペスト',
      'ko': '템페스트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 111
  },
  819: {
    'exVersion': 3,
    'name': {
      'cn': '水晶都',
      'de': 'Crystarium',
      'en': 'The Crystarium',
      'fr': 'Cristarium',
      'ja': 'クリスタリウム',
      'ko': '크리스타리움'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 112
  },
  820: {
    'exVersion': 3,
    'name': {
      'cn': '游末邦',
      'de': 'Eulmore',
      'en': 'Eulmore',
      'fr': 'Eulmore',
      'ja': 'ユールモア',
      'ko': '율모어'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 113
  },
  821: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '水妖幻园多恩美格禁园',
      'de': 'Dohn Mheg',
      'en': 'Dohn Mheg',
      'fr': 'Dohn Mheg',
      'ja': '水妖幻園 ドォーヌ・メグ',
      'ko': '도느 메그'
    },
    'offsetX': 0,
    'offsetY': 200,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  822: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '伪造天界格鲁格火山',
      'de': 'Der Gulg',
      'en': 'Mt. Gulg',
      'fr': 'Mont Gulg',
      'ja': '偽造天界 グルグ火山',
      'ko': '굴그 화산'
    },
    'offsetX': -188,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  823: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '文明古迹奇坦那神影洞',
      'de': 'Irrungen der Qitari',
      'en': 'The Qitana Ravel',
      'fr': 'L\'Enchevêtrement des Qitari',
      'ja': '古跡探索 キタンナ神影洞',
      'ko': '키타나 신굴'
    },
    'offsetX': 0,
    'offsetY': -274,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  824: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '青龙镇魂战',
      'de': 'Seelentanz - Seiryu',
      'en': 'The Wreath of Snakes',
      'fr': 'L\'Îlot des Amertumes',
      'ja': '青龍征魂戦',
      'ko': '청룡 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 99
  },
  825: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '青龙诗魂战',
      'de': 'Seelensturm - Seiryu',
      'en': 'The Wreath of Snakes (Extreme)',
      'fr': 'L\'Îlot des Amertumes (extrême)',
      'ja': '極青龍征魂戦',
      'ko': '극 청룡 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 99
  },
  826: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '乐欲之所瓯博讷修道院',
      'de': 'Kloster von Orbonne',
      'en': 'The Orbonne Monastery',
      'fr': 'Le Monastère d\'Orbonne',
      'ja': '楽欲の僧院 オーボンヌ',
      'ko': '오본느 수도원'
    },
    'offsetX': -545,
    'offsetY': -663,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  827: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 丰水之地',
      'de': 'Eureka Hydatos',
      'en': 'The Forbidden Land, Eureka Hydatos',
      'fr': 'Eurêka Hydatos',
      'ja': '禁断の地 エウレカ：ヒュダトス編',
      'ko': '금단의 땅 에우레카: 히다토스편'
    },
    'offsetX': 0,
    'offsetY': 475,
    'sizeFactor': 100,
    'weatherRate': 100
  },
  830: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '英雄挽歌',
      'de': 'Requiem der Helden',
      'en': 'A Requiem for Heroes',
      'fr': 'Un requiem pour les héros',
      'ja': '英雄への鎮魂歌',
      'ko': '영웅을 위한 진혼가'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  831: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '多玛方城战：东风战4人亲友桌（不带食断）',
      'de': '4-Spieler-Mahjong (schnelle Partie, Kuitan deaktiviert)',
      'en': 'Four-player Mahjong (Quick Match, Kuitan Disabled)',
      'fr': 'Mahjong domien<Indent/>: 4 joueurs (partie rapide sans kuitan)',
      'ja': 'ドマ式麻雀：東風戦4人セット卓（クイタン無し）',
      'ko': '작패유희: 동풍전 4인용 탁자(부르기 단요구 없음)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  832: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '空军装甲驾驶员',
      'de': 'Luftwaffe, Feuer frei!',
      'en': 'Air Force One',
      'fr': 'As de l\'air',
      'ja': '出撃！ エアフォースパイロット',
      'ko': '출격! 에어포스 조종사'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  834: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'cn': '风之使者',
      'de': 'Durch den Sturm und zurück',
      'en': 'Messenger of the Winds',
      'fr': 'La Messagère du vent',
      'ja': '来訪せし風の御使',
      'ko': '바람의 어사'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 101
  },
  836: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '避暑离宫马利卡大井',
      'de': 'Malikahs Brunnen',
      'en': 'Malikah\'s Well',
      'fr': 'Le Puits de Malikah',
      'ja': '爽涼離宮 マリカの大井戸',
      'ko': '말리카 큰우물'
    },
    'offsetX': -65,
    'offsetY': -30,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  837: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '遇袭集落水滩村',
      'de': 'Holminster',
      'en': 'Holminster Switch',
      'fr': 'Holminster',
      'ja': '殺戮郷村 ホルミンスター',
      'ko': '홀민스터'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  838: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '末日暗影亚马乌罗提',
      'de': 'Amaurot',
      'en': 'Amaurot',
      'fr': 'Amaurote',
      'ja': '終末幻想 アーモロート',
      'ko': '아모로트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 105
  },
  840: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '异界遗构希尔科斯孪晶塔',
      'de': 'Der Kristallzwilling',
      'en': 'The Twinning',
      'fr': 'La Macle de Syrcus',
      'ja': '異界遺構 シルクス・ツイニング',
      'ko': '쌍둥이 시르쿠스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  841: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '创造机构阿尼德罗学院',
      'de': 'Akadaemia Anyder',
      'en': 'Akadaemia Anyder',
      'fr': 'Akadaemia Anydre',
      'ja': '創造機関 アナイダアカデミア',
      'ko': '애나이더 아카데미아'
    },
    'offsetX': 0,
    'offsetY': 30,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  845: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '缇坦妮雅歼灭战',
      'de': 'Offenbarung - Titania',
      'en': 'The Dancing Plague',
      'fr': 'La Valse du Monarque',
      'ja': 'ティターニア討滅戦',
      'ko': '티타니아 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 103
  },
  846: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '无瑕灵君歼灭战',
      'de': 'Offenbarung - Innozenz',
      'en': 'The Crown of the Immaculate',
      'fr': 'La Couronne de l\'Immaculé',
      'ja': 'イノセンス討滅戦',
      'ko': '이노센스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 104
  },
  847: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '哈迪斯歼灭战',
      'de': 'Offenbarung - Hades',
      'en': 'The Dying Gasp',
      'fr': 'Le Râle de l\'Agonie',
      'ja': 'ハーデス討滅戦',
      'ko': '하데스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 105
  },
  848: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '无瑕灵君歼殛战',
      'de': 'Letzte Läuterung - Innozenz',
      'en': 'The Crown of the Immaculate (Extreme)',
      'fr': 'La Couronne de l\'Immaculé (extrême)',
      'ja': '極イノセンス討滅戦',
      'ko': '극 이노센스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 104
  },
  849: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章1',
      'de': 'Edens Erwachen - Auferstehung',
      'en': 'Eden\'s Gate: Resurrection',
      'fr': 'L\'Éveil d\'Éden - Résurrection',
      'ja': '希望の園エデン：覚醒編1',
      'ko': '희망의 낙원 에덴: 각성편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  850: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章2',
      'de': 'Edens Erwachen - Niederkunft',
      'en': 'Eden\'s Gate: Descent',
      'fr': 'L\'Éveil d\'Éden - Descente',
      'ja': '希望の園エデン：覚醒編2',
      'ko': '희망의 낙원 에덴: 각성편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  851: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章3',
      'de': 'Edens Erwachen - Überflutung',
      'en': 'Eden\'s Gate: Inundation',
      'fr': 'L\'Éveil d\'Éden - Déluge',
      'ja': '希望の園エデン：覚醒編3',
      'ko': '희망의 낙원 에덴: 각성편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  852: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章4',
      'de': 'Edens Erwachen - Beerdigung',
      'en': 'Eden\'s Gate: Sepulture',
      'fr': 'L\'Éveil d\'Éden - Inhumation',
      'ja': '希望の園エデン：覚醒編4',
      'ko': '희망의 낙원 에덴: 각성편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  853: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章1',
      'de': 'Edens Erwachen - Auferstehung (episch)',
      'en': 'Eden\'s Gate: Resurrection (Savage)',
      'fr': 'L\'Éveil d\'Éden - Résurrection (sadique)',
      'ja': '希望の園エデン零式：覚醒編1',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  854: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章2',
      'de': 'Edens Erwachen - Niederkunft (episch)',
      'en': 'Eden\'s Gate: Descent (Savage)',
      'fr': 'L\'Éveil d\'Éden - Descente (sadique)',
      'ja': '希望の園エデン零式：覚醒編2',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  855: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章3',
      'de': 'Edens Erwachen - Überflutung (episch)',
      'en': 'Eden\'s Gate: Inundation (Savage)',
      'fr': 'L\'Éveil d\'Éden - Déluge (sadique)',
      'ja': '希望の園エデン零式：覚醒編3',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  856: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章4',
      'de': 'Edens Erwachen - Beerdigung (episch)',
      'en': 'Eden\'s Gate: Sepulture (Savage)',
      'fr': 'L\'Éveil d\'Éden - Inhumation (sadique)',
      'ja': '希望の園エデン零式：覚醒編4',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  858: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '缇坦妮雅歼殛战',
      'de': 'Letzte Läuterung - Titania',
      'en': 'The Dancing Plague (Extreme)',
      'fr': 'La Valse du Monarque (extrême)',
      'ja': '極ティターニア討滅戦',
      'ko': '극 티타니아 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 103
  },
  859: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '机关、诅咒、剧毒与……',
      'de': 'Der Beichtstuhl von Toupasa dem Älteren',
      'en': 'Legend of the Not-so-hidden Temple',
      'fr': 'Le Confessionnal de Toupasa l\'ancien',
      'ja': '仕掛けと呪いと毒と',
      'ko': '함정과 저주와 독'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 102
  },
  860: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '废都拿巴示艾兰',
      'de': 'Vater und Bruder',
      'en': 'Coming Clean',
      'fr': 'Sur les rails de Nabaath Areng',
      'ja': '廃都ナバスアレン',
      'ko': '나바스아렝 폐허'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 102
  },
  873: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '摇摆的天平',
      'de': 'Ob Mitleid oder Hass',
      'en': 'The Hardened Heart',
      'fr': 'Naissance d\'un bourreau',
      'ja': '揺れる天秤',
      'ko': '흔들리는 천칭'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  874: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '古代大再生魔法',
      'de': 'Alter Zauber',
      'en': 'The Lost and the Found',
      'fr': 'Magie ancestrale',
      'ja': '古の大再生魔法',
      'ko': '고대의 대재생 마법'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 110
  },
  875: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '勇敢的猎人',
      'de': 'Der Legende auf der Spur',
      'en': 'The Hunter\'s Legacy',
      'fr': 'La chasseuse de légende',
      'ja': '勇気の狩人',
      'ko': '용기 있는 사냥꾼'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 63
  },
  876: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '奈贝尔特的后悔',
      'de': 'Ein großes Opfer',
      'en': 'Nyelbert\'s Lament',
      'fr': 'Une cupidité bien généreuse',
      'ja': 'ナイルベルトの後悔',
      'ko': '나일베르트의 후회'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  879: {
    'contentType': 9,
    'exVersion': 3,
    'name': {
      'cn': '梦羽宝境',
      'de': 'Verliese von Lyhe Ghiah',
      'en': 'The Dungeons of Lyhe Ghiah',
      'fr': 'Le Donjon hypogéen du Lyhe Ghiah',
      'ja': '宝物庫 リェー・ギア・ダンジョン',
      'ko': '보물고 리예 기아 지하미궁'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  882: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '复制工厂废墟',
      'de': 'Die kopierte Fabrik',
      'en': 'The Copied Factory',
      'fr': 'La réplique de l\'usine désaffectée',
      'ja': '複製サレタ工場廃墟',
      'ko': '복제된 공장 폐허'
    },
    'offsetX': 610,
    'offsetY': 70,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  884: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '魔法宫殿宇宙宫',
      'de': 'Chateau Cosmea',
      'en': 'The Grand Cosmos',
      'fr': 'Le Cosmos coruscant',
      'ja': '魔法宮殿 グラン・コスモス',
      'ko': '그랑 코스모스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  885: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '哈迪斯孤念歼灭战',
      'de': 'Letzte Läuterung - Hades',
      'en': 'The Minstrel\'s Ballad: Hades\'s Elegy',
      'fr': 'Le Râle de l\'Agonie (extrême)',
      'ja': '極ハーデス討滅戦',
      'ko': '극 하데스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 105
  },
  887: {
    'contentType': 28,
    'exVersion': 3,
    'name': {
      'cn': '亚历山大绝境战',
      'de': 'Alexander (fatal)',
      'en': 'The Epic of Alexander (Ultimate)',
      'fr': 'L\'Odyssée d\'Alexander (fatal)',
      'ja': '絶アレキサンダー討滅戦',
      'ko': '절 알렉산더 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  888: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '昂萨哈凯尔（竞争战）',
      'de': 'Onsal Hakair (Danshig Naadam)',
      'en': 'Onsal Hakair (Danshig Naadam)',
      'fr': 'Onsal Hakair (Danshig Naadam)',
      'ja': 'オンサル・ハカイル (終節戦)',
      'ko': '온살 하카이르(계절끝 합전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 117
  },
  893: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '纯白誓约、漆黑密约',
      'de': 'Der Wolf und der Drachenreiter',
      'en': 'Vows of Virtue, Deeds of Cruelty',
      'fr': 'Vœux de vertu, actes de cruauté',
      'ja': '白き誓約、黒き密約',
      'ko': '하얀 서약, 검은 밀약'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  894: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '我心依旧',
      'de': 'Trubel im Traumland',
      'en': 'As the Heart Bids',
      'fr': 'À l\'écoute de soi',
      'ja': 'この心が望むがままに',
      'ko': '이 마음이 원하는 대로'
    },
    'offsetX': -12,
    'offsetY': 50,
    'sizeFactor': 400,
    'weatherRate': 40
  },
  897: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '红宝石神兵破坏作战',
      'de': 'Rubinfeuer - Entfesselung',
      'en': 'Cinder Drift',
      'fr': 'Les Nuées de Brandons',
      'ja': 'ルビーウェポン破壊作戦',
      'ko': '루비 웨폰 파괴작전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 28
  },
  898: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '黑风海底阿尼德罗追忆馆',
      'de': 'Anamnesis Anyder',
      'en': 'Anamnesis Anyder',
      'fr': 'Anamnesis Anydre',
      'ja': '黒風海底 アニドラス・アナムネーシス',
      'ko': '애니드라스 아남네시스'
    },
    'offsetX': 100,
    'offsetY': -390,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  900: {
    'contentType': 16,
    'exVersion': 0,
    'name': {
      'cn': '出海垂钓',
      'de': 'Auf großer Fahrt',
      'en': 'Ocean Fishing',
      'fr': 'Pêche en mer',
      'ja': 'オーシャンフィッシング',
      'ko': '먼바다 낚시'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 14
  },
  902: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章1',
      'de': 'Edens Resonanz - Entladung',
      'en': 'Eden\'s Verse: Fulmination',
      'fr': 'Les Accords d\'Éden - Fulmination',
      'ja': '希望の園エデン：共鳴編1',
      'ko': '희망의 낙원 에덴: 공명편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  903: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章2',
      'de': 'Edens Resonanz - Raserei',
      'en': 'Eden\'s Verse: Furor',
      'fr': 'Les Accords d\'Éden - Fureur',
      'ja': '希望の園エデン：共鳴編2',
      'ko': '희망의 낙원 에덴: 공명편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  904: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章3',
      'de': 'Edens Resonanz - Bildersturm',
      'en': 'Eden\'s Verse: Iconoclasm',
      'fr': 'Les Accords d\'Éden - Iconoclasme',
      'ja': '希望の園エデン：共鳴編3',
      'ko': '희망의 낙원 에덴: 공명편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  905: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章4',
      'de': 'Edens Resonanz - Erstarrung',
      'en': 'Eden\'s Verse: Refulgence',
      'fr': 'Les Accords d\'Éden - Éclat',
      'ja': '希望の園エデン：共鳴編4',
      'ko': '희망의 낙원 에덴: 공명편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  906: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章1',
      'de': 'Edens Resonanz - Entladung (episch)',
      'en': 'Eden\'s Verse: Fulmination (Savage)',
      'fr': 'Les Accords d\'Éden - Fulmination (sadique)',
      'ja': '希望の園エデン零式：共鳴編1',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  907: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章2',
      'de': 'Edens Resonanz - Raserei (episch)',
      'en': 'Eden\'s Verse: Furor (Savage)',
      'fr': 'Les Accords d\'Éden - Fureur (sadique)',
      'ja': '希望の園エデン零式：共鳴編2',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  908: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章3',
      'de': 'Edens Resonanz - Bildersturm (episch)',
      'en': 'Eden\'s Verse: Iconoclasm (Savage)',
      'fr': 'Les Accords d\'Éden - Iconoclasme (sadique)',
      'ja': '希望の園エデン零式：共鳴編3',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  909: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章4',
      'de': 'Edens Resonanz - Erstarrung (episch)',
      'en': 'Eden\'s Verse: Refulgence (Savage)',
      'fr': 'Les Accords d\'Éden - Éclat (sadique)',
      'ja': '希望の園エデン零式：共鳴編4',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  911: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '博兹雅堡垒蒸发事件',
      'de': 'Der Bozja-Vorfall',
      'en': 'The Bozja Incident',
      'fr': 'Prélude à la catastrophe',
      'ja': 'シタデル・ボズヤ蒸発事変',
      'ko': '보즈야 사건'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 123
  },
  912: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '红宝石神兵狂想作战',
      'de': 'Rubinfeuer - Trauma',
      'en': 'Cinder Drift (Extreme)',
      'fr': 'Les Nuées de Brandons (extrême)',
      'ja': '極ルビーウェポン破壊作戦',
      'ko': '극 루비 웨폰 파괴작전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 28
  },
  913: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '博兹雅堡垒追忆战',
      'de': 'Memoria Misera (extrem)',
      'en': 'Memoria Misera (Extreme)',
      'fr': 'Memoria Misera (extrême)',
      'ja': '極シタデル・ボズヤ追憶戦',
      'ko': '극 보즈야 추억전'
    },
    'offsetX': -35,
    'offsetY': 683,
    'sizeFactor': 400,
    'weatherRate': 123
  },
  914: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '英雄无法安息',
      'de': 'Von schlafenden Helden',
      'en': 'A Sleep Disturbed',
      'fr': 'L\'épreuve ronka',
      'ja': '汝、英雄の眠り妨げるは',
      'ko': '그대, 영웅의 잠을 방해하는가'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  916: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '暗影决战诺弗兰特',
      'de': 'Schlacht um Norvrandt',
      'en': 'The Heroes\' Gauntlet',
      'fr': 'La Traversée de Norvrandt',
      'ja': '漆黒決戦 ノルヴラント',
      'ko': '노르브란트'
    },
    'offsetX': 626,
    'offsetY': -611,
    'sizeFactor': 200,
    'weatherRate': 125
  },
  917: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '人偶军事基地',
      'de': 'Die Puppenfestung',
      'en': 'The Puppets\' Bunker',
      'fr': 'La base militaire des Pantins',
      'ja': '人形タチノ軍事基地',
      'ko': '인형들의 군사 기지'
    },
    'offsetX': 290,
    'offsetY': -190,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  920: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '南方博兹雅战线',
      'de': 'Bozja-Südfront',
      'en': 'The Bozjan Southern Front',
      'fr': 'Front sud de Bozja',
      'ja': '南方ボズヤ戦線',
      'ko': '남부 보즈야 전선'
    },
    'offsetX': -127,
    'offsetY': -424,
    'sizeFactor': 100,
    'weatherRate': 124
  },
  922: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '光之战士歼灭战',
      'de': 'Krieger des Lichts',
      'en': 'The Seat of Sacrifice',
      'fr': 'Le Trône du Sacrifice',
      'ja': 'ウォーリア・オブ・ライト討滅戦',
      'ko': '빛의 전사 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 125
  },
  923: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '光之战士幻耀歼灭战',
      'de': 'Krieger des Lichts (extrem)',
      'en': 'The Seat of Sacrifice (Extreme)',
      'fr': 'Le Trône du Sacrifice (extrême)',
      'ja': '極ウォーリア・オブ・ライト討滅戦',
      'ko': '극 빛의 전사 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 126
  },
  924: {
    'contentType': 9,
    'exVersion': 3,
    'name': {
      'cn': '梦羽宝殿',
      'de': 'Das Karussell von Lyhe Ghiah',
      'en': 'The Shifting Oubliettes of Lyhe Ghiah',
      'fr': 'Le Jardin secret du Lyhe Ghiah',
      'ja': '宝物庫 リェー・ギア・ダンジョン祭殿',
      'ko': '보물고 리예 기아 지하미궁 제전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  925: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '飞翔吧，前往维尔利特！',
      'de': 'Luftangriff auf Werlyt',
      'en': 'Sleep Now in Sapphire',
      'fr': 'Sur la mer de saphir',
      'ja': '飛べ！ ウェルリトへ ',
      'ko': '날아라! 웰리트를 향하여'
    },
    'offsetX': 15,
    'offsetY': -610,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  929: {
    'contentType': 16,
    'exVersion': 1,
    'name': {
      'cn': '天上福地云冠群岛',
      'de': 'Das Diadem - Erschließung',
      'en': 'The Diadem',
      'fr': 'Le Diadème',
      'ja': '雲海採集 ディアデム諸島',
      'ko': '디아뎀 제도'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 68
  },
  930: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '希瓦幻巧战',
      'de': 'Traumprüfung - Shiva',
      'en': 'The Akh Afah Amphitheatre (Unreal)',
      'fr': 'L\'Amphithéâtre d\'Akh Afah (irréel)',
      'ja': '幻シヴァ討滅戦',
      'ko': '환 시바 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  932: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '褪色的记忆',
      'de': 'Verblasste Erinnerungen',
      'en': 'Faded Memories',
      'fr': 'Souvenir périssable',
      'ja': '色あせた記憶',
      'ko': '빛바랜 기억'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 114
  },
  933: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '魔术工房玛托雅工作室',
      'de': 'Matoyas Atelier',
      'en': 'Matoya\'s Relict',
      'fr': 'L\'Atelier abandonné de Matoya',
      'ja': '魔術工房 マトーヤのアトリエ',
      'ko': '마토야의 공방'
    },
    'offsetX': 0,
    'offsetY': -75,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  934: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '绿宝石神兵破坏作战',
      'de': 'Smaragdsturm - Entfesselung',
      'en': 'Castrum Marinum',
      'fr': 'Castrum Marinum',
      'ja': 'エメラルドウェポン破壊作戦',
      'ko': '에메랄드 웨폰 파괴작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  935: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '绿宝石神兵狂想作战',
      'de': 'Smaragdsturm - Trauma',
      'en': 'Castrum Marinum (Extreme)',
      'fr': 'Castrum Marinum (extrême)',
      'ja': '極エメラルドウェポン破壊作戦',
      'ko': '극 에메랄드 웨폰 파괴작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  936: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '女王古殿',
      'de': 'Delubrum Reginae',
      'en': 'Delubrum Reginae',
      'fr': 'Delubrum Reginae',
      'ja': 'グンヒルド・ディルーブラム',
      'ko': '군힐드 사원'
    },
    'offsetX': 0,
    'offsetY': -378,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  937: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '零式女王古殿',
      'de': 'Delubrum Reginae (episch)',
      'en': 'Delubrum Reginae (Savage)',
      'fr': 'Delubrum Reginae (sadique)',
      'ja': 'グンヒルド・ディルーブラム零式',
      'ko': '군힐드 사원(영웅)'
    },
    'offsetX': 0,
    'offsetY': -378,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  938: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '黄金平原帕戈尔赞草原',
      'de': 'Die Goldene Ebene von Paglth\'an',
      'en': 'Paglth\'an',
      'fr': 'La grande prairie de Paglth\'an',
      'ja': '黄金平原 パガルザン',
      'ko': '파글단'
    },
    'offsetX': 415,
    'offsetY': -110,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  940: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '九宫幻卡：官方锦标赛',
      'de': 'Triple Triad: Manderville-Turnier',
      'en': 'Triple Triad Open Tournament',
      'fr': 'Tournoi officiel de Triple Triade',
      'ja': 'トリプルトライアド：オフィシャルトーナメント',
      'ko': '트리플 트라이어드: 공식 토너먼트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 800,
    'weatherRate': 0
  },
  941: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '九宫幻卡：锦标赛对局室',
      'de': 'Triple Triad: Privatturnier',
      'en': 'Triple Triad Invitational Parlor',
      'fr': 'Salle de tournoi libre de Triple Triade',
      'ja': 'トリプルトライアド：カスタムトーナメントルーム',
      'ko': '트리플 트라이어드: 친선 토너먼트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 800,
    'weatherRate': 0
  },
  942: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章1',
      'de': 'Edens Verheißung - Umbra',
      'en': 'Eden\'s Promise: Umbra',
      'fr': 'La Promesse d\'Éden - Nuée',
      'ja': '希望の園エデン：再生編1',
      'ko': '희망의 낙원 에덴: 재생편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  943: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章2',
      'de': 'Edens Verheißung - Litanei',
      'en': 'Eden\'s Promise: Litany',
      'fr': 'La Promesse d\'Éden - Litanie',
      'ja': '希望の園エデン：再生編2',
      'ko': '희망의 낙원 에덴: 재생편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  944: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章3',
      'de': 'Edens Verheißung - Anamorphose',
      'en': 'Eden\'s Promise: Anamorphosis',
      'fr': 'La Promesse d\'Éden - Anamorphose',
      'ja': '希望の園エデン：再生編3',
      'ko': '희망의 낙원 에덴: 재생편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  945: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章4',
      'de': 'Edens Verheißung - Ewigkeit',
      'en': 'Eden\'s Promise: Eternity',
      'fr': 'La Promesse d\'Éden - Éternité',
      'ja': '希望の園エデン：再生編4',
      'ko': '희망의 낙원 에덴: 재생편 4'
    },
    'offsetX': -71,
    'offsetY': 23,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  946: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章1',
      'de': 'Edens Verheißung - Umbra (episch)',
      'en': 'Eden\'s Promise: Umbra (Savage)',
      'fr': 'La Promesse d\'Éden - Nuée (sadique)',
      'ja': '希望の園エデン零式：再生編1',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  947: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章2',
      'de': 'Edens Verheißung - Litanei (episch)',
      'en': 'Eden\'s Promise: Litany (Savage)',
      'fr': 'La Promesse d\'Éden - Litanie (sadique)',
      'ja': '希望の園エデン零式：再生編2',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  948: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章3',
      'de': 'Edens Verheißung - Anamorphose (episch)',
      'en': 'Eden\'s Promise: Anamorphosis (Savage)',
      'fr': 'La Promesse d\'Éden - Anamorphose (sadique)',
      'ja': '希望の園エデン零式：再生編3',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  949: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章4',
      'de': 'Edens Verheißung - Ewigkeit (episch)',
      'en': 'Eden\'s Promise: Eternity (Savage)',
      'fr': 'La Promesse d\'Éden - Éternité (sadique)',
      'ja': '希望の園エデン零式：再生編4',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 75,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  950: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '钻石神兵捕获作战',
      'de': 'Diamantblitz - Entfesselung',
      'en': 'The Cloud Deck',
      'fr': 'Le Tillac des Cirrus',
      'ja': 'ダイヤウェポン捕獲作戦',
      'ko': '다이아몬드 웨폰 포획작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  951: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '钻石神兵狂想作战',
      'de': 'Diamantblitz - Trauma',
      'en': 'The Cloud Deck (Extreme)',
      'fr': 'Le Tillac des Cirrus (extrême)',
      'ja': '極ダイヤウェポン捕獲作戦',
      'ko': '극 다이아몬드 웨폰 포획작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  952: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '异形楼阁佐特塔',
      'de': 'Der Turm von Zot',
      'en': 'The Tower of Zot',
      'fr': 'La tour de Zott',
      'ja': '異形楼閣 ゾットの塔',
      'ko': '조트 탑'
    },
    'offsetX': -50,
    'offsetY': -50,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  953: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '泰坦幻巧战',
      'de': 'Traumprüfung - Titan',
      'en': 'The Navel (Unreal)',
      'fr': 'Le Nombril (irréel)',
      'ja': '幻タイタン討滅戦',
      'ko': '환 타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  954: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '威尔布兰德扬帆起航',
      'de': 'Gute Winde für Vylbrand',
      'en': 'The Great Ship Vylbrand',
      'fr': 'Un navire nommé Vylbrand',
      'ja': 'バイルブランドの船出',
      'ko': '바일브랜드 출항'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  955: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '神佑女王',
      'de': 'Hinab in die Ruinen',
      'en': 'Fit for a Queen',
      'fr': 'Que les Dieux gardent la Reine',
      'ja': 'ゴッド・セイブ・ザ・クイーン',
      'ko': '갓 세이브 더 퀸'
    },
    'offsetX': 0,
    'offsetY': -750,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  956: {
    'exVersion': 4,
    'name': {
      'cn': '迷津',
      'de': 'Labyrinthos',
      'en': 'Labyrinthos',
      'fr': 'Le Labyrinthos',
      'ja': 'ラヴィリンソス',
      'ko': '라비린토스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 131
  },
  957: {
    'exVersion': 4,
    'name': {
      'cn': '萨维奈岛',
      'de': 'Thavnair',
      'en': 'Thavnair',
      'fr': 'Thavnair',
      'ja': 'サベネア島',
      'ko': '사베네어 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 132
  },
  958: {
    'exVersion': 4,
    'name': {
      'cn': '加雷马',
      'de': 'Garlemald',
      'en': 'Garlemald',
      'fr': 'Garlemald',
      'ja': 'ガレマルド',
      'ko': '갈레말드'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 133
  },
  959: {
    'exVersion': 4,
    'name': {
      'cn': '叹息海',
      'de': 'Mare Lamentorum',
      'en': 'Mare Lamentorum',
      'fr': 'Mare Lamentorum',
      'ja': '嘆きの海',
      'ko': '비탄의 바다'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 135
  },
  960: {
    'exVersion': 4,
    'name': {
      'cn': '天外天垓',
      'de': 'Ultima Thule',
      'en': 'Ultima Thule',
      'fr': 'Ultima Thulé',
      'ja': 'ウルティマ・トゥーレ',
      'ko': '울티마 툴레'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 136
  },
  961: {
    'exVersion': 4,
    'name': {
      'cn': '厄尔庇斯',
      'de': 'Elpis',
      'en': 'Elpis',
      'fr': 'Elpis',
      'ja': 'エルピス',
      'ko': '엘피스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 134
  },
  962: {
    'exVersion': 4,
    'name': {
      'cn': '旧萨雷安',
      'de': 'Alt-Sharlayan',
      'en': 'Old Sharlayan',
      'fr': 'Vieille Sharlayan',
      'ja': 'オールド・シャーレアン',
      'ko': '올드 샬레이안'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 137
  },
  963: {
    'exVersion': 4,
    'name': {
      'cn': '拉札罕',
      'de': 'Radz-at-Han',
      'en': 'Radz-at-Han',
      'fr': 'Radz-at-Han',
      'ja': 'ラザハン',
      'ko': '라자한'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 138
  },
  966: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '希望之炮台：“塔”',
      'de': 'Der Turm, Paradigmenbrecher',
      'en': 'The Tower at Paradigm\'s Breach',
      'fr': 'La tour de la Contingence',
      'ja': '希望ノ砲台：「塔」',
      'ko': '희망의 포대: \'탑\''
    },
    'offsetX': 808,
    'offsetY': -772,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  967: {
    'exVersion': 3,
    'name': {
      'cn': '帝国海上基地干船坞',
      'de': 'Trockendock von Castrum Marinum',
      'en': 'Castrum Marinum Drydocks',
      'fr': 'Cale sèche de Castrum Marinum',
      'ja': 'カステッルム・マリヌム・ドライドック',
      'ko': '카스트룸 마리눔 건선거'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  968: {
    'contentType': 28,
    'exVersion': 4,
    'name': {
      'de': 'Drachenkrieg (fatal)',
      'en': 'Dragonsong\'s Reprise (Ultimate)',
      'fr': 'La Guerre du chant des dragons (fatal)',
      'ja': '絶竜詩戦争'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  969: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '魔导神门巴别塔',
      'de': 'Der Turm von Babil',
      'en': 'The Tower of Babil',
      'fr': 'La tour de Babil',
      'ja': '魔導神門 バブイルの塔',
      'ko': '바브일 탑'
    },
    'offsetX': 270,
    'offsetY': -300,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  970: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '末日树海万相森国',
      'de': 'Vanaspati',
      'en': 'Vanaspati',
      'fr': 'Vanaspati',
      'ja': '終末樹海 ヴァナスパティ',
      'ko': '바나스파티'
    },
    'offsetX': 280,
    'offsetY': 8,
    'sizeFactor': 200,
    'weatherRate': 141
  },
  972: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '利维亚桑幻巧战',
      'de': 'Traumprüfung - Leviathan',
      'en': 'The <Emphasis>Whorleater</Emphasis> (Unreal)',
      'fr': 'Le Briseur de marées (irréel)',
      'ja': '幻リヴァイアサン討滅戦',
      'ko': '환 리바이어선 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  973: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '最终幻想末世终迹',
      'de': 'Das Sternengrab',
      'en': 'The Dead Ends',
      'fr': 'L\'Issue aux Impasses',
      'ja': '最終幻想 レムナント',
      'ko': '잔해별'
    },
    'offsetX': -310,
    'offsetY': 15,
    'sizeFactor': 200,
    'weatherRate': 144
  },
  974: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '创造环境极北造物院',
      'de': 'Ktisis Hyperboreia',
      'en': 'Ktisis Hyperboreia',
      'fr': 'L\'Hyperborée',
      'ja': '創造環境 ヒュペルボレア造物院',
      'ko': '휘페르보레아 조물원'
    },
    'offsetX': 40,
    'offsetY': -150,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  975: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '扎杜诺尔高原',
      'de': 'Zadnor-Hochebene',
      'en': 'Zadnor',
      'fr': 'Hauts plateaux de Zadnor',
      'ja': 'ザトゥノル高原',
      'ko': '자트노르 고원'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 130
  },
  976: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '乐园都市笑笑镇',
      'de': 'Smileton',
      'en': 'Smileton',
      'fr': 'Risette-sur-lune',
      'ja': '楽園都市 スマイルトン',
      'ko': '스마일턴'
    },
    'offsetX': -22,
    'offsetY': -42,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  977: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '死斗至黎明',
      'de': 'Kampf im Morgengrauen',
      'en': 'Death Unto Dawn',
      'fr': 'Aube meurtrière',
      'ja': '黎明の死闘',
      'ko': '여명의 사투'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 114
  },
  978: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '星海深幽寻因星晶镜',
      'de': 'Das Aitiaskop',
      'en': 'The Aitiascope',
      'fr': 'Le Prisme de l\'Aitia',
      'ja': '星海潜航 アイティオン星晶鏡',
      'ko': '아이티온 별현미경'
    },
    'offsetX': 8,
    'offsetY': -501,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  986: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '电脑梦境斯提格玛四',
      'de': 'Stigma-Holometrie',
      'en': 'The Stigma Dreamscape',
      'fr': 'Rêve électrique de Stigma-4',
      'ja': '電脳夢想 スティグマ・フォー',
      'ko': '스티그마-4'
    },
    'offsetX': 144,
    'offsetY': -14,
    'sizeFactor': 200,
    'weatherRate': 140
  },
  992: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '佐迪亚克歼灭战',
      'de': 'Prophetie - Zodiark',
      'en': 'The Dark Inside',
      'fr': 'Le Cratère des Martyrs',
      'ja': 'ゾディアーク討滅戦',
      'ko': '조디아크 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  993: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '佐迪亚克暝暗歼灭战',
      'de': 'Eschatos - Zodiark',
      'en': 'The Minstrel\'s Ballad: Zodiark\'s Fall',
      'fr': 'Le Cratère des Martyrs (extrême)',
      'ja': '極ゾディアーク討滅戦',
      'ko': '극 조디아크 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  994: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '滑稽灵殿闹鬼盛宴',
      'de': 'Lustiges Bankett',
      'en': 'The Phantoms\' Feast',
      'fr': 'Le banquet cauchemardesque',
      'ja': '道化饗宴 ホーンテッドフィースト',
      'ko': '유령의 연회'
    },
    'offsetX': 20,
    'offsetY': 10,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  995: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '海德林歼灭战',
      'de': 'Prophetie - Hydaelyn',
      'en': 'The Mothercrystal',
      'fr': 'Le Cristal-mère',
      'ja': 'ハイデリン討滅戦',
      'ko': '하이델린 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  996: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '海德林晖光歼灭战',
      'de': 'Eschatos - Hydaelyn',
      'en': 'The Minstrel\'s Ballad: Hydaelyn\'s Call',
      'fr': 'Le Cristal-mère (extrême)',
      'ja': '極ハイデリン討滅戦',
      'ko': '극 하이델린 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  997: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '终结之战',
      'de': 'Prophetie - Endsängerin',
      'en': 'The Final Day',
      'fr': 'Le Répons final',
      'ja': '終焉の戦い',
      'ko': '종언의 결전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 116
  },
  998: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '终极之战',
      'de': 'Eschatos - Endsängerin',
      'en': 'The Minstrel\'s Ballad: Endsinger\'s Aria',
      'fr': 'Le Répons final (extrême)',
      'ja': '終極の戦い'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 146
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);

/***/ }),

/***/ 416:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AL": () => (/* binding */ kHealFlags),
/* harmony export */   "Fz": () => (/* binding */ ShortNamify),
/* harmony export */   "GD": () => (/* binding */ UnscrambleDamage),
/* harmony export */   "OC": () => (/* binding */ kFieldFlags),
/* harmony export */   "Tk": () => (/* binding */ GetFormattedTime),
/* harmony export */   "YU": () => (/* binding */ kShiftFlagValues),
/* harmony export */   "dH": () => (/* binding */ kAttackFlags),
/* harmony export */   "gG": () => (/* binding */ GetShareMistakeText),
/* harmony export */   "gc": () => (/* binding */ GetSoloMistakeText),
/* harmony export */   "hm": () => (/* binding */ kFlagInstantDeath),
/* harmony export */   "jT": () => (/* binding */ IsPlayerId),
/* harmony export */   "np": () => (/* binding */ playerDamageFields),
/* harmony export */   "vN": () => (/* binding */ Translate),
/* harmony export */   "zJ": () => (/* binding */ IsTriggerEnabled)
/* harmony export */ });
/* unused harmony exports kFieldDamage, damageFields */
// Fields for net log ability lines.
const kFieldFlags = 8;
const kFieldDamage = 9; // If kFieldFlags is any of these values, then consider field 10/11 as 8/9.
// It appears a little bit that flags come in pairs of values, but it's unclear
// what these mean.

const kShiftFlagValues = ['3E', '113', '213', '313'];
const kFlagInstantDeath = '36'; // Always 36 ?
// miss, damage, block, parry, instant death

const kAttackFlags = ['01', '03', '05', '06', kFlagInstantDeath];
const kHealFlags = ['04']; // TODO: should we include damage != 0 here?

const damageFields = {
  flags: `[^|]*(?:${kAttackFlags.join('|')})(?=\\|)`
};
const playerDamageFields = {
  targetId: '[^4].......',
  ...damageFields
};
/* eslint-disable max-len */

/*
Field 7 Flags:
  '0' = meditation, aoe with no targets

  damage low bytes:
    0x01 = dodge
    0x03 = damage
    0x05 = blocked damage
    0x06 = parried damage
    0x?? = instant death

  damage modifiers:
    0x100 = crit damage
    0x200 = direct hit damage
    0x300 = crit direct hit damage

  heal modifiers:
    0x00004 = heal
    0x10004 = crit heal

  Special cases:
    * If flags are 3E, shift 9+10 two over to be 7+8.  (why???)
    * Plenary indulgence has flags=113/213/313 for stacks, shift two as well.

  Damage:
    * Left-extend zeroes to 8 chars, e.g. 2934001 => 02934001, or 1000 => 00001000.
    * Should be interpreted as 4 bytes (8 chars).
    * First two bytes are damage.
    * 00004000 mask implies extra damage (and some weird math):
      bytes = ABCD, where C = 0x40.
      total damage = DA(B-D), as three bytes together interpreted as an integer.
      e.g. 424E400F => 0F 42 (4E - 0F = 3F) => 0F423F => 999999
    * 00001000 mask implies 0 damage, e.g. hallowed.

Examples:
(1) 18216 damage from Grand Cross Alpha (basic damage)
  16:40001333:Neo Exdeath:242B:Grand Cross Alpha:1048638C:Tater Tot:750003:47280000:1C:80242B:0:0:0:0:0:0:0:0:0:0:0:0:36906:41241:5160:5160:880:1000:0.009226365:-7.81128:-1.192093E-07:16043015:17702272:12000:12000:1000:1000:-0.01531982:-19.02808:0:

(2) 82538 damage from Hyperdrive (0x4000 extra damage mask)
  15:40024FBA:Kefka:28E8:Hyperdrive:106C1DBA:Okonomi Yaki:750003:426B4001:1C:28E88000:0:0:0:0:0:0:0:0:0:0:0:0:35811:62464:4560:4560:940:1000:-0.1586061:-5.753153:0:30098906:31559062:12000:12000:1000:1000:0.3508911:0.4425049:2.384186E-07:

(3) 22109 damage from Grand Cross Omega (:3E:0: shift, unknown 0x40000 flag)
  16:40001333:Neo Exdeath:242D:Grand Cross Omega:1048638C:Tater Tot:3E:0:750003:565D0000:1C:80242D:0:0:0:0:0:0:0:0:0:0:41241:41241:5160:5160:670:1000:-0.3251641:6.526299:1.192093E-07:7560944:17702272:12000:12000:1000:1000:0:19:2.384186E-07:

(4) 15732 crit heal from 3 confession stack Plenary Indulgence (:?13:4C3: shift)
  16:10647D2F:Tako Yaki:1D09:Plenary Indulgence:106DD019:Okonomi Yaki:313:4C3:10004:3D74:0:0:0:0:0:0:0:0:0:0:0:0:7124:40265:14400:9192:1000:1000:-10.78815:11.94781:0:11343:40029:19652:16451:1000:1000:6.336648:7.710004:0:

(5) instant death twister
  16:40004D5D:Twintania:26AB:Twister:10573FDC:Tini Poutini:33:0:1C:26AB8000:0:0:0:0:0:0:0:0:0:0:0:0:43985:43985:5760:5760:910:1000:-8.42179:9.49251:-1.192093E-07:57250:57250:0:0:1000:1000:-8.565645:10.20959:0:

(6) zero damage targetless aoe (E0000000 target)
  16:103AAEE4:Potato Chippy:B1:Miasma II:E0000000::0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0::::::::::19400:40287:17649:17633:1000:1000:-0.656189:-3.799561:-5.960464E-08:

*/

/* eslint-enable */

const ShortNamify = (name, playerNicks) => {
  // TODO: make this unique among the party in case of first name collisions.
  // TODO: probably this should be a general cactbot utility.
  if (!name) return '???';
  const nick = playerNicks[name];
  if (nick) return nick;
  const idx = name.indexOf(' ');
  return idx < 0 ? name : name.substr(0, idx);
};
const Translate = (lang, obj) => {
  var _obj$lang;

  if (typeof obj !== 'object') return obj;
  return (_obj$lang = obj[lang]) !== null && _obj$lang !== void 0 ? _obj$lang : obj['en'];
};
const GetFormattedTime = (baseTime, time) => {
  if (!baseTime) return '';
  const totalSeconds = Math.floor((time - baseTime) / 1000);
  const seconds = totalSeconds % 60;
  const minutes = Math.floor(totalSeconds / 60);
  return `${minutes}:${seconds < 10 ? `0${seconds}` : seconds}`;
}; // Turns a scrambled string damage field into an integer.
// Since fields are modified in place right now, this does nothing if called
// again with an integer.  This is kind of a hack, sorry.

const UnscrambleDamage = field => {
  if (field === undefined) return 0;
  const len = field.length;
  if (len <= 4) return 0; // Get the left two bytes as damage.

  let damage = parseInt(field.substr(0, len - 4), 16); // Check for third byte == 0x40.

  if (field[len - 4] === '4') {
    // Wrap in the 4th byte as extra damage.  See notes above.
    const rightDamage = parseInt(field.substr(len - 2, 2), 16);
    damage = damage - rightDamage + (rightDamage << 16);
  }

  return damage;
};
const IsPlayerId = id => {
  if (id === undefined) return false;
  const firstChar = id[0];
  return firstChar ? firstChar < '4' : false;
};
const IsTriggerEnabled = (options, id) => {
  if (id in options.DisabledTriggers) return false;
  const autoConfig = options.PerTriggerAutoConfig[id];
  if (autoConfig) return autoConfig.enabled;
  return true;
};
const GetSoloMistakeText = ability => {
  return {
    en: `${ability} (alone)`,
    de: `${ability} (allein)`,
    fr: `${ability} (seul(e))`,
    ja: `${ability} (一人)`,
    cn: `${ability} (单吃)`,
    ko: `${ability} (혼자 맞음)`
  };
};
const GetShareMistakeText = (ability, numTargets) => {
  return {
    en: `${ability} (share x${numTargets})`,
    de: `${ability} (geteilt mit ${numTargets})`,
    fr: `${ability} (partage)`,
    // FIXME
    ja: `${ability} (頭割り)`,
    // FIXME
    cn: `${ability} (重叠: ${numTargets}次)`,
    ko: `${ability} (같이 맞음: ${numTargets}명)`
  };
};

/***/ }),

/***/ 875:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {


// EXTERNAL MODULE: ./resources/not_reached.ts
var not_reached = __webpack_require__(62);
// EXTERNAL MODULE: ./resources/overlay_plugin_api.ts
var overlay_plugin_api = __webpack_require__(959);
// EXTERNAL MODULE: ./resources/user_config.ts
var user_config = __webpack_require__(456);
// EXTERNAL MODULE: ./resources/netlog_defs.ts
var netlog_defs = __webpack_require__(21);
// EXTERNAL MODULE: ./resources/netregexes.ts
var netregexes = __webpack_require__(622);
// EXTERNAL MODULE: ./resources/regexes.ts
var regexes = __webpack_require__(402);
;// CONCATENATED MODULE: ./ui/raidboss/common_replacement.ts
// TODO: maybe this should be structured identically to a timelineReplace section.
const parsedLB = '00:0839::';
const networkLB = '00\\|[^|]*\\|0839\\|\\|';
const netRegexLB = '\\\\\\|0839\\\\\\|\\[\\^\\|\\]\\*\\\\\\|'; // It's awkward to refer to these string keys, so name them as replaceSync[keys.sealKey].

const syncKeys = {
  // Seal is trying to match these types of lines, and is more complicated because it's
  // trying to also capture the area name:
  //   parsed log lines: 00:0839::Something will be sealed off
  //   network log lines: 00|timestamp|0839||Something will be sealed off
  //   NetRegexes: ^^00\|[^|]*\|0839\|[^|]*\|Something will be sealed off.*?\|
  seal: `(?<=${parsedLB}|${networkLB}|${netRegexLB})([^|]*) will be sealed off(?: in (?:[0-9]+ seconds)?)?`,
  unseal: 'is no longer sealed',
  engage: 'Engage!'
};
const textKeys = {
  // Match directions in replaceText
  // eg: `(N)`, `(SW)`, `(NE/NW)`, etc.
  E: '(?<= \\(|\\/)E(?=\\)|\\/)',
  N: '(?<= \\(|\\/)N(?=\\)|\\/)',
  S: '(?<= \\(|\\/)S(?=\\)|\\/)',
  W: '(?<= \\(|\\/)W(?=\\)|\\/)',
  NE: '(?<= \\(|\\/)NE(?=\\)|\\/)',
  NW: '(?<= \\(|\\/)NW(?=\\)|\\/)',
  SE: '(?<= \\(|\\/)SE(?=\\)|\\/)',
  SW: '(?<= \\(|\\/)SW(?=\\)|\\/)',
  // Match Roles in replaceText
  // eg: `(Tank)`, `(Healer)`, `(DPS)`, etc
  Tank: '(?<= \\(|\\/)Tanks?(?=\\)|\\/)',
  Healer: '(?<= \\(|\\/)Healers?(?=\\)|\\/)',
  DPS: '(?<= \\(|\\/)DPS(?=\\)|\\/)',
  // Match `--1--` style text.
  Number: '--(\\s*\\d+\\s*)--'
};
const common_replacement_commonReplacement = {
  replaceSync: {
    [syncKeys.seal]: {
      en: '$1 will be sealed off',
      de: 'Noch 15 Sekunden, bis sich (?:(?:der|die|das) )?(?:Zugang zu(?:[rm]| den)? )?$1 schließt',
      fr: 'Fermeture d(?:e|u|es) (?:l\'|la |les? )?$1 dans',
      ja: '$1の封鎖まであと',
      cn: '距$1被封锁还有',
      ko: '15초 후에 $1[이가] 봉쇄됩니다'
    },
    [syncKeys.unseal]: {
      en: 'is no longer sealed',
      de: 'öffnet sich (?:wieder|erneut)',
      fr: 'Ouverture ',
      ja: 'の封鎖が解かれた',
      cn: '的封锁解除了',
      ko: '의 봉쇄가 해제되었습니다'
    },
    [syncKeys.engage]: {
      en: 'Engage!',
      de: 'Start!',
      fr: 'À l\'attaque',
      ja: '戦闘開始！',
      cn: '战斗开始！',
      ko: '전투 시작!'
    }
  },
  replaceText: {
    '--adds spawn--': {
      de: '--Adds erscheinen--',
      fr: '--Apparition d\'adds--',
      ja: '--雑魚出現--',
      cn: '--小怪出现--',
      ko: '--쫄 소환--'
    },
    '--adds targetable--': {
      de: '--Adds anvisierbar--',
      fr: '--Adds ciblables--',
      ja: '--雑魚ターゲット可能--',
      cn: '--小怪可选中--',
      ko: '--쫄 타겟 가능--'
    },
    '--center--': {
      de: '--Mitte--',
      fr: '--Centre--',
      ja: '--センター--',
      cn: '--中央--',
      ko: '--중앙--'
    },
    '\\(center\\)': {
      de: '(Mitte)',
      fr: '(Centre)',
      ja: '(センター)',
      cn: '(中央)',
      ko: '(중앙)'
    },
    '--clones appear--': {
      de: '--Klone erscheinen--',
      fr: '--Apparition des clones--',
      ja: '--幻影出現--',
      cn: '--幻影出现--',
      ko: '--분신 소환--'
    },
    '--corner--': {
      de: '--Ecke--',
      fr: '--Coin--',
      ja: '--コーナー--',
      cn: '--角落--',
      ko: '--구석--'
    },
    '--dps burn--': {
      de: '--DPS burn--',
      fr: '--Burn dps--',
      ja: '--火力出せ--',
      cn: '--转火--',
      ko: '--딜 체크--'
    },
    '--east--': {
      de: '--Osten--',
      fr: '--Est--',
      ja: '--東--',
      cn: '--东--',
      ko: '--동쪽--'
    },
    '\\(east\\)': {
      de: '(Osten)',
      fr: '(Est)',
      ja: '(東)',
      cn: '(东)',
      ko: '(동쪽)'
    },
    'Enrage': {
      de: 'Finalangriff',
      fr: 'Enrage',
      ja: '時間切れ',
      cn: '狂暴',
      ko: '전멸기'
    },
    '--frozen--': {
      de: '--eingefroren--',
      fr: '--Gelé--',
      ja: '--凍結--',
      cn: '--冻结--',
      ko: '--빙결--'
    },
    '--in--': {
      de: '--Rein--',
      fr: '--Intérieur--',
      ja: '--中--',
      cn: '--内--',
      ko: '--안--'
    },
    '\\(In\\)': {
      de: '(Rein)',
      fr: '(Intérieur)',
      ja: '(中)',
      cn: '(内)',
      ko: '(안)'
    },
    '\\(inner\\)': {
      de: '(innen)',
      fr: '(intérieur)',
      ja: '(中)',
      cn: '(内)',
      ko: '(안)'
    },
    '--jump--': {
      de: '--Sprung--',
      fr: '--Saut--',
      ja: '--ジャンプ--',
      cn: '--跳--',
      ko: '--점프--'
    },
    '--knockback--': {
      de: '--Rückstoß--',
      fr: '--Poussée--',
      ja: '--ノックバック--',
      cn: '--击退--',
      ko: '--넉백--'
    },
    '--middle--': {
      de: '--Mitte--',
      fr: '--Milieu--',
      ja: '--中央--',
      cn: '--中间--',
      ko: '--중앙--'
    },
    '\\(middle\\)': {
      de: '(Mitte)',
      fr: '(Milieu)',
      ja: '(中央)',
      cn: '(中间)',
      ko: '(중앙)'
    },
    '--north--': {
      de: '--Norden--',
      fr: '--Nord--',
      ja: '--北--',
      cn: '--北--',
      ko: '--북쪽--'
    },
    '\\(north\\)': {
      de: '(Norden)',
      fr: '(Nord)',
      ja: '(北)',
      cn: '(北)',
      ko: '(북쪽)'
    },
    '--northeast--': {
      de: '--Nordosten--',
      fr: '--Nord-Est--',
      ja: '--北東--',
      cn: '--东北--',
      ko: '--북동--'
    },
    '--northwest--': {
      de: '--Nordwesten--',
      fr: '--Nord-Ouest--',
      ja: '--北西--',
      cn: '--西北--',
      ko: '--북서--'
    },
    '--out--': {
      de: '--Raus--',
      fr: '--Extérieur--',
      ja: '--外--',
      cn: '--外--',
      ko: '--밖--'
    },
    '\\(Out\\)': {
      de: '(Raus)',
      fr: '(Extérieur)',
      ja: '(外)',
      cn: '(外)',
      ko: '(밖)'
    },
    '\\(outer\\)': {
      de: '(außen)',
      fr: '(extérieur)',
      ja: '(外)',
      cn: '(外)',
      ko: '(밖)'
    },
    '\\(outside\\)': {
      de: '(Draußen)',
      fr: '(À l\'extérieur)',
      ja: '(外)',
      cn: '(外面)',
      ko: '(바깥)'
    },
    '--rotate--': {
      de: '--rotieren--',
      fr: '--rotation--',
      ja: '--回転--',
      cn: '--旋转--',
      ko: '--회전--'
    },
    '--south--': {
      de: '--Süden--',
      fr: '--Sud--',
      ja: '--南--',
      cn: '--南--',
      ko: '--남쪽--'
    },
    '\\(south\\)': {
      de: '(Süden)',
      fr: '(Sud)',
      ja: '(南)',
      cn: '(南)',
      ko: '(남쪽)'
    },
    '--southeast--': {
      de: '--Südosten--',
      fr: '--Sud-Est--',
      ja: '--南東--',
      cn: '--东南--',
      ko: '--남동--'
    },
    '--southwest--': {
      de: '--Südwesten--',
      fr: '--Sud-Ouest--',
      ja: '--南西--',
      cn: '--西南--',
      ko: '--남서--'
    },
    '--split--': {
      de: '--teilen--',
      fr: '--division--',
      ja: '--分裂--',
      cn: '--分裂--',
      ko: '--분열--'
    },
    '--stun--': {
      de: '--Betäubung--',
      fr: '--Étourdissement--',
      ja: '--スタン--',
      cn: '--击晕--',
      ko: '--기절--'
    },
    '--sync--': {
      de: '--synchronisation--',
      fr: '--synchronisation--',
      ja: '--シンク--',
      cn: '--同步化--',
      ko: '--동기화--'
    },
    '--([0-9]+x )?targetable--': {
      de: '--$1anvisierbar--',
      fr: '--$1ciblable--',
      ja: '--$1ターゲット可能--',
      cn: '--$1可选中--',
      ko: '--$1타겟 가능--'
    },
    '--teleport--': {
      de: '--teleportation--',
      fr: '--téléportation--',
      ja: '--テレポート--',
      cn: '--传送--',
      ko: '--순간 이동--'
    },
    '--untargetable--': {
      de: '--nich anvisierbar--',
      fr: '--non ciblable--',
      ja: '--ターゲット不可--',
      cn: '--无法选中--',
      ko: '--타겟 불가능--'
    },
    '--west--': {
      de: '--Westen--',
      fr: '--Ouest--',
      ja: '--西--',
      cn: '--西--',
      ko: '--서쪽--'
    },
    [textKeys.E]: {
      de: 'O',
      fr: 'E',
      ja: '東',
      cn: '东',
      ko: '동'
    },
    [textKeys.N]: {
      de: 'N',
      fr: 'N',
      ja: '北',
      cn: '北',
      ko: '북'
    },
    [textKeys.S]: {
      de: 'S',
      fr: 'S',
      ja: '南',
      cn: '南',
      ko: '남'
    },
    [textKeys.W]: {
      de: 'W',
      fr: 'O',
      ja: '西',
      cn: '西',
      ko: '서'
    },
    [textKeys.NE]: {
      de: 'NO',
      fr: 'NE',
      ja: '北東',
      cn: '东北',
      ko: '북동'
    },
    [textKeys.NW]: {
      de: 'NW',
      fr: 'NO',
      ja: '北西',
      cn: '西北',
      ko: '북서'
    },
    [textKeys.SE]: {
      de: 'SO',
      fr: 'SE',
      ja: '南東',
      cn: '东南',
      ko: '남동'
    },
    [textKeys.SW]: {
      de: 'SW',
      fr: 'SO',
      ja: '南西',
      cn: '西南',
      ko: '남서'
    },
    [textKeys.Tank]: {
      de: 'Tank',
      fr: 'Tank',
      ja: 'タンク',
      cn: '坦克',
      ko: '탱커'
    },
    [textKeys.Healer]: {
      de: 'Heiler',
      fr: 'Healer',
      ja: 'ヒーラー',
      cn: '治疗',
      ko: '힐러'
    },
    [textKeys.DPS]: {
      de: 'DPS',
      fr: 'DPS',
      ja: 'DPS',
      cn: 'DPS',
      ko: '딜러'
    },
    [textKeys.Number]: {
      de: '--$1--',
      fr: '--$1--',
      ja: '--$1--',
      cn: '--$1--',
      ko: '--$1--'
    }
  }
}; // Keys into commonReplacement objects that represent "partial" translations,
// in the sense that even if it applies, there still needs to be another
// translation for it to be complete.  These keys should be exactly the same
// as the keys from the commonReplacement block above.  These are used for
// timeline regexes only.

const common_replacement_partialCommonTimelineReplacementKeys = [// Because the zone name needs to be translated here, this is partial.
syncKeys.seal, // Directions
textKeys.E, textKeys.N, textKeys.S, textKeys.W, textKeys.NE, textKeys.NW, textKeys.SE, textKeys.SW, // Roles
textKeys.Tank, textKeys.Healer, textKeys.DPS]; // Same as the timeline version above, but only for trigger regexes.

const common_replacement_partialCommonTriggerReplacementKeys = [// Because the zone name needs to be translated here, this is partial.
syncKeys.seal];
;// CONCATENATED MODULE: ./resources/translations.ts


 // Fill in LocaleRegex so that things like LocaleRegex.countdownStart.de is a valid regex.

const localeLines = {
  countdownStart: {
    en: 'Battle commencing in (?<time>\\y{Float}) seconds! \\((?<player>.*?)\\)',
    de: 'Noch (?<time>\\y{Float}) Sekunden bis Kampfbeginn! \\((?<player>.*?)\\)',
    fr: 'Début du combat dans (?<time>\\y{Float}) secondes[ ]?! \\((?<player>.*?)\\)',
    ja: '戦闘開始まで(?<time>\\y{Float})秒！ （(?<player>.*?)）',
    cn: '距离战斗开始还有(?<time>\\y{Float})秒！ （(?<player>.*?)）',
    ko: '전투 시작 (?<time>\\y{Float})초 전! \\((?<player>.*?)\\)'
  },
  countdownEngage: {
    en: 'Engage!',
    de: 'Start!',
    fr: 'À l\'attaque[ ]?!',
    ja: '戦闘開始！',
    cn: '战斗开始！',
    ko: '전투 시작!'
  },
  countdownCancel: {
    en: 'Countdown canceled by (?<player>\\y{Name})',
    de: '(?<player>\\y{Name}) hat den Countdown abgebrochen',
    fr: 'Le compte à rebours a été interrompu par (?<player>\\y{Name})[ ]?\\.',
    ja: '(?<player>\\y{Name})により、戦闘開始カウントがキャンセルされました。',
    cn: '(?<player>\\y{Name})取消了战斗开始倒计时。',
    ko: '(?<player>\\y{Name}) 님이 초읽기를 취소했습니다\\.'
  },
  areaSeal: {
    en: '(?<area>.*?) will be sealed off in (?<time>\\y{Float}) seconds!',
    de: 'Noch (?<time>\\y{Float}) Sekunden, bis sich (?<area>.*?) schließt',
    fr: 'Fermeture (?<area>.*?) dans (?<time>\\y{Float}) secondes[ ]?\\.',
    ja: '(?<area>.*?)の封鎖まであと(?<time>\\y{Float})秒',
    cn: '距(?<area>.*?)被封锁还有(?<time>\\y{Float})秒',
    ko: '(?<time>\\y{Float})초 후에 (?<area>.*?)(이|가) 봉쇄됩니다\\.'
  },
  areaUnseal: {
    en: '(?<area>.*?) is no longer sealed.',
    de: '(?<area>.*?) öffnet sich erneut.',
    fr: 'Ouverture (?<area>.*?)[ ]?!',
    ja: '(?<area>.*?)の封鎖が解かれた……',
    cn: '(?<area>.*?)的封锁解除了',
    ko: '(?<area>.*?)의 봉쇄가 해제되었습니다\\.'
  },
  // Recipe name always start with \ue0bb
  // HQ icon is \ue03c
  craftingStart: {
    en: 'You begin synthesizing (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
    de: 'Du hast begonnen, durch Synthese (?<count>(ein(e|es|em|er)?|\\d+) )?\ue0bb(?<recipe>.*) herzustellen\\.',
    fr: 'Vous commencez à fabriquer (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(×(?<count>\\d+))?の製作を開始した。',
    cn: '(?<player>\\y{Name})开始制作“\ue0bb(?<recipe>.*)”(×(?<count>\\d+))?。',
    ko: '\ue0bb(?<recipe>.*)(×(?<count>\\d+)개)? 제작을 시작합니다\\.'
  },
  trialCraftingStart: {
    en: 'You begin trial synthesis of \ue0bb(?<recipe>.*)\\.',
    de: 'Du hast mit der Testsynthese von \ue0bb(?<recipe>.*) begonnen\\.',
    fr: 'Vous commencez une synthèse d\'essai pour une? \ue0bb(?<recipe>.*)\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習を開始した。',
    cn: '(?<player>\\y{Name})开始练习制作\ue0bb(?<recipe>.*)。',
    ko: '\ue0bb(?<recipe>.*) 제작 연습을 시작합니다\\.'
  },
  craftingFinish: {
    en: 'You synthesize (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
    de: 'Du hast erfolgreich (?<count>(ein(e|es|em|er)?|\\d+) )?(?<recipe>.*)(\ue03c)? hergestellt\\.',
    fr: 'Vous fabriquez (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+))?を完成させた！',
    cn: '(?<player>\\y{Name})制作“\ue0bb(?<recipe>.*)(\ue03c)?”(×(?<count>\\d+))?成功！',
    ko: '(?<player>\\y{Name}) 님이 \ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+)개)?(을|를) 완성했습니다!'
  },
  trialCraftingFinish: {
    en: 'Your trial synthesis of \ue0bb(?<recipe>.*) proved a success!',
    de: 'Die Testsynthese von \ue0bb(?<recipe>.*) war erfolgreich!',
    fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) a été couronnée de succès!',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に成功した！',
    cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)成功了！',
    ko: '\ue0bb(?<recipe>.*) 제작 연습에 성공했습니다!'
  },
  craftingFail: {
    en: 'Your synthesis fails!',
    de: 'Deine Synthese ist fehlgeschlagen!',
    fr: 'La synthèse échoue\\.{3}',
    ja: '(?<player>\\y{Name})は製作に失敗した……',
    cn: '(?<player>\\y{Name})制作失败了……',
    ko: '제작에 실패했습니다……\\.'
  },
  trialCraftingFail: {
    en: 'Your trial synthesis of \ue0bb(?<recipe>.*) failed\\.{3}',
    de: 'Die Testsynthese von \ue0bb(?<recipe>.*) ist fehlgeschlagen\\.{3}',
    fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) s\'est soldée par un échec\\.{3}',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に失敗した……',
    cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)失败了……',
    ko: '\ue0bb(?<recipe>.*) 제작 연습에 실패했습니다……\\.'
  },
  craftingCancel: {
    en: 'You cancel the synthesis\\.',
    de: 'Du hast die Synthese abgebrochen\\.',
    fr: 'La synthèse est annulée\\.',
    ja: '(?<player>\\y{Name})は製作を中止した。',
    cn: '(?<player>\\y{Name})中止了制作作业。',
    ko: '제작을 중지했습니다\\.'
  },
  trialCraftingCancel: {
    en: 'You abandoned trial synthesis\\.',
    de: 'Testsynthese abgebrochen\\.',
    fr: 'Vous avez interrompu la synthèse d\'essai\\.',
    ja: '(?<player>\\y{Name})は製作練習を中止した。',
    cn: '(?<player>\\y{Name})停止了练习。',
    ko: '제작 연습을 중지했습니다\\.'
  }
};

class RegexSet {
  get localeRegex() {
    if (this.regexes) return this.regexes;
    this.regexes = this.buildLocaleRegexes(localeLines, s => regexes/* default.gameLog */.Z.gameLog({
      line: s + '.*?'
    }));
    return this.regexes;
  }

  get localeNetRegex() {
    if (this.netRegexes) return this.netRegexes;
    this.netRegexes = this.buildLocaleRegexes(localeLines, s => netregexes/* default.gameLog */.Z.gameLog({
      line: s + '[^|]*?'
    }));
    return this.netRegexes;
  }

  buildLocaleRegexes(locales, builder) {
    return Object.fromEntries(Object.entries(locales).map(([key, lines]) => [key, this.buildLocaleRegex(lines, builder)]));
  }

  buildLocaleRegex(lines, builder) {
    const regexEn = builder(lines.en);
    return {
      en: regexEn,
      de: lines.de !== undefined ? builder(lines.de) : regexEn,
      fr: lines.fr !== undefined ? builder(lines.fr) : regexEn,
      ja: lines.ja !== undefined ? builder(lines.ja) : regexEn,
      cn: lines.cn !== undefined ? builder(lines.cn) : regexEn,
      ko: lines.ko !== undefined ? builder(lines.ko) : regexEn
    };
  }

}

const regexSet = new RegexSet();
const LocaleRegex = regexSet.localeRegex;
const LocaleNetRegex = regexSet.localeNetRegex; // Translate a trigger or timeline regex (replaceSync) or timeline text (replaceText),
// returning the text and whether or not it can be considered "translated".
// Note, this won't catch anything that needs multiple translations, but will catch
// anything from common translations that are partial (e.g. a seal regex needs
// a zone name to be considered a full translation.

const translateWithReplacements = (text, replaceKey, replaceLang, replacements) => {
  // All regex replacements are always global.
  const isGlobal = replaceKey === 'replaceSync';
  let wasTranslated = false;

  for (const r of replacements !== null && replacements !== void 0 ? replacements : []) {
    if (r.locale && r.locale !== replaceLang) continue;
    const reps = r[replaceKey];
    if (!reps) continue;

    for (const [key, value] of Object.entries(reps)) {
      const regex = isGlobal ? Regexes.parseGlobal(key) : Regexes.parse(key);
      if (text.match(regex)) wasTranslated = true;
      text = text.replace(regex, value);
    }
  } // Common Replacements


  const replacement = commonReplacement[replaceKey];

  for (const [key, value] of Object.entries(replacement !== null && replacement !== void 0 ? replacement : {})) {
    const repl = value[replaceLang];
    if (repl === undefined) continue;
    const regex = isGlobal ? Regexes.parseGlobal(key) : Regexes.parse(key);
    const partialKeys = replaceKey === 'replaceSync' ? partialCommonTriggerReplacementKeys : partialCommonTimelineReplacementKeys;

    if (text.match(regex)) {
      // Consider any partial translations as "not found" (e.g. a seal
      // message that still needs the zone name to be translated to be
      // considered fully translated).
      let isPartial = false;

      for (const partialKey of partialKeys) {
        if (Regexes.parseGlobal(partialKey).test(key)) {
          isPartial = true;
          break;
        }
      }

      if (!isPartial) wasTranslated = true;
    }

    text = text.replace(regex, repl);
  }

  return {
    text,
    wasTranslated
  };
}; // Translates a timeline or trigger regex for a given language.

const translateRegex = (text, replaceLang, replacements) => {
  if (typeof text === 'string') return translateWithReplacements(text, 'replaceSync', replaceLang, replacements).text;
  return translateWithReplacements(text.source, 'replaceSync', replaceLang, replacements).text;
}; // Translates a timeline text for a given language.

const translateText = (text, replaceLang, replacements) => translateWithReplacements(text, 'replaceText', replaceLang, replacements).text;
// EXTERNAL MODULE: ./resources/util.ts
var util = __webpack_require__(509);
// EXTERNAL MODULE: ./resources/zone_id.ts
var zone_id = __webpack_require__(588);
// EXTERNAL MODULE: ./resources/zone_info.ts
var zone_info = __webpack_require__(902);
;// CONCATENATED MODULE: ./ui/oopsyraidsy/combat_state.ts
// Handles when to start and stop combat.
// Outside callers (e.g. DamageTracker) can call StartCombat/StopCombat as needed from
// various sources (lines, events) and this will apply hysteresis to only emit
// OnStartEncounter/OnStopEncounter events back to DamageTracker on edge transitions.
class CombatState {
  constructor(damageTracker) {
    this.damageTracker = damageTracker;
    this.Reset();
  }

  Reset() {
    this.startTime = undefined;
    this.stopTime = undefined;
  }

  StartCombat(timestamp) {
    // Wiping / in combat state / damage are all racy with each other.
    // One potential ordering:
    //   -in combat: false
    //   -wipe
    //   -belated death/damage <-- this damage shouldn't start
    //   -damage (early pull) <-- this damage should
    //   -in combat: true
    // Therefore, suppress "start combat" after wipes within a short
    // period of time.  Gross.
    if (this.startTime !== undefined) return;
    const kMinimumSecondsAfterWipe = 5;
    if (this.stopTime && timestamp - this.stopTime < 1000 * kMinimumSecondsAfterWipe) return;
    this.startTime = timestamp;
    this.stopTime = undefined;
    this.damageTracker.OnStartEncounter(timestamp);
  }

  StopCombat(timestamp) {
    if (this.stopTime !== undefined) return;
    this.startTime = undefined;
    this.stopTime = timestamp;
    this.damageTracker.OnStopEncounter(timestamp);
  }

}
// EXTERNAL MODULE: ./ui/oopsyraidsy/oopsy_common.ts
var oopsy_common = __webpack_require__(416);
;// CONCATENATED MODULE: ./resources/party.ts


const emptyRoleToPartyNames = () => {
  return {
    tank: [],
    healer: [],
    dps: [],
    crafter: [],
    gatherer: [],
    none: []
  };
};

class PartyTracker {
  details = [];
  partyNames_ = [];
  partyIds_ = [];
  allianceNames_ = [];
  allianceIds_ = [];
  nameToRole_ = {};
  idToName_ = {};
  roleToPartyNames_ = emptyRoleToPartyNames(); // Bind this to PartyChanged events.

  onPartyChanged(e) {
    this.reset();
    this.details = e.party;

    for (const p of e.party) {
      this.allianceIds_.push(p.id);
      this.allianceNames_.push(p.name);
      const jobName = util/* default.jobEnumToJob */.Z.jobEnumToJob(p.job);
      const role = util/* default.jobToRole */.Z.jobToRole(jobName);
      this.idToName_[p.id] = p.name;
      this.nameToRole_[p.name] = role;

      if (p.inParty) {
        this.partyIds_.push(p.id);
        this.partyNames_.push(p.name);
        this.roleToPartyNames_[role].push(p.name);
      }
    }
  }

  reset() {
    // original event data
    this.details = [];
    this.partyNames_ = [];
    this.partyIds_ = [];
    this.allianceNames_ = [];
    this.allianceIds_ = [];
    this.nameToRole_ = {};
    this.idToName_ = {}; // role -> [names] but only for party

    this.roleToPartyNames_ = emptyRoleToPartyNames();
  } // returns an array of the names of players in your immediate party


  get partyNames() {
    return this.partyNames_;
  }

  get partyIds() {
    return this.partyIds_;
  } // returns an array of the names of players in your alliance


  get allianceNames() {
    return this.allianceNames_;
  } // returns an array of the names of tanks in your immediate party


  get tankNames() {
    return this.roleToPartyNames_['tank'];
  } // returns an array of the names of healers in your immediate party


  get healerNames() {
    return this.roleToPartyNames_['healer'];
  } // returns an array of the names of dps players in your immediate party


  get dpsNames() {
    return this.roleToPartyNames_['dps'];
  } // returns true if the named player in your alliance is a particular role


  isRole(name, role) {
    return this.nameToRole_[name] === role;
  } // returns true if the named player in your alliance is a tank


  isTank(name) {
    return this.isRole(name, 'tank');
  } // returns true if the named player in your alliance is a healer


  isHealer(name) {
    return this.isRole(name, 'healer');
  } // returns true if the named player in your alliance is a dps


  isDPS(name) {
    return this.isRole(name, 'dps');
  } // returns true if the named player is in your immediate party


  inParty(name) {
    return this.partyNames.includes(name);
  } // returns true if the named player is in your alliance


  inAlliance(name) {
    return this.allianceNames.includes(name);
  } // for a named player, returns the other tank in your immediate party
  // if named player is not a tank, or there's not exactly two tanks
  // in your immediate party, returns null.


  otherTank(name) {
    const names = this.tankNames;
    if (names.length !== 2) return;
    if (names[0] === name) return names[1];
    if (names[1] === name) return names[0];
  } // see: otherTank, but for healers.


  otherHealer(name) {
    const names = this.roleToPartyNames_['healer'];
    if (names.length !== 2) return;
    if (names[0] === name) return names[1];
    if (names[1] === name) return names[0];
  } // returns the job name of the specified party member


  jobName(name) {
    var _this$details$partyIn;

    const partyIndex = this.partyNames.indexOf(name);
    if (partyIndex >= 0) return util/* default.jobEnumToJob */.Z.jobEnumToJob((_this$details$partyIn = this.details[partyIndex]) === null || _this$details$partyIn === void 0 ? void 0 : _this$details$partyIn.job);
  }

  nameFromId(id) {
    return this.idToName_[id];
  }

}
;// CONCATENATED MODULE: ./ui/oopsyraidsy/buff_map.ts
const missedEffectBuffMap = [{
  id: 'Collective Unconscious',
  type: 'mitigation',
  effectId: '351',
  collectSeconds: 20
}, {
  id: 'Passage of Arms',
  type: 'mitigation',
  // Arms Up = 498 (others), Passage Of Arms = 497 (you).  Use both in case everybody is missed.
  effectId: ['497', '498'],
  ignoreSelf: true,
  collectSeconds: 15
}, {
  id: 'Divine Veil',
  type: 'mitigation',
  effectId: '2D7',
  ignoreSelf: true,
  collectSeconds: 2
}, {
  // RPR heal
  id: 'Crest of Time Returned',
  type: 'heal',
  effectId: 'A26',
  collectSeconds: 2
}];
const missedAbilityBuffMap = [{
  id: 'Heart Of Light',
  type: 'mitigation',
  abilityId: '3F20'
}, {
  id: 'Dark Missionary',
  type: 'mitigation',
  abilityId: '4057'
}, {
  id: 'Shake It Off',
  type: 'mitigation',
  abilityId: '1CDC'
}, {
  id: 'Technical Finish',
  type: 'damage',
  // 3F44 is the correct Quadruple Technical Finish, others are Dinky Technical Finish.
  abilityId: ['3F41', '3F42', '3F43', '3F44']
}, {
  id: 'Divination',
  type: 'damage',
  abilityId: '40A8'
}, {
  id: 'Brotherhood',
  type: 'damage',
  abilityId: '1CE4'
}, {
  id: 'Battle Litany',
  type: 'damage',
  abilityId: 'DE5'
}, {
  id: 'Embolden',
  type: 'damage',
  abilityId: '1D60'
}, {
  id: 'Battle Voice',
  type: 'damage',
  abilityId: '76',
  // TODO: remove this line after 5.x is not supported anymore.
  // Technically Battle Voice can't miss the bard itself, so this is a noop in 6.x.
  ignoreSelf: true
}, {
  // 5x
  id: 'Devotion',
  type: 'damage',
  abilityId: '1D1A'
}, {
  id: 'Searing Light',
  type: 'damage',
  abilityId: '64F2'
}, {
  id: 'Arcane Circle',
  type: 'damage',
  abilityId: '5F55'
}, {
  id: 'Troubadour',
  type: 'mitigation',
  abilityId: '1CED'
}, {
  id: 'Tactician',
  type: 'mitigation',
  abilityId: '41F9'
}, {
  id: 'Shield Samba',
  type: 'mitigation',
  abilityId: '3E8C'
}, {
  id: 'Mantra',
  type: 'mitigation',
  abilityId: '41'
}, {
  // LB1
  id: 'Healing Wind',
  type: 'heal',
  abilityId: 'CE'
}, {
  // LB2
  id: 'Breath of the Earth',
  type: 'heal',
  abilityId: 'CF'
}, {
  // LB 3
  id: 'Pulse of Life',
  type: 'heal',
  abilityId: 'D0'
}, {
  // SMN phoenix heal
  id: 'Everlasting Flight',
  type: 'heal',
  abilityId: '4085'
}, {
  id: 'Medica',
  type: 'heal',
  abilityId: '7C'
}, {
  id: 'Medica II',
  type: 'heal',
  abilityId: '85'
}, {
  id: 'Afflatus Rapture',
  type: 'heal',
  abilityId: '4096'
}, {
  id: 'Temperance',
  type: 'heal',
  abilityId: '751'
}, {
  id: 'Plenary Indulgence',
  type: 'heal',
  abilityId: '1D09'
}, {
  id: 'Succor',
  type: 'heal',
  abilityId: 'BA'
}, {
  id: 'Indomitability',
  type: 'heal',
  abilityId: 'DFF'
}, {
  id: 'Deployment Tactics',
  type: 'heal',
  abilityId: 'E01'
}, {
  id: 'Whispering Dawn',
  type: 'heal',
  abilityId: '323'
}, {
  id: 'Fey Blessing',
  type: 'heal',
  abilityId: '40A0'
}, {
  id: 'Consolation',
  type: 'heal',
  abilityId: '40A3'
}, {
  id: 'Angel\'s Whisper',
  type: 'heal',
  abilityId: '40A6'
}, {
  id: 'Fey Illumination',
  type: 'mitigation',
  abilityId: '325'
}, {
  id: 'Seraphic Illumination',
  type: 'mitigation',
  abilityId: '40A7'
}, {
  // Technically the mitigation is "Desperate Measures", but it comes from
  // the Expedient ability on each player and "Expedience" is the haste buff.
  id: 'Expedient',
  type: 'mitigation',
  abilityId: '650C'
}, {
  id: 'Kerachole',
  type: 'mitigation',
  abilityId: '5EEA'
}, {
  id: 'Panhaima',
  type: 'mitigation',
  abilityId: '5EF7'
}, {
  id: 'Angel Feathers',
  type: 'heal',
  abilityId: '1097'
}, {
  id: 'Helios',
  type: 'heal',
  abilityId: 'E10'
}, {
  id: 'Aspected Helios',
  type: 'heal',
  abilityId: ['E11', '3200']
}, {
  id: 'Celestial Opposition',
  type: 'heal',
  abilityId: '40A9'
}, {
  id: 'Stellar Burst',
  type: 'heal',
  abilityId: '1D10'
}, {
  id: 'Stellar Explosion',
  type: 'heal',
  abilityId: '1D11'
}, {
  id: 'Astral Stasis',
  type: 'heal',
  abilityId: '1098'
}, {
  id: 'Prognosis',
  type: 'heal',
  abilityId: '5EDE'
}, {
  id: 'Physis',
  type: 'heal',
  abilityId: '5EE0'
}, {
  id: 'Eukrasian Prognosis',
  type: 'heal',
  abilityId: '5EE4'
}, {
  id: 'Ixochole',
  type: 'heal',
  abilityId: '5EEB'
}, {
  id: 'Pepsis',
  type: 'heal',
  abilityId: '5EED'
}, {
  id: 'Physis II',
  type: 'heal',
  abilityId: '5EEE'
}, {
  id: 'Holos',
  type: 'heal',
  abilityId: '5EF6'
}, {
  id: 'Pneuma',
  type: 'heal',
  // 5EFE on enemies, and 6CB6 on friendlies.
  abilityId: '6CB6'
}, {
  id: 'White Wind',
  type: 'heal',
  abilityId: '2C8E'
}, {
  id: 'Gobskin',
  type: 'heal',
  abilityId: '4780'
}, {
  id: 'Lost Aethershield',
  type: 'mitigation',
  abilityId: '5753'
}];
const generateBuffTriggerIds = () => {
  const buffs = [...missedEffectBuffMap, ...missedAbilityBuffMap];
  buffs.sort((a, b) => a.id.localeCompare(b.id));
  return buffs.map(buff => `Buff ${buff.id}`);
};
;// CONCATENATED MODULE: ./ui/oopsyraidsy/death_report.ts



// TODO: lots of things left to do with death reports
// * probably include max hp as well?
// * consolidate HoT/DoT (with expandable CSS)
// * show mitigation effects that are active during damage (with icons?? or at least text to start?)
//   * also need to track effects that are active prior to the set of events passed in
//   * also need to handle effects lost (and gained?!) after death
// * consolidate multiple damage that killed (e.g. Solemn Confiteor x4) into summary text
// * maybe if a player is fully healed, trim abilities before that?
const processAbilityLine = splitLine => {
  var _splitLine$flagIdx, _splitLine;

  const flagIdx = netlog_defs/* default.Ability.fields.flags */.Z.Ability.fields.flags;
  let flags = (_splitLine$flagIdx = splitLine[flagIdx]) !== null && _splitLine$flagIdx !== void 0 ? _splitLine$flagIdx : '';
  let damage = (_splitLine = splitLine[flagIdx + 1]) !== null && _splitLine !== void 0 ? _splitLine : '';

  if (oopsy_common/* kShiftFlagValues.includes */.YU.includes(flags)) {
    var _splitLine2, _splitLine3;

    flags = (_splitLine2 = splitLine[flagIdx + 2]) !== null && _splitLine2 !== void 0 ? _splitLine2 : flags;
    damage = (_splitLine3 = splitLine[flagIdx + 3]) !== null && _splitLine3 !== void 0 ? _splitLine3 : damage;
  }

  const amount = (0,oopsy_common/* UnscrambleDamage */.GD)(damage);
  const lowByte = `00${flags}`.substr(-2);
  return {
    amount: amount,
    lowByte: lowByte,
    flags: flags,
    isHeal: oopsy_common/* kHealFlags.includes */.AL.includes(lowByte),
    isAttack: oopsy_common/* kAttackFlags.includes */.dH.includes(lowByte)
  };
};

// Contains all the information to display information about a player's death.
// `events` contain the last N seconds of tracked line events that pertain to the player.
// This class's job is to sort through those raw lines and generate a subset of parsed
// lines that various views might want to display in some fashion.
class DeathReport {
  constructor(data) {
    this.lang = data.lang;
    this.baseTimestamp = data.baseTimestamp;
    this.deathTimestamp = data.deathTimestamp;
    this.targetId = data.targetId;
    this.targetName = data.targetName;
    this.events = data.events;
  } // Generates an OopsyMistake that represents this DeathReport.


  static generateMistake(data) {
    // Walk backward through events until we find the last damage or a death reason.
    for (let i = data.events.length - 1; i >= 0; i--) {
      const event = data.events[i];
      if (!event) break;

      if (event.type === 'DeathReason') {
        return {
          type: 'death',
          name: data.targetName,
          text: event.text,
          report: data
        };
      } // TODO: consider combining multiple abilities that are taken in a very
      // short period of time, e.g. "A + B" or "C x4".


      if (event.type === 'Ability') {
        const ability = processAbilityLine(event.splitLine);

        if (ability.isAttack && ability.amount > 0) {
          var _event$splitLine$logD, _event$splitLine$logD2;

          const abilityName = (_event$splitLine$logD = event.splitLine[netlog_defs/* default.Ability.fields.ability */.Z.Ability.fields.ability]) !== null && _event$splitLine$logD !== void 0 ? _event$splitLine$logD : '???';
          const currentHp = (_event$splitLine$logD2 = event.splitLine[netlog_defs/* default.Ability.fields.targetCurrentHp */.Z.Ability.fields.targetCurrentHp]) !== null && _event$splitLine$logD2 !== void 0 ? _event$splitLine$logD2 : '???';
          const text = `${abilityName} (${ability.amount}/${currentHp})`;
          return {
            type: 'death',
            name: data.targetName,
            text: text,
            report: data
          };
        }
      }
    }

    return {
      type: 'death',
      name: data.targetName,
      text: '???',
      report: data
    };
  } // A helper function to turn a timestamp into a string relative to this DeathReport.
  // The base timestamp it is relative to is generally the start of the fight.


  makeRelativeTimeString(timestamp) {
    const base = this.baseTimestamp;
    if (!base) return '';
    const deltaMs = timestamp - base;
    const prefix = deltaMs < 0 ? '-' : '';
    const deltaTotalSeconds = Math.round(Math.abs(deltaMs) / 1000);
    const deltaSeconds = `00${deltaTotalSeconds % 60}`.substr(-2);
    const deltaMinutes = Math.floor(deltaTotalSeconds / 60);
    return `${prefix}${deltaMinutes}:${deltaSeconds}`;
  } // Lazily do some work to process the tracked lines from `this.events` into something that
  // can be displayed to the user.  This is the model for the live/summary views.


  parseReportLines() {
    if (this.parsedReportLines) return this.parsedReportLines;
    this.parsedReportLines = [];
    let lastCertainHp = undefined;
    let currentHp = undefined;
    let deathReasonIdx = undefined;

    for (const event of this.events) {
      let parsed = undefined;
      if (event.type === 'Ability') parsed = this.processAbility(event);else if (event.type === 'HoTDoT') parsed = this.processHoTDoT(event);else if (event.type === 'MissedAbility' || event.type === 'MissedEffect') parsed = this.processMissedBuff(event);else if (event.type === 'Mistake') parsed = this.processMistake(event);else if (event.type === 'DeathReason') parsed = this.processDeathReason(event); // After this point, we will always append this event,
      // but still have some post-processing to do.

      if (!parsed) continue;

      if (event.type === 'Ability' && parsed.amount !== undefined && parsed.amount < 0 && deathReasonIdx !== undefined) {
        // Found damage after a DeathReason, remove previous DeathReason.
        this.parsedReportLines.splice(deathReasonIdx);
        deathReasonIdx = undefined;
      } else if (event.type === 'DeathReason') {
        // Found a new DeathReason, track this index in case it needs to be removed.
        deathReasonIdx = this.parsedReportLines.length;
      } // Touch up the hp so it looks more valid.  There are only hp fields on certain
      // log lines, and more importantly it is polled from memory.  Therefore, if a
      // player takes a bunch of attacks simultaneously, the hp will be the same on
      // every line.  This looks incorrect, so do our best to fix this up.


      if (currentHp === undefined || lastCertainHp === undefined) {
        // If we haven't seen any log lines with hp yet, try to set it as an initial guess.
        currentHp = parsed.currentHp;
        lastCertainHp = parsed.currentHp;
      } else if (parsed.currentHp !== lastCertainHp) {
        // If we see a new hp value, then this is likely valid.
        currentHp = lastCertainHp = parsed.currentHp;
      } else {
        // For log lines that don't have a hitpoints line, fill in our best guess.
        // Or, we're seeing an identical hp value, so use previously adjusted amount.
        parsed.currentHp = currentHp;
      } // Note: parsed.amount < 0 is damage, parsed.amount > 0 is heals.


      if (currentHp !== undefined && parsed.amount !== undefined) {
        var _parsed, _parsed$icon;

        // If this attack killed somebody (or this is overkill), set an icon unless there's
        // already a mistake icon set.  Don't do this for belated heals because it looks weird.
        if (parsed.amount < 0 && currentHp + parsed.amount <= 0) (_parsed$icon = (_parsed = parsed).icon) !== null && _parsed$icon !== void 0 ? _parsed$icon : _parsed.icon = 'death'; // TODO: maybe use max hp here to clamp this?

        currentHp += parsed.amount;
      }

      this.parsedReportLines.push(parsed);
    }

    return this.parsedReportLines;
  }

  processGainsEffect(event) {
    var _event$splitLine$logD3;

    // TODO: we also need to filter effects that we don't care about, e.g. swiftcast?
    const effectName = (_event$splitLine$logD3 = event.splitLine[netlog_defs/* default.GainsEffect.fields.effect */.Z.GainsEffect.fields.effect]) !== null && _event$splitLine$logD3 !== void 0 ? _event$splitLine$logD3 : '???';
    const text = (0,oopsy_common/* Translate */.vN)(this.lang, {
      en: `Gain: ${effectName}`,
      de: `Erhalten: ${effectName}`,
      fr: `Gagne: ${effectName}`,
      ja: `獲得: ${effectName}`,
      cn: `获得: ${effectName}`,
      ko: `얻음: ${effectName}`
    });
    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      text: text
    };
  }

  processLosesEffect(event) {
    var _event$splitLine$logD4;

    // TODO: we also need to filter effects that we don't care about, e.g. swiftcast?
    const effectName = (_event$splitLine$logD4 = event.splitLine[netlog_defs/* default.LosesEffect.fields.effect */.Z.LosesEffect.fields.effect]) !== null && _event$splitLine$logD4 !== void 0 ? _event$splitLine$logD4 : '???';
    const text = (0,oopsy_common/* Translate */.vN)(this.lang, {
      en: `Lose: ${effectName}`,
      de: `Verloren: ${effectName}`,
      fr: `Perd: ${effectName}`,
      ja: `失う: ${effectName}`,
      cn: `失去: ${effectName}`,
      ko: `잃음: ${effectName}`
    });
    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      text: text
    };
  }

  processAbility(event) {
    var _splitLine$logDefinit, _event$mistakeText;

    const splitLine = event.splitLine;
    const ability = processAbilityLine(splitLine); // Zero damage abilities can be noisy and don't contribute much information, so skip.

    if (ability.amount === 0) return;
    let amount;
    let amountClass;
    let amountStr;

    if (ability.isHeal) {
      amountClass = 'heal';
      amountStr = ability.amount > 0 ? `+${ability.amount.toString()}` : ability.amount.toString();
      amount = ability.amount;
    } else if (ability.isAttack) {
      amountClass = 'damage';
      amountStr = ability.amount > 0 ? `-${ability.amount.toString()}` : ability.amount.toString();
      amount = -1 * ability.amount;
    } // Ignore abilities that are not damage or heals.  Any important abilities should generate an
    // effect.


    if (amountClass === undefined || amountStr === undefined) return;
    const abilityName = (_splitLine$logDefinit = splitLine[netlog_defs/* default.Ability.fields.ability */.Z.Ability.fields.ability]) !== null && _splitLine$logDefinit !== void 0 ? _splitLine$logDefinit : '???';
    const currentHpStr = splitLine[netlog_defs/* default.Ability.fields.targetCurrentHp */.Z.Ability.fields.targetCurrentHp];
    const currentHp = currentHpStr !== undefined ? parseInt(currentHpStr) : 0;
    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      currentHp: currentHp,
      amount: amount,
      amountStr: amountStr,
      amountClass: amountClass,
      icon: event.mistake,
      text: (_event$mistakeText = event.mistakeText) !== null && _event$mistakeText !== void 0 ? _event$mistakeText : abilityName
    };
  }

  processHoTDoT(event) {
    var _event$splitLine$logD5;

    const which = event.splitLine[netlog_defs/* default.NetworkDoT.fields.which */.Z.NetworkDoT.fields.which];
    const isHeal = which === 'HoT'; // Note: this amount is just raw bytes, and not the UnscrambleDamage version.

    let amount = parseInt((_event$splitLine$logD5 = event.splitLine[netlog_defs/* default.NetworkDoT.fields.damage */.Z.NetworkDoT.fields.damage]) !== null && _event$splitLine$logD5 !== void 0 ? _event$splitLine$logD5 : '', 16);
    if (amount <= 0) return;
    let amountClass;
    let amountStr;

    if (isHeal) {
      amountClass = 'heal';
      amountStr = amount > 0 ? `+${amount.toString()}` : amount.toString();
    } else {
      amountClass = 'damage';
      amountStr = amount > 0 ? `-${amount.toString()}` : amount.toString();
      amount *= -1;
    }

    const currentHpStr = event.splitLine[netlog_defs/* default.NetworkDoT.fields.currentHp */.Z.NetworkDoT.fields.currentHp];
    const currentHp = currentHpStr !== undefined ? parseInt(currentHpStr) : 0; // TODO: this line has an effect id, but we don't have an id -> string mapping for all ids.
    // We could consider looking this up in effects to try to find a name, but common ones
    // like Regen or Asylum aren't mapped there.

    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      currentHp: currentHp,
      amount: amount,
      amountStr: amountStr,
      amountClass: amountClass,
      text: which
    };
  }

  processMissedBuff(event) {
    let buffName;
    let sourceName;

    if (event.type === 'MissedAbility') {
      buffName = event.splitLine[netlog_defs/* default.Ability.fields.ability */.Z.Ability.fields.ability];
      sourceName = event.splitLine[netlog_defs/* default.Ability.fields.source */.Z.Ability.fields.source];
    } else if (event.type === 'MissedEffect') {
      buffName = event.splitLine[netlog_defs/* default.GainsEffect.fields.effect */.Z.GainsEffect.fields.effect];
      sourceName = event.splitLine[netlog_defs/* default.GainsEffect.fields.source */.Z.GainsEffect.fields.source];
    }

    if (!buffName || !sourceName) return;
    const text = (0,oopsy_common/* Translate */.vN)(this.lang, {
      en: `Missed ${buffName} (${sourceName})`,
      de: `${buffName} verfehlte (${sourceName})`,
      fr: `${buffName} manqué(e) (${sourceName})`,
      ja: `${buffName}をミスした (${sourceName}から)`,
      cn: `没吃到 ${buffName} (来自${sourceName})`,
      ko: `${buffName} 놓침 (${sourceName})`
    });
    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      icon: 'heal',
      text: (0,oopsy_common/* Translate */.vN)(this.lang, text)
    };
  }

  processMistake(event) {
    const mistake = event.mistakeEvent;
    const triggerType = mistake.triggerType; // Buffs are handled separately, and Damage types are annotated directly on the lines
    // where there is damage, rather than having a separate line.  Solo/Share mistakes
    // are merged with their ability via `mistakeText`.

    if (triggerType === 'Buff' || triggerType === 'Damage' || triggerType === 'Solo' || triggerType === 'Share') return;
    const text = (0,oopsy_common/* Translate */.vN)(this.lang, mistake.text);
    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      icon: mistake.type,
      text: text
    };
  }

  processDeathReason(event) {
    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      icon: 'death',
      text: event.text
    };
  }

}
;// CONCATENATED MODULE: ./ui/oopsyraidsy/missed_buff_collector.ts

// Abilities seem roughly instant.
// Observation: up to ~1.2 seconds for an effect to roll through the party.
const defaultCollectSeconds = 0.5;
// Handles tracking whether everybody received a buff or not.
// In response to missed buffs, calls `collectedBuffCallback` when timestamps have expired.
class MissedBuffCollector {
  buffs = {};

  constructor(requestTimestampCallback, collectedBuffCallback) {
    this.requestTimestampCallback = requestTimestampCallback;
    this.collectedBuffCallback = collectedBuffCallback;
  } // TODO: call something like this on zone change, etc?


  ExpireBuffsIfNeeded(timestamp) {
    for (const buffList of Object.values(this.buffs)) {
      for (const buffId of Object.keys(buffList)) {
        const collectedBuff = buffList[buffId];
        if (!collectedBuff) continue;
        if (timestamp > collectedBuff.timestamp) collectedBuff.expireCallback(timestamp);
      }
    }
  } // Caller has vetted that we care about the target, so we don't need to do that here.
  // Most (all) buffs only hit the party, and so no need to vet that the source is in the party.


  OnAbilityBuff(splitLine, buff) {
    const sourceId = splitLine[netlog_defs/* default.Ability.fields.sourceId */.Z.Ability.fields.sourceId];
    const targetId = splitLine[netlog_defs/* default.Ability.fields.targetId */.Z.Ability.fields.targetId];
    const buffName = splitLine[netlog_defs/* default.Ability.fields.ability */.Z.Ability.fields.ability];
    const timestamp = splitLine[netlog_defs/* default.Ability.fields.timestamp */.Z.Ability.fields.timestamp];
    if (sourceId === undefined || targetId === undefined || buffName === undefined || timestamp === undefined) return;
    this.OnBuff(new Date(timestamp).getTime(), splitLine, buff, buffName, sourceId, targetId);
  }

  OnEffectBuff(splitLine, buff) {
    const sourceId = splitLine[netlog_defs/* default.GainsEffect.fields.sourceId */.Z.GainsEffect.fields.sourceId];
    const targetId = splitLine[netlog_defs/* default.GainsEffect.fields.targetId */.Z.GainsEffect.fields.targetId];
    const buffName = splitLine[netlog_defs/* default.GainsEffect.fields.effect */.Z.GainsEffect.fields.effect];
    const timestamp = splitLine[netlog_defs/* default.GainsEffect.fields.timestamp */.Z.GainsEffect.fields.timestamp];
    if (sourceId === undefined || targetId === undefined || buffName === undefined || timestamp === undefined) return;
    this.OnBuff(new Date(timestamp).getTime(), splitLine, buff, buffName, sourceId, targetId);
  }

  OnBuff(timestamp, splitLine, buff, buffName, sourceId, targetId) {
    var _this$buffs, _this$buffs$sourceId, _buff$collectSeconds;

    const buffList = (_this$buffs$sourceId = (_this$buffs = this.buffs)[sourceId]) !== null && _this$buffs$sourceId !== void 0 ? _this$buffs$sourceId : _this$buffs[sourceId] = {}; // Expire this buff if needed.

    const expiredBuff = buffList[buff.id];

    if (expiredBuff && timestamp > expiredBuff.expireTimestamp) {
      // Handle and remove this buff if it has expired.
      expiredBuff.expireCallback(timestamp);
    } // If we're already tracking, and it hasn't expired, just append the targetId.


    const collectedBuff = buffList[buff.id];

    if (collectedBuff) {
      collectedBuff.targetIds.push(targetId);
      return;
    } // Otherwise, we're tracking a new buff.


    const collectSeconds = (_buff$collectSeconds = buff.collectSeconds) !== null && _buff$collectSeconds !== void 0 ? _buff$collectSeconds : defaultCollectSeconds;
    const expireTimestamp = timestamp + collectSeconds * 1000;

    const expireCallback = timestamp => {
      var _this$buffs$sourceId2, _this$buffs$sourceId3;

      // Re-get the buff from the map, so that repeated calls to expireCallback will not
      // call the collectedBuffCallback multiple times.
      const expiredBuff = (_this$buffs$sourceId2 = this.buffs[sourceId]) === null || _this$buffs$sourceId2 === void 0 ? void 0 : _this$buffs$sourceId2[buff.id];
      if (!expiredBuff) return;
      this.collectedBuffCallback(timestamp, expiredBuff);
      (_this$buffs$sourceId3 = this.buffs[sourceId]) === null || _this$buffs$sourceId3 === void 0 ? true : delete _this$buffs$sourceId3[buff.id];
    }; // If we get here, this buff is not being tracked yet.


    buffList[buff.id] = {
      timestamp: timestamp,
      splitLine: splitLine,
      expireTimestamp: expireTimestamp,
      sourceId: sourceId,
      buffName: buffName,
      targetIds: [targetId],
      buff: buff,
      expireCallback: expireCallback
    };
    this.requestTimestampCallback(expireTimestamp, expireCallback);
  }

}
;// CONCATENATED MODULE: ./ui/oopsyraidsy/player_state_tracker.ts







const emptyId = 'E0000000';
const timestampFieldIdx = 1; // TODO: add this to effect_id.ts?

const raiseEffectId = '94';

const getTimestamp = splitLine => {
  const timestampField = splitLine[timestampFieldIdx];
  if (timestampField === undefined) throw new not_reached/* UnreachableCode */.$();
  return new Date(timestampField).getTime();
};

// * Tracks various state about the party (party, pets, buffs, deaths).
// * Generates some internal mistakes that need extra tracking (missed buffs, deaths)
// * Tracks events in `trackedEvents` that can be handed to DeathReports for processing.
class PlayerStateTracker {
  triggerSets = [];
  partyIds = new Set();
  deadIds = new Set();
  idToPartyInfo = {};
  petIdToOwnerId = {};
  abilityIdToBuff = {};
  effectIdToBuff = {};
  trackedEvents = [];
  trackedEffectMap = {}; // The minimum amount of time to keep events for.

  eventWindowMs = 20 * 1000; // The time delta in the future to request cleaning up events from the past, after a cleanup.
  // The larger this is, the more it exchanges memory for cpu, to keep more events rather than
  // constantly cycling `trackedEvents`.  0 = clean up immediately.

  cleanupWindowMs = this.eventWindowMs * 2;
  // Cached ability -> mistake icon types for "simple" mistakes.
  mistakeDamageMap = {};
  mistakeShareMap = {};
  mistakeSoloMap = {};

  constructor(options, collector, requestTimestampCallback) {
    this.options = options;
    this.collector = collector;
    this.partyTracker = new PartyTracker();
    this.missedBuffCollector = new MissedBuffCollector(requestTimestampCallback, (timestamp, buff) => this.OnBuffCollected(timestamp, buff)); // Build maps of ids to buffs for ease of use.

    for (const buff of missedAbilityBuffMap) {
      if (typeof buff.abilityId === 'string') {
        this.abilityIdToBuff[buff.abilityId] = buff;
      } else {
        for (const id of buff.abilityId) this.abilityIdToBuff[id] = buff;
      }
    }

    for (const buff of missedEffectBuffMap) {
      if (typeof buff.effectId === 'string') {
        this.effectIdToBuff[buff.effectId] = buff;
      } else {
        for (const id of buff.effectId) this.effectIdToBuff[id] = buff;
      }
    }

    this.OnPartyChanged();
  }

  OnStartEncounter(timestamp) {
    this.baseTime = timestamp;
    this.collector.StartEncounter(timestamp);
  }

  OnStopEncounter(_timestamp) {// TODO: forward this along to MistakeObserver
  }

  PushTriggerSet(set) {
    this.triggerSets.push(set);

    for (const set of this.triggerSets) {
      for (const value of Object.values((_set$damageWarn = set.damageWarn) !== null && _set$damageWarn !== void 0 ? _set$damageWarn : {})) {
        var _set$damageWarn;

        this.mistakeDamageMap[value] = 'warn';
      }

      for (const value of Object.values((_set$damageFail = set.damageFail) !== null && _set$damageFail !== void 0 ? _set$damageFail : {})) {
        var _set$damageFail;

        this.mistakeDamageMap[value] = 'fail';
      }

      for (const value of Object.values((_set$shareWarn = set.shareWarn) !== null && _set$shareWarn !== void 0 ? _set$shareWarn : {})) {
        var _set$shareWarn;

        this.mistakeShareMap[value] = 'warn';
      }

      for (const value of Object.values((_set$shareFail = set.shareFail) !== null && _set$shareFail !== void 0 ? _set$shareFail : {})) {
        var _set$shareFail;

        this.mistakeShareMap[value] = 'fail';
      }

      for (const value of Object.values((_set$soloWarn = set.soloWarn) !== null && _set$soloWarn !== void 0 ? _set$soloWarn : {})) {
        var _set$soloWarn;

        this.mistakeSoloMap[value] = 'warn';
      }

      for (const value of Object.values((_set$soloFail = set.soloFail) !== null && _set$soloFail !== void 0 ? _set$soloFail : {})) {
        var _set$soloFail;

        this.mistakeSoloMap[value] = 'fail';
      }
    }
  }

  ClearTriggerSets() {
    this.triggerSets = [];
    this.mistakeDamageMap = {};
    this.mistakeShareMap = {};
    this.mistakeSoloMap = {};
  } // Called to update the list of player ids we care about.


  OnPartyChanged() {
    // TODO: do we need to clean anything else up here if this changes?
    // Or, do we just assume party doesn't change unless at zone change, so ignore edge cases?
    const arr = [...this.partyTracker.partyIds]; // Include the player in the party for mistakes even if there is no party.

    if (this.myPlayerId && !arr.includes(this.myPlayerId)) arr.push(this.myPlayerId);
    this.partyIds = new Set(arr);
  }

  Reset() {
    // Deliberately do not clear idToPartyInfo here.
    this.petIdToOwnerId = {};
    this.deadIds.clear();
    this.trackedEvents = [];
    this.baseTime = undefined;
  }

  OnChangeZone(timestamp, zoneName, zoneId) {
    this.Reset(); // combatants and party info are re-sent on zone change, so clear here
    // to periodically trim this.

    this.idToPartyInfo = {};
    this.collector.OnChangeZone(timestamp, zoneName, zoneId);
  }

  OnAddedCombatant(_line, splitLine) {
    const id = splitLine[netlog_defs/* default.AddedCombatant.fields.id */.Z.AddedCombatant.fields.id];
    const name = splitLine[netlog_defs/* default.AddedCombatant.fields.name */.Z.AddedCombatant.fields.name];
    const worldIdStr = splitLine[netlog_defs/* default.AddedCombatant.fields.worldId */.Z.AddedCombatant.fields.worldId];
    const jobStr = splitLine[netlog_defs/* default.AddedCombatant.fields.job */.Z.AddedCombatant.fields.job];

    if (id !== undefined && name !== undefined && worldIdStr !== undefined && jobStr !== undefined) {
      // Generate the party info we would get from OverlayPlugin via logs.
      const worldId = parseInt(worldIdStr);
      const job = parseInt(jobStr); // Consider everybody in the party for now and we'll figure it out later.

      const inParty = true;
      this.idToPartyInfo[id] = {
        id,
        name,
        worldId,
        job,
        inParty
      };
    } // Track pet owners as well.


    const petId = splitLine[netlog_defs/* default.AddedCombatant.fields.id */.Z.AddedCombatant.fields.id];
    const ownerId = splitLine[netlog_defs/* default.AddedCombatant.fields.ownerId */.Z.AddedCombatant.fields.ownerId];
    if (petId === undefined || ownerId === undefined) return;
    if (ownerId === '0' || ownerId === '0000') return; // Fix any lowercase ids.

    this.petIdToOwnerId[petId.toUpperCase()] = ownerId.toUpperCase();
  }

  OnPartyList(_line, splitLine) {
    var _splitLine$logDefinit;

    // So that party lists can be used from logs, we will fake `onPartyChanged` events
    // using log information.  AddedCombatant seems to come before PartyList lines,
    // so we accumulate those and then generate the party info from here.
    // Start from id0 and drop the hash at the end.
    const count = parseInt((_splitLine$logDefinit = splitLine[netlog_defs/* default.PartyList.fields.partyCount */.Z.PartyList.fields.partyCount]) !== null && _splitLine$logDefinit !== void 0 ? _splitLine$logDefinit : '');
    if (isNaN(count)) return;
    const ids = splitLine.slice(netlog_defs/* default.PartyList.fields.id0 */.Z.PartyList.fields.id0, -1);
    const party = [];
    ids.forEach((id, idx) => {
      const p = this.idToPartyInfo[id];
      if (!p) return; // count is 1-indexed and idx is 0-indexed.

      p.inParty = idx < count;
      party.push(p);
    });
    this.partyTracker.onPartyChanged({
      party
    });
    this.OnPartyChanged();
  }

  OnChangedPlayer(_line, splitLine) {
    const id = splitLine[netlog_defs/* default.ChangedPlayer.fields.id */.Z.ChangedPlayer.fields.id];
    if (id) this.SetPlayerId(id);
  }

  SetPlayerId(id) {
    if (this.myPlayerId === id) return;
    this.myPlayerId = id;
    this.OnPartyChanged();
  }

  IsInParty(id) {
    var _this$petIdToOwnerId$;

    if (id === undefined) return false;
    return this.partyIds.has((_this$petIdToOwnerId$ = this.petIdToOwnerId[id]) !== null && _this$petIdToOwnerId$ !== void 0 ? _this$petIdToOwnerId$ : id);
  }

  IsPlayerInParty(id) {
    if (id === undefined) return false;
    return this.partyIds.has(id);
  }

  OnAbility(_line, splitLine) {
    // Abilities can not miss everybody (e.g. Battle Voice never hitting the source)
    // so check both target and source.
    const targetId = splitLine[netlog_defs/* default.Ability.fields.targetId */.Z.Ability.fields.targetId];
    const sourceId = splitLine[netlog_defs/* default.Ability.fields.sourceId */.Z.Ability.fields.sourceId];
    const targetInParty = this.IsInParty(targetId);
    const sourceInParty = this.IsInParty(sourceId);
    if (sourceId === undefined || targetId === undefined) return; // Just in case, if a target is performing actions, then they are alive.

    if (sourceInParty) this.deadIds.delete(sourceId);
    const abilityId = splitLine[netlog_defs/* default.Ability.fields.id */.Z.Ability.fields.id];
    if (abilityId === undefined) return; // Only track events on players.  Ideally, it'd be nice to only include
    // party members in tracked events, but this is used for death reports
    // on dead non-party members.
    // TODO: maybe oopsy should only report party failures?

    if ((0,oopsy_common/* IsPlayerId */.jT)(targetId)) {
      this.trackedEvents.push({
        timestamp: getTimestamp(splitLine),
        type: 'Ability',
        targetId: targetId,
        splitLine: splitLine
      });
    } // Report missed buffs on the party.


    if (!targetInParty && !sourceInParty) return;
    const buff = this.abilityIdToBuff[abilityId];
    if (buff) this.missedBuffCollector.OnAbilityBuff(splitLine, buff);
  }

  OnGainsEffect(_line, splitLine) {
    var _this$trackedEffectMa, _this$trackedEffectMa2;

    const targetId = splitLine[netlog_defs/* default.GainsEffect.fields.targetId */.Z.GainsEffect.fields.targetId]; // Do not consider pets gaining effects here.
    // Summoner pets (e.g. Demi-Phoenix) gain party buffs (e.g. Embolden), with no sourceId/source.

    if (!targetId || !this.IsPlayerInParty(targetId)) return;
    const effectId = splitLine[netlog_defs/* default.GainsEffect.fields.effectId */.Z.GainsEffect.fields.effectId];
    if (effectId === undefined) return;
    const timestamp = getTimestamp(splitLine); // We need to request a cleanup somewhere.  Assume that somebody will gain an effect
    // at some point.  These happen less often than abilities, so we do it here just
    // to reduce per-log overhead.

    if (this.nextPruneTimestamp === undefined) {
      this.nextPruneTimestamp = timestamp + this.cleanupWindowMs;
    } else if (timestamp > this.nextPruneTimestamp) {
      this.PruneTrackedEvents(timestamp - this.eventWindowMs);
      this.nextPruneTimestamp = timestamp + this.cleanupWindowMs;
    } // Upon coming back to life, players get Transcendent / Weakness / Brink of Death.
    // However, they also get a Raise effect prior to coming back to life.


    if (effectId !== raiseEffectId) this.deadIds.delete(targetId); // Keep track of active buffs in case they have a very long duration and fall outside the
    // window of this.trackedEffects.

    const event = {
      timestamp: timestamp,
      type: 'GainsEffect',
      targetId: targetId,
      splitLine: splitLine
    };
    ((_this$trackedEffectMa2 = (_this$trackedEffectMa = this.trackedEffectMap)[targetId]) !== null && _this$trackedEffectMa2 !== void 0 ? _this$trackedEffectMa2 : _this$trackedEffectMa[targetId] = {})[effectId] = event;
    this.trackedEvents.push(event);
    const buff = this.effectIdToBuff[effectId.toUpperCase()];
    if (buff) this.missedBuffCollector.OnEffectBuff(splitLine, buff);
  }

  OnLosesEffect(_line, splitLine) {
    var _this$trackedEffectMa3;

    const targetId = splitLine[netlog_defs/* default.GainsEffect.fields.targetId */.Z.GainsEffect.fields.targetId];
    if (!targetId || !this.IsPlayerInParty(targetId)) return;
    const effectId = splitLine[netlog_defs/* default.GainsEffect.fields.effectId */.Z.GainsEffect.fields.effectId];
    if (effectId === undefined) return;
    this.trackedEvents.push({
      timestamp: getTimestamp(splitLine),
      type: 'LosesEffect',
      targetId: targetId,
      splitLine: splitLine
    });
    (_this$trackedEffectMa3 = this.trackedEffectMap[targetId]) === null || _this$trackedEffectMa3 === void 0 ? true : delete _this$trackedEffectMa3[effectId];
  }

  OnDeathReason(timestamp, reason) {
    const targetId = reason.id;
    if (!targetId || !(0,oopsy_common/* IsPlayerId */.jT)(targetId)) return;
    const text = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, reason.text);
    if (!text) return;
    this.trackedEvents.push({
      timestamp: timestamp,
      type: 'DeathReason',
      targetId: targetId,
      text: text
    });
  }

  OnMistakeObj(timestamp, mistake) {
    this.collector.OnMistakeObj(timestamp, mistake);
    const targetId = mistake.reportId;
    if (!targetId || !(0,oopsy_common/* IsPlayerId */.jT)(targetId)) return;
    this.trackedEvents.push({
      timestamp: timestamp,
      type: 'Mistake',
      targetId: targetId,
      mistakeEvent: mistake
    });
  } // Returns an event for why this person died.


  OnDefeated(_line, splitLine) {
    var _splitLine$logDefinit2;

    const targetId = splitLine[netlog_defs/* default.WasDefeated.fields.targetId */.Z.WasDefeated.fields.targetId];
    if (!targetId || !(0,oopsy_common/* IsPlayerId */.jT)(targetId)) return;
    const targetInParty = this.IsInParty(targetId);
    if (targetInParty) this.deadIds.add(targetId);
    const timestamp = getTimestamp(splitLine);
    const firstTimestamp = timestamp - this.eventWindowMs;
    const events = this.trackedEvents.filter(event => {
      return event.timestamp >= firstTimestamp && event.targetId === targetId;
    }); // Mark simple mistakes that can be attached to single ability ids.

    for (const event of events) {
      if (event.type !== 'Ability') continue;
      const id = event.splitLine[netlog_defs/* default.Ability.fields.id */.Z.Ability.fields.id];
      if (!id) continue;
      const type = event.splitLine[netlog_defs/* default.None.fields.type */.Z.None.fields.type];
      const targetCountStr = event.splitLine[netlog_defs/* default.Ability.fields.targetCount */.Z.Ability.fields.targetCount];
      const targetCount = parseInt(targetCountStr !== null && targetCountStr !== void 0 ? targetCountStr : '1'); // Some abilities (e.g. Kampeos Harma 6826) are AOE Ability types but only hit one person.
      // The reverse (Ability.type but targetCount > 1) is not possible.

      const isSharedDamage = type === netlog_defs/* default.NetworkAOEAbility.type */.Z.NetworkAOEAbility.type && targetCount !== 1; // Combining share/solo mistake lines with ability damage lines is a bit of
      // duplication, but unless PlayerStateTracker generated share/solo/damage mistakes
      // itself, there's no way to undo the mistake + ability.  So, we'll add the
      // mistake text into the TrackedEventLine for the ability and hide the mistake.

      if (id in this.mistakeDamageMap) {
        event.mistake = this.mistakeDamageMap[id];
      } else if (isSharedDamage && id in this.mistakeShareMap) {
        var _event$splitLine$logD;

        event.mistake = this.mistakeShareMap[id];
        const ability = (_event$splitLine$logD = event.splitLine[netlog_defs/* default.Ability.fields.ability */.Z.Ability.fields.ability]) !== null && _event$splitLine$logD !== void 0 ? _event$splitLine$logD : '???';
        event.mistakeText = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, (0,oopsy_common/* GetShareMistakeText */.gG)(ability, targetCount));
      } else if (!isSharedDamage && id in this.mistakeSoloMap) {
        var _event$splitLine$logD2;

        event.mistake = this.mistakeSoloMap[id];
        const ability = (_event$splitLine$logD2 = event.splitLine[netlog_defs/* default.Ability.fields.ability */.Z.Ability.fields.ability]) !== null && _event$splitLine$logD2 !== void 0 ? _event$splitLine$logD2 : '???';
        event.mistakeText = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, (0,oopsy_common/* GetSoloMistakeText */.gc)(ability));
      }
    }

    const targetName = (_splitLine$logDefinit2 = splitLine[netlog_defs/* default.WasDefeated.fields.target */.Z.WasDefeated.fields.target]) !== null && _splitLine$logDefinit2 !== void 0 ? _splitLine$logDefinit2 : '???';
    const reportData = {
      lang: this.options.DisplayLanguage,
      baseTimestamp: this.baseTime,
      deathTimestamp: timestamp,
      targetId: targetId,
      targetName: targetName,
      events: events
    };
    const mistake = DeathReport.generateMistake(reportData);
    this.collector.OnMistakeObj(timestamp, mistake);
  }

  OnHoTDoT(_line, splitLine) {
    const targetId = splitLine[netlog_defs/* default.NetworkDoT.fields.id */.Z.NetworkDoT.fields.id];
    if (!targetId || !this.IsInParty(targetId)) return;
    this.trackedEvents.push({
      timestamp: getTimestamp(splitLine),
      type: 'HoTDoT',
      targetId: targetId,
      splitLine: splitLine
    });
  }

  OnWipe(_line, _splitLine) {
    this.Reset();
  }

  OnBuffCollected(timestamp, collected) {
    // TODO: maybe 'mitigation' should become a separate mistake type?
    const type = collected.buff.type === 'mitigation' ? 'heal' : collected.buff.type;
    const ownerId = this.petIdToOwnerId[collected.sourceId];
    const blameId = ownerId !== null && ownerId !== void 0 ? ownerId : collected.sourceId;
    const sourceName = this.partyTracker.nameFromId(blameId);

    if (sourceName === undefined) {
      const line = JSON.stringify(collected.splitLine);
      console.error(`Couldn't find name for ${blameId} (owner: ${ownerId !== null && ownerId !== void 0 ? ownerId : 'none'}), ${line}`);
      return;
    }

    const gotBuffMap = {};
    if (collected.buff.ignoreSelf) gotBuffMap[blameId] = true;

    for (const id of collected.targetIds) gotBuffMap[id] = true;

    const missedIds = this.partyTracker.partyIds.filter(id => {
      // Filter out any empty ids here.
      if (id === emptyId) return false; // A player is missed if they didn't get the buff and aren't dead.

      return !gotBuffMap[id] && !this.deadIds.has(id);
    });
    if (missedIds.length === 0) return; // Append events for each missed player for death reports.
    // Whereas the `OnMistakeObj` call blames the source for missing a number of targets,
    // `this.trackedEvents` informs a target in a death report that they were missed by a source.

    if (collected.buff.type === 'heal' || collected.buff.type === 'mitigation') {
      for (const targetId of missedIds) {
        this.trackedEvents.push({
          timestamp: getTimestamp(collected.splitLine),
          type: 'abilityId' in collected.buff ? 'MissedAbility' : 'MissedEffect',
          targetId: targetId,
          splitLine: collected.splitLine
        });
      }
    }

    const missedNames = missedIds.map(id => {
      const name = this.partyTracker.nameFromId(id);

      if (!name) {
        const line = JSON.stringify(collected.splitLine);
        console.error(`Couldn't find name for ${id}, ${line}`);
      }

      return name !== null && name !== void 0 ? name : '???';
    }); // TODO: oopsy could really use mouseover popups for details.

    if (missedNames.length < 4) {
      const nameList = missedNames.map(name => {
        return (0,oopsy_common/* ShortNamify */.Fz)(name, this.options.PlayerNicks);
      }).join(', '); // As a TrackedLineEvent has been pushed for each person missed already,
      // explicitly don't add a `reportId` field on these mistakes.

      this.OnMistakeObj(timestamp, {
        type: type,
        blame: sourceName,
        triggerType: 'Buff',
        text: {
          en: `${collected.buffName} missed ${nameList}`,
          de: `${collected.buffName} verfehlt ${nameList}`,
          fr: `${collected.buffName} manqué(e) sur ${nameList}`,
          ja: `(${nameList}) が${collected.buffName}を受けなかった`,
          cn: `${nameList} 没受到 ${collected.buffName}`,
          ko: `${collected.buffName} ${nameList}에게 적용안됨`
        }
      });
      return;
    } // If there's too many people, just list the number of people missed.
    // TODO: we could also list everybody on separate lines?


    this.OnMistakeObj(timestamp, {
      type: type,
      blame: sourceName,
      triggerType: 'Buff',
      text: {
        en: `${collected.buffName} missed ${missedNames.length} people`,
        de: `${collected.buffName} verfehlte ${missedNames.length} Personen`,
        fr: `${collected.buffName} manqué(e) sur ${missedNames.length} personnes`,
        ja: `${missedNames.length}人が${collected.buffName}を受けなかった`,
        cn: `有${missedNames.length}人没受到 ${collected.buffName}`,
        ko: `${collected.buffName} ${missedNames.length}명에게 적용안됨`
      }
    });
  }

  PruneTrackedEvents(timestamp) {
    // Remove any tracked events that occurred prior to `timestamp`.
    const idx = this.trackedEvents.findIndex(event => event.timestamp >= timestamp);
    if (idx === -1) return;
    this.trackedEvents = this.trackedEvents.slice(idx);
  }

}
;// CONCATENATED MODULE: ./ui/oopsyraidsy/damage_tracker.ts










const actorControlFadeInCommand = '40000010';
const partyWipeText = {
  en: 'Party Wipe',
  de: 'Gruppe ausgelöscht',
  fr: 'Party Wipe',
  ja: 'ワイプ',
  cn: '团灭',
  ko: '파티 전멸'
};
const earlyPullText = {
  en: 'early pull',
  de: 'zu früh angegriffen',
  fr: 'early pull',
  ja: 'タゲ取り早い',
  cn: '抢开',
  ko: '풀링 빠름'
};
const latePullText = {
  en: 'late pull',
  de: 'zu spät angegriffen',
  fr: 'late pull',
  ja: 'タゲ取り遅い',
  cn: '晚开',
  ko: '풀링 늦음'
}; // Internal trigger id for early pull

const earlyPullTriggerId = 'General Early Pull';

const isOopsyMistake = x => 'type' in x;

class DamageTracker {
  inCombat = false;
  ignoreZone = false;
  timers = [];
  triggers = [];
  combatState = new CombatState(this);
  lastTimestamp = 0;
  triggerSuppress = {};
  timestampCallbacks = [];
  job = 'NONE';
  role = 'none';
  me = '';
  zoneId = zone_id/* default.MatchAll */.Z.MatchAll;
  contentType = 0;

  constructor(options, collector, dataFiles) {
    this.options = options;
    this.collector = collector;
    this.dataFiles = dataFiles;

    const timestampCallback = (timestamp, callback) => this.OnRequestTimestampCallback(timestamp, callback);

    this.playerStateTracker = new PlayerStateTracker(this.options, this.collector, timestampCallback);
    const lang = this.options.ParserLanguage;
    this.countdownEngageRegex = LocaleNetRegex.countdownEngage[lang];
    this.countdownStartRegex = LocaleNetRegex.countdownStart[lang];
    this.countdownCancelRegex = LocaleNetRegex.countdownCancel[lang];
    this.abilityFullRegex = netregexes/* default.abilityFull */.Z.abilityFull();
    this.wipeCactbotEcho = netregexes/* default.echo */.Z.echo({
      line: 'cactbot wipe.*?'
    });
    this.wipeEndEcho = netregexes/* default.echo */.Z.echo({
      line: 'end'
    });
    this.data = this.GetDataObject();
    this.Reset();
  }

  OnRequestTimestampCallback(timestamp, callback) {
    this.timestampCallbacks.push({
      timestamp: timestamp,
      callback: callback
    }); // Sort earliest to latest.

    this.timestampCallbacks.sort((a, b) => a.timestamp - b.timestamp);
  }

  GetDataObject() {
    return {
      me: this.me,
      job: this.job,
      role: this.role,
      party: this.playerStateTracker.partyTracker,
      inCombat: this.inCombat,
      ShortName: name => (0,oopsy_common/* ShortNamify */.Fz)(name, this.options.PlayerNicks),
      IsPlayerId: oopsy_common/* IsPlayerId */.jT,
      DamageFromMatches: matches => (0,oopsy_common/* UnscrambleDamage */.GD)(matches === null || matches === void 0 ? void 0 : matches.damage),
      options: this.options,
      // Deprecated.
      ParseLocaleFloat: parseFloat
    };
  } // TODO: this shouldn't clear timers and triggers
  // TODO: seems like some reloads are causing the /poke test to get undefined


  Reset() {
    this.data = this.GetDataObject();
    this.triggerSuppress = {};

    for (const timer of this.timers) window.clearTimeout(timer);

    this.timers = [];
  }

  OnEngage(timestamp) {
    this.engageTime = timestamp;
    if (!this.firstPuller || !this.combatState.startTime) return;
    const seconds = (timestamp - this.combatState.startTime) / 1000;

    if (seconds >= this.options.MinimumTimeForPullMistake) {
      var _Translate;

      const mistakeStr = (_Translate = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, earlyPullText)) !== null && _Translate !== void 0 ? _Translate : '';
      const text = `${mistakeStr} (${seconds.toFixed(1)}s)`;

      if ((0,oopsy_common/* IsTriggerEnabled */.zJ)(this.options, earlyPullTriggerId)) {
        this.playerStateTracker.OnMistakeObj(timestamp, {
          type: 'pull',
          name: this.firstPuller,
          blame: this.firstPuller,
          text: text
        });
      }
    }
  }

  UpdateLastTimestamp(splitLine) {
    const timeField = splitLine[netlog_defs/* default.None.fields.timestamp */.Z.None.fields.timestamp];
    if (timeField) this.lastTimestamp = new Date(timeField).getTime();
  }

  OnNetLog(e) {
    if (this.ignoreZone) return;
    const line = e.rawLine;
    const splitLine = e.line;
    const type = splitLine[netlog_defs/* default.None.fields.type */.Z.None.fields.type]; // If we're waiting on a timestamp callback, check if any have passed with this line.
    // Ignore game log lines, which don't track milliseconds.

    if (type !== netlog_defs/* default.GameLog.type */.Z.GameLog.type) {
      this.UpdateLastTimestamp(splitLine);
      let timestampCallback = this.timestampCallbacks[0];

      while (timestampCallback) {
        if (this.lastTimestamp < timestampCallback.timestamp) break;
        timestampCallback.callback(this.lastTimestamp);
        this.timestampCallbacks.shift();
        timestampCallback = this.timestampCallbacks[0];
      }
    }

    switch (type) {
      case netlog_defs/* default.GameLog.type */.Z.GameLog.type:
        if (this.countdownEngageRegex.test(line)) {
          // It would be ideal if we could use the log timestamp, but many early/late pulls are <1s,
          // and the accuracy of game log lines is also at most 1s off from real time.
          this.OnEngage(Date.now());
        }

        if (this.countdownStartRegex.test(line) || this.countdownCancelRegex.test(line)) this.combatState.Reset();
        if (this.wipeCactbotEcho.test(line) || this.wipeEndEcho.test(line)) this.Wipe(this.lastTimestamp);
        break;

      case netlog_defs/* default.ChangeZone.type */.Z.ChangeZone.type:
        {
          const name = splitLine[netlog_defs/* default.ChangeZone.fields.name */.Z.ChangeZone.fields.name];
          const id = splitLine[netlog_defs/* default.ChangeZone.fields.id */.Z.ChangeZone.fields.id];
          if (name !== undefined && id !== undefined) this.SetZone(this.lastTimestamp, name, parseInt(id, 16));
        }
        break;

      case netlog_defs/* default.PartyList.type */.Z.PartyList.type:
        this.playerStateTracker.OnPartyList(line, splitLine);
        break;

      case netlog_defs/* default.ChangedPlayer.type */.Z.ChangedPlayer.type:
        this.playerStateTracker.OnChangedPlayer(line, splitLine);
        break;

      case netlog_defs/* default.AddedCombatant.type */.Z.AddedCombatant.type:
        this.playerStateTracker.OnAddedCombatant(line, splitLine);
        break;

      case netlog_defs/* default.Ability.type */.Z.Ability.type:
      case netlog_defs/* default.NetworkAOEAbility.type */.Z.NetworkAOEAbility.type:
        this.OnAbilityEvent(line, splitLine);
        this.playerStateTracker.OnAbility(line, splitLine);
        break;

      case netlog_defs/* default.WasDefeated.type */.Z.WasDefeated.type:
        this.playerStateTracker.OnDefeated(line, splitLine);
        break;

      case netlog_defs/* default.GainsEffect.type */.Z.GainsEffect.type:
        this.playerStateTracker.OnGainsEffect(line, splitLine);
        break;

      case netlog_defs/* default.LosesEffect.type */.Z.LosesEffect.type:
        this.playerStateTracker.OnLosesEffect(line, splitLine);
        break;

      case netlog_defs/* default.NetworkDoT.type */.Z.NetworkDoT.type:
        this.playerStateTracker.OnHoTDoT(line, splitLine);
        break;

      case netlog_defs/* default.ActorControl.type */.Z.ActorControl.type:
        if (splitLine[netlog_defs/* default.ActorControl.fields.command */.Z.ActorControl.fields.command] === actorControlFadeInCommand) {
          this.Wipe(this.lastTimestamp);
          this.playerStateTracker.OnWipe(line, splitLine);
        }

        break;
    } // Process triggers after abilities, so that death reasons for abilities that do damage get
    // listed after the damage from that ability.


    for (const trigger of this.triggers) {
      const matches = trigger.localRegex.exec(line);
      if (matches) this.OnTrigger(trigger, matches, this.lastTimestamp);
    }
  }

  OnAbilityEvent(line, splitLine) {
    if (this.firstPuller || this.combatState.startTime) return; // This is kind of obnoxious to have to regex match every ability line that's already split.
    // But, it turns it into a usable match object.
    // TODO: use log definitions here??

    const lineMatches = this.abilityFullRegex.exec(line);
    if (!lineMatches || !lineMatches.groups) return;
    const matches = lineMatches.groups; // Shift damage and flags forward for mysterious spurious :3E:0:.
    // Plenary Indulgence also appears to prepend confession stacks.
    // UNKNOWN: Can these two happen at the same time?

    const origFlags = splitLine[oopsy_common/* kFieldFlags */.OC];

    if (origFlags && oopsy_common/* kShiftFlagValues.includes */.YU.includes(origFlags)) {
      var _splitLine, _splitLine2;

      matches.flags = (_splitLine = splitLine[oopsy_common/* kFieldFlags */.OC + 2]) !== null && _splitLine !== void 0 ? _splitLine : matches.flags;
      matches.damage = (_splitLine2 = splitLine[oopsy_common/* kFieldFlags */.OC + 3]) !== null && _splitLine2 !== void 0 ? _splitLine2 : matches.damage;
    } // Length 1 or 2.


    let lowByte = matches.flags.substr(-2);
    if (lowByte.length === 1) lowByte = '0' + lowByte;
    if (!oopsy_common/* kAttackFlags.includes */.dH.includes(lowByte)) return; // Start combat first prior to sending a late pull mistake,
    // as starting a new combat can reset the live list.

    this.combatState.StartCombat(this.lastTimestamp);
    if ((0,oopsy_common/* IsPlayerId */.jT)(matches.sourceId)) this.firstPuller = matches.source;else if ((0,oopsy_common/* IsPlayerId */.jT)(matches.targetId)) this.firstPuller = matches.target;else this.firstPuller = '???';

    if (this.engageTime) {
      const seconds = (Date.now() - this.engageTime) / 1000;

      if (seconds >= this.options.MinimumTimeForPullMistake) {
        var _Translate2;

        const mistakeStr = (_Translate2 = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, latePullText)) !== null && _Translate2 !== void 0 ? _Translate2 : '';
        const text = `${mistakeStr} (${seconds.toFixed(1)}s)`;

        if ((0,oopsy_common/* IsTriggerEnabled */.zJ)(this.options, earlyPullTriggerId)) {
          this.playerStateTracker.OnMistakeObj(this.lastTimestamp, {
            type: 'pull',
            name: this.firstPuller,
            blame: this.firstPuller,
            text: text
          });
        }
      }
    }
  }

  OnStartEncounter(timestamp) {
    this.playerStateTracker.OnStartEncounter(timestamp);
  }

  OnStopEncounter(timestamp) {
    this.playerStateTracker.OnStopEncounter(timestamp);
    this.firstPuller = undefined;
    this.engageTime = undefined;
  }

  OnTrigger(trigger, execMatches, timestamp) {
    const triggerTime = Date.now(); // TODO: turn this into a helper?? this was copied/pasted from popup-text.js
    // If using named groups, treat matches.groups as matches
    // so triggers can do things like matches.target.

    let matches = {}; // If using named groups, treat matches.groups as matches
    // so triggers can do things like matches.target.

    if (execMatches.groups) {
      matches = execMatches.groups;
    } else {
      // If there are no matching groups, reproduce the old js logic where
      // groups ended up as the original RegExpExecArray object
      execMatches.forEach((value, idx) => {
        matches[idx] = value;
      });
    }

    if (trigger.id) {
      if (!(0,oopsy_common/* IsTriggerEnabled */.zJ)(this.options, trigger.id)) return;

      if (trigger.id in this.triggerSuppress) {
        const suppressTime = this.triggerSuppress[trigger.id];
        if (suppressTime && suppressTime > triggerTime) return;
        delete this.triggerSuppress[trigger.id];
      }
    }

    const ValueOrFunction = (f, matches) => {
      return typeof f === 'function' ? f(this.data, matches) : f;
    };

    if ('condition' in trigger) {
      const condition = ValueOrFunction(trigger.condition, matches);
      if (condition === undefined || condition === null || condition === false) return;
    }

    const delayField = 'delaySeconds' in trigger ? ValueOrFunction(trigger.delaySeconds, matches) : 0;
    const delaySeconds = delayField === undefined || delayField === null || delayField === false || typeof delayField !== 'number' ? 0 : delayField;
    const suppress = 'suppressSeconds' in trigger ? ValueOrFunction(trigger.suppressSeconds, matches) : 0;
    if (trigger.id && typeof suppress === 'number' && suppress > 0) this.triggerSuppress[trigger.id] = triggerTime + suppress * 1000;

    const f = () => {
      if ('mistake' in trigger) {
        const m = ValueOrFunction(trigger.mistake, matches);

        if (typeof m === 'object') {
          const mistakeTimestamp = timestamp + delaySeconds * 1000;

          if (Array.isArray(m)) {
            for (const mistake of m) this.playerStateTracker.OnMistakeObj(mistakeTimestamp, mistake);
          } else if (isOopsyMistake(m)) {
            this.playerStateTracker.OnMistakeObj(mistakeTimestamp, m);
          }
        }
      }

      if ('deathReason' in trigger) {
        const ret = ValueOrFunction(trigger.deathReason, matches);

        if (ret !== null && typeof ret === 'object' && !Array.isArray(ret)) {
          if (!isOopsyMistake(ret)) this.playerStateTracker.OnDeathReason(timestamp, ret);
        }
      }

      if ('run' in trigger) ValueOrFunction(trigger.run, matches);
    };

    if (delaySeconds <= 0) f();else this.timers.push(window.setTimeout(f, delaySeconds * 1000));
  }

  Wipe(timestamp) {
    this.playerStateTracker.OnMistakeObj(timestamp, {
      type: 'wipe',
      text: partyWipeText
    });
    this.Reset();
    this.combatState.StopCombat(timestamp);
  } // Similar to PlayerStateTracker handling OnPlayerChanged events plus ChangedPlayer lines,
  // handling this event is extra insurance for reloads in the middle of a zone when
  // there won't be ChangeZone lines to do it more naturally.


  OnChangeZone(e) {
    this.SetZone(this.lastTimestamp, e.zoneName, e.zoneID);
  }

  SetZone(timestamp, zoneName, zoneId) {
    var _zoneInfo$contentType;

    if (this.zoneId === zoneId) return;
    this.zoneName = zoneName;
    this.zoneId = zoneId;
    const zoneInfo = zone_info/* default */.Z[this.zoneId];
    this.contentType = (_zoneInfo$contentType = zoneInfo === null || zoneInfo === void 0 ? void 0 : zoneInfo.contentType) !== null && _zoneInfo$contentType !== void 0 ? _zoneInfo$contentType : 0;
    this.combatState.StopCombat(timestamp);
    this.combatState.Reset();
    this.playerStateTracker.ClearTriggerSets();
    this.playerStateTracker.OnChangeZone(timestamp, zoneName, zoneId);
    this.ReloadTriggers();
  }

  OnInCombatChangedEvent(e) {
    // Don't send StartCombat with a timestamp=0 before we've seen any
    // log messages.  This can happen if you reload while in combat.
    // We'll see an action event soon enough to also start combat.
    if (!this.lastTimestamp) return;

    if (this.inCombat !== e.detail.inGameCombat) {
      if (e.detail.inGameCombat) this.combatState.StartCombat(this.lastTimestamp);else this.combatState.StopCombat(this.lastTimestamp);
    }

    this.inCombat = e.detail.inGameCombat;
    this.data.inCombat = this.inCombat;
  }

  AddDamageTriggers(type, dict) {
    if (!dict) return;

    for (const key in dict) {
      const id = dict[key];
      const trigger = {
        id: key,
        type: 'Ability',
        netRegex: netregexes/* default.abilityFull */.Z.abilityFull({
          id: id,
          ...oopsy_common/* playerDamageFields */.np
        }),
        mistake: (_data, matches) => {
          return {
            type: type,
            blame: matches.target,
            reportId: matches.targetId,
            triggerType: 'Damage',
            text: matches.ability
          };
        }
      };
      this.ProcessTrigger(trigger);
    }
  }

  AddGainsEffectTriggers(type, dict) {
    if (!dict) return;

    for (const key in dict) {
      const id = dict[key];
      const trigger = {
        id: key,
        type: 'GainsEffect',
        netRegex: netregexes/* default.gainsEffect */.Z.gainsEffect({
          effectId: id
        }),
        mistake: (_data, matches) => {
          return {
            type: type,
            blame: matches.target,
            reportId: matches.targetId,
            triggerType: 'GainsEffect',
            text: matches.effect
          };
        }
      };
      this.ProcessTrigger(trigger);
    }
  } // Helper function for "double tap" shares where multiple players share
  // damage when it should only be on one person, such as a spread mechanic.


  AddShareTriggers(type, dict) {
    if (!dict) return;

    for (const key in dict) {
      const id = dict[key];
      const trigger = {
        id: key,
        type: 'Ability',
        netRegex: netregexes/* default.ability */.Z.ability({
          type: '22',
          id: id,
          ...oopsy_common/* playerDamageFields */.np
        }),
        mistake: (_data, matches) => {
          // Some single target damage is still marked as AOEActionEffect type 22, so check
          // the number of targets that it hits.
          const numTargets = parseInt(matches.targetCount);
          if (numTargets === 1 || isNaN(numTargets)) return;
          return {
            type: type,
            blame: matches.target,
            reportId: matches.targetId,
            triggerType: 'Share',
            text: (0,oopsy_common/* GetShareMistakeText */.gG)(matches.ability, numTargets)
          };
        }
      };
      this.ProcessTrigger(trigger);
    }
  }

  AddSoloTriggers(type, dict) {
    if (!dict) return;

    for (const key in dict) {
      const id = dict[key];
      const trigger = {
        id: key,
        type: 'Ability',
        netRegex: netregexes/* default.abilityFull */.Z.abilityFull({
          type: '21',
          id: id,
          ...oopsy_common/* playerDamageFields */.np
        }),
        mistake: (_data, matches) => {
          return {
            type: type,
            blame: matches.target,
            reportId: matches.targetId,
            triggerType: 'Solo',
            text: (0,oopsy_common/* GetSoloMistakeText */.gc)(matches.ability)
          };
        }
      };
      this.ProcessTrigger(trigger);
    }
  }

  ReloadTriggers() {
    this.ProcessDataFiles(); // Wait for datafiles / jobs / zone events / localization.

    if (!this.triggerSets || !this.zoneName) return;
    this.Reset();
    this.triggers = [];
    this.ignoreZone = this.options.IgnoreContentTypes.includes(this.contentType) || this.options.IgnoreZoneIds.includes(this.zoneId);
    if (this.ignoreZone) return;

    for (const set of this.triggerSets) {
      if ('zoneId' in set) {
        if (set.zoneId !== zone_id/* default.MatchAll */.Z.MatchAll && set.zoneId !== this.zoneId && !(typeof set.zoneId === 'object' && set.zoneId.includes(this.zoneId))) continue;
      } else if ('zoneRegex' in set) {
        const zoneError = s => {
          var _set$filename;

          console.error(`${s}: ${JSON.stringify(set.zoneRegex)} in ${(_set$filename = set.filename) !== null && _set$filename !== void 0 ? _set$filename : '???'}`);
        };

        let zoneRegex = set.zoneRegex;

        if (typeof zoneRegex !== 'object') {
          zoneError('zoneRegex must be translatable object or regexp');
          continue;
        } else if (!(zoneRegex instanceof RegExp)) {
          const parserLang = this.options.ParserLanguage || 'en';

          if (parserLang in zoneRegex) {
            zoneRegex = zoneRegex[parserLang];
          } else if ('en' in zoneRegex) {
            zoneRegex = zoneRegex['en'];
          } else {
            zoneError('unknown zoneRegex language');
            continue;
          }

          if (!(zoneRegex instanceof RegExp)) {
            zoneError('zoneRegex must be regexp');
            continue;
          }
        }

        if (this.zoneName.search(regexes/* default.parse */.Z.parse(zoneRegex)) < 0) continue;
      } else {
        return;
      }

      if (this.options.Debug) {
        if (set.filename) console.log(`Loading ${set.filename}`);else console.log('Loading user triggers for zone');
      }

      this.AddDamageTriggers('warn', set.damageWarn);
      this.AddDamageTriggers('fail', set.damageFail);
      this.AddGainsEffectTriggers('warn', set.gainsEffectWarn);
      this.AddGainsEffectTriggers('fail', set.gainsEffectFail);
      this.AddShareTriggers('warn', set.shareWarn);
      this.AddShareTriggers('fail', set.shareFail);
      this.AddSoloTriggers('warn', set.soloWarn);
      this.AddSoloTriggers('fail', set.soloFail);

      for (const trigger of (_set$triggers = set.triggers) !== null && _set$triggers !== void 0 ? _set$triggers : []) {
        var _set$triggers;

        this.ProcessTrigger(trigger);
      }

      this.playerStateTracker.PushTriggerSet(set);
    }
  }

  ProcessTrigger(trigger) {
    // This is a bit of a hack, but LooseOopsyTrigger extends OopsyTrigger<OopsyData>
    // but not vice versa.  Because the NetMatches['Ability'] requires a number
    // of fields, Matches cannot be assigned to Matches & NetMatches['Ability'].
    const looseTrigger = trigger;
    const regex = looseTrigger.netRegex; // Some oopsy triggers (e.g. early pull) have only an id.

    if (!regex) return;
    this.triggers.push({ ...looseTrigger,
      localRegex: regexes/* default.parse */.Z.parse(Array.isArray(regex) ? regexes/* default.anyOf */.Z.anyOf(regex) : regex)
    });
  }

  OnPlayerChange(e) {
    if (this.job === e.detail.job && this.me === e.detail.name) return;
    this.me = e.detail.name;
    this.job = e.detail.job;
    this.role = util/* default.jobToRole */.Z.jobToRole(this.job);
    this.ReloadTriggers();
    this.playerStateTracker.SetPlayerId(e.detail.id.toString(16));
  }

  ProcessDataFiles() {
    // Only run this once.
    if (this.triggerSets) return;
    this.triggerSets = this.options.Triggers;

    for (const [filename, json] of Object.entries(this.dataFiles)) {
      if (typeof json !== 'object') {
        console.error('Unexpected JSON from ' + filename + ', expected an object');
        continue;
      }

      const hasZoneRegex = ('zoneRegex' in json);
      const hasZoneId = ('zoneId' in json);

      if (!hasZoneRegex && !hasZoneId || hasZoneRegex && hasZoneId) {
        console.error('Unexpected JSON from ' + filename + ', need one of zoneRegex/zoneID');
        continue;
      }

      if ('triggers' in json) {
        if (typeof json.triggers !== 'object' || !(json.triggers.length >= 0)) {
          console.error('Unexpected JSON from ' + filename + ', expected triggers to be an array');
          continue;
        }
      }

      const set = {
        filename: filename,
        ...json
      };
      this.triggerSets.push(set);
    }

    this.ReloadTriggers();
  }

}
// EXTERNAL MODULE: ./ui/oopsyraidsy/data/oopsy_manifest.txt + 170 modules
var oopsy_manifest = __webpack_require__(171);
;// CONCATENATED MODULE: ./ui/oopsyraidsy/mistake_collector.ts

const broadcastSource = 'oopsyraidsy';
const msgSyncRequestType = 'SyncRequest';
const msgSyncResponseType = 'SyncResponse'; // MistakeForwarder forwards observer calls to all observers.
// It also collects all events in case a broadcast sync is requested.

class MistakeCollector {
  observers = [];
  events = [];
  creationTime = Date.now();

  constructor(options, shouldSync) {
    this.options = options;
    this.shouldSync = shouldSync;
    this.AddObserver(this);
    this.RequestSync();
  }

  DebugPrint(str) {
    if (this.options.Debug) console.error(str);
  }

  RequestSync() {
    if (!this.shouldSync) return;
    this.DebugPrint(`RequestSync: ${this.creationTime}`);
    void (0,overlay_plugin_api/* callOverlayHandler */.ae)({
      call: 'broadcast',
      source: broadcastSource,
      msg: {
        type: msgSyncRequestType,
        id: this.creationTime,
        timestamp: this.creationTime
      }
    });
  }

  SendSyncResponse() {
    if (!this.shouldSync) return;
    this.DebugPrint(`SendSyncResponse: ${this.creationTime}`);
    void (0,overlay_plugin_api/* callOverlayHandler */.ae)({
      call: 'broadcast',
      source: broadcastSource,
      msg: {
        type: msgSyncResponseType,
        id: this.creationTime,
        timestamp: this.creationTime,
        data: JSON.stringify(this.events)
      }
    });
  }

  ReceiveSyncResponse(timestamp, data) {
    var _this$latestSyncTimes;

    this.DebugPrint(`ReceiveSyncResponse: ${timestamp} (prev: ${(_this$latestSyncTimes = this.latestSyncTimestamp) !== null && _this$latestSyncTimes !== void 0 ? _this$latestSyncTimes : ''})`);
    this.latestSyncTimestamp = timestamp;

    try {
      const parsed = JSON.parse(data);

      if (!Array.isArray(parsed)) {
        console.error('Malformed sync response');
        return;
      } // TODO: giant hacky type assertion here because type guarding this seems complicated.
      // TODO: maybe there's some automated tooling we could use for this?


      const events = parsed;

      for (const observer of this.observers) observer.OnSyncEvents(events);
    } catch (e) {
      console.error(e);
    }
  }

  OnBroadcastMessage(e) {
    if (!this.shouldSync) return;
    if (e.source !== broadcastSource) return;
    const msg = e.msg;
    if (msg === null || typeof msg !== 'object') return; // Turn an unknown into an indexable object.
    // TODO: is there some better way to do this?

    const obj = {};

    for (const [key, value] of Object.entries(msg !== null && msg !== void 0 ? msg : {})) obj[key] = value; // Ignore messages from ourselves.
    // TODO: do we actually receive broadcast messages from ourselves, if subscribed?


    if (obj.id === this.creationTime || obj.id === undefined) return;

    if (obj.type === msgSyncRequestType) {
      // If this collector was created after this timestamp request, ignore it.
      if (typeof obj.timestamp !== 'number' || obj.timestamp < this.creationTime) {
        this.DebugPrint(`OnBroadcastMessage: ignoring: (past creation): ${obj.timestamp}`);
        return;
      }

      this.SendSyncResponse();
    } else if (obj.type === msgSyncResponseType) {
      if (typeof obj.timestamp !== 'number') return; // If we have data from further in the past, don't overwrite with partial future data.

      if (this.latestSyncTimestamp && this.latestSyncTimestamp <= obj.timestamp) {
        this.DebugPrint(`OnBroadcastMessage: ignoring (past data): ${obj.timestamp}`);
        return;
      }

      const data = obj.data;
      if (typeof data === 'string') this.ReceiveSyncResponse(obj.timestamp, data);
    }
  }

  OnEvent(event) {
    this.events.push(event);
  }

  OnSyncEvents(events) {
    // Clobber our current set of events with synced events.
    //
    // TODO: there could be some raciness here where if you open up the summary
    // mid-fight, then an event could get dropped that occurred after the sync
    // request but before the sync response was received.  This is not worth
    // solving at the moment though.
    this.events = events;
  }

  AddObserver(observer) {
    this.observers.push(observer);
  }

  OnMistakeObj(timestamp, m) {
    if (!m) return;

    for (const observer of this.observers) {
      observer.OnEvent({
        timestamp: timestamp,
        type: 'Mistake',
        mistake: m
      });
    }
  }

  StartEncounter(timestamp) {
    for (const observer of this.observers) {
      observer.OnEvent({
        timestamp: timestamp,
        type: 'StartEncounter'
      });
    }
  }

  OnChangeZone(timestamp, zoneName, zoneId) {
    for (const observer of this.observers) {
      observer.OnEvent({
        timestamp: timestamp,
        type: 'ChangeZone',
        zoneName: zoneName,
        zoneId: zoneId
      });
    }
  }

}
;// CONCATENATED MODULE: ./ui/oopsyraidsy/oopsy_live_list.ts




const kCopiedMessage = {
  en: 'Copied!',
  de: 'Kopiert!',
  fr: 'Copié !',
  ja: 'コピーした！',
  cn: '已复制！',
  ko: '복사 완료!'
};
const errorMessageEnableACTWS = {
  en: 'Plugins -> OverlayPlugin WSServer -> Stream/Local Overlay -> Start',
  de: 'Plugins -> OverlayPlugin WSServer -> Stream/Local Overlay -> Start',
  fr: 'Plugins -> OverlayPlugin WSServer -> Stream/Local Overlay -> Start',
  cn: 'Plugins -> OverlayPlugin WSServer -> 直播/本地悬浮窗 -> 启用',
  ko: 'Plugins -> OverlayPlugin WSServer -> Stream/Local 오버레이 -> 시작'
};
class DeathReportLive {
  reportQueue = [];
  queueTimeoutHandle = 0;

  constructor(options, reportElem) {
    this.options = options;
    this.reportElem = reportElem;
  } // Briefly shows a death report on screen for a few seconds while in combat.
  // If one is already showing, queues it up to display after.
  // TODO: add some CSS animation here to fade it in/out?
  // TODO: should we show the player's death report with no timer while they are dead?


  queue(report) {
    const timeoutMs = this.options.TimeToShowDeathReportMs;
    if (timeoutMs <= 0) return;
    const isFirstReport = this.reportQueue.length === 0;
    this.reportQueue.push(report);

    if (isFirstReport) {
      this.setDeathReport(report);
      this.queueTimeoutHandle = window.setTimeout(() => this.handleQueue(), timeoutMs);
    }
  }

  handleQueue() {
    const r = this.reportQueue.shift();

    if (!r) {
      this.cancelQueue();
      this.hide();
      return;
    }

    this.setDeathReport(r);
    this.queueTimeoutHandle = window.setTimeout(() => this.handleQueue(), this.options.TimeToShowDeathReportMs);
  } // Cancels the queue of death reports and shows this one immediately.


  show(report) {
    this.cancelQueue();
    this.setDeathReport(report);
  }

  mouseOver(report, inCombat) {
    // While in combat, mouseovers interrupt the queue and temporarily show
    // TODO: should there be no timer and we just show while mouseovering?
    if (inCombat) {
      this.cancelQueue();
      this.hide();
      this.queue(report);
    } else {
      this.show(report);
    }
  }

  hide() {
    while (this.reportElem.lastChild) this.reportElem.removeChild(this.reportElem.lastChild);

    this.cancelQueue();
  }

  cancelQueue() {
    this.reportQueue = [];
    window.clearTimeout(this.queueTimeoutHandle);
    this.queueTimeoutHandle = 0;
  }

  setDeathReport(report) {
    this.hide();
    const container = document.createElement('div');
    container.classList.add('livelist-shadow');
    this.reportElem.appendChild(container);
    const titleDiv = document.createElement('div');
    titleDiv.classList.add('death-title');
    container.appendChild(titleDiv);
    const titleIcon = document.createElement('div');
    titleIcon.classList.add('death-title-icon', 'mistake-icon', 'death');
    titleDiv.appendChild(titleIcon);
    const titleText = document.createElement('div');
    titleText.classList.add('death-title-text');
    titleText.innerHTML = report.targetName;
    titleDiv.appendChild(titleText);
    const closeButton = document.createElement('div');
    closeButton.classList.add('death-title-close', 'mistake-icon', 'icon-entry', 'icon-close');
    closeButton.addEventListener('click', () => {
      // Clicking the close button also cancels the queue.  Otherwise, you
      // close one and then another appears seconds later, which seems incorrect.
      this.cancelQueue();
      this.hide();
    });
    titleDiv.appendChild(closeButton);
    const detailsDiv = document.createElement('div');
    detailsDiv.classList.add('death-details');
    container.appendChild(detailsDiv);

    for (const event of report.parseReportLines()) {
      var _event$currentHp;

      this.AppendDetails(detailsDiv, event.timestampStr, (_event$currentHp = event.currentHp) === null || _event$currentHp === void 0 ? void 0 : _event$currentHp.toString(), event.amountStr, event.amountClass, event.icon, event.text);
    }
  }

  AppendDetails(detailsDiv, timestampStr, currentHp, amount, amountClass, icon, text) {
    const hpElem = document.createElement('div');
    hpElem.classList.add('death-row-hp');
    if (currentHp !== undefined) hpElem.innerText = currentHp;
    detailsDiv.appendChild(hpElem);
    const damageElem = document.createElement('div');
    damageElem.classList.add('death-row-amount');
    if (amountClass) damageElem.classList.add(amountClass);
    if (amount !== undefined) damageElem.innerText = amount;
    detailsDiv.appendChild(damageElem);
    const iconElem = document.createElement('div');
    iconElem.classList.add('death-row-icon');
    if (icon !== undefined) iconElem.classList.add('mistake-icon', icon);
    detailsDiv.appendChild(iconElem);
    const textElem = document.createElement('div');
    textElem.classList.add('death-row-text');
    if (text !== undefined) textElem.innerHTML = text;
    detailsDiv.appendChild(textElem);
    const timeElem = document.createElement('div');
    timeElem.classList.add('death-row-time');
    timeElem.innerText = timestampStr;
    detailsDiv.appendChild(timeElem);
  }

}
class OopsyLiveList {
  inCombat = false;
  numItems = 0;
  items = [];
  itemIdxToListener = {};

  constructor(options, scroller) {
    this.options = options;
    this.scroller = scroller;
    const container = this.scroller.children[0];
    if (!container) throw new not_reached/* UnreachableCode */.$();
    this.container = container;
    const reportDiv = document.getElementById('death-report');
    if (!reportDiv) throw new not_reached/* UnreachableCode */.$();
    if (this.options.DeathReportSide !== 'disabled') this.deathReport = new DeathReportLive(options, reportDiv);
    document.body.classList.add(`report-side-${this.options.DeathReportSide}`);
    const iconContainer = document.getElementById('icon-container');
    if (!iconContainer) throw new not_reached/* UnreachableCode */.$();
    this.iconContainer = iconContainer;
    const closeDiv = document.getElementById('icon-close');
    if (!closeDiv) throw new not_reached/* UnreachableCode */.$();
    closeDiv.addEventListener('click', () => {
      this.Reset();
    });
    const summaryDiv = document.getElementById('icon-summary');
    if (!summaryDiv) throw new not_reached/* UnreachableCode */.$();
    summaryDiv.addEventListener('click', () => {
      const regex = /\w*.html$/;

      if (!regex.exec(window.location.href)) {
        console.error(`Unable to parse location for summary: ${window.location.href}`);
        return;
      }

      const url = window.location.href.replace(regex, 'oopsy_summary.html');
      (0,overlay_plugin_api/* callOverlayHandler */.ae)({
        call: 'openWebsiteWithWS',
        url: url
      }).catch(() => {
        console.error(`Failed to open summary`);
        this.OnMistakeObj(Date.now(), {
          type: 'fail',
          text: errorMessageEnableACTWS
        });
      });
    });
    this.Reset();
    this.SetInCombat(false);
  }

  SetInCombat(inCombat) {
    // For usability sake:
    //   - to avoid dungeon trash starting stopping combat and resetting the
    //     list repeatedly, only reset when ACT starts a new encounter.
    //   - for consistency with DPS meters, fflogs, etc, use ACT's encounter
    //     time as the start time, not when game combat becomes true.
    //   - to make it more readable, show/hide old mistakes out of game
    //     combat, and consider early pulls starting game combat early.  This
    //     allows for one long dungeon ACT encounter to have multiple early
    //     or late pulls.
    if (this.inCombat === inCombat) return;
    this.inCombat = inCombat;

    if (inCombat) {
      document.body.classList.remove('out-of-combat');
      this.HideOldItems();
    } else {
      // TODO: Add an X button to hide/clear the list.
      document.body.classList.add('out-of-combat');
      this.ShowAllItems();
    }
  }

  OnMistakeObj(timestamp, m) {
    var _this$deathReport, _m$name;

    const report = m.report ? new DeathReport(m.report) : undefined;
    if (report) (_this$deathReport = this.deathReport) === null || _this$deathReport === void 0 ? void 0 : _this$deathReport.queue(report);
    const iconClass = m.type;
    const blame = (_m$name = m.name) !== null && _m$name !== void 0 ? _m$name : m.blame;
    const blameText = blame ? (0,oopsy_common/* ShortNamify */.Fz)(blame, this.options.PlayerNicks) + ': ' : '';
    const translatedText = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, m.text);
    if (!translatedText) return;
    const time = (0,oopsy_common/* GetFormattedTime */.Tk)(this.baseTime, timestamp);
    const text = `${blameText}${translatedText}`;
    const maxItems = this.options.NumLiveListItemsInCombat; // Get an existing row or create a new one.

    let rowDiv;
    const itemIdx = this.numItems;
    if (itemIdx < this.items.length) rowDiv = this.items[itemIdx];
    if (!rowDiv) rowDiv = this.MakeRow(); // Clean up / add any event listeners.

    const listener = this.itemIdxToListener[itemIdx];

    if (listener) {
      rowDiv.removeEventListener('mousemove', listener);
      delete this.itemIdxToListener[itemIdx];
    }

    if (report) {
      const func = () => {
        var _this$deathReport2;

        return (_this$deathReport2 = this.deathReport) === null || _this$deathReport2 === void 0 ? void 0 : _this$deathReport2.mouseOver(report, this.inCombat);
      };

      rowDiv.addEventListener('mousemove', func);
      this.itemIdxToListener[itemIdx] = func;
    }

    this.numItems++;
    const iconDiv = document.createElement('div');
    iconDiv.classList.add('mistake-icon');
    iconDiv.classList.add(iconClass);
    rowDiv.appendChild(iconDiv);
    const textDiv = document.createElement('div');
    textDiv.classList.add('mistake-text');
    textDiv.innerHTML = text;
    rowDiv.appendChild(textDiv);
    const timeDiv = document.createElement('div');
    timeDiv.classList.add('mistake-time');
    timeDiv.innerHTML = time;
    rowDiv.appendChild(timeDiv); // Hide anything over the limit from the past.

    if (this.inCombat) {
      var _this$items;

      if (this.numItems > maxItems) (_this$items = this.items[this.numItems - maxItems - 1]) === null || _this$items === void 0 ? void 0 : _this$items.classList.add('hide');
    } // Show and scroll to bottom.


    this.container.classList.remove('hide');
    this.iconContainer.classList.remove('hide');
    this.scroller.scrollTop = this.scroller.scrollHeight;
  }

  MakeRow() {
    const div = document.createElement('div');
    div.classList.add('mistake-row'); // click-to-copy function

    div.addEventListener('click', () => {
      var _div$childNodes$1$tex, _div$childNodes$, _div$childNodes$2;

      const mistakeText = (_div$childNodes$1$tex = (_div$childNodes$ = div.childNodes[1]) === null || _div$childNodes$ === void 0 ? void 0 : _div$childNodes$.textContent) !== null && _div$childNodes$1$tex !== void 0 ? _div$childNodes$1$tex : '';
      const mistakeTime = (_div$childNodes$2 = div.childNodes[2]) === null || _div$childNodes$2 === void 0 ? void 0 : _div$childNodes$2.textContent;
      const str = mistakeTime ? `[${mistakeTime}] ${mistakeText}` : mistakeText;
      const el = document.createElement('textarea');
      el.value = str;
      document.body.appendChild(el);
      el.select();
      document.execCommand('copy');
      document.body.removeChild(el); // copied message

      const msg = document.createElement('div');
      msg.classList.add('copied-msg');
      msg.innerText = kCopiedMessage[this.options.DisplayLanguage] || kCopiedMessage['en'];
      msg.style.width = `${div.clientWidth}px`;
      msg.style.height = `${div.clientHeight}px`;
      div.appendChild(msg);
      window.setTimeout(() => {
        // oopsy live list may have been hidden/destroyed before the timeout happens.
        if (msg.parentNode) div.removeChild(msg);
      }, 1000);
    });
    this.items.push(div);
    this.container.appendChild(div);
    return div;
  }

  ShowAllItems() {
    for (const item of this.items) item.classList.remove('hide');

    this.scroller.scrollTop = this.scroller.scrollHeight;
  }

  HideOldItems() {
    const maxItems = this.options.NumLiveListItemsInCombat;

    for (let i = 0; i < this.items.length - maxItems; ++i) {
      var _this$items$i;

      (_this$items$i = this.items[i]) === null || _this$items$i === void 0 ? void 0 : _this$items$i.classList.add('hide');
    }
  }

  Reset() {
    var _this$deathReport3;

    this.container.classList.add('hide');
    this.iconContainer.classList.add('hide');
    this.items = [];
    this.numItems = 0;
    this.container.innerHTML = '';
    this.itemIdxToListener = {};
    (_this$deathReport3 = this.deathReport) === null || _this$deathReport3 === void 0 ? void 0 : _this$deathReport3.hide();
  }

  OnEvent(event) {
    if (event.type === 'Mistake') this.OnMistakeObj(event.timestamp, event.mistake);else if (event.type === 'StartEncounter') this.StartEncounter(event.timestamp);else if (event.type === 'ChangeZone') this.OnChangeZone();
  }

  OnSyncEvents(_events) {// don't bother syncing for the live list
  }

  StartEncounter(timestamp) {
    this.Reset();
    this.baseTime = timestamp;
  }

  OnChangeZone() {
    this.Reset();
  }

}
// EXTERNAL MODULE: ./resources/content_type.ts
var content_type = __webpack_require__(873);
;// CONCATENATED MODULE: ./ui/oopsyraidsy/ability_name_map.ts
const abilityNameMap = {
  '5C6': 'Attack',
  '5C7': 'Attack',
  '5C8': 'Attack',
  '5C9': 'Attack',
  '19E7': 'Attack',
  '1AE2': 'Attack',
  '1AFE': 'Attack',
  '1C97': 'Attack',
  '1CB7': 'Attack',
  '2157': 'Lakshmi Auto',
  '21C5': 'Attack',
  '22EA': 'Attack',
  '23F2': 'Exdeath Auto',
  '249F': 'Attack',
  '24E1': 'Attack',
  '24E2': 'Attack',
  '24E8': 'Attack',
  '25B6': 'Attack',
  '26A7': 'Twin Auto',
  '26B4': 'Nael Auto',
  '26D0': 'Baha Auto',
  '2705': 'Attack',
  '27FC': 'Attack',
  '27FD': 'Attack',
  '27FE': 'Attack',
  '27FF': 'Attack',
  '28C1': 'Attack',
  '2B3E': 'Attack',
  // uwu temp
  '2B51': 'Attack',
  '2B53': 'Slipstream',
  '2B42': 'Mistral Song',
  '2B41': 'Grand Whirlwind',
  '2B50': 'Downburst',
  '2B45': 'Cyclone',
  '2B46': 'Gigaburst',
  '2B4D': 'Feather Rain',
  '2B54': 'Mistral Shriek',
  '2B48': 'Friction',
  '2BB5': 'Super Cyclone',
  '2B47': 'Super Cyclone',
  '2B55': 'Aerial Blast',
  '2B4B': 'Mistral Song',
  '2B52': 'Eye Of The Storm',
  '2B4E': 'Wicked Wheel',
  '2B4F': 'Wicked Tornado',
  '2B5F': 'Crimson Cyclone',
  '2B61': 'Radiant Plume',
  '2B57': 'Vulcan Burst',
  '2B56': 'Incinerate',
  '2B49': 'Mesohigh',
  '1CD': 'Nail Adds',
  '2C19': 'Infernal Fetters',
  '2B5A': 'Eruption',
  '2B5B': 'Inferno Howl',
  '2B5C': 'Searing Wind',
  '2B5E': 'Hellfire',
  '2B5D': 'Flaming Crush',
  '2CFD': 'Geocrush',
  '2B90': 'Earthen Fury',
  '2B58': 'Infernal Surge',
  '2B62': 'Rock Buster',
  '2B63': 'Mountain Buster',
  '2B64': 'Weight Of The Land',
  '2B65': 'Weight Of The Land',
  '2B66': 'Jump',
  '2B67': 'Upheaval',
  '2B68': 'Geocrush',
  '2B69': 'Bury',
  '2B6A': 'Detonation',
  '2B6B': 'Rock Throw',
  '2B6C': 'Rock Throw',
  '2B6D': 'Granite Impact',
  '2B6E': 'Freefire',
  '2B6F': 'Landslide',
  '2B70': 'Landslide',
  '2B71': 'Landslide',
  '2C18': 'Tumult',
  // TEA
  '4978': 'Attack',
  '4979': 'Attack'
};
;// CONCATENATED MODULE: ./ui/oopsyraidsy/oopsy_options.ts




const defaultOopsyNonConfigOptions = {
  Triggers: [],
  PlayerNicks: {},
  DisabledTriggers: {},
  IgnoreContentTypes: [content_type/* default.Pvp */.Z.Pvp, content_type/* default.Eureka */.Z.Eureka],
  IgnoreZoneIds: [// Bozja zones have an (unnamed) content type of 29 which also applies
  // to Delubrum Reginae (which we want oopsy on).  So, ignore by zone.
  zone_id/* default.TheBozjanSouthernFront */.Z.TheBozjanSouthernFront, zone_id/* default.Zadnor */.Z.Zadnor],
  AbilityIdNameMap: abilityNameMap,
  PerTriggerAutoConfig: {}
}; // TODO: figure out how to get this type from oopsyraidsy_config??
// These values are overwritten and are just here for typing.

const defaultOopsyConfigOptions = {
  NumLiveListItemsInCombat: 5,
  MinimumTimeForPullMistake: 0.4,
  TimeToShowDeathReportMs: 4000,
  DeathReportSide: 'left'
};
// See user/raidboss-example.js for documentation.
const Options = { ...user_config/* default.getDefaultBaseOptions */.Z.getDefaultBaseOptions(),
  ...defaultOopsyNonConfigOptions,
  ...defaultOopsyConfigOptions
};
/* harmony default export */ const oopsy_options = (Options);
;// CONCATENATED MODULE: ./ui/oopsyraidsy/oopsy_summary_list.ts


class OopsySummaryTable {
  // TODO: should this come from options?
  types = ['death', 'fail', 'warn', 'pull'];
  sortCol = 'death';
  sortAsc = false;

  constructor(options, table) {
    this.options = options;
    this.table = table;
    // this.table has one column for name, and then one for each of the types.
    document.documentElement.style.setProperty('--table-cols', (this.types.length + 1).toString());
  }

  Reset() {
    this.mistakes = undefined;

    while ((_this$table = this.table) !== null && _this$table !== void 0 && _this$table.lastChild) {
      var _this$table;

      this.table.removeChild(this.table.lastChild);
    }
  }

  BuildHeaderRow(parent) {
    const dummyFirstDiv = document.createElement('div');
    dummyFirstDiv.classList.add('header', 'name');
    parent.appendChild(dummyFirstDiv);

    for (const type of this.types) {
      const typeElem = document.createElement('div');
      typeElem.classList.add('header', 'mistake-icon', type);
      parent.appendChild(typeElem);
      typeElem.addEventListener('click', () => {
        if (this.sortCol === type) {
          this.sortAsc = !this.sortAsc;
          this.SortTable();
          return;
        }

        this.sortAsc = false;
        this.sortCol = type;
        this.SortTable();
      });
    }
  }

  BuildPlayerRow(parent, name) {
    const nameElem = document.createElement('div');
    nameElem.classList.add('name');
    nameElem.innerText = name;
    parent.appendChild(nameElem);
    const row = {
      nameElem: nameElem,
      entries: {}
    };

    for (const type of this.types) {
      const elem = document.createElement('div');
      elem.classList.add('number');
      parent.appendChild(elem);
      row.entries[type] = {
        count: 0,
        elem: elem
      };
    }

    return row;
  }

  OnMistakeObj(m) {
    var _m$name, _this$mistakes, _this$mistakes$name;

    const longName = (_m$name = m.name) !== null && _m$name !== void 0 ? _m$name : m.blame;
    if (!longName) return;
    const name = (0,oopsy_common/* ShortNamify */.Fz)(longName, this.options.PlayerNicks); // Don't create a player row if the summary doesn't care about this type of mistake.

    if (!this.types.includes(m.type)) return;

    if (!this.mistakes) {
      // Wait until we've seen any mistakes to start the table.
      this.BuildHeaderRow(this.table);
      this.mistakes = {};
    }

    const row = (_this$mistakes$name = (_this$mistakes = this.mistakes)[name]) !== null && _this$mistakes$name !== void 0 ? _this$mistakes$name : _this$mistakes[name] = this.BuildPlayerRow(this.table, name);
    const entry = row.entries[m.type];
    if (!entry) return;
    entry.count++;
    entry.elem.innerText = entry.count.toString();
    if (m.type === this.sortCol) this.SortTable();
  }

  SortTable() {
    if (!this.mistakes) return; // Generate counts.

    const counts = {};

    for (const [name, row] of Object.entries(this.mistakes)) {
      var _entry$count;

      const entry = row.entries[this.sortCol];
      counts[name] = (_entry$count = entry === null || entry === void 0 ? void 0 : entry.count) !== null && _entry$count !== void 0 ? _entry$count : 0;
    } // Sort names by counts.


    const names = Object.keys(counts);
    if (this.sortAsc) names.sort((a, b) => {
      var _counts$a, _counts$b;

      return ((_counts$a = counts[a]) !== null && _counts$a !== void 0 ? _counts$a : -1) - ((_counts$b = counts[b]) !== null && _counts$b !== void 0 ? _counts$b : -1);
    });else names.sort((a, b) => {
      var _counts$b2, _counts$a2;

      return ((_counts$b2 = counts[b]) !== null && _counts$b2 !== void 0 ? _counts$b2 : -1) - ((_counts$a2 = counts[a]) !== null && _counts$a2 !== void 0 ? _counts$a2 : -1);
    }); // Apply style to sort by ordering.

    for (const [name, row] of Object.entries(this.mistakes)) {
      const idx = names.indexOf(name).toString();
      row.nameElem.style.setProperty('order', idx);

      for (const entry of Object.values(row.entries)) entry.elem.style.setProperty('order', idx);
    }
  }

  OnEvent(event) {
    if (event.type === 'Mistake') this.OnMistakeObj(event.mistake);
  }

  OnSyncEvents(events) {
    this.Reset();

    for (const event of events) this.OnEvent(event);
  }

}
class OopsySummaryList {
  pullIdx = 0;
  currentDiv = null;

  constructor(options, container) {
    this.options = options;
    this.container = container;
    this.container.classList.remove('hide');
  }

  Reset() {
    this.pullIdx = 0;
    this.baseTime = undefined;
    this.currentDiv = null;

    while ((_this$container = this.container) !== null && _this$container !== void 0 && _this$container.lastChild) {
      var _this$container;

      this.container.removeChild(this.container.lastChild);
    }
  }

  GetTimeStr(d) {
    // ISO-8601 or death.
    const month = `0${d.getMonth() + 1}`.slice(-2);
    const day = `0${d.getDate()}`.slice(-2);
    const hours = `00${d.getHours()}`.slice(-2);
    const minutes = `00${d.getMinutes()}`.slice(-2);
    return `${d.getFullYear()}-${month}-${day} ${hours}:${minutes}`;
  }

  StartNewSectionIfNeeded(timestamp) {
    if (this.currentDiv) return this.currentDiv;
    const section = document.createElement('div');
    section.classList.add('section');
    this.container.appendChild(section);
    const headerDiv = document.createElement('div');
    headerDiv.classList.add('section-header');
    section.appendChild(headerDiv); // TODO: It would kind of be nice to sync this with pullcounter,
    // but it's not clear how to connect these two.

    this.pullIdx++;
    const pullDiv = document.createElement('div');
    pullDiv.innerText = `Pull ${this.pullIdx}`;
    headerDiv.appendChild(pullDiv);
    const zoneDiv = document.createElement('div');
    if (this.zoneName) zoneDiv.innerText = `(${this.zoneName})`;
    headerDiv.appendChild(zoneDiv);
    const timeDiv = document.createElement('div');
    timeDiv.innerText = this.GetTimeStr(new Date(timestamp));
    headerDiv.appendChild(timeDiv);
    const rowContainer = document.createElement('div');
    rowContainer.classList.add('section-rows');
    section.appendChild(rowContainer);
    this.currentDiv = rowContainer;
    return this.currentDiv;
  }

  EndSection() {
    this.currentDiv = null;
  }

  OnMistakeObj(timestamp, m) {
    var _m$name2;

    const iconClass = m.type;
    const blame = (_m$name2 = m.name) !== null && _m$name2 !== void 0 ? _m$name2 : m.blame;
    const blameText = blame ? `${(0,oopsy_common/* ShortNamify */.Fz)(blame, this.options.PlayerNicks)}: ` : '';
    const text = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, m.text);
    if (!text) return;
    this.AddLine(m, iconClass, `${blameText} ${text}`, (0,oopsy_common/* GetFormattedTime */.Tk)(this.baseTime, timestamp));
  }

  AddLine(m, iconClass, text, time) {
    var _this$baseTime;

    const currentSection = this.StartNewSectionIfNeeded((_this$baseTime = this.baseTime) !== null && _this$baseTime !== void 0 ? _this$baseTime : Date.now());
    const rowDiv = document.createElement('div');
    rowDiv.classList.add('mistake-row');
    currentSection.appendChild(rowDiv); // TODO: maybe combine this with OopsyLiveList.

    const iconDiv = document.createElement('div');
    iconDiv.classList.add('mistake-icon');
    iconDiv.classList.add(iconClass);
    rowDiv.appendChild(iconDiv);
    const textDiv = document.createElement('div');
    textDiv.classList.add('mistake-text');
    textDiv.innerHTML = text;
    rowDiv.appendChild(textDiv);
    const timeDiv = document.createElement('div');
    timeDiv.classList.add('mistake-time');
    timeDiv.innerHTML = time;
    rowDiv.appendChild(timeDiv);
    if (!m.report) return;
    const collapserDiv = document.createElement('div');
    collapserDiv.classList.add('mistake-collapser');
    rowDiv.appendChild(collapserDiv);
    const detailsDiv = document.createElement('div');
    detailsDiv.classList.add('death-details');
    currentSection.appendChild(detailsDiv);
    let expanded = false;
    rowDiv.addEventListener('click', () => {
      expanded = !expanded;

      if (expanded) {
        collapserDiv.classList.add('expanded');
        detailsDiv.classList.add('expanded');
      } else {
        collapserDiv.classList.remove('expanded');
        detailsDiv.classList.remove('expanded');
      }
    });
    const report = new DeathReport(m.report);

    for (const event of report.parseReportLines()) {
      const hpElem = document.createElement('div');
      hpElem.classList.add('death-row-hp');
      if (event.currentHp !== undefined) hpElem.innerText = event.currentHp.toString();
      detailsDiv.appendChild(hpElem);
      const damageElem = document.createElement('div');
      damageElem.classList.add('death-row-amount');
      if (event.amountClass) damageElem.classList.add(event.amountClass);
      if (event.amountStr !== undefined) damageElem.innerText = event.amountStr;
      detailsDiv.appendChild(damageElem);
      const iconElem = document.createElement('div');
      iconElem.classList.add('death-row-icon');
      if (event.icon !== undefined) iconElem.classList.add('mistake-icon', event.icon);
      detailsDiv.appendChild(iconElem);
      const textElem = document.createElement('div');
      textElem.classList.add('death-row-text');
      if (event.text !== undefined) textElem.innerHTML = event.text;
      detailsDiv.appendChild(textElem);
      const timeElem = document.createElement('div');
      timeElem.classList.add('death-row-time');
      timeElem.innerText = event.timestampStr;
      detailsDiv.appendChild(timeElem);
    }
  }

  OnEvent(event) {
    if (event.type === 'Mistake') this.OnMistakeObj(event.timestamp, event.mistake);else if (event.type === 'StartEncounter') this.StartEncounter(event.timestamp);else if (event.type === 'ChangeZone') this.OnChangeZone(event.zoneName);
  }

  OnSyncEvents(events) {
    this.Reset();

    for (const event of events) this.OnEvent(event);
  }

  StartEncounter(timestamp) {
    // TODO: If you reload the summary while in combat, then the OnInCombatChangedEvent
    // for the current combat will send a new StartEncounter (creating a new section)
    // even though the current combat is still ongoing.  We could try to handle this
    // by explicitly having StartEncounter/StopEncounter however this requires a bit
    // of wrangling to get right.  For now, don't reload the summary while in combat.  ;)
    this.EndSection();
    this.baseTime = timestamp;
    this.StartNewSectionIfNeeded(timestamp);
  }

  OnChangeZone(zoneName) {
    this.zoneName = zoneName;
  }

}
;// CONCATENATED MODULE: ./ui/oopsyraidsy/oopsyraidsy_config.ts




const oopsyHelpers = ['damageWarn', 'damageFail', 'shareWarn', 'shareFail', 'gainsEffectWarn', 'gainsEffectFail']; // This could be a checkbox, but it's possible we could add more things here,
// like changing fail->warning or who knows what.

const kTriggerOptions = {
  default: {
    label: {
      en: '✔ Defaults',
      de: '✔ Standards',
      fr: '✔ Défauts',
      ja: '✔ 初期設定',
      cn: '✔ 默认设置',
      ko: '✔ 기본'
    }
  },
  disabled: {
    label: {
      en: '❌ Disabled',
      de: '❌ Deaktiviert',
      fr: '❌ Désactivé',
      ja: '❌ 無効',
      cn: '❌ 禁用',
      ko: '❌ 비활성화'
    }
  }
};

class OopsyConfigurator {
  optionKey = 'oopsyraidsy';

  constructor(cactbotConfigurator) {
    this.base = cactbotConfigurator;
  }

  buildUI(container, files) {
    const fileMap = this.processOopsyFiles(files);
    const expansionDivs = {};

    for (const info of Object.values(fileMap)) {
      const expansion = info.prefix;
      if (!info.triggers || Object.keys(info.triggers).length === 0) continue;
      let expansionDiv = expansionDivs[expansion];

      if (!expansionDiv) {
        const expansionContainer = document.createElement('div');
        expansionContainer.classList.add('trigger-expansion-container', 'collapsed');
        container.appendChild(expansionContainer);
        const expansionHeader = document.createElement('div');
        expansionHeader.classList.add('trigger-expansion-header');

        expansionHeader.onclick = () => {
          expansionContainer.classList.toggle('collapsed');
        };

        expansionHeader.innerText = expansion;
        expansionContainer.appendChild(expansionHeader);
        expansionDiv = expansionDivs[expansion] = expansionContainer;
      }

      const triggerContainer = document.createElement('div');
      triggerContainer.classList.add('trigger-file-container', 'collapsed');
      expansionDiv.appendChild(triggerContainer);
      const headerDiv = document.createElement('div');
      headerDiv.classList.add('trigger-file-header');

      headerDiv.onclick = () => {
        triggerContainer.classList.toggle('collapsed');
      };

      const parts = [info.title, info.type, expansion];

      for (const part of parts) {
        if (!part) continue;
        const partDiv = document.createElement('div');
        partDiv.classList.add('trigger-file-header-part');
        partDiv.innerText = part;
        headerDiv.appendChild(partDiv);
      }

      triggerContainer.appendChild(headerDiv);
      const triggerOptions = document.createElement('div');
      triggerOptions.classList.add('trigger-file-options');
      triggerContainer.appendChild(triggerOptions);

      for (const id of Object.keys((_info$triggers = info.triggers) !== null && _info$triggers !== void 0 ? _info$triggers : {})) {
        var _info$triggers;

        // Build the trigger label.
        const triggerDiv = document.createElement('div');
        triggerDiv.innerHTML = id;
        triggerDiv.classList.add('trigger');
        triggerOptions.appendChild(triggerDiv); // Container for the right side ui (select boxes, all of the info).

        const triggerDetails = document.createElement('div');
        triggerDetails.classList.add('trigger-details');
        triggerOptions.appendChild(triggerDetails);
        triggerDetails.appendChild(this.buildTriggerOptions(id, triggerDiv));
      }
    }
  }

  buildTriggerOptions(id, labelDiv) {
    const kField = 'Output';
    const div = document.createElement('div');
    div.classList.add('trigger-options');

    const updateLabel = input => {
      if (input.value === 'hidden' || input.value === 'disabled') labelDiv.classList.add('disabled');else labelDiv.classList.remove('disabled');
    };

    const input = document.createElement('select');
    div.appendChild(input);
    const selectValue = this.base.getOption(this.optionKey, ['triggers', id, kField], 'default');

    for (const [key, value] of Object.entries(kTriggerOptions)) {
      const elem = document.createElement('option');
      elem.innerHTML = this.base.translate(value.label);
      elem.value = key;
      elem.selected = key === selectValue;
      input.appendChild(elem);
      updateLabel(input);

      input.onchange = () => {
        updateLabel(input);
        let value = input.value;
        if (value.includes('default')) value = 'default';
        this.base.setOption(this.optionKey, ['triggers', id, kField], input.value);
      };
    }

    return div;
  }

  processOopsyFiles(files) {
    const map = this.base.processFiles(files); // Hackily insert "missed buffs" into the list of triggers.

    const generalEntry = map['00-misc-general'];
    if (!generalEntry) throw new not_reached/* UnreachableCode */.$();
    const fakeBuffs = { ...generalEntry,
      fileKey: '00-misc-buffs',
      filename: 'buff_map.ts',
      title: this.base.translate({
        en: 'Missed Buffs',
        de: 'Verfehlte Buffs',
        fr: 'Buffs manqués',
        ja: '欠けバフ',
        cn: '遗漏Buff',
        ko: '놓친 버프 알림'
      }),
      triggerSet: {
        triggers: generateBuffTriggerIds().map(id => {
          return {
            id: id
          };
        })
      }
    };
    map[fakeBuffs.fileKey] = fakeBuffs;

    for (const item of Object.values(map)) {
      item.triggers = {};
      const triggerSet = item.triggerSet;

      for (const prop of oopsyHelpers) {
        const obj = triggerSet[prop];
        if (obj === undefined || obj === null) continue;

        if (typeof obj === 'object') {
          for (const id in obj) item.triggers[id] = {
            id: id
          };
        }
      }

      if (!triggerSet.triggers) continue;

      for (const trigger of triggerSet.triggers) {
        if (!trigger.id) continue; // Skip triggers that just set data, but include triggers that are just ids.

        if (trigger.run && !trigger.mistake) continue;
        item.triggers[trigger.id] = trigger;
      }
    }

    return map;
  }

}

const templateOptions = {
  buildExtraUI: (base, container) => {
    const builder = new OopsyConfigurator(base);
    builder.buildUI(container, oopsy_manifest/* default */.Z);
  },
  processExtraOptions: (baseOptions, savedConfig) => {
    var _PerTriggerAutoConfig, _options$_PerTriggerA;

    // TODO: Rewrite user_config to be templated on option type so that this function knows
    // what type of options it is using.  Without this, perTriggerAutoConfig is unknown.
    const options = baseOptions;
    const perTriggerAutoConfig = (_options$_PerTriggerA = options[_PerTriggerAutoConfig = 'PerTriggerAutoConfig']) !== null && _options$_PerTriggerA !== void 0 ? _options$_PerTriggerA : options[_PerTriggerAutoConfig] = {};
    if (typeof savedConfig !== 'object' || Array.isArray(savedConfig)) return;
    const triggers = savedConfig['triggers'];
    if (typeof triggers !== 'object' || Array.isArray(triggers)) return;

    for (const [id, entry] of Object.entries(triggers)) {
      if (typeof entry !== 'object' || Array.isArray(entry)) continue;
      const output = entry['Output'];
      if (output === undefined) continue;
      perTriggerAutoConfig[id] = {
        enabled: output !== 'disabled'
      };
    }
  },
  options: [{
    id: 'Debug',
    name: {
      en: 'Enable debug mode',
      de: 'Aktiviere Debugmodus',
      fr: 'Activer le mode debug',
      ja: 'デバッグモードを有効にする',
      cn: '启用调试模式',
      ko: '디버그 모드 활성화'
    },
    type: 'checkbox',
    debugOnly: true,
    default: false
  }, {
    id: 'NumLiveListItemsInCombat',
    name: {
      en: 'Number of mistakes to show in combat',
      de: 'Anzahl der Fehler, die während des Kampfes angezeigt werden',
      fr: 'Nombre de fautes à afficher en combat',
      ja: '戦闘中に表示するミスをした回数',
      cn: '战斗中显示的错误数量',
      ko: '전투 중 표시할 실수들의 개수'
    },
    type: 'integer',
    default: 5
  }, {
    id: 'MinimumTimeForPullMistake',
    name: {
      en: 'Minimum time to show early pull (seconds)',
      de: 'Minimum Zeit in der Early-Pulls angezeigt werden (in Sekunden)',
      fr: 'Durée minimale pour afficher l\'early pull (secondes)',
      ja: 'タゲ取るのが早かったら、ミスとして表示する、カウントダウンとの最短時間 (秒)',
      cn: '显示提前开怪最小时间 (秒)',
      ko: '풀링이 빠르다고 표시 할 최소 시간 (초)'
    },
    type: 'float',
    default: 0.4
  }, {
    id: 'TimeToShowDeathReportSeconds',
    name: {
      en: 'Seconds to show death report on death (0=none)',
      de: 'Sekunden um den Todesreport beim Tot anzuzeigen (0=niemals)',
      fr: 'Durée d’affichage (en secondes) du rapport de mort (0 = aucun)',
      ja: '倒れた時にデスレポートを表示 (0=非表示)',
      cn: '死亡时显示死亡报告的秒数 (0=不显示)',
      ko: '죽었을 때 사망 보고서를 보여주는 시간(초) (0=비활성화)'
    },
    type: 'float',
    default: 4,
    setterFunc: (options, value) => {
      let seconds;
      if (typeof value === 'string') seconds = parseFloat(value);else if (typeof value === 'number') seconds = value;else return;
      options['TimeToShowDeathReportMs'] = seconds * 1000;
    }
  }, {
    id: 'DeathReportSide',
    name: {
      en: 'How to show the death report',
      de: 'Wie zeige ich den Todesreport an',
      fr: 'Où afficher le rapport de mort',
      ja: 'デスレポートの表示方法',
      cn: '死亡报告的显示方式',
      ko: '사망 보고서 표시 위치'
    },
    type: 'select',
    options: {
      en: {
        'Left Side': 'left',
        'Right Side': 'right',
        '❌ Disabled': 'disabled'
      },
      de: {
        'Left Side': 'links',
        'Right Side': 'rechts',
        '❌ Disabled': 'deaktiviert'
      },
      fr: {
        'Côté gauche': 'gauche',
        'Côté droit': 'droite',
        '❌ Disabled': 'désactivé'
      },
      ja: {
        '左側': 'left',
        '右側': 'right',
        '❌ 無効': 'disabled'
      },
      cn: {
        '左侧': 'left',
        '右侧': 'right',
        '❌ 禁用': 'disabled'
      },
      ko: {
        '왼쪽': 'left',
        '오른쪽': 'right',
        '❌ 비활성화': 'disabled'
      }
    },
    default: 'left'
  }]
};

const userFileHandler = (name, _files, baseOptions, basePath) => {
  // TODO: Rewrite user_config to be templated on option type so that this function knows
  // what type of options it is using.
  if (!baseOptions.Triggers) return;

  for (const baseTriggerSet of baseOptions.Triggers) {
    const set = baseTriggerSet; // Annotate triggers with where they came from.  Note, options is passed in repeatedly
    // as multiple sets of user files add triggers, so only process each file once.

    if (set.isUserTriggerSet) continue; // `filename` here is just cosmetic for better debug printing to make it more clear
    // where a trigger or an override is coming from.

    set.filename = `${basePath}${name}`;
    set.isUserTriggerSet = true;
  }
};

user_config/* default.registerOptions */.Z.registerOptions('oopsyraidsy', templateOptions, userFileHandler);
;// CONCATENATED MODULE: ./ui/oopsyraidsy/oopsyraidsy.ts












const addDebugInfo = (collector, numMistakes) => {
  // TODO: maybe this should use the fake_name_generator.
  const names = ['Tini Poutini', 'Potato Chippy', 'Papas Fritas', 'Tater Tot', 'Hash Brown', 'French Fry'];
  const types = ['death', 'fail', 'warn', 'pull']; // TODO: this should probably start/stop combat too for the summary page?

  let fakeTimestamp = 0;
  collector.StartEncounter(fakeTimestamp);

  for (let i = 0; i < numMistakes; ++i) {
    var _types$Math$floor;

    fakeTimestamp += 1000;
    collector.OnMistakeObj(fakeTimestamp, {
      type: (_types$Math$floor = types[Math.floor(Math.random() * types.length)]) !== null && _types$Math$floor !== void 0 ? _types$Math$floor : 'good',
      blame: names[Math.floor(Math.random() * names.length)],
      text: 'stuff'
    });
  }
}; // Note: changes to this setup function should be reflected in
// oopsy_viewer as well.

user_config/* default.getUserConfigLocation */.Z.getUserConfigLocation('oopsyraidsy', oopsy_options, () => {
  const options = { ...oopsy_options
  };
  const mistakeCollector = new MistakeCollector(options, true);
  const summaryElement = document.getElementById('summary');
  const liveListElement = document.getElementById('livelist'); // Choose the ui based on whether this is the summary view or the live list.
  // They have different elements in the file.

  if (summaryElement) {
    const listView = new OopsySummaryList(options, summaryElement);
    mistakeCollector.AddObserver(listView);
    const tableElement = document.getElementById('mistake-table');
    if (!tableElement) throw new not_reached/* UnreachableCode */.$();
    const table = new OopsySummaryTable(options, tableElement);
    mistakeCollector.AddObserver(table);
  } else if (liveListElement) {
    const listView = new OopsyLiveList(options, liveListElement);
    mistakeCollector.AddObserver(listView);
    (0,overlay_plugin_api/* addOverlayListener */.PS)('onInCombatChangedEvent', e => listView.SetInCombat(e.detail.inGameCombat));
  } else {
    throw new not_reached/* UnreachableCode */.$();
  } // NOTE: add "debug=1" url parameter to add extra events.


  const params = new URLSearchParams(window.location.search);
  if (params.get('debug')) addDebugInfo(mistakeCollector, 2200);
  const damageTracker = new DamageTracker(options, mistakeCollector, oopsy_manifest/* default */.Z);
  (0,overlay_plugin_api/* addOverlayListener */.PS)('LogLine', e => damageTracker.OnNetLog(e));
  (0,overlay_plugin_api/* addOverlayListener */.PS)('onPlayerChangedEvent', e => damageTracker.OnPlayerChange(e));
  (0,overlay_plugin_api/* addOverlayListener */.PS)('ChangeZone', e => damageTracker.OnChangeZone(e));
  (0,overlay_plugin_api/* addOverlayListener */.PS)('onInCombatChangedEvent', e => {
    damageTracker.OnInCombatChangedEvent(e);
  });
  (0,overlay_plugin_api/* addOverlayListener */.PS)('BroadcastMessage', e => mistakeCollector.OnBroadcastMessage(e));
  void (0,overlay_plugin_api/* callOverlayHandler */.ae)({
    call: 'cactbotRequestPlayerUpdate'
  });
});
;// CONCATENATED MODULE: ./ui/oopsyraidsy/oopsy_live.ts



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			137: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkcactbot"] = self["webpackChunkcactbot"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, [727], () => (__webpack_require__(875)))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,