/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 446:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// For consistency with Responses, Conditions
// are also functions.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  targetIsYou() {
    return (data, matches) => data.me === (matches === null || matches === void 0 ? void 0 : matches.target);
  },

  targetIsNotYou() {
    return (data, matches) => data.me !== (matches === null || matches === void 0 ? void 0 : matches.target);
  },

  caresAboutAOE() {
    return data => data.role === 'tank' || data.role === 'healer' || data.CanAddle() || data.job === 'BLU';
  },

  caresAboutMagical() {
    return data => data.role === 'tank' || data.role === 'healer' || data.CanAddle() || data.job === 'BLU';
  },

  caresAboutPhysical() {
    return data => data.role === 'tank' || data.role === 'healer' || data.CanFeint() || data.job === 'BLU';
  }

});

/***/ }),

/***/ 873:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
  'BeastTribeQuests': 13,
  'Companions': 12,
  'CustomDeliveries': 25,
  'DeepDungeons': 21,
  'DisciplesOfTheHand': 17,
  'DisciplesOfTheLand': 16,
  'Dungeons': 2,
  'DutyRoulette': 1,
  'Eureka': 26,
  'Fates': 8,
  'GoldSaucer': 19,
  'GrandCompany': 11,
  'Guildhests': 3,
  'Levequests': 10,
  'OverallCompletion': 14,
  'PlayerCommendation': 15,
  'Pvp': 6,
  'QuestBattles': 7,
  'Raids': 5,
  'RetainerVentures': 18,
  'TreasureHunt': 9,
  'Trials': 4,
  'UltimateRaids': 28,
  'WondrousTails': 24
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);

/***/ }),

/***/ 619:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Go": () => (/* binding */ langToLocale),
/* harmony export */   "jd": () => (/* binding */ isLang)
/* harmony export */ });
/* unused harmony exports languages, langMap */
const languages = ['en', 'de', 'fr', 'ja', 'cn', 'ko'];
const langMap = {
  en: {
    en: 'English',
    de: 'German',
    fr: 'French',
    ja: 'Japanese',
    cn: 'Chinese',
    ko: 'Korean'
  },
  de: {
    en: 'Englisch',
    de: 'Deutsch',
    fr: 'Französisch',
    ja: 'Japanisch',
    cn: 'Chinesisch',
    ko: 'Koreanisch'
  },
  fr: {
    en: 'Anglais',
    de: 'Allemand',
    fr: 'Français',
    ja: 'Japonais',
    cn: 'Chinois',
    ko: 'Coréen'
  },
  ja: {
    en: '英語',
    de: 'ドイツ語',
    fr: 'フランス語',
    ja: '日本語',
    cn: '中国語',
    ko: '韓国語'
  },
  cn: {
    en: '英文',
    de: '德文',
    fr: '法文',
    ja: '日文',
    cn: '中文',
    ko: '韩文'
  },
  ko: {
    en: '영어',
    de: '독일어',
    fr: '프랑스어',
    ja: '일본어',
    cn: '중국어',
    ko: '한국어'
  }
};
const isLang = lang => {
  const langStrs = languages;
  if (lang === undefined) return false;
  return langStrs.includes(lang);
};
const langToLocale = lang => {
  return {
    en: 'en',
    de: 'de',
    fr: 'fr',
    ja: 'ja',
    cn: 'zh-CN',
    ko: 'ko'
  }[lang];
};

/***/ }),

/***/ 21:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "W": () => (/* binding */ logDefinitionsVersions),
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const latestLogDefinitions = {
  GameLog: {
    type: '00',
    name: 'GameLog',
    messageType: 'ChatLog',
    fields: {
      type: 0,
      timestamp: 1,
      code: 2,
      name: 3,
      line: 4
    },
    subFields: {
      code: {
        '0039': {
          name: 'message',
          canAnonymize: true
        },
        '0038': {
          name: 'echo',
          canAnonymize: true
        },
        '0044': {
          name: 'dialog',
          canAnonymize: true
        },
        '0839': {
          name: 'message',
          canAnonymize: true
        }
      }
    },
    firstOptionalField: undefined
  },
  ChangeZone: {
    type: '01',
    name: 'ChangeZone',
    messageType: 'Territory',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3
    },
    lastInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  ChangedPlayer: {
    type: '02',
    name: 'ChangedPlayer',
    messageType: 'ChangePrimaryPlayer',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3
    },
    playerIds: {
      2: 3
    },
    lastInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  AddedCombatant: {
    type: '03',
    name: 'AddedCombatant',
    messageType: 'AddCombatant',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      job: 4,
      level: 5,
      ownerId: 6,
      worldId: 7,
      world: 8,
      npcNameId: 9,
      npcBaseId: 10,
      currentHp: 11,
      hp: 12,
      currentMp: 13,
      mp: 14,
      // maxTp: 15,
      // tp: 16,
      x: 17,
      y: 18,
      z: 19,
      heading: 20
    },
    playerIds: {
      2: 3,
      6: null
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  RemovedCombatant: {
    type: '04',
    name: 'RemovedCombatant',
    messageType: 'RemoveCombatant',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      job: 4,
      level: 5,
      owner: 6,
      world: 8,
      npcNameId: 9,
      npcBaseId: 10,
      hp: 12,
      x: 17,
      y: 18,
      z: 19,
      heading: 20
    },
    playerIds: {
      2: 3,
      6: null
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  PartyList: {
    type: '11',
    name: 'PartyList',
    messageType: 'PartyList',
    fields: {
      type: 0,
      timestamp: 1,
      partyCount: 2,
      id0: 3,
      id1: 4,
      id2: 5,
      id3: 6,
      id4: 7,
      id5: 8,
      id6: 9,
      id7: 10,
      id8: 11,
      id9: 12,
      id10: 13,
      id11: 14,
      id12: 15,
      id13: 16,
      id14: 17,
      id15: 18,
      id16: 19,
      id17: 20,
      id18: 21,
      id19: 22,
      id20: 23,
      id21: 24,
      id22: 25,
      id23: 26
    },
    playerIds: {
      3: null,
      4: null,
      5: null,
      6: null,
      7: null,
      8: null,
      9: null,
      10: null,
      11: null,
      12: null,
      13: null,
      14: null,
      15: null,
      16: null,
      17: null,
      18: null,
      19: null,
      20: null,
      21: null,
      22: null,
      23: null,
      24: null,
      25: null,
      26: null
    },
    firstOptionalField: 3,
    canAnonymize: true,
    lastInclude: true
  },
  PlayerStats: {
    type: '12',
    name: 'PlayerStats',
    messageType: 'PlayerStats',
    fields: {
      type: 0,
      timestamp: 1,
      job: 2,
      strength: 3,
      dexterity: 4,
      vitality: 5,
      intelligence: 6,
      mind: 7,
      piety: 8,
      attackPower: 9,
      directHit: 10,
      criticalHit: 11,
      attackMagicPotency: 12,
      healMagicPotency: 13,
      determination: 14,
      skillSpeed: 15,
      spellSpeed: 16,
      tenacity: 18,
      localContentId: 19
    },
    canAnonymize: true,
    lastInclude: true,
    firstOptionalField: undefined
  },
  StartsUsing: {
    type: '20',
    name: 'StartsUsing',
    messageType: 'StartsCasting',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      castTime: 8,
      x: 9,
      y: 10,
      z: 11,
      heading: 12
    },
    blankFields: [6],
    playerIds: {
      2: 3,
      6: 7
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Ability: {
    type: '21',
    name: 'Ability',
    messageType: 'ActionEffect',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      flags: 8,
      damage: 9,
      targetCurrentHp: 24,
      targetMaxHp: 25,
      targetCurrentMp: 26,
      targetMaxMp: 27,
      // targetCurrentTp: 28,
      // targetMaxTp: 29,
      targetX: 30,
      targetY: 31,
      targetZ: 32,
      targetHeading: 33,
      currentHp: 34,
      maxHp: 35,
      currentMp: 36,
      maxMp: 37,
      // currentTp: 38;
      // maxTp: 39;
      x: 40,
      y: 41,
      z: 42,
      heading: 43,
      sequence: 44,
      targetIndex: 45,
      targetCount: 46
    },
    playerIds: {
      2: 3,
      6: 7
    },
    blankFields: [6],
    firstUnknownField: 44,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkAOEAbility: {
    type: '22',
    name: 'NetworkAOEAbility',
    messageType: 'AOEActionEffect',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      flags: 8,
      damage: 9,
      targetCurrentHp: 24,
      targetMaxHp: 25,
      targetCurrentMp: 26,
      targetMaxMp: 27,
      // targetCurrentTp: 28,
      // targetMaxTp: 29,
      targetX: 30,
      targetY: 31,
      targetZ: 32,
      targetHeading: 33,
      currentHp: 34,
      maxHp: 35,
      currentMp: 36,
      maxMp: 37,
      // currentTp: 38;
      // maxTp: 39;
      x: 40,
      y: 41,
      z: 42,
      heading: 43,
      sequence: 44,
      targetIndex: 45,
      targetCount: 46
    },
    playerIds: {
      2: 3,
      6: 7
    },
    blankFields: [6],
    firstUnknownField: 44,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkCancelAbility: {
    type: '23',
    name: 'NetworkCancelAbility',
    messageType: 'CancelAction',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      name: 5,
      reason: 6
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkDoT: {
    type: '24',
    name: 'NetworkDoT',
    messageType: 'DoTHoT',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      which: 4,
      effectId: 5,
      damage: 6,
      currentHp: 7,
      maxHp: 8,
      currentMp: 9,
      maxMp: 10,
      // currentTp: 11,
      // maxTp: 12,
      x: 13,
      y: 14,
      z: 15,
      heading: 16
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  WasDefeated: {
    type: '25',
    name: 'WasDefeated',
    messageType: 'Death',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      sourceId: 4,
      source: 5
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  GainsEffect: {
    type: '26',
    name: 'GainsEffect',
    messageType: 'StatusAdd',
    fields: {
      type: 0,
      timestamp: 1,
      effectId: 2,
      effect: 3,
      duration: 4,
      sourceId: 5,
      source: 6,
      targetId: 7,
      target: 8,
      count: 9,
      targetMaxHp: 10,
      sourceMaxHp: 11
    },
    playerIds: {
      5: 6,
      7: 8
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  HeadMarker: {
    type: '27',
    name: 'HeadMarker',
    messageType: 'TargetIcon',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      id: 6
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkRaidMarker: {
    type: '28',
    name: 'NetworkRaidMarker',
    messageType: 'WaymarkMarker',
    fields: {
      type: 0,
      timestamp: 1,
      operation: 2,
      waymark: 3,
      id: 4,
      name: 5,
      x: 6,
      y: 7,
      z: 8
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkTargetMarker: {
    type: '29',
    name: 'NetworkTargetMarker',
    messageType: 'SignMarker',
    fields: {
      type: 0,
      timestamp: 1,
      operation: 2,
      // Add, Update, Delete
      waymark: 3,
      id: 4,
      name: 5,
      targetId: 6,
      targetName: 7
    },
    playerIds: {
      4: null,
      5: null
    },
    firstOptionalField: undefined
  },
  LosesEffect: {
    type: '30',
    name: 'LosesEffect',
    messageType: 'StatusRemove',
    fields: {
      type: 0,
      timestamp: 1,
      effectId: 2,
      effect: 3,
      sourceId: 5,
      source: 6,
      targetId: 7,
      target: 8,
      count: 9
    },
    playerIds: {
      5: 6,
      7: 8
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkGauge: {
    type: '31',
    name: 'NetworkGauge',
    messageType: 'Gauge',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      data0: 3,
      data1: 4,
      data2: 5,
      data3: 6
    },
    playerIds: {
      2: null
    },
    // Sometimes this last field looks like a player id.
    // For safety, anonymize all of the gauge data.
    firstUnknownField: 3,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkWorld: {
    type: '32',
    name: 'NetworkWorld',
    messageType: 'World',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true,
    firstOptionalField: undefined
  },
  ActorControl: {
    type: '33',
    name: 'ActorControl',
    messageType: 'Director',
    fields: {
      type: 0,
      timestamp: 1,
      instance: 2,
      command: 3,
      data0: 4,
      data1: 5,
      data2: 6,
      data3: 7
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NameToggle: {
    type: '34',
    name: 'NameToggle',
    messageType: 'NameToggle',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      targetId: 4,
      targetName: 5,
      toggle: 6
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Tether: {
    type: '35',
    name: 'Tether',
    messageType: 'Tether',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      targetId: 4,
      target: 5,
      id: 8
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstUnknownField: 9,
    firstOptionalField: undefined
  },
  LimitBreak: {
    type: '36',
    name: 'LimitBreak',
    messageType: 'LimitBreak',
    fields: {
      type: 0,
      timestamp: 1,
      valueHex: 2,
      bars: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkEffectResult: {
    type: '37',
    name: 'NetworkEffectResult',
    messageType: 'EffectResult',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      sequenceId: 4,
      currentHp: 5,
      maxHp: 6,
      currentMp: 7,
      maxMp: 8,
      // currentTp: 9,
      // maxTp: 10,
      x: 11,
      y: 12,
      z: 13,
      heading: 14
    },
    playerIds: {
      2: 3
    },
    firstUnknownField: 22,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  StatusEffect: {
    type: '38',
    name: 'StatusEffect',
    messageType: 'StatusList',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      jobLevelData: 4,
      hp: 5,
      maxHp: 6,
      mp: 7,
      maxMp: 8,
      x: 11,
      y: 12,
      z: 13,
      heading: 14,
      data0: 15,
      data1: 16,
      data2: 17,
      data3: 18,
      data4: 19,
      data5: 20 // Variable number of triplets here, but at least one.

    },
    playerIds: {
      2: 3
    },
    firstUnknownField: 20,
    canAnonymize: true,
    firstOptionalField: 18
  },
  NetworkUpdateHP: {
    type: '39',
    name: 'NetworkUpdateHP',
    messageType: 'UpdateHp',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      currentHp: 4,
      maxHp: 5,
      currentMp: 6,
      maxMp: 7,
      // currentTp: 8,
      // maxTp: 9,
      x: 10,
      y: 11,
      z: 12,
      heading: 13
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Map: {
    type: '40',
    name: 'Map',
    messageType: 'ChangeMap',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      regionName: 3,
      placeName: 4,
      placeNameSub: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  SystemLogMessage: {
    type: '41',
    name: 'SystemLogMessage',
    messageType: 'SystemLogMessage',
    fields: {
      type: 0,
      timestamp: 1,
      instance: 2,
      id: 3,
      param0: 4,
      param1: 5,
      param2: 6
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  StatusList3: {
    type: '42',
    name: 'StatusList3',
    messageType: 'StatusList3',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3 // triplets of fields from here (effectId, data, playerId)?

    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: 4,
    firstUnknownField: 4
  },
  ParserInfo: {
    type: '249',
    name: 'ParserInfo',
    messageType: 'Settings',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  ProcessInfo: {
    type: '250',
    name: 'ProcessInfo',
    messageType: 'Process',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Debug: {
    type: '251',
    name: 'Debug',
    messageType: 'Debug',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: false,
    firstOptionalField: undefined
  },
  PacketDump: {
    type: '252',
    name: 'PacketDump',
    messageType: 'PacketDump',
    fields: {
      type: 0,
      timestamp: 1
    },
    canAnonymize: false,
    firstOptionalField: undefined
  },
  Version: {
    type: '253',
    name: 'Version',
    messageType: 'Version',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Error: {
    type: '254',
    name: 'Error',
    messageType: 'Error',
    fields: {
      type: 0,
      timestamp: 1
    },
    canAnonymize: false,
    firstOptionalField: undefined
  },
  None: {
    type: '[0-9]+',
    name: 'None',
    messageType: 'None',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true,
    firstOptionalField: undefined
  }
};
const logDefinitionsVersions = {
  'latest': latestLogDefinitions
}; // Verify that this has the right type, but export `as const`.

const assertLogDefinitions = logDefinitionsVersions;
console.assert(assertLogDefinitions);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logDefinitionsVersions['latest']);

/***/ }),

/***/ 622:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ NetRegexes)
/* harmony export */ });
/* harmony import */ var _netlog_defs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/* harmony import */ var _regexes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(402);


const separator = '\\|';
const matchDefault = '[^|]*'; // If NetRegexes.setFlagTranslationsNeeded is set to true, then any
// regex created that requires a translation will begin with this string
// and match the magicStringRegex.  This is maybe a bit goofy, but is
// a pretty straightforward way to mark regexes for translations.
// If issue #1306 is ever resolved, we can remove this.

const magicTranslationString = `^^`;
const magicStringRegex = /^\^\^/;
const keysThatRequireTranslation = ['ability', 'name', 'source', 'target', 'line'];

const defaultParams = (type, version, include) => {
  var _include;

  (_include = include) !== null && _include !== void 0 ? _include : include = Object.keys(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].fields);
  const params = {};
  const firstOptionalField = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].firstOptionalField;

  for (const [prop, index] of Object.entries(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].fields)) {
    if (!include.includes(prop)) continue;
    const param = {
      field: prop,
      optional: firstOptionalField !== undefined && index >= firstOptionalField
    };
    if (prop === 'type') param.value = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].type;
    params[index] = param;
  }

  return params;
};

const parseHelper = (params, funcName, fields) => {
  var _params;

  params = (_params = params) !== null && _params !== void 0 ? _params : {};
  const validFields = [];

  for (const index in fields) {
    const field = fields[index];
    if (field) validFields.push(field.field);
  }

  _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].validateParams */ .Z.validateParams(params, funcName, ['capture', ...validFields]); // Find the last key we care about, so we can shorten the regex if needed.

  const capture = _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].trueIfUndefined */ .Z.trueIfUndefined(params.capture);
  const fieldKeys = Object.keys(fields).sort((a, b) => parseInt(a) - parseInt(b));
  let maxKeyStr;

  if (capture) {
    const keys = [];

    for (const key in fields) keys.push(key);

    let tmpKey = keys.pop();

    if (tmpKey === undefined) {
      var _fieldKeys;

      maxKeyStr = (_fieldKeys = fieldKeys[fieldKeys.length - 1]) !== null && _fieldKeys !== void 0 ? _fieldKeys : '0';
    } else {
      var _tmpKey;

      while ((_fields$tmpKey = fields[tmpKey]) !== null && _fields$tmpKey !== void 0 && _fields$tmpKey.optional && !(((_fields$tmpKey$field = (_fields$tmpKey2 = fields[tmpKey]) === null || _fields$tmpKey2 === void 0 ? void 0 : _fields$tmpKey2.field) !== null && _fields$tmpKey$field !== void 0 ? _fields$tmpKey$field : '') in params)) {
        var _fields$tmpKey, _fields$tmpKey$field, _fields$tmpKey2;

        tmpKey = keys.pop();
      }

      maxKeyStr = (_tmpKey = tmpKey) !== null && _tmpKey !== void 0 ? _tmpKey : '0';
    }
  } else {
    maxKeyStr = '0';

    for (const key in fields) {
      var _fields$key, _fields$key2;

      const value = (_fields$key = fields[key]) !== null && _fields$key !== void 0 ? _fields$key : {};
      if (typeof value !== 'object') continue;
      const fieldName = (_fields$key2 = fields[key]) === null || _fields$key2 === void 0 ? void 0 : _fields$key2.field;
      if (fieldName !== undefined && fieldName in params) maxKeyStr = key;
    }
  }

  const maxKey = parseInt(maxKeyStr); // For testing, it's useful to know if this is a regex that requires
  // translation.  We test this by seeing if there are any specified
  // fields, and if so, inserting a magic string that we can detect.
  // This lets us differentiate between "regex that should be translated"
  // e.g. a regex with `target` specified, and "regex that shouldn't"
  // e.g. a gains effect with just effectId specified.

  const transParams = Object.keys(params).filter(k => keysThatRequireTranslation.includes(k));
  const needsTranslations = NetRegexes.flagTranslationsNeeded && transParams.length > 0; // Build the regex from the fields.

  let str = needsTranslations ? magicTranslationString : '^';
  let lastKey = -1;

  for (const keyStr in fields) {
    var _fields$keyStr, _fields$keyStr$value$, _fields$keyStr2, _fields$keyStr2$value;

    const key = parseInt(keyStr); // Fill in blanks.

    const missingFields = key - lastKey - 1;
    if (missingFields === 1) str += '\\y{NetField}';else if (missingFields > 1) str += `\\y{NetField}{${missingFields}}`;
    lastKey = key;
    const value = fields[keyStr];
    if (typeof value !== 'object') throw new Error(`${funcName}: invalid value: ${JSON.stringify(value)}`);
    const fieldName = (_fields$keyStr = fields[keyStr]) === null || _fields$keyStr === void 0 ? void 0 : _fields$keyStr.field;
    const fieldValue = (_fields$keyStr$value$ = (_fields$keyStr2 = fields[keyStr]) === null || _fields$keyStr2 === void 0 ? void 0 : (_fields$keyStr2$value = _fields$keyStr2.value) === null || _fields$keyStr2$value === void 0 ? void 0 : _fields$keyStr2$value.toString()) !== null && _fields$keyStr$value$ !== void 0 ? _fields$keyStr$value$ : matchDefault;

    if (fieldName !== undefined) {
      str += _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].maybeCapture */ .Z.maybeCapture( // more accurate type instead of `as` cast
      // maybe this function needs a refactoring
      capture, fieldName, params[fieldName], fieldValue) + separator;
    } else {
      str += fieldValue + separator;
    } // Stop if we're not capturing and don't care about future fields.


    if (key >= maxKey) break;
  }

  return _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].parse */ .Z.parse(str);
};

class NetRegexes {
  static logVersion = 'latest';
  static flagTranslationsNeeded = false;

  static setFlagTranslationsNeeded(value) {
    NetRegexes.flagTranslationsNeeded = value;
  }

  static doesNetRegexNeedTranslation(regex) {
    // Need to `setFlagTranslationsNeeded` before calling this function.
    console.assert(NetRegexes.flagTranslationsNeeded);
    const str = typeof regex === 'string' ? regex : regex.source;
    return !!magicStringRegex.exec(str);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-20-0x14-networkstartscasting
   */


  static startsUsing(params) {
    return parseHelper(params, 'startsUsing', defaultParams('StartsUsing', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   */


  static ability(params) {
    return parseHelper(params, 'ability', { ...defaultParams('Ability', NetRegexes.logVersion),
      // Override type
      0: {
        field: 'type',
        value: '2[12]',
        optional: false
      }
    });
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   *
   * @deprecated Use `ability` instead
   */


  static abilityFull(params) {
    return this.ability(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-27-0x1b-networktargeticon-head-marker
   */


  static headMarker(params) {
    return parseHelper(params, 'headMarker', defaultParams('HeadMarker', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */


  static addedCombatant(params) {
    return parseHelper(params, 'addedCombatant', defaultParams('AddedCombatant', NetRegexes.logVersion, ['type', 'timestamp', 'id', 'name']));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */


  static addedCombatantFull(params) {
    return parseHelper(params, 'addedCombatantFull', defaultParams('AddedCombatant', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-04-0x04-removecombatant
   */


  static removingCombatant(params) {
    return parseHelper(params, 'removingCombatant', defaultParams('RemovedCombatant', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-26-0x1a-networkbuff
   */


  static gainsEffect(params) {
    return parseHelper(params, 'gainsEffect', defaultParams('GainsEffect', NetRegexes.logVersion));
  }
  /**
   * Prefer gainsEffect over this function unless you really need extra data.
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-38-0x26-networkstatuseffects
   */


  static statusEffectExplicit(params) {
    return parseHelper(params, 'statusEffectExplicit', defaultParams('StatusEffect', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-30-0x1e-networkbuffremove
   */


  static losesEffect(params) {
    return parseHelper(params, 'losesEffect', defaultParams('LosesEffect', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-35-0x23-networktether
   */


  static tether(params) {
    return parseHelper(params, 'tether', defaultParams('Tether', NetRegexes.logVersion));
  }
  /**
   * 'target' was defeated by 'source'
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-25-0x19-networkdeath
   */


  static wasDefeated(params) {
    return parseHelper(params, 'wasDefeated', defaultParams('WasDefeated', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static echo(params) {
    if (typeof params === 'undefined') params = {};
    _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].validateParams */ .Z.validateParams(params, 'echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0038';
    return NetRegexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static dialog(params) {
    if (typeof params === 'undefined') params = {};
    _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].validateParams */ .Z.validateParams(params, 'dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0044';
    return NetRegexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static message(params) {
    if (typeof params === 'undefined') params = {};
    _regexes__WEBPACK_IMPORTED_MODULE_1__/* ["default"].validateParams */ .Z.validateParams(params, 'message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0839';
    return NetRegexes.gameLog(params);
  }
  /**
   * fields: code, name, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static gameLog(params) {
    return parseHelper(params, 'gameLog', defaultParams('GameLog', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static gameNameLog(params) {
    // Backwards compatability.
    return NetRegexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-12-0x0c-playerstats
   */


  static statChange(params) {
    return parseHelper(params, 'statChange', defaultParams('PlayerStats', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-01-0x01-changezone
   */


  static changeZone(params) {
    return parseHelper(params, 'changeZone', defaultParams('ChangeZone', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-33-0x21-network6d-actor-control
   */


  static network6d(params) {
    return parseHelper(params, 'network6d', defaultParams('ActorControl', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-34-0x22-networknametoggle
   */


  static nameToggle(params) {
    return parseHelper(params, 'nameToggle', defaultParams('NameToggle', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-40-0x28-map
   */


  static map(params) {
    return parseHelper(params, 'map', defaultParams('Map', NetRegexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-41-0x29-systemlogmessage
   */


  static systemLogMessage(params) {
    return parseHelper(params, 'systemLogMessage', defaultParams('SystemLogMessage', NetRegexes.logVersion));
  }

}

/***/ }),

/***/ 62:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ UnreachableCode)
/* harmony export */ });
// Helper Error for TypeScript situations where the programmer thinks they
// know better than TypeScript that some situation will never occur.
// The intention here is that the programmer does not expect a particular
// bit of code to happen, and so has not written careful error handling.
// If it does occur, at least there will be an error and we can figure out why.
// This is preferable to casting or disabling TypeScript altogether in order to
// avoid syntax errors.
// One common example is a regex, where if the regex matches then all of the
// (non-optional) regex groups will also be valid, but TypeScript doesn't know.
class UnreachableCode extends Error {
  constructor() {
    super('This code shouldn\'t be reached');
  }

}

/***/ }),

/***/ 81:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Output strings for now require a field for every language, so this is a
// helper function to generate one for literal numbers.
const numberToOutputString = function (n) {
  const str = n.toString();
  return {
    en: str,
    de: str,
    fr: str,
    ja: str,
    cn: str,
    ko: str
  };
}; // General guidelines:
// * property names should closely match English text
// * use OnPlayer suffix for things with `${player}`
// * use OnTarget suffix for things with `${name}`
// * any other parameters (of which there are none, currently) should use consistent suffixes.
// * the value of each property should be a single object with localized keys


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  aoe: {
    en: 'aoe',
    de: 'AoE',
    fr: 'AoE',
    ja: 'AoE',
    cn: 'AoE',
    ko: '전체 공격'
  },
  bigAoe: {
    en: 'big aoe!',
    de: 'Große AoE!',
    fr: 'Grosse AoE !',
    ja: '大ダメージAoE',
    cn: '大AoE伤害！',
    ko: '강한 전체 공격!'
  },
  tankBuster: {
    en: 'Tank Buster',
    de: 'Tank buster',
    fr: 'Tank buster',
    ja: 'タンクバスター',
    cn: '坦克死刑',
    ko: '탱버'
  },
  miniBuster: {
    en: 'Mini Buster',
    de: 'Kleiner Tankbuster',
    fr: 'Mini Buster',
    ja: 'ミニバスター',
    cn: '小死刑',
    ko: '약한 탱버'
  },
  tankBusterOnPlayer: {
    en: 'Tank Buster on ${player}',
    de: 'Tank buster auf ${player}',
    fr: 'Tank buster sur ${player}',
    ja: '${player}にタンクバスター',
    cn: '死刑 点 ${player}',
    ko: '"${player}" 탱버'
  },
  tankBusterOnYou: {
    en: 'Tank Buster on YOU',
    de: 'Tank buster auf DIR',
    fr: 'Tank buster sur VOUS',
    ja: '自分にタンクバスター',
    cn: '死刑点名',
    ko: '탱버 대상자'
  },
  // when there are multiple tankbusters going out
  tankBusters: {
    en: 'Tank Busters',
    de: 'Tank buster',
    fr: 'Tank busters',
    ja: 'タンクバスター',
    cn: '坦克死刑',
    ko: '탱버'
  },
  tankCleave: {
    en: 'Tank cleave',
    de: 'Tank Cleave',
    fr: 'Tank cleave',
    ja: '前方範囲攻撃',
    cn: '顺劈',
    ko: '광역 탱버'
  },
  avoidTankCleave: {
    en: 'Avoid tank cleave',
    de: 'Tank Cleave ausweichen',
    fr: 'Évitez le tank cleave',
    ja: '前方範囲攻撃を避ける',
    cn: '远离顺劈',
    ko: '광역 탱버 피하기'
  },
  tankCleaveOnYou: {
    en: 'Tank cleave on YOU',
    de: 'Tank Cleave aud DIR',
    fr: 'Tank cleave sur VOUS',
    ja: '自分に前方範囲攻撃',
    cn: '顺劈点名',
    ko: '나에게 광역 탱버'
  },
  sharedTankbuster: {
    en: 'Shared Tank Buster',
    fr: 'Partagez le Tank buster',
    cn: '分摊死刑',
    ko: '쉐어 탱버'
  },
  sharedTankbusterOnYou: {
    en: 'Shared Tank Buster on YOU',
    de: 'geteilter Tankbuster auf DIR',
    fr: 'Tank buster à partager sur VOUS',
    ja: '自分にタンクシェア',
    cn: '分摊死刑点名',
    ko: '쉐어 탱버 대상자'
  },
  sharedTankbusterOnPlayer: {
    en: 'Shared Tank Buster on ${player}',
    de: 'geteilter Tankbuster on ${player}',
    fr: 'Tank buster à partager sur ${player}',
    ja: '${player} にタンクシェア',
    cn: '分摊死刑点 ${player}',
    ko: '"${player}" 쉐어 탱버'
  },
  tankSwap: {
    en: 'Tank Swap!',
    de: 'Tankwechsel!',
    fr: 'Tank swap !',
    ja: 'タンクスイッチ!',
    cn: '换T！',
    ko: '탱 교대'
  },
  spread: {
    en: 'Spread',
    de: 'Verteilen',
    fr: 'Dispersez-vous',
    ja: '散開',
    cn: '分散',
    ko: '산개'
  },
  stackMarker: {
    // for stack marker situations
    en: 'Stack',
    de: 'Sammeln',
    fr: 'Packez-vous',
    ja: '頭割り',
    cn: '分摊',
    ko: '쉐어뎀'
  },
  getTogether: {
    // for getting together without stack marker
    en: 'Stack',
    de: 'Sammeln',
    fr: 'Packez-vous',
    ja: '集合',
    cn: '集合',
    ko: '모이기'
  },
  stackOnYou: {
    en: 'Stack on YOU',
    de: 'Auf DIR sammeln',
    fr: 'Package sur VOUS',
    ja: '自分に集合',
    cn: '集合点名',
    ko: '쉐어징 대상자'
  },
  stackOnPlayer: {
    en: 'Stack on ${player}',
    de: 'Auf ${player} sammeln',
    fr: 'Packez-vous sur ${player}',
    ja: '${player}に集合',
    cn: '靠近 ${player}集合',
    ko: '"${player}" 쉐어징'
  },
  stackMiddle: {
    en: 'Stack in middle',
    de: 'In der Mitte sammeln',
    fr: 'Packez-vous au milieu',
    ja: '中央で集合',
    cn: '中间集合',
    ko: '중앙에서 모이기'
  },
  doritoStack: {
    en: 'Dorito Stack',
    de: 'Mit Marker sammeln',
    fr: 'Packez les marquages',
    ja: 'マーカー付けた人と集合',
    cn: '点名集合',
    ko: '징끼리 모이기'
  },
  spreadThenStack: {
    en: 'Spread => Stack',
    de: 'Verteilen => Sammeln',
    fr: 'Dispersion => Package',
    ja: '散開 => 集合',
    cn: '分散 => 集合',
    ko: '산개 => 집합'
  },
  stackThenSpread: {
    en: 'Stack => Spread',
    de: 'Sammeln => Verteilen',
    fr: 'Package => Dispersion',
    ja: 'スタック => 散開',
    cn: '集合 => 分散',
    ko: '집합 => 산개'
  },
  drawIn: {
    // Opposite of a knockback.
    en: 'Draw In',
    de: 'Einzug',
    fr: 'Attraction',
    ja: '吸込み',
    cn: '吸引',
    ko: '끌어당김'
  },
  knockback: {
    en: 'Knockback',
    de: 'Rückstoß',
    fr: 'Poussée',
    ja: 'ノックバック',
    cn: '击退',
    ko: '넉백'
  },
  knockbackOnYou: {
    en: 'Knockback on YOU',
    de: 'Rückstoß auf DIR',
    fr: 'Poussée sur VOUS',
    ja: '自分にノックバック',
    cn: '击退点名',
    ko: '넉백징 대상자'
  },
  knockbackOnPlayer: {
    en: 'Knockback on ${player}',
    de: 'Rückstoß auf ${player}',
    fr: 'Poussée sur ${player}',
    ja: '${player}にノックバック',
    cn: '击退点名${player}',
    ko: '"${player}" 넉백징'
  },
  lookTowardsBoss: {
    en: 'Look Towards Boss',
    de: 'Anschauen Boss',
    fr: 'Regardez le boss',
    ja: 'ボスを見る',
    cn: '面向Boss',
    ko: '쳐다보기'
  },
  lookAway: {
    en: 'Look Away',
    de: 'Wegschauen',
    fr: 'Regardez ailleurs',
    ja: 'ボスを見ない',
    cn: '背对Boss',
    ko: '뒤돌기'
  },
  lookAwayFromPlayer: {
    en: 'Look Away from ${player}',
    de: 'Schau weg von ${player}',
    fr: 'Ne regardez pas ${player}',
    ja: '${player}を見ない',
    cn: '背对${player}',
    ko: '${player}에게서 뒤돌기'
  },
  lookAwayFromTarget: {
    en: 'Look Away from ${name}',
    de: 'Schau weg von ${name}',
    fr: 'Ne regardez pas ${name}',
    ja: '${name}を見ない',
    cn: '背对${name}',
    ko: '${name}에게서 뒤돌기'
  },
  getBehind: {
    en: 'Get Behind',
    de: 'Hinter ihn',
    fr: 'Passez derrière',
    ja: '背面へ',
    cn: '去背后',
    ko: '보스 뒤로'
  },
  goFrontOrSides: {
    en: 'Go Front / Sides',
    de: 'Gehe nach Vorne/ zu den Seiten',
    fr: 'Allez Devant / Côtés',
    ja: '前／横へ',
    cn: '去前侧方',
    ko: '보스 후방 피하기'
  },
  goFront: {
    en: 'Go Front',
    de: 'Geh nach vorn',
    fr: 'Allez Devant',
    ja: '前へ',
    cn: '去前面',
    ko: '앞으로'
  },
  // getUnder is used when you have to get into the bosses hitbox
  getUnder: {
    en: 'Get Under',
    de: 'Unter ihn',
    fr: 'En dessous',
    ja: 'ボスに貼り付く',
    cn: '去脚下',
    ko: '보스 아래로'
  },
  // in is more like "get close but maybe even melee range is fine"
  in: {
    en: 'In',
    de: 'Rein',
    fr: 'Intérieur',
    ja: '中へ',
    cn: '靠近',
    ko: '안으로'
  },
  // out means get far away
  out: {
    en: 'Out',
    de: 'Raus',
    fr: 'Extérieur',
    ja: '外へ',
    cn: '远离',
    ko: '밖으로'
  },
  outOfMelee: {
    en: 'Out of melee',
    de: 'Raus aus Nahkampf',
    fr: 'Sortez de la mêlée',
    ja: '近接最大レンジ',
    cn: '近战最远距离回避',
    ko: '근접범위 밖으로'
  },
  inThenOut: {
    en: 'In, then out',
    de: 'Rein, dann raus',
    fr: 'Intérieur, puis extérieur',
    ja: '中 => 外',
    cn: '先靠近，再远离',
    ko: '안으로 => 밖으로'
  },
  outThenIn: {
    en: 'Out, then in',
    de: 'Raus, dann rein',
    fr: 'Extérieur, puis intérieur',
    ja: '外 => 中',
    cn: '先远离，再靠近',
    ko: '밖으로 => 안으로'
  },
  backThenFront: {
    en: 'Back Then Front',
    de: 'Nach Hinten, danach nach Vorne',
    fr: 'Derrière puis devant',
    ja: '後ろ => 前',
    cn: '后 => 前',
    ko: '뒤로 => 앞으로'
  },
  frontThenBack: {
    en: 'Front Then Back',
    de: 'Nach Vorne, danach nach Hinten',
    fr: 'Devant puis derrière',
    ja: '前 => 後ろ',
    cn: '前 => 后',
    ko: '앞으로 => 뒤로'
  },
  goIntoMiddle: {
    en: 'Get Middle',
    de: 'in die Mitte gehen',
    fr: 'Allez au milieu',
    ja: '中へ',
    cn: '去中间',
    ko: '중앙으로'
  },
  right: {
    en: 'Right',
    de: 'Rechts',
    fr: 'À droite',
    ja: '右へ',
    cn: '右',
    ko: '오른쪽'
  },
  left: {
    en: 'Left',
    de: 'Links',
    fr: 'À gauche',
    ja: '左へ',
    cn: '左',
    ko: '왼쪽'
  },
  getLeftAndWest: {
    en: '<= Get Left/West',
    de: '<= Nach Links/Westen',
    fr: '<= Allez à Gauche/Ouest',
    ja: '<= 左/西へ',
    cn: '<= 去左/西边',
    ko: '<= 왼쪽으로'
  },
  getRightAndEast: {
    en: 'Get Right/East =>',
    de: 'Nach Rechts/Osten =>',
    fr: 'Allez à Droite/Est =>',
    ja: '右/東へ =>',
    cn: '去右/东边 =>',
    ko: '오른쪽으로 =>'
  },
  goFrontBack: {
    en: 'Go Front/Back',
    de: 'Geh nach Vorne/Hinten',
    fr: 'Allez Devant/Derrière',
    ja: '縦へ',
    cn: '去前后',
    ko: '앞/뒤로'
  },
  sides: {
    en: 'Sides',
    de: 'Seiten',
    fr: 'Côtés',
    ja: '横へ',
    cn: '去侧面',
    ko: '양옆으로'
  },
  middle: {
    en: 'Middle',
    de: 'Mitte',
    fr: 'Milieu',
    ja: '中へ',
    cn: '中间',
    ko: '중앙'
  },
  // killAdds is used for adds that will always be available
  killAdds: {
    en: 'Kill adds',
    de: 'Adds besiegen',
    fr: 'Tuez les adds',
    ja: '雑魚を処理',
    cn: '击杀小怪',
    ko: '쫄 잡기'
  },
  // killExtraAdd is used for adds that appear if a mechanic was not played correctly
  killExtraAdd: {
    en: 'Kill Extra Add',
    de: 'Add besiegen',
    fr: 'Tuez l\'add',
    ja: '雑魚を倒す',
    cn: '击杀小怪',
    ko: '쫄 잡기'
  },
  awayFromFront: {
    en: 'Away From Front',
    de: 'Weg von Vorne',
    fr: 'Éloignez-vous du devant',
    ja: '前方から離れる',
    cn: '远离正面',
    ko: '보스 전방 피하기'
  },
  sleepTarget: {
    en: 'Sleep ${name}',
    de: 'Schlaf auf ${name}',
    fr: 'Sommeil sur ${name}',
    ja: '${name} にスリプル',
    cn: '催眠 ${name}',
    ko: '${name} 슬리플'
  },
  stunTarget: {
    en: 'Stun ${name}',
    de: 'Betäubung auf ${name}',
    fr: 'Étourdissez ${name}',
    ja: '${name} にスタン',
    cn: '眩晕 ${name}',
    ko: '${name}기절'
  },
  interruptTarget: {
    en: 'interrupt ${name}',
    de: 'unterbreche ${name}',
    fr: 'Interrompez ${name}',
    ja: '${name} に沈黙',
    cn: '打断${name}',
    ko: '${name}기술 시전 끊기'
  },
  preyOnYou: {
    en: 'Prey on YOU',
    de: 'Marker auf DIR',
    fr: 'Marquage sur VOUS',
    ja: '自分に捕食',
    cn: '掠食点名',
    ko: '홍옥징 대상자'
  },
  preyOnPlayer: {
    en: 'Prey on ${player}',
    de: 'Marker auf ${player}',
    fr: 'Marquage sur ${player}',
    ja: '${player}に捕食',
    cn: '掠食点名${player}',
    ko: '"${player}" 홍옥징'
  },
  awayFromGroup: {
    en: 'Away from Group',
    de: 'Weg von der Gruppe',
    fr: 'Éloignez-vous du groupe',
    ja: '外へ',
    cn: '远离人群',
    ko: '다른 사람들과 떨어지기'
  },
  awayFromPlayer: {
    en: 'Away from ${player}',
    de: 'Weg von ${player}',
    fr: 'Éloignez-vous de ${player}',
    ja: '${player}から離れる',
    cn: '远离${player}',
    ko: '"${player}"에게서 멀어지기'
  },
  meteorOnYou: {
    en: 'Meteor on YOU',
    de: 'Meteor auf DIR',
    fr: 'Météore sur VOUS',
    ja: '自分にメテオ',
    cn: '陨石点名',
    ko: '나에게 메테오징'
  },
  stopMoving: {
    en: 'Stop Moving!',
    de: 'Bewegung stoppen!',
    fr: 'Ne bougez pas !',
    ja: '移動禁止！',
    cn: '停止移动！',
    ko: '이동 멈추기!'
  },
  stopEverything: {
    en: 'Stop Everything!',
    de: 'Stoppe Alles!',
    fr: 'Arrêtez TOUT !',
    ja: '行動禁止！',
    cn: '停止行动！',
    ko: '행동 멈추기!'
  },
  moveAway: {
    // move away to dodge aoes
    en: 'Move!',
    de: 'Bewegen!',
    fr: 'Bougez !',
    ja: '避けて！',
    cn: '快躲开！',
    ko: '이동하기!'
  },
  moveAround: {
    // move around (e.g. jumping) to avoid being frozen
    en: 'Move!',
    de: 'Bewegen!',
    fr: 'Bougez !',
    ja: '動く！',
    cn: '快动！',
    ko: '움직이기!'
  },
  breakChains: {
    en: 'Break chains',
    de: 'Kette zerbrechen',
    fr: 'Brisez les chaines',
    ja: '線を切る',
    cn: '切断连线',
    ko: '선 끊기'
  },
  moveChainsTogether: {
    en: 'Move chains together',
    de: 'Ketten zusammen bewegen',
    fr: 'Bougez les chaines ensemble',
    ja: '線同士一緒に移動',
    cn: '连线一起移动',
    ko: '선 붙어서 같이 움직이기'
  },
  earthshakerOnYou: {
    en: 'Earth Shaker on YOU',
    de: 'Erdstoß auf DIR',
    fr: 'Marque de terre sur VOUS',
    ja: '自分にアースシェイカー',
    cn: '大地摇动点名',
    ko: '어스징 대상자'
  },
  wakeUp: {
    en: 'WAKE UP',
    de: 'AUFWACHEN',
    fr: 'RÉVEILLE-TOI',
    ja: '目を覚まして！',
    cn: '醒醒！动一动！！',
    ko: '일어나세요!'
  },
  closeTethersWithPlayer: {
    en: 'Close Tethers (${player})',
    de: 'Nahe Verbindungen (${player})',
    fr: 'Liens proches avec (${player})',
    ja: '(${player})に近づく',
    cn: '靠近连线 (${player})',
    ko: '상대와 가까이 붙기 (${player})'
  },
  farTethersWithPlayer: {
    en: 'Far Tethers (${player})',
    de: 'Entfernte Verbindungen (${player})',
    fr: 'Liens éloignés avec (${player})',
    ja: ' (${player})から離れる',
    cn: '远离连线 (${player})',
    ko: '상대와 떨어지기 (${player})'
  },
  unknown: {
    en: '???',
    de: '???',
    fr: '???',
    ja: '???',
    cn: '???',
    ko: '???'
  },
  north: {
    en: 'North',
    de: 'Norden',
    fr: 'Nord',
    ja: '北',
    cn: '上(北)',
    ko: '북쪽'
  },
  south: {
    en: 'South',
    de: 'Süden',
    fr: 'Sud',
    ja: '南',
    cn: '下(南)',
    ko: '남쪽'
  },
  east: {
    en: 'East',
    de: 'Osten',
    fr: 'Est',
    ja: '東',
    cn: '右(东)',
    ko: '동쪽'
  },
  west: {
    en: 'West',
    de: 'Westen',
    fr: 'Ouest',
    ja: '西',
    cn: '左(西)',
    ko: '서쪽'
  },
  northwest: {
    en: 'Northwest',
    de: 'Nordwesten',
    fr: 'Nord-Ouest',
    ja: '北西',
    cn: '左上(西北)',
    ko: '북서쪽'
  },
  northeast: {
    en: 'Northeast',
    de: 'Nordosten',
    fr: 'Nord-Est',
    ja: '北東',
    cn: '右上(东北)',
    ko: '북동쪽'
  },
  southwest: {
    en: 'Southwest',
    de: 'Südwesten',
    fr: 'Sud-Ouest',
    ja: '南西',
    cn: '左下(西南)',
    ko: '남서쪽'
  },
  southeast: {
    en: 'Southeast',
    de: 'Südosten',
    fr: 'Sud-Est',
    ja: '南東',
    cn: '右下(东南)',
    ko: '남동쪽'
  },
  dirN: {
    en: 'N',
    de: 'N',
    fr: 'N',
    ja: '北',
    cn: '上(北)',
    ko: '북'
  },
  dirS: {
    en: 'S',
    de: 'S',
    fr: 'S',
    ja: '南',
    cn: '下(南)',
    ko: '남'
  },
  dirE: {
    en: 'E',
    de: 'O',
    fr: 'E',
    ja: '東',
    cn: '右(东)',
    ko: '동'
  },
  dirW: {
    en: 'W',
    de: 'W',
    fr: 'O',
    ja: '西',
    cn: '左(西)',
    ko: '서'
  },
  dirNW: {
    en: 'NW',
    de: 'NW',
    fr: 'NO',
    ja: '北西',
    cn: '左上(西北)',
    ko: '북서'
  },
  dirNE: {
    en: 'NE',
    de: 'NO',
    fr: 'NE',
    ja: '北東',
    cn: '右上(东北)',
    ko: '북동'
  },
  dirSW: {
    en: 'SW',
    de: 'SW',
    fr: 'SO',
    ja: '南西',
    cn: '左下(西南)',
    ko: '남서'
  },
  dirSE: {
    en: 'SE',
    de: 'SO',
    fr: 'SE',
    ja: '南東',
    cn: '右下(东南)',
    ko: '남동'
  },
  // Literal numbers.
  num0: numberToOutputString(0),
  num1: numberToOutputString(1),
  num2: numberToOutputString(2),
  num3: numberToOutputString(3),
  num4: numberToOutputString(4),
  num5: numberToOutputString(5),
  num6: numberToOutputString(6),
  num7: numberToOutputString(7),
  num8: numberToOutputString(8),
  num9: numberToOutputString(9)
});

/***/ }),

/***/ 959:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PS": () => (/* binding */ addOverlayListener),
/* harmony export */   "ae": () => (/* binding */ callOverlayHandler)
/* harmony export */ });
/* unused harmony exports dispatchOverlayEvent, removeOverlayListener, setOverlayHandlerOverride, init */
// OverlayPlugin API setup
let inited = false;
let wsUrl = null;
let ws = null;
let queue = [];
let rseqCounter = 0;
const responsePromises = {};
const subscribers = {};

const sendMessage = (msg, cb) => {
  if (ws) {
    if (queue) queue.push(msg);else ws.send(JSON.stringify(msg));
  } else {
    if (queue) queue.push([msg, cb]);else window.OverlayPluginApi.callHandler(JSON.stringify(msg), cb);
  }
};

const processEvent = msg => {
  init();
  const subs = subscribers[msg.type];
  subs === null || subs === void 0 ? void 0 : subs.forEach(sub => {
    try {
      sub(msg);
    } catch (e) {
      console.error(e);
    }
  });
};

const dispatchOverlayEvent = processEvent;
const addOverlayListener = (event, cb) => {
  var _subscribers$event;

  init();

  if (!subscribers[event]) {
    subscribers[event] = [];

    if (!queue) {
      sendMessage({
        call: 'subscribe',
        events: [event]
      });
    }
  }

  (_subscribers$event = subscribers[event]) === null || _subscribers$event === void 0 ? void 0 : _subscribers$event.push(cb);
};
const removeOverlayListener = (event, cb) => {
  init();

  if (subscribers[event]) {
    const list = subscribers[event];
    const pos = list === null || list === void 0 ? void 0 : list.indexOf(cb);
    if (pos !== undefined && pos > -1) list === null || list === void 0 ? void 0 : list.splice(pos, 1);
  }
};

const callOverlayHandlerInternal = (_msg // eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  init();
  const msg = { ..._msg,
    rseq: 0
  };
  let p;

  if (ws) {
    msg.rseq = rseqCounter++;
    p = new Promise((resolve, reject) => {
      responsePromises[msg.rseq] = {
        resolve: resolve,
        reject: reject
      };
    });
    sendMessage(msg);
  } else {
    p = new Promise((resolve, reject) => {
      sendMessage(msg, data => {
        if (data === null) {
          resolve(data);
          return;
        }

        const parsed = JSON.parse(data);
        if (parsed['$error']) reject(parsed);else resolve(parsed);
      });
    });
  }

  return p;
};

const callOverlayHandlerOverrideMap = {};
const callOverlayHandler = (_msg // eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  var _callOverlayHandlerOv;

  init(); // If this `as` is incorrect, then it will not find an override.
  // TODO: we could also replace this with a type guard.

  const type = _msg.call;
  const callFunc = (_callOverlayHandlerOv = callOverlayHandlerOverrideMap[type]) !== null && _callOverlayHandlerOv !== void 0 ? _callOverlayHandlerOv : callOverlayHandlerInternal; // The `IOverlayHandler` type guarantees that parameters/return type match
  // one of the overlay handlers.  The OverrideMap also only stores functions
  // that match by the discriminating `call` field, and so any overrides
  // should be correct here.
  // eslint-disable-next-line max-len
  // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument

  return callFunc(_msg);
};
const setOverlayHandlerOverride = (type, override) => {
  if (!override) {
    delete callOverlayHandlerOverrideMap[type];
    return;
  }

  callOverlayHandlerOverrideMap[type] = override;
};
const init = () => {
  if (inited) return;

  if (typeof window !== 'undefined') {
    wsUrl = new URLSearchParams(window.location.search).get('OVERLAY_WS');

    if (wsUrl !== null) {
      const connectWs = function (wsUrl) {
        ws = new WebSocket(wsUrl);
        ws.addEventListener('error', e => {
          console.error(e);
        });
        ws.addEventListener('open', () => {
          var _queue;

          console.log('Connected!');
          const q = (_queue = queue) !== null && _queue !== void 0 ? _queue : [];
          queue = null;
          sendMessage({
            call: 'subscribe',
            events: Object.keys(subscribers)
          });

          for (const msg of q) {
            if (!Array.isArray(msg)) sendMessage(msg);
          }
        });
        ws.addEventListener('message', _msg => {
          try {
            if (typeof _msg.data !== 'string') {
              console.error('Invalid message data received: ', _msg);
              return;
            }

            const msg = JSON.parse(_msg.data);
            const promiseFuncs = (msg === null || msg === void 0 ? void 0 : msg.rseq) !== undefined ? responsePromises[msg.rseq] : undefined;

            if (msg.rseq !== undefined && promiseFuncs) {
              if (msg['$error']) promiseFuncs.reject(msg);else promiseFuncs.resolve(msg);
              delete responsePromises[msg.rseq];
            } else {
              processEvent(msg);
            }
          } catch (e) {
            console.error('Invalid message received: ', _msg);
            return;
          }
        });
        ws.addEventListener('close', () => {
          queue = null;
          console.log('Trying to reconnect...'); // Don't spam the server with retries.

          window.setTimeout(() => {
            connectWs(wsUrl);
          }, 300);
        });
      };

      connectWs(wsUrl);
    } else {
      const waitForApi = function () {
        var _window$OverlayPlugin, _queue2;

        if (!((_window$OverlayPlugin = window.OverlayPluginApi) !== null && _window$OverlayPlugin !== void 0 && _window$OverlayPlugin.ready)) {
          window.setTimeout(waitForApi, 300);
          return;
        }

        const q = (_queue2 = queue) !== null && _queue2 !== void 0 ? _queue2 : [];
        queue = null;
        window.__OverlayCallback = processEvent;
        sendMessage({
          call: 'subscribe',
          events: Object.keys(subscribers)
        });

        for (const item of q) {
          if (Array.isArray(item)) sendMessage(item[0], item[1]);
        }
      };

      waitForApi();
    } // Here the OverlayPlugin API is registered to the window object,
    // but this is mainly for backwards compatibility.For cactbot's built-in files,
    // it is recommended to use the various functions exported in resources/overlay_plugin_api.ts.


    window.addOverlayListener = addOverlayListener;
    window.removeOverlayListener = removeOverlayListener;
    window.callOverlayHandler = callOverlayHandler;
    window.dispatchOverlayEvent = dispatchOverlayEvent;
  }

  inited = true;
};

/***/ }),

/***/ 402:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ Regexes)
/* harmony export */ });
/* harmony import */ var _netlog_defs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);

const separator = ':';
const matchDefault = '[^:]*';
const matchWithColonsDefault = '(?:[^:]|: )*?';
const fieldsWithPotentialColons = ['effect', 'ability'];

const defaultParams = (type, version, include) => {
  var _include;

  (_include = include) !== null && _include !== void 0 ? _include : include = Object.keys(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].fields);
  const params = {};
  const firstOptionalField = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].firstOptionalField;

  for (const [prop, index] of Object.entries(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].fields)) {
    if (!include.includes(prop)) continue;
    const param = {
      field: prop,
      optional: firstOptionalField !== undefined && index >= firstOptionalField
    };
    if (prop === 'type') param.value = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type].type;
    params[index] = param;
  }

  return params;
};

const parseHelper = (params, defKey, fields) => {
  var _params;

  params = (_params = params) !== null && _params !== void 0 ? _params : {};
  const validFields = [];

  for (const index in fields) {
    const field = fields[index];
    if (field) validFields.push(field.field);
  }

  Regexes.validateParams(params, defKey, ['capture', ...validFields]); // Find the last key we care about, so we can shorten the regex if needed.

  const capture = Regexes.trueIfUndefined(params.capture);
  const fieldKeys = Object.keys(fields).sort((a, b) => parseInt(a) - parseInt(b));
  let maxKeyStr;

  if (capture) {
    const keys = [];

    for (const key in fields) keys.push(key);

    let tmpKey = keys.pop();

    if (tmpKey === undefined) {
      var _fieldKeys;

      maxKeyStr = (_fieldKeys = fieldKeys[fieldKeys.length - 1]) !== null && _fieldKeys !== void 0 ? _fieldKeys : '0';
    } else {
      var _tmpKey;

      while ((_fields$tmpKey = fields[tmpKey]) !== null && _fields$tmpKey !== void 0 && _fields$tmpKey.optional && !(((_fields$tmpKey$field = (_fields$tmpKey2 = fields[tmpKey]) === null || _fields$tmpKey2 === void 0 ? void 0 : _fields$tmpKey2.field) !== null && _fields$tmpKey$field !== void 0 ? _fields$tmpKey$field : '') in params)) {
        var _fields$tmpKey, _fields$tmpKey$field, _fields$tmpKey2;

        tmpKey = keys.pop();
      }

      maxKeyStr = (_tmpKey = tmpKey) !== null && _tmpKey !== void 0 ? _tmpKey : '0';
    }
  } else {
    maxKeyStr = '0';

    for (const key in fields) {
      var _fields$key, _fields$key2;

      const value = (_fields$key = fields[key]) !== null && _fields$key !== void 0 ? _fields$key : {};
      if (typeof value !== 'object') continue;
      const fieldName = (_fields$key2 = fields[key]) === null || _fields$key2 === void 0 ? void 0 : _fields$key2.field;
      if (fieldName !== undefined && fieldName in params) maxKeyStr = key;
    }
  }

  const maxKey = parseInt(maxKeyStr); // Special case for Ability to handle aoe and non-aoe.

  const abilityMessageType = `(?:${_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].Ability.messageType */ .Z.Ability.messageType}|${_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].NetworkAOEAbility.messageType */ .Z.NetworkAOEAbility.messageType})`;
  const abilityHexCode = '(?:15|16)'; // Build the regex from the fields.

  const prefix = defKey !== 'Ability' ? _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z[defKey].messageType : abilityMessageType;
  const hexCode = defKey !== 'Ability' ? `00${parseInt(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z[defKey].type).toString(16)}`.slice(-2).toUpperCase() : abilityHexCode;
  let str = '';
  if (capture) str += `(?<timestamp>\\y{Timestamp}) ${prefix} (?<type>${hexCode})`;else str += `\\y{Timestamp} ${prefix} ${hexCode}`;
  let lastKey = 1;

  for (const keyStr in fields) {
    var _fields$keyStr, _fields$keyStr$value$, _fields$keyStr2, _fields$keyStr2$value;

    const fieldName = (_fields$keyStr = fields[keyStr]) === null || _fields$keyStr === void 0 ? void 0 : _fields$keyStr.field; // Regex handles these manually above in the `str` initialization.

    if (fieldName === 'timestamp' || fieldName === 'type') continue;
    const key = parseInt(keyStr); // Fill in blanks.

    const missingFields = key - lastKey - 1;
    if (missingFields === 1) str += `${separator}${matchDefault}`;else if (missingFields > 1) str += `(?:${separator}${matchDefault}){${missingFields}}`;
    lastKey = key;
    str += separator;
    const value = fields[keyStr];
    if (typeof value !== 'object') throw new Error(`${defKey}: invalid value: ${JSON.stringify(value)}`);
    const fieldDefault = fieldName !== undefined && fieldsWithPotentialColons.includes(fieldName) ? matchWithColonsDefault : matchDefault;
    const fieldValue = (_fields$keyStr$value$ = (_fields$keyStr2 = fields[keyStr]) === null || _fields$keyStr2 === void 0 ? void 0 : (_fields$keyStr2$value = _fields$keyStr2.value) === null || _fields$keyStr2$value === void 0 ? void 0 : _fields$keyStr2$value.toString()) !== null && _fields$keyStr$value$ !== void 0 ? _fields$keyStr$value$ : fieldDefault;

    if (fieldName !== undefined) {
      str += Regexes.maybeCapture( // more accurate type instead of `as` cast
      // maybe this function needs a refactoring
      capture, fieldName, params[fieldName], fieldValue);
    } else {
      str += fieldValue;
    } // Stop if we're not capturing and don't care about future fields.


    if (key >= maxKey) break;
  }

  str += '(?:$|:)';
  return Regexes.parse(str);
};

class Regexes {
  static logVersion = 'latest';
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-20-0x14-networkstartscasting
   */

  static startsUsing(params) {
    return parseHelper(params, 'StartsUsing', defaultParams('StartsUsing', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   */


  static ability(params) {
    return parseHelper(params, 'Ability', defaultParams('Ability', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   *
   * @deprecated Use `ability` instead
   */


  static abilityFull(params) {
    return this.ability(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-27-0x1b-networktargeticon-head-marker
   */


  static headMarker(params) {
    return parseHelper(params, 'HeadMarker', defaultParams('HeadMarker', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */


  static addedCombatant(params) {
    return parseHelper(params, 'AddedCombatant', defaultParams('AddedCombatant', Regexes.logVersion, ['type', 'timestamp', 'id', 'name']));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */


  static addedCombatantFull(params) {
    return parseHelper(params, 'AddedCombatant', defaultParams('AddedCombatant', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-04-0x04-removecombatant
   */


  static removingCombatant(params) {
    return parseHelper(params, 'RemovedCombatant', defaultParams('RemovedCombatant', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-26-0x1a-networkbuff
   */


  static gainsEffect(params) {
    return parseHelper(params, 'GainsEffect', defaultParams('GainsEffect', Regexes.logVersion));
  }
  /**
   * Prefer gainsEffect over this function unless you really need extra data.
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-38-0x26-networkstatuseffects
   */


  static statusEffectExplicit(params) {
    return parseHelper(params, 'StatusEffect', defaultParams('StatusEffect', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-30-0x1e-networkbuffremove
   */


  static losesEffect(params) {
    return parseHelper(params, 'LosesEffect', defaultParams('LosesEffect', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-35-0x23-networktether
   */


  static tether(params) {
    return parseHelper(params, 'Tether', defaultParams('Tether', Regexes.logVersion));
  }
  /**
   * 'target' was defeated by 'source'
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-25-0x19-networkdeath
   */


  static wasDefeated(params) {
    return parseHelper(params, 'WasDefeated', defaultParams('WasDefeated', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static echo(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0038';
    return Regexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static dialog(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0044';
    return Regexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static message(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0839';
    return Regexes.gameLog(params);
  }
  /**
   * fields: code, name, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static gameLog(params) {
    return parseHelper(params, 'GameLog', defaultParams('GameLog', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */


  static gameNameLog(params) {
    // Backwards compatability.
    return Regexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-12-0x0c-playerstats
   */


  static statChange(params) {
    return parseHelper(params, 'PlayerStats', defaultParams('PlayerStats', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-01-0x01-changezone
   */


  static changeZone(params) {
    return parseHelper(params, 'ChangeZone', defaultParams('ChangeZone', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-33-0x21-network6d-actor-control
   */


  static network6d(params) {
    return parseHelper(params, 'ActorControl', defaultParams('ActorControl', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-34-0x22-networknametoggle
   */


  static nameToggle(params) {
    return parseHelper(params, 'NameToggle', defaultParams('NameToggle', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-40-0x28-map
   */


  static map(params) {
    return parseHelper(params, 'Map', defaultParams('Map', Regexes.logVersion));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-41-0x29-systemlogmessage
   */


  static systemLogMessage(params) {
    return parseHelper(params, 'SystemLogMessage', defaultParams('SystemLogMessage', Regexes.logVersion));
  }
  /**
   * Helper function for building named capture group
   */


  static maybeCapture(capture, name, value, defaultValue) {
    if (value === undefined) value = defaultValue !== null && defaultValue !== void 0 ? defaultValue : matchDefault;
    value = Regexes.anyOf(value);
    return capture ? Regexes.namedCapture(name, value) : value;
  }

  static optional(str) {
    return `(?:${str})?`;
  } // Creates a named regex capture group named |name| for the match |value|.


  static namedCapture(name, value) {
    if (name.includes('>')) console.error('"' + name + '" contains ">".');
    if (name.includes('<')) console.error('"' + name + '" contains ">".');
    return '(?<' + name + '>' + value + ')';
  }
  /**
   * Convenience for turning multiple args into a unioned regular expression.
   * anyOf(x, y, z) or anyOf([x, y, z]) do the same thing, and return (?:x|y|z).
   * anyOf(x) or anyOf(x) on its own simplifies to just x.
   * args may be strings or RegExp, although any additional markers to RegExp
   * like /insensitive/i are dropped.
   */


  static anyOf(...args) {
    const anyOfArray = array => {
      return `(?:${array.map(elem => elem instanceof RegExp ? elem.source : elem).join('|')})`;
    };

    let array = [];

    if (args.length === 1) {
      if (Array.isArray(args[0])) array = args[0];else if (args[0] !== undefined) array = [args[0]];else array = [];
    } else {
      // TODO: more accurate type instead of `as` cast
      array = args;
    }

    return anyOfArray(array);
  }

  static parse(regexpString) {
    const kCactbotCategories = {
      Timestamp: '^.{14}',
      NetTimestamp: '.{33}',
      NetField: '(?:[^|]*\\|)',
      LogType: '[0-9A-Fa-f]{2}',
      AbilityCode: '[0-9A-Fa-f]{1,8}',
      ObjectId: '[0-9A-F]{8}',
      // Matches any character name (including empty strings which the FFXIV
      // ACT plugin can generate when unknown).
      Name: '(?:[^\\s:|]+(?: [^\\s:|]+)?|)',
      // Floats can have comma as separator in FFXIV plugin output: https://github.com/ravahn/FFXIV_ACT_Plugin/issues/137
      Float: '-?[0-9]+(?:[.,][0-9]+)?(?:E-?[0-9]+)?'
    }; // All regexes in cactbot are case insensitive.
    // This avoids headaches as things like `Vice and Vanity` turns into
    // `Vice And Vanity`, especially for French and German.  It appears to
    // have a ~20% regex parsing overhead, but at least they work.

    let modifiers = 'i';

    if (regexpString instanceof RegExp) {
      modifiers += (regexpString.global ? 'g' : '') + (regexpString.multiline ? 'm' : '');
      regexpString = regexpString.source;
    }

    regexpString = regexpString.replace(/\\y\{(.*?)\}/g, (match, group) => {
      return kCactbotCategories[group] || match;
    });
    return new RegExp(regexpString, modifiers);
  } // Like Regex.Regexes.parse, but force global flag.


  static parseGlobal(regexpString) {
    const regex = Regexes.parse(regexpString);
    let modifiers = 'gi';
    if (regexpString instanceof RegExp) modifiers += regexpString.multiline ? 'm' : '';
    return new RegExp(regex.source, modifiers);
  }

  static trueIfUndefined(value) {
    if (typeof value === 'undefined') return true;
    return !!value;
  }

  static validateParams(f, funcName, params) {
    if (f === null) return;
    if (typeof f !== 'object') return;
    const keys = Object.keys(f);

    for (const key of keys) {
      if (!params.includes(key)) {
        throw new Error(`${funcName}: invalid parameter '${key}'.  ` + `Valid params: ${JSON.stringify(params)}`);
      }
    }
  }

}

/***/ }),

/***/ 469:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n3": () => (/* binding */ Responses)
/* harmony export */ });
/* unused harmony exports severityList, builtInResponseStr, triggerFunctions, triggerTextOutputFunctions, triggerOutputFunctions, severityMap */
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81);
// This is meant to be used in a trigger as such:
// {
//   id: 'Some tankbuster',
//   regex: Regexes.startsUsing({source: 'Ye Olde Bosse', id: '666'}),
//   condition: Conditions.caresAboutMagical(data),
//   response: Responses.tankbuster(),
// },
//
// Note: Breaking out the condition like this lets people override it if they
// always (or never) want to know about it, rather than hiding the logic inside
// the tankbuster callback with a "is healer" check.
//
// If data.role is used, it should be only to differentiate between alert levels,
// and not whether a message is sent at all.
//
// Although this is not true of `response: ` fields on triggers in general,
// all responses in this file should either return an object or a single
// function that sets outputStrings and returns an object without doing
// anything with data or matches.  See `responses_test.js`.

const severityList = (/* unused pure expression or super */ null && (['info', 'alert', 'alarm']));
const builtInResponseStr = 'cactbot-builtin-response'; // All valid trigger fields.

const triggerFunctions = (/* unused pure expression or super */ null && (['alarmText', 'alertText', 'condition', 'delaySeconds', 'disabled', 'durationSeconds', 'id', 'type', 'infoText', 'preRun', 'promise', 'response', 'run', 'sound', 'soundVolume', 'suppressSeconds', 'tts', 'outputStrings'])); // Trigger fields that can produce text output.

const triggerTextOutputFunctions = ['alarmText', 'alertText', 'infoText', 'response', 'tts']; // If a trigger has any of these, then it has a visible/audio effect.

const triggerOutputFunctions = [...triggerTextOutputFunctions, 'sound'];
const severityMap = {
  'info': 'infoText',
  'alert': 'alertText',
  'alarm': 'alarmText'
};

const getText = sev => {
  if (!(sev in severityMap)) throw new Error(`Invalid severity: ${sev}.`);
  return severityMap[sev];
};

const defaultInfoText = sev => {
  if (!sev) return 'infoText';
  return getText(sev);
};

const defaultAlertText = sev => {
  if (!sev) return 'alertText';
  return getText(sev);
};

const defaultAlarmText = sev => {
  if (!sev) return 'alarmText';
  return getText(sev);
};

const getTarget = matches => {
  // Often tankbusters can be casted by the boss on the boss.
  // Consider this as "not having a target".
  if (matches.target === matches.source) return;
  return matches.target;
};

const getSource = matches => {
  return matches === null || matches === void 0 ? void 0 : matches.source;
}; // FIXME: make this work for any number of pairs of params


const combineFuncs = function (text1, func1, text2, func2) {
  const obj = {};

  if (text1 !== text2) {
    obj[text1] = func1;
    obj[text2] = func2;
  } else {
    obj[text1] = (data, matches, output) => {
      var _func;

      return (_func = func1(data, matches, output)) !== null && _func !== void 0 ? _func : func2(data, matches, output);
    };
  }

  return obj;
};

const isPlayerId = id => {
  return id !== undefined && id[0] !== '4';
}; // For responses that unconditionally return static text.


const staticResponse = (field, text) => {
  return (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      text: text
    };
    return {
      [field]: (_data, _matches, output) => {
        var _output$text;

        return (_output$text = output.text) === null || _output$text === void 0 ? void 0 : _output$text.call(output);
      }
    };
  };
};

const Responses = {
  tankBuster: (targetSev, otherSev) => {
    const outputStrings = {
      noTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBuster */ .Z.tankBuster,
      busterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnYou */ .Z.tankBusterOnYou,
      busterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnPlayer */ .Z.tankBusterOnPlayer
    };

    const targetFunc = (data, matches, output) => {
      var _output$busterOnYou;

      const target = getTarget(matches);

      if (target === undefined) {
        var _output$noTarget;

        if (data.role !== 'tank' && data.role !== 'healer') return;
        return (_output$noTarget = output.noTarget) === null || _output$noTarget === void 0 ? void 0 : _output$noTarget.call(output);
      }

      if (target === data.me) return (_output$busterOnYou = output.busterOnYou) === null || _output$busterOnYou === void 0 ? void 0 : _output$busterOnYou.call(output);
    };

    const otherFunc = (data, matches, output) => {
      var _output$busterOnTarge;

      const target = getTarget(matches);

      if (target === undefined) {
        var _output$noTarget2;

        if (data.role === 'tank' || data.role === 'healer') return;
        return (_output$noTarget2 = output.noTarget) === null || _output$noTarget2 === void 0 ? void 0 : _output$noTarget2.call(output);
      }

      if (target === data.me) return;
      return (_output$busterOnTarge = output.busterOnTarget) === null || _output$busterOnTarge === void 0 ? void 0 : _output$busterOnTarge.call(output, {
        player: data.ShortName(target)
      });
    };

    const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  tankBusterSwap: (busterSev, swapSev) => {
    const outputStrings = {
      tankSwap: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankSwap */ .Z.tankSwap,
      busterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnYou */ .Z.tankBusterOnYou,
      busterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnPlayer */ .Z.tankBusterOnPlayer
    }; // Note: busterSev and swapSev can be the same priority.

    const tankSwapFunc = (data, matches, output) => {
      var _output$tankSwap;

      const target = getTarget(matches);
      if (data.role === 'tank' && target !== data.me) return (_output$tankSwap = output.tankSwap) === null || _output$tankSwap === void 0 ? void 0 : _output$tankSwap.call(output);
    };

    const busterFunc = (data, matches, output) => {
      var _output$busterOnYou2, _output$busterOnTarge2;

      const target = getTarget(matches);
      if (data.role === 'tank' && target !== data.me) return;
      if (target === data.me) return (_output$busterOnYou2 = output.busterOnYou) === null || _output$busterOnYou2 === void 0 ? void 0 : _output$busterOnYou2.call(output);
      return (_output$busterOnTarge2 = output.busterOnTarget) === null || _output$busterOnTarge2 === void 0 ? void 0 : _output$busterOnTarge2.call(output, {
        player: data.ShortName(target)
      });
    };

    const combined = combineFuncs(defaultAlarmText(swapSev), tankSwapFunc, defaultAlertText(busterSev), busterFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  tankCleave: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      cleaveOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankCleaveOnYou */ .Z.tankCleaveOnYou,
      cleaveNoTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankCleave */ .Z.tankCleave,
      avoidCleave: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].avoidTankCleave */ .Z.avoidTankCleave
    };
    return {
      [defaultInfoText(sev)]: (data, matches, output) => {
        var _output$cleaveOnYou, _output$avoidCleave;

        const target = getTarget(matches);
        if (target === data.me) return (_output$cleaveOnYou = output.cleaveOnYou) === null || _output$cleaveOnYou === void 0 ? void 0 : _output$cleaveOnYou.call(output);

        if (data.role === 'tank' || data.job === 'BLU') {
          var _output$cleaveNoTarge;

          // targetless tank cleave
          // BLU players should always get this generic cleave message.
          // We have no robust way to determine whether they have tank Mimicry on,
          // and it's really annoying for a BLU tank to be told to avoid cleaves when they can't.
          return (_output$cleaveNoTarge = output.cleaveNoTarget) === null || _output$cleaveNoTarge === void 0 ? void 0 : _output$cleaveNoTarge.call(output);
        }

        return (_output$avoidCleave = output.avoidCleave) === null || _output$avoidCleave === void 0 ? void 0 : _output$avoidCleave.call(output);
      }
    };
  },
  sharedTankBuster: (targetSev, otherSev) => {
    const outputStrings = {
      sharedTankbusterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sharedTankbusterOnYou */ .Z.sharedTankbusterOnYou,
      sharedTankbusterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sharedTankbusterOnPlayer */ .Z.sharedTankbusterOnPlayer,
      sharedTankbuster: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sharedTankbuster */ .Z.sharedTankbuster,
      avoidCleave: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].avoidTankCleave */ .Z.avoidTankCleave
    };

    const targetFunc = (data, matches, output) => {
      var _output$sharedTankbus2, _output$sharedTankbus3;

      const target = getTarget(matches);

      if (target === undefined) {
        var _output$sharedTankbus;

        if (data.role !== 'tank' && data.role !== 'healer') return;
        return (_output$sharedTankbus = output.sharedTankbuster) === null || _output$sharedTankbus === void 0 ? void 0 : _output$sharedTankbus.call(output);
      }

      if (target === data.me) return (_output$sharedTankbus2 = output.sharedTankbusterOnYou) === null || _output$sharedTankbus2 === void 0 ? void 0 : _output$sharedTankbus2.call(output);
      if (data.role === 'tank' || data.role === 'healer') return (_output$sharedTankbus3 = output.sharedTankbusterOnTarget) === null || _output$sharedTankbus3 === void 0 ? void 0 : _output$sharedTankbus3.call(output, {
        player: data.ShortName(target)
      });
    };

    const otherFunc = (data, matches, output) => {
      var _output$avoidCleave3;

      const target = getTarget(matches);

      if (target === undefined) {
        var _output$avoidCleave2;

        if (data.role === 'tank' || data.role === 'healer') return;
        return (_output$avoidCleave2 = output.avoidCleave) === null || _output$avoidCleave2 === void 0 ? void 0 : _output$avoidCleave2.call(output);
      }

      if (target === data.me || data.role === 'tank' || data.role === 'healer') return;
      return (_output$avoidCleave3 = output.avoidCleave) === null || _output$avoidCleave3 === void 0 ? void 0 : _output$avoidCleave3.call(output);
    };

    const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  miniBuster: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].miniBuster */ .Z.miniBuster),
  aoe: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].aoe */ .Z.aoe),
  bigAoe: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].bigAoe */ .Z.bigAoe),
  spread: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].spread */ .Z.spread),
  // for stack marker situations.
  stackMarker: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackMarker */ .Z.stackMarker),
  // for getting together without stack marker
  getTogether: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getTogether */ .Z.getTogether),
  stackMarkerOn: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      stackOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackOnYou */ .Z.stackOnYou,
      stackOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackOnPlayer */ .Z.stackOnPlayer
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        var _output$stackOnYou, _output$stackOnTarget;

        const target = getTarget(matches);
        if (target === data.me) return (_output$stackOnYou = output.stackOnYou) === null || _output$stackOnYou === void 0 ? void 0 : _output$stackOnYou.call(output);
        return (_output$stackOnTarget = output.stackOnTarget) === null || _output$stackOnTarget === void 0 ? void 0 : _output$stackOnTarget.call(output, {
          player: data.ShortName(target)
        });
      }
    };
  },
  stackMiddle: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackMiddle */ .Z.stackMiddle),
  doritoStack: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].doritoStack */ .Z.doritoStack),
  spreadThenStack: sev => {
    return staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].spreadThenStack */ .Z.spreadThenStack);
  },
  stackThenSpread: sev => {
    return staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackThenSpread */ .Z.stackThenSpread);
  },
  knockback: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockback */ .Z.knockback),
  knockbackOn: (targetSev, otherSev) => {
    const outputStrings = {
      knockbackOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockbackOnYou */ .Z.knockbackOnYou,
      knockbackOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockbackOnPlayer */ .Z.knockbackOnPlayer
    };

    const targetFunc = (data, matches, output) => {
      var _output$knockbackOnYo;

      const target = getTarget(matches);
      if (target === data.me) return (_output$knockbackOnYo = output.knockbackOnYou) === null || _output$knockbackOnYo === void 0 ? void 0 : _output$knockbackOnYo.call(output);
    };

    const otherFunc = (data, matches, output) => {
      var _output$knockbackOnTa;

      const target = getTarget(matches);
      if (target !== data.me) return (_output$knockbackOnTa = output.knockbackOnTarget) === null || _output$knockbackOnTa === void 0 ? void 0 : _output$knockbackOnTa.call(output, {
        player: data.ShortName(target)
      });
    };

    const combined = combineFuncs(defaultInfoText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  drawIn: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].drawIn */ .Z.drawIn),
  lookTowards: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookTowardsBoss */ .Z.lookTowardsBoss),
  lookAway: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAway */ .Z.lookAway),
  lookAwayFromTarget: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      lookAwayFrom: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAwayFromTarget */ .Z.lookAwayFromTarget
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        var _output$lookAwayFrom;

        const target = getTarget(matches);
        if (target === data.me) return;
        const name = isPlayerId(matches === null || matches === void 0 ? void 0 : matches.targetId) ? data.ShortName(target) : target;
        return (_output$lookAwayFrom = output.lookAwayFrom) === null || _output$lookAwayFrom === void 0 ? void 0 : _output$lookAwayFrom.call(output, {
          name: name
        });
      }
    };
  },
  lookAwayFromSource: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      lookAwayFrom: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAwayFromTarget */ .Z.lookAwayFromTarget
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        var _output$lookAwayFrom2;

        const source = getSource(matches);
        if (source === data.me) return;
        const name = isPlayerId(matches === null || matches === void 0 ? void 0 : matches.sourceId) ? data.ShortName(source) : source;
        return (_output$lookAwayFrom2 = output.lookAwayFrom) === null || _output$lookAwayFrom2 === void 0 ? void 0 : _output$lookAwayFrom2.call(output, {
          name: name
        });
      }
    };
  },
  getBehind: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getBehind */ .Z.getBehind),
  goFrontOrSides: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goFrontOrSides */ .Z.goFrontOrSides),
  // .getUnder() is used when you have to get into the bosses hitbox
  getUnder: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getUnder */ .Z.getUnder),
  // .getIn() is more like "get close but maybe even melee range is fine"
  getIn: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"]["in"] */ .Z["in"]),
  // .getOut() means get far away
  getOut: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].out */ .Z.out),
  outOfMelee: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].outOfMelee */ .Z.outOfMelee),
  getInThenOut: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].inThenOut */ .Z.inThenOut),
  getOutThenIn: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].outThenIn */ .Z.outThenIn),
  getBackThenFront: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].backThenFront */ .Z.backThenFront),
  getFrontThenBack: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].frontThenBack */ .Z.frontThenBack),
  goMiddle: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goIntoMiddle */ .Z.goIntoMiddle),
  goRight: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].right */ .Z.right),
  goLeft: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].left */ .Z.left),
  goWest: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getLeftAndWest */ .Z.getLeftAndWest),
  goEast: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getRightAndEast */ .Z.getRightAndEast),
  goFrontBack: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goFrontBack */ .Z.goFrontBack),
  goSides: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sides */ .Z.sides),
  // .killAdds() is used for adds that will always be available
  killAdds: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].killAdds */ .Z.killAdds),
  // .killExtraAdd() is used for adds that appear if a mechanic was not played correctly
  killExtraAdd: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].killExtraAdd */ .Z.killExtraAdd),
  awayFromFront: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].awayFromFront */ .Z.awayFromFront),
  sleep: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      sleep: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sleepTarget */ .Z.sleepTarget
    };
    return {
      [defaultAlertText(sev)]: (_data, matches, output) => {
        var _output$sleep;

        const source = getSource(matches);
        return (_output$sleep = output.sleep) === null || _output$sleep === void 0 ? void 0 : _output$sleep.call(output, {
          name: source
        });
      }
    };
  },
  stunOrInterruptIfPossible: sev => {
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = {
        stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stunTarget */ .Z.stunTarget,
        interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].interruptTarget */ .Z.interruptTarget
      };
      return {
        [defaultAlertText(sev)]: (data, matches, output) => {
          var _output$interrupt, _output$stun;

          const source = getSource(matches);
          if (data.CanSilence()) return (_output$interrupt = output.interrupt) === null || _output$interrupt === void 0 ? void 0 : _output$interrupt.call(output, {
            name: source
          });else if (data.CanStun()) return (_output$stun = output.stun) === null || _output$stun === void 0 ? void 0 : _output$stun.call(output, {
            name: source
          });
        }
      };
    };
  },
  stun: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stunTarget */ .Z.stunTarget
    };
    return {
      [defaultAlertText(sev)]: (_data, matches, output) => {
        var _output$stun2;

        const source = getSource(matches);
        return (_output$stun2 = output.stun) === null || _output$stun2 === void 0 ? void 0 : _output$stun2.call(output, {
          name: source
        });
      }
    };
  },
  interrupt: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].interruptTarget */ .Z.interruptTarget
    };
    return {
      [defaultAlertText(sev)]: (_data, matches, output) => {
        var _output$interrupt2;

        const source = getSource(matches);
        return (_output$interrupt2 = output.interrupt) === null || _output$interrupt2 === void 0 ? void 0 : _output$interrupt2.call(output, {
          name: source
        });
      }
    };
  },
  preyOn: (targetSev, otherSev) => {
    const outputStrings = {
      preyOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].preyOnYou */ .Z.preyOnYou,
      preyOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].preyOnPlayer */ .Z.preyOnPlayer
    };

    const targetFunc = (data, matches, output) => {
      var _output$preyOnYou;

      const target = getTarget(matches);
      if (data.me === target) return (_output$preyOnYou = output.preyOnYou) === null || _output$preyOnYou === void 0 ? void 0 : _output$preyOnYou.call(output);
    };

    const otherFunc = (data, matches, output) => {
      var _output$preyOnTarget;

      const target = getTarget(matches);
      if (target !== data.me) return (_output$preyOnTarget = output.preyOnTarget) === null || _output$preyOnTarget === void 0 ? void 0 : _output$preyOnTarget.call(output, {
        player: data.ShortName(target)
      });
    };

    const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  awayFrom: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      awayFromGroup: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].awayFromGroup */ .Z.awayFromGroup,
      awayFromTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].awayFromPlayer */ .Z.awayFromPlayer
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        var _output$awayFromGroup, _output$awayFromTarge;

        const target = getTarget(matches);
        if (data.me === target) return (_output$awayFromGroup = output.awayFromGroup) === null || _output$awayFromGroup === void 0 ? void 0 : _output$awayFromGroup.call(output);
        return (_output$awayFromTarge = output.awayFromTarget) === null || _output$awayFromTarge === void 0 ? void 0 : _output$awayFromTarge.call(output, {
          player: data.ShortName(target)
        });
      }
    };
  },
  meteorOnYou: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].meteorOnYou */ .Z.meteorOnYou),
  stopMoving: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stopMoving */ .Z.stopMoving),
  stopEverything: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stopEverything */ .Z.stopEverything),
  // move away to dodge aoes
  moveAway: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].moveAway */ .Z.moveAway),
  // move around (e.g. jumping) to avoid being frozen
  moveAround: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].moveAround */ .Z.moveAround),
  breakChains: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].breakChains */ .Z.breakChains),
  moveChainsTogether: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].moveChainsTogether */ .Z.moveChainsTogether),
  earthshaker: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      earthshaker: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].earthshakerOnYou */ .Z.earthshakerOnYou
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        var _output$earthshaker;

        const target = getTarget(matches);
        if (target !== data.me) return;
        return (_output$earthshaker = output.earthshaker) === null || _output$earthshaker === void 0 ? void 0 : _output$earthshaker.call(output);
      }
    };
  },
  wakeUp: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].wakeUp */ .Z.wakeUp)
}; // Don't give `Responses` a type in its declaration so that it can be treated as more strict
// than `ResponsesMap`, but do assert that its type is correct.  This allows callers to know
// which properties are defined in Responses without having to conditionally check for undefined.

const responseMapTypeAssertion = Responses; // Suppress unused variable warning.

console.assert(responseMapTypeAssertion);

/***/ }),

/***/ 456:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _languages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(619);
/* harmony import */ var _overlay_plugin_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(959);
/* harmony import */ var _not_reached__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62);
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(446);
/* harmony import */ var _content_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(873);
/* harmony import */ var _netregexes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(622);
/* harmony import */ var _regexes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(402);
/* harmony import */ var _responses__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(469);
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(81);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(509);
/* harmony import */ var _zone_id__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(588);
/* harmony import */ var _zone_info__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(902);
// TODO: Fix import/order

/* eslint-disable import/order */


 // TODO:
// The convention of "import X as _X; const X = _X;" is currently
// being used as a method to workaround for downstream code
// that is running via eval(). Because importing statements do not
// create a variable of the same name, the eval()'d code does not know
// about the import, and thus throws ReferenceErrors.
// Used by downstream eval


const Conditions = _conditions__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z;

const ContentType = _content_type__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z;

const NetRegexes = _netregexes__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z;

const Regexes = _regexes__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z;

const Responses = _responses__WEBPACK_IMPORTED_MODULE_7__/* .Responses */ .n3;

const Outputs = _outputs__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z;

const Util = _util__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z;

const ZoneId = _zone_id__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z;

const ZoneInfo = _zone_info__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z; // Convince TypeScript and eslint that these are used.  TypeScript doesn't have a great way
// to disable individual rules, so this is safer than disabling all rules.

console.assert(Conditions);
console.assert(ContentType);
console.assert(NetRegexes);
console.assert(Regexes);
console.assert(Responses);
console.assert(Outputs);
console.assert(Util);
console.assert(ZoneId);
console.assert(ZoneInfo); // TODO: move all of these to config.js?

class UserConfig {
  optionTemplates = {};
  userFileCallbacks = {};
  savedConfig = {};

  getDefaultBaseOptions() {
    return {
      ParserLanguage: 'en',
      ShortLocale: 'en',
      DisplayLanguage: 'en',
      TextAlertsEnabled: true,
      SoundAlertsEnabled: true,
      SpokenAlertsEnabled: false,
      GroupSpokenAlertsEnabled: false,
      SystemInfo: {
        cactbotVersion: '0.0.0.0',
        overlayPluginVersion: '0.0.0.0',
        ffxivPluginVersion: '0.0.0.0',
        actVersion: '0.0.0.0',
        gameRegion: 'International'
      },
      Debug: false
    };
  }

  evalUserFile(content, options) {
    const Options = options;
    console.assert(Options); // Used by eval.
    // This is the one eval cactbot should ever need, which is for handling user files.
    // Because user files can be located anywhere on disk and there's backwards compat
    // issues, it's unlikely that these will be able to be anything but eval forever.
    //

    /* eslint-disable no-eval */

    eval(content);
    /* eslint-enable no-eval */
  }

  registerOptions(overlayName, optionTemplate, userFileCallback) {
    this.optionTemplates[overlayName] = optionTemplate;
    if (userFileCallback) this.userFileCallbacks[overlayName] = userFileCallback;
  }

  sortUserFiles(keys) {
    // Helper data structure for subdirectories.
    const splitKeyMap = {};

    for (const key of keys) splitKeyMap[key] = key.toUpperCase().split(/[/\\]/); // Sort paths as a depth-first case-insensitive alphabetical subdirectory walk, followed by
    // all files sorted case-insensitive alphabetically once a subdir has been processed, e.g.
    //  * a/some.js
    //  * b/subdir1/z/z/z/nested_file.js
    //  * b/subdir1/file.js
    //  * b/subdir2/first.js
    //  * b/subdir2/second.js
    //  * b/some_file.js
    //  * root_file1.js
    //  * root_file2.js


    return keys.sort((keyA, keyB) => {
      const listA = splitKeyMap[keyA];
      const listB = splitKeyMap[keyB];
      if (listA === undefined || listB === undefined) throw new _not_reached__WEBPACK_IMPORTED_MODULE_2__/* .UnreachableCode */ .$();
      const maxLen = Math.max(listA.length, listB.length);

      for (let idx = 0; idx < maxLen; ++idx) {
        const entryA = listA[idx];
        const entryB = listB[idx]; // In practice, there's always at least one entry.

        if (entryA === undefined || entryB === undefined) throw new _not_reached__WEBPACK_IMPORTED_MODULE_2__/* .UnreachableCode */ .$(); // If both subdirectories or both files, then compare names.

        const isLastA = listA.length - 1 === idx;
        const isLastB = listB.length - 1 === idx;

        if (isLastA && isLastB) {
          // If both last, then this is a filename comparison.
          // First, compare filename without extension.
          const fileA = entryA.replace(/\.[^\.]*$/, '');
          const fileB = entryB.replace(/\.[^\.]*$/, '');
          const filenameOnlyDiff = fileA.localeCompare(fileB);
          if (filenameOnlyDiff) return filenameOnlyDiff; // Second, compare including the extension.
          // Always return something here, see note below.

          return entryA.localeCompare(entryB);
        } else if (!isLastA && !isLastB) {
          // If both not last, this is a subdirectory comparison.
          const diff = entryA.localeCompare(entryB);
          if (diff) return diff;
        } // At this point, if idx is the final for each, we would have returned above.
        // So, check if either a or b is at the final entry in splitKeyMap.
        // If so, then there's a mismatch in number of directories, and we know one
        // the one with a filename should be sorted last.


        if (listA.length - 1 <= idx) {
          // a has fewer subdirectories, so should be sorted last.
          return 1;
        }

        if (listB.length - 1 <= idx) {
          // a has more subdirectories, so should be sorted first.
          return -1;
        }
      }

      return 0;
    });
  } // Given a set of paths, an overlayName, and an extension, return all paths with
  // that extension that have `overlayName` either as their entire filename (no subdir)
  // or are inside a root-level subdirectory named `overlayName`/  The extension should
  // include the period separator, e.g. ".js".  All comparisons are case insensitive.


  filterUserFiles(paths, origOverlayName, origExtension) {
    const extension = origExtension.toLowerCase();
    const overlayName = origOverlayName.toLowerCase();
    return paths.filter(origPath => {
      const path = origPath.toLowerCase();
      if (!path.endsWith(extension)) return false;
      if (path === `${overlayName}${extension}`) return true;
      if (path.startsWith(`${overlayName}/`) || path.startsWith(`${overlayName}\\`)) return true;
      return false;
    });
  }

  getUserConfigLocation(overlayName, options, callback) {
    let currentlyReloading = false;

    const reloadOnce = () => {
      if (currentlyReloading) return;
      currentlyReloading = true;
      window.location.reload();
    };

    (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_1__/* .addOverlayListener */ .PS)('onUserFileChanged', () => {
      reloadOnce();
    });
    (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_1__/* .addOverlayListener */ .PS)('onForceReload', () => {
      reloadOnce();
    });
    this.loadUserFiles(overlayName, options, callback);
  }

  loadUserFiles(overlayName, options, callback) {
    const readOptions = (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_1__/* .callOverlayHandler */ .ae)({
      call: 'cactbotLoadData',
      overlay: 'options'
    });

    const loadUser = async e => {
      var _await$readOptions$da, _await$readOptions, _this$savedConfig$ove;

      // The basePath isn't using for anything other than cosmetic printing of full paths,
      // so replace any slashes here for uniformity.  In case anybody is using cactbot on
      // Linux (?!?), support any style of slashes elsewhere.
      const basePath = e.detail.userLocation.replace(/[/\\]*$/, '') + '\\';
      const localFiles = e.detail.localUserFiles;
      options.SystemInfo = {
        cactbotVersion: e.detail.cactbotVersion,
        overlayPluginVersion: e.detail.overlayPluginVersion,
        ffxivPluginVersion: e.detail.ffxivPluginVersion,
        actVersion: e.detail.actVersion,
        gameRegion: e.detail.gameRegion
      }; // The plugin auto-detects the language, so set this first.
      // If options files want to override it, they can for testing.
      // Backward compatibility (language is now separated to three types.)

      if (e.detail.language) {
        options.ParserLanguage = e.detail.language;
        options.ShortLocale = e.detail.language;
        options.DisplayLanguage = e.detail.language;
      } // Parser Language


      if (e.detail.parserLanguage) {
        options.ParserLanguage = e.detail.parserLanguage; // Backward compatibility, everything "Language" should be changed to "ParserLanguage"

        options.Language = e.detail.parserLanguage;
      } // System Language


      if (e.detail.systemLocale) {
        options.SystemLocale = e.detail.systemLocale;
        let shortLocale = e.detail.systemLocale.substring(0, 2);
        if (shortLocale === 'zh') shortLocale = 'cn';
        if ((0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .isLang */ .jd)(shortLocale)) options.ShortLocale = shortLocale;else options.ShortLocale = options.ParserLanguage;
      } // User's setting Language


      const displayLang = e.detail.displayLanguage;
      if ((0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .isLang */ .jd)(displayLang)) options.DisplayLanguage = displayLang;else options.DisplayLanguage = options.ParserLanguage || 'en'; // TODO: left for now as backwards compatibility with user css.  Remove this later??

      document.documentElement.classList.add(`lang-${options.DisplayLanguage}`);
      document.documentElement.lang = (0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .langToLocale */ .Go)(options.DisplayLanguage);
      this.addUnlockText(options.DisplayLanguage); // Handle processOptions after default language selection above,
      // but before css below which may load skin files.
      // processOptions needs to be called whether or not there are
      // any userOptions saved, as it sets up the defaults.

      this.savedConfig = (_await$readOptions$da = (_await$readOptions = await readOptions) === null || _await$readOptions === void 0 ? void 0 : _await$readOptions.data) !== null && _await$readOptions$da !== void 0 ? _await$readOptions$da : {};
      this.processOptions(options, (_this$savedConfig$ove = this.savedConfig[overlayName]) !== null && _this$savedConfig$ove !== void 0 ? _this$savedConfig$ove : {}, this.optionTemplates[overlayName]); // If the overlay has a "Debug" setting, set to true via the config tool,
      // then also print out user files that have been loaded.

      const debug = options.Debug !== undefined && options.Debug !== false;
      const printUserFile = debug ? x => console.log(x) : () => {
        /* noop */
      }; // With user files being arbitrary javascript, and having multiple files
      // in user folders, it's possible for later files to accidentally remove
      // things that previous files have added.  Warn about this, since most
      // users are not programmers.

      const warnOnVariableResetMap = {
        raidboss: ['Triggers']
      };
      warnOnVariableResetMap[overlayName] = warnOnVariableResetMap[overlayName] || []; // The values of each `warnOnVariableResetMap` field are initially set
      // after the first file, so that if there is only one file, there are
      // not any warnings.
      // The fields that a user file sets in Options can be anything (pun not intended)
      // and so we use `any` here.  The only operation done on this field is a !==
      // for change detection to see if the the user file has modified it.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any

      const variableTracker = {};

      if (localFiles) {
        // localFiles may be null if there is no valid user directory.
        const sortedFiles = this.sortUserFiles(Object.keys(localFiles));
        const jsFiles = this.filterUserFiles(sortedFiles, overlayName, '.js');
        const cssFiles = this.filterUserFiles(sortedFiles, overlayName, '.css');

        for (const jsFile of jsFiles) {
          try {
            var _localFiles$jsFile, _this$userFileCallbac, _this$userFileCallbac2;

            printUserFile(`local user file: ${basePath}${jsFile}`);
            this.evalUserFile((_localFiles$jsFile = localFiles[jsFile]) !== null && _localFiles$jsFile !== void 0 ? _localFiles$jsFile : '', options);

            for (const field of (_warnOnVariableResetM = warnOnVariableResetMap[overlayName]) !== null && _warnOnVariableResetM !== void 0 ? _warnOnVariableResetM : []) {
              var _warnOnVariableResetM;

              const value = variableTracker[field];

              if (value !== null && value !== undefined && value !== options[field]) {
                // Ideally users should do something like `Options.Triggers.push([etc]);`
                // instead of `Options.Triggers = [etc];`
                console.log(`*** WARNING: ${basePath}${jsFile} overwrites Options.${field} from previous files.`);
              }

              variableTracker[field] = options[field];
            }

            (_this$userFileCallbac = (_this$userFileCallbac2 = this.userFileCallbacks)[overlayName]) === null || _this$userFileCallbac === void 0 ? void 0 : _this$userFileCallbac.call(_this$userFileCallbac2, jsFile, localFiles, options, basePath);
          } catch (e) {
            // Be very visible for users.
            console.log('*** ERROR IN USER FILE ***');
            console.log(e);
          }
        } // This is a bit awkward to handle skin settings here, but
        // doing it after user config files and before user css files
        // allows user css to override skin-specific css as well.


        if (options.Skin !== undefined) this.handleSkin(options.Skin);

        for (const cssFile of cssFiles) {
          printUserFile(`local user file: ${basePath}${cssFile}`);
          const userCssText = document.createElement('style');
          const contents = localFiles[cssFile];
          if (contents !== undefined) userCssText.innerText = contents;
          const head = document.getElementsByTagName('head')[0];
          if (head) head.appendChild(userCssText);
        }
      } // Post this callback so that the js and css can be executed first.


      callback();
      void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_1__/* .callOverlayHandler */ .ae)({
        call: 'cactbotRequestState'
      });
    };

    void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_1__/* .callOverlayHandler */ .ae)({
      call: 'cactbotLoadUser',
      source: location.href,
      overlayName: overlayName
    }).then(e => {
      // Wait for DOMContentLoaded if needed.
      if (document.readyState !== 'loading') {
        void loadUser(e);
        return;
      }

      document.addEventListener('DOMContentLoaded', () => {
        void loadUser(e);
      });
    });
  }

  handleSkin(skinName) {
    if (!skinName || skinName === 'default') return;
    let basePath = document.location.toString();
    const slashIdx = basePath.lastIndexOf('/');
    if (slashIdx !== -1) basePath = basePath.substr(0, slashIdx);
    if (basePath.slice(-1) !== '/') basePath += '/';
    const skinHref = basePath + 'skins/' + skinName + '/' + skinName + '.css';
    this.appendCSSLink(skinHref);
  }

  appendJSLink(src) {
    const userJS = document.createElement('script');
    userJS.setAttribute('type', 'text/javascript');
    userJS.setAttribute('src', src);
    userJS.setAttribute('async', 'false');
    const head = document.getElementsByTagName('head')[0];
    if (head) head.appendChild(userJS);
  }

  appendCSSLink(href) {
    const userCSS = document.createElement('link');
    userCSS.setAttribute('rel', 'stylesheet');
    userCSS.setAttribute('type', 'text/css');
    userCSS.setAttribute('href', href);
    const head = document.getElementsByTagName('head')[0];
    if (head) head.appendChild(userCSS);
  }

  processOptions(options, savedConfig, template) {
    // Take options from the template, find them in savedConfig,
    // and apply them to options. This also handles setting
    // defaults for anything in the template, even if it does not
    // exist in savedConfig.
    // Not all overlays have option templates.
    if (!template) return;
    const templateOptions = template.options;

    for (const opt of templateOptions) {
      // Grab the saved value or the default to set in options.
      let value = opt.default;

      if (typeof savedConfig === 'object' && !Array.isArray(savedConfig)) {
        if (opt.id in savedConfig) {
          const newValue = savedConfig[opt.id];
          if (newValue !== undefined) value = newValue;
        }
      } // Options can provide custom logic to turn a value into options settings.
      // If this doesn't exist, just set the value directly.
      // Option template ids are identical to field names on Options.


      if (opt.setterFunc) {
        opt.setterFunc(options, value);
      } else if (opt.type === 'integer') {
        if (typeof value === 'number') options[opt.id] = Math.floor(value);else if (typeof value === 'string') options[opt.id] = parseInt(value);
      } else if (opt.type === 'float') {
        if (typeof value === 'number') options[opt.id] = value;else if (typeof value === 'string') options[opt.id] = parseFloat(value);
      } else {
        options[opt.id] = value;
      }
    } // For things like raidboss that build extra UI, also give them a chance
    // to handle anything that has been set on that UI.


    if (template.processExtraOptions) template.processExtraOptions(options, savedConfig);
  }

  addUnlockText(lang) {
    const unlockText = {
      en: '🔓 Unlocked (lock overlay before using)',
      de: '🔓 Entsperrt (Sperre das Overlay vor der Nutzung)',
      fr: '🔓 Débloqué (Bloquez l\'overlay avant utilisation)',
      ja: '🔓 ロック解除 (オーバーレイを使用する前にロックしてください)',
      cn: '🔓 已解除锁定 (你需要将此悬浮窗锁定后方可使用)',
      ko: '🔓 위치 잠금 해제됨 (사용하기 전에 위치 잠금을 설정하세요)'
    };
    const id = 'cactbot-unlocked-text';
    let textElem = document.getElementById(id);

    if (!textElem) {
      textElem = document.createElement('div');
      textElem.id = id;
      textElem.classList.add('text'); // Set element display to none in case the page has not included defaults.css.

      textElem.style.display = 'none';
      document.body.append(textElem);
    }

    textElem.innerHTML = unlockText[lang] || unlockText['en'];
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new UserConfig());

if (typeof document !== 'undefined') {
  // This event comes early and is not cached, so set up event listener immediately.
  document.addEventListener('onOverlayStateUpdate', e => {
    const docClassList = document.documentElement.classList;
    if (e.detail.isLocked) docClassList.remove('resize-handle', 'unlocked');else docClassList.add('resize-handle', 'unlocked');
  });
}

/***/ }),

/***/ 509:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _overlay_plugin_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(959);
 // TODO: it'd be nice to not repeat job names, but at least Record enforces that all are set.

const nameToJobEnum = {
  NONE: 0,
  GLA: 1,
  PGL: 2,
  MRD: 3,
  LNC: 4,
  ARC: 5,
  CNJ: 6,
  THM: 7,
  CRP: 8,
  BSM: 9,
  ARM: 10,
  GSM: 11,
  LTW: 12,
  WVR: 13,
  ALC: 14,
  CUL: 15,
  MIN: 16,
  BTN: 17,
  FSH: 18,
  PLD: 19,
  MNK: 20,
  WAR: 21,
  DRG: 22,
  BRD: 23,
  WHM: 24,
  BLM: 25,
  ACN: 26,
  SMN: 27,
  SCH: 28,
  ROG: 29,
  NIN: 30,
  MCH: 31,
  DRK: 32,
  AST: 33,
  SAM: 34,
  RDM: 35,
  BLU: 36,
  GNB: 37,
  DNC: 38,
  RPR: 39,
  SGE: 40
};
const allJobs = Object.keys(nameToJobEnum);
const allRoles = ['tank', 'healer', 'dps', 'crafter', 'gatherer', 'none'];
const tankJobs = ['GLA', 'PLD', 'MRD', 'WAR', 'DRK', 'GNB'];
const healerJobs = ['CNJ', 'WHM', 'SCH', 'AST', 'SGE'];
const meleeDpsJobs = ['PGL', 'MNK', 'LNC', 'DRG', 'ROG', 'NIN', 'SAM', 'RPR'];
const rangedDpsJobs = ['ARC', 'BRD', 'DNC', 'MCH'];
const casterDpsJobs = ['BLU', 'RDM', 'BLM', 'SMN', 'ACN', 'THM'];
const dpsJobs = [...meleeDpsJobs, ...rangedDpsJobs, ...casterDpsJobs];
const craftingJobs = ['CRP', 'BSM', 'ARM', 'GSM', 'LTW', 'WVR', 'ALC', 'CUL'];
const gatheringJobs = ['MIN', 'BTN', 'FSH'];
const stunJobs = ['BLU', ...tankJobs, ...meleeDpsJobs];
const silenceJobs = ['BLU', ...tankJobs, ...rangedDpsJobs];
const sleepJobs = ['BLM', 'BLU', ...healerJobs];
const feintJobs = [...meleeDpsJobs];
const addleJobs = [...casterDpsJobs];
const cleanseJobs = ['BLU', 'BRD', ...healerJobs];

const jobToRoleMap = (() => {
  const addToMap = (map, jobs, role) => {
    jobs.forEach(job => map.set(job, role));
  };

  const map = new Map([['NONE', 'none']]);
  addToMap(map, tankJobs, 'tank');
  addToMap(map, healerJobs, 'healer');
  addToMap(map, dpsJobs, 'dps');
  addToMap(map, craftingJobs, 'crafter');
  addToMap(map, gatheringJobs, 'gatherer');
  return map;
})();

const watchCombatantMap = [];

const shouldCancelWatch = (params, entry) => {
  if (entry.cancel) return true;
  if (params.maxDuration !== undefined && Date.now() - entry.start > params.maxDuration) return true;
  return false;
};

const defaultWatchCombatant = (params, func) => {
  return new Promise((res, rej) => {
    var _params$delay;

    const delay = (_params$delay = params.delay) !== null && _params$delay !== void 0 ? _params$delay : 1000;
    const call = {
      call: 'getCombatants'
    };
    if (params.ids) call.ids = params.ids;
    if (params.names) call.names = params.names;
    if (params.props) call.props = params.props;
    const entry = {
      cancel: false,
      start: Date.now()
    };
    watchCombatantMap.push(entry);

    const checkFunc = () => {
      if (shouldCancelWatch(params, entry)) {
        rej();
        return;
      }

      void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_0__/* .callOverlayHandler */ .ae)(call).then(response => {
        if (entry.cancel) {
          rej();
          return;
        }

        if (func(response)) res();else window.setTimeout(checkFunc, delay);
      });
    };

    window.setTimeout(checkFunc, delay);
  });
};

let watchCombatantOverride;
let clearCombatantsOverride;

const defaultClearCombatants = () => {
  while (watchCombatantMap.length > 0) {
    const watch = watchCombatantMap.pop();
    if (watch) watch.cancel = true;
  }
};

const watchCombatant = (params, func) => {
  if (watchCombatantOverride) return watchCombatantOverride(params, func);
  return defaultWatchCombatant(params, func);
};

const Util = {
  jobEnumToJob: id => {
    const job = allJobs.find(job => nameToJobEnum[job] === id);
    return job !== null && job !== void 0 ? job : 'NONE';
  },
  jobToJobEnum: job => nameToJobEnum[job],
  jobToRole: job => {
    const role = jobToRoleMap.get(job);
    return role !== null && role !== void 0 ? role : 'none';
  },
  getAllRoles: () => allRoles,
  isTankJob: job => tankJobs.includes(job),
  isHealerJob: job => healerJobs.includes(job),
  isMeleeDpsJob: job => meleeDpsJobs.includes(job),
  isRangedDpsJob: job => rangedDpsJobs.includes(job),
  isCasterDpsJob: job => casterDpsJobs.includes(job),
  isDpsJob: job => dpsJobs.includes(job),
  isCraftingJob: job => craftingJobs.includes(job),
  isGatheringJob: job => gatheringJobs.includes(job),
  isCombatJob: job => {
    return !craftingJobs.includes(job) && !gatheringJobs.includes(job);
  },
  canStun: job => stunJobs.includes(job),
  canSilence: job => silenceJobs.includes(job),
  canSleep: job => sleepJobs.includes(job),
  canCleanse: job => cleanseJobs.includes(job),
  canFeint: job => feintJobs.includes(job),
  canAddle: job => addleJobs.includes(job),
  watchCombatant: watchCombatant,
  clearWatchCombatants: () => {
    if (clearCombatantsOverride !== undefined) clearCombatantsOverride();else defaultClearCombatants();
  },
  setWatchCombatantOverride: (watchFunc, clearFunc) => {
    watchCombatantOverride = watchFunc;
    clearCombatantsOverride = clearFunc;
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Util);

/***/ }),

/***/ 588:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
  'ABloodyReunion': 560,
  'AFrostyReception': 1010,
  'APathUnveiled': 1015,
  'ARelicRebornTheChimera': 368,
  'ARelicRebornTheHydra': 369,
  'ARequiemForHeroes': 830,
  'ASleepDisturbed': 914,
  'ASpectacleForTheAges': 533,
  'AccrueEnmityFromMultipleTargets': 540,
  'Aglaia': 1054,
  'AirForceOne': 832,
  'AkadaemiaAnyder': 841,
  'AlaMhigo': 689,
  'AlexanderTheArmOfTheFather': 444,
  'AlexanderTheArmOfTheFatherSavage': 451,
  'AlexanderTheArmOfTheSon': 522,
  'AlexanderTheArmOfTheSonSavage': 531,
  'AlexanderTheBreathOfTheCreator': 581,
  'AlexanderTheBreathOfTheCreatorSavage': 585,
  'AlexanderTheBurdenOfTheFather': 445,
  'AlexanderTheBurdenOfTheFatherSavage': 452,
  'AlexanderTheBurdenOfTheSon': 523,
  'AlexanderTheBurdenOfTheSonSavage': 532,
  'AlexanderTheCuffOfTheFather': 443,
  'AlexanderTheCuffOfTheFatherSavage': 450,
  'AlexanderTheCuffOfTheSon': 521,
  'AlexanderTheCuffOfTheSonSavage': 530,
  'AlexanderTheEyesOfTheCreator': 580,
  'AlexanderTheEyesOfTheCreatorSavage': 584,
  'AlexanderTheFistOfTheFather': 442,
  'AlexanderTheFistOfTheFatherSavage': 449,
  'AlexanderTheFistOfTheSon': 520,
  'AlexanderTheFistOfTheSonSavage': 529,
  'AlexanderTheHeartOfTheCreator': 582,
  'AlexanderTheHeartOfTheCreatorSavage': 586,
  'AlexanderTheSoulOfTheCreator': 583,
  'AlexanderTheSoulOfTheCreatorSavage': 587,
  'AllsWellThatEndsInTheWell': 220,
  'AllsWellThatStartsWell': 796,
  'AlphascapeV10': 798,
  'AlphascapeV10Savage': 802,
  'AlphascapeV20': 799,
  'AlphascapeV20Savage': 803,
  'AlphascapeV30': 800,
  'AlphascapeV30Savage': 804,
  'AlphascapeV40': 801,
  'AlphascapeV40Savage': 805,
  'AlzadaalsLegacy': 1050,
  'Amaurot': 838,
  'AmdaporKeep': 167,
  'AmdaporKeepHard': 189,
  'AmhAraeng': 815,
  'AnamnesisAnyder': 898,
  'AnnoyTheVoid': 222,
  'AsTheHeartBids': 894,
  'AsTheHeavensBurn': 1012,
  'AsphodelosTheFirstCircle': 1002,
  'AsphodelosTheFirstCircleSavage': 1003,
  'AsphodelosTheFourthCircle': 1008,
  'AsphodelosTheFourthCircleSavage': 1009,
  'AsphodelosTheSecondCircle': 1004,
  'AsphodelosTheSecondCircleSavage': 1005,
  'AsphodelosTheThirdCircle': 1006,
  'AsphodelosTheThirdCircleSavage': 1007,
  'AssistAlliesInDefeatingATarget': 544,
  'Astragalos': 729,
  'AvoidAreaOfEffectAttacks': 537,
  'AzysLla': 402,
  'BaelsarsWall': 615,
  'BardamsMettle': 623,
  'BasicTrainingEnemyParties': 214,
  'BasicTrainingEnemyStrongholds': 215,
  'BattleInTheBigKeep': 396,
  'BattleOnTheBigBridge': 366,
  'BloodOnTheDeck': 708,
  'BrayfloxsLongstop': 1041,
  'BrayfloxsLongstopHard': 362,
  'CapeWestwind': 1049,
  'CastrumAbania': 661,
  'CastrumFluminis': 778,
  'CastrumMarinum': 934,
  'CastrumMarinumDrydocks': 967,
  'CastrumMarinumExtreme': 935,
  'CastrumMeridianum': 1043,
  'CentralShroud': 148,
  'CentralThanalan': 141,
  'ChocoboRaceCostaDelSol': 389,
  'ChocoboRaceSagoliiRoad': 390,
  'ChocoboRaceTranquilPaths': 391,
  'ChocoboRaceTutorial': 417,
  'CinderDrift': 897,
  'CinderDriftExtreme': 912,
  'CloudNine': 1034,
  'CoerthasCentralHighlands': 155,
  'CoerthasWesternHighlands': 397,
  'ComingClean': 860,
  'ContainmentBayP1T6': 576,
  'ContainmentBayP1T6Extreme': 577,
  'ContainmentBayS1T7': 517,
  'ContainmentBayS1T7Extreme': 524,
  'ContainmentBayZ1T9': 637,
  'ContainmentBayZ1T9Extreme': 638,
  'CopperbellMines': 1038,
  'CopperbellMinesHard': 349,
  'CrystallineConflictCustomMatchCloudNine': 1060,
  'CrystallineConflictCustomMatchThePalaistra': 1058,
  'CrystallineConflictCustomMatchTheVolcanicHeart': 1059,
  'CuriousGorgeMeetsHisMatch': 717,
  'CuttersCry': 170,
  'DarkAsTheNightSky': 713,
  'DeathUntoDawn': 977,
  'DefeatAnOccupiedTarget': 545,
  'DeltascapeV10': 691,
  'DeltascapeV10Savage': 695,
  'DeltascapeV20': 692,
  'DeltascapeV20Savage': 696,
  'DeltascapeV30': 693,
  'DeltascapeV30Savage': 697,
  'DeltascapeV40': 694,
  'DeltascapeV40Savage': 698,
  'DelubrumReginae': 936,
  'DelubrumReginaeSavage': 937,
  'Devastation': 1052,
  'DohnMheg': 821,
  'DomaCastle': 660,
  'DragonSound': 714,
  'DragonsongsRepriseUltimate': 968,
  'DunScaith': 627,
  'DzemaelDarkhold': 171,
  'EastShroud': 152,
  'EasternLaNoscea': 137,
  'EasternThanalan': 145,
  'EdensGateDescent': 850,
  'EdensGateDescentSavage': 854,
  'EdensGateInundation': 851,
  'EdensGateInundationSavage': 855,
  'EdensGateResurrection': 849,
  'EdensGateResurrectionSavage': 853,
  'EdensGateSepulture': 852,
  'EdensGateSepultureSavage': 856,
  'EdensPromiseAnamorphosis': 944,
  'EdensPromiseAnamorphosisSavage': 948,
  'EdensPromiseEternity': 945,
  'EdensPromiseEternitySavage': 949,
  'EdensPromiseLitany': 943,
  'EdensPromiseLitanySavage': 947,
  'EdensPromiseUmbra': 942,
  'EdensPromiseUmbraSavage': 946,
  'EdensVerseFulmination': 902,
  'EdensVerseFulminationSavage': 906,
  'EdensVerseFuror': 903,
  'EdensVerseFurorSavage': 907,
  'EdensVerseIconoclasm': 904,
  'EdensVerseIconoclasmSavage': 908,
  'EdensVerseRefulgence': 905,
  'EdensVerseRefulgenceSavage': 909,
  'Elpis': 961,
  'Emanation': 719,
  'EmanationExtreme': 720,
  'EmissaryOfTheDawn': 769,
  'Endwalker': 1013,
  'EngageMultipleTargets': 541,
  'Eulmore': 820,
  'EverMarchHeavensward': 1018,
  'ExecuteAComboInBattle': 539,
  'ExecuteAComboToIncreaseEnmity': 538,
  'ExecuteARangedAttackToIncreaseEnmity': 542,
  'FadedMemories': 932,
  'FinalExercise': 552,
  'FitForAQueen': 955,
  'FlickingSticksAndTakingNames': 219,
  'ForlornGlory': 1051,
  'Foundation': 418,
  'FourPlayerMahjongQuickMatchKuitanDisabled': 831,
  'Garlemald': 958,
  'Halatali': 162,
  'HalataliHard': 360,
  'HaukkeManor': 1040,
  'HaukkeManorHard': 350,
  'HealAnAlly': 549,
  'HealMultipleAllies': 550,
  'HeavenOnHighFloors11_20': 771,
  'HeavenOnHighFloors1_10': 770,
  'HeavenOnHighFloors21_30': 772,
  'HeavenOnHighFloors31_40': 782,
  'HeavenOnHighFloors41_50': 773,
  'HeavenOnHighFloors51_60': 783,
  'HeavenOnHighFloors61_70': 774,
  'HeavenOnHighFloors71_80': 784,
  'HeavenOnHighFloors81_90': 775,
  'HeavenOnHighFloors91_100': 785,
  'HellsKier': 810,
  'HellsKierExtreme': 811,
  'HellsLid': 742,
  'HeroOnTheHalfShell': 216,
  'HiddenGorge': 791,
  'HolminsterSwitch': 837,
  'HullbreakerIsle': 361,
  'HullbreakerIsleHard': 557,
  'Idyllshire': 478,
  'IlMheg': 816,
  'InFromTheCold': 1011,
  'InThalsName': 705,
  'InteractWithTheBattlefield': 548,
  'InterdimensionalRift': 690,
  'ItsProbablyATrap': 665,
  'Kholusia': 814,
  'KtisisHyperboreia': 974,
  'Kugane': 628,
  'KuganeCastle': 662,
  'KuganeOhashi': 806,
  'Labyrinthos': 956,
  'LaidToRest': 1017,
  'Lakeland': 813,
  'LegendOfTheNotSoHiddenTemple': 859,
  'LifeEphemeralPathEternal': 1023,
  'LimsaLominsaLowerDecks': 129,
  'LimsaLominsaUpperDecks': 128,
  'LongLiveTheQueen': 298,
  'LovmMasterTournament': 506,
  'LovmPlayerBattleNonRp': 591,
  'LovmPlayerBattleRp': 589,
  'LovmTournament': 590,
  'LowerLaNoscea': 135,
  'MalikahsWell': 836,
  'MareLamentorum': 959,
  'MatchAll': null,
  'MatoyasRelict': 933,
  'MatsubaMayhem': 710,
  'MemoriaMiseraExtreme': 913,
  'MessengerOfTheWinds': 834,
  'MiddleLaNoscea': 134,
  'Mist': 136,
  'MorDhona': 156,
  'MoreThanAFeeler': 221,
  'MtGulg': 822,
  'Naadam': 688,
  'Neverreap': 420,
  'NewGridania': 132,
  'NorthShroud': 154,
  'NorthernThanalan': 147,
  'NyelbertsLament': 876,
  'OceanFishing': 900,
  'OldGridania': 133,
  'OldSharlayan': 962,
  'OneLifeForOneWorld': 592,
  'OnsalHakairDanshigNaadam': 888,
  'OurCompromise': 716,
  'OurUnsungHeroes': 722,
  'OuterLaNoscea': 180,
  'Paglthan': 938,
  'PharosSirius': 160,
  'PharosSiriusHard': 510,
  'PullingPoisonPosies': 191,
  'RadzAtHan': 963,
  'RaisingTheSword': 706,
  'ReturnOfTheBull': 403,
  'RhalgrsReach': 635,
  'SagesFocus': 1022,
  'SaintMociannesArboretum': 511,
  'SaintMociannesArboretumHard': 788,
  'Sastasha': 1036,
  'SastashaHard': 387,
  'SealRockSeize': 431,
  'ShadowAndClaw': 223,
  'ShisuiOfTheVioletTides': 616,
  'SigmascapeV10': 748,
  'SigmascapeV10Savage': 752,
  'SigmascapeV20': 749,
  'SigmascapeV20Savage': 753,
  'SigmascapeV30': 750,
  'SigmascapeV30Savage': 754,
  'SigmascapeV40': 751,
  'SigmascapeV40Savage': 755,
  'Smileton': 976,
  'Snowcloak': 371,
  'SohmAl': 441,
  'SohmAlHard': 617,
  'SohrKhai': 555,
  'SolemnTrinity': 300,
  'SouthShroud': 153,
  'SouthernThanalan': 146,
  'SpecialEventI': 353,
  'SpecialEventIi': 354,
  'SpecialEventIii': 509,
  'StingingBack': 192,
  'SyrcusTower': 372,
  'Thavnair': 957,
  'TheAery': 435,
  'TheAetherochemicalResearchFacility': 438,
  'TheAitiascope': 978,
  'TheAkhAfahAmphitheatreExtreme': 378,
  'TheAkhAfahAmphitheatreHard': 377,
  'TheAkhAfahAmphitheatreUnreal': 930,
  'TheAntitower': 516,
  'TheAquapolis': 558,
  'TheAurumVale': 172,
  'TheAzimSteppe': 622,
  'TheBattleOnBekko': 711,
  'TheBindingCoilOfBahamutTurn1': 241,
  'TheBindingCoilOfBahamutTurn2': 242,
  'TheBindingCoilOfBahamutTurn3': 243,
  'TheBindingCoilOfBahamutTurn4': 244,
  'TheBindingCoilOfBahamutTurn5': 245,
  'TheBorderlandRuinsSecure': 376,
  'TheBowlOfEmbers': 1045,
  'TheBowlOfEmbersExtreme': 295,
  'TheBowlOfEmbersHard': 292,
  'TheBozjaIncident': 911,
  'TheBozjanSouthernFront': 920,
  'TheBurn': 789,
  'TheCalamityRetold': 790,
  'TheCarteneauFlatsHeliodrome': 633,
  'TheChrysalis': 426,
  'TheChurningMists': 400,
  'TheCloudDeck': 950,
  'TheCloudDeckExtreme': 951,
  'TheCopiedFactory': 882,
  'TheCrownOfTheImmaculate': 846,
  'TheCrownOfTheImmaculateExtreme': 848,
  'TheCrystarium': 819,
  'TheDancingPlague': 845,
  'TheDancingPlagueExtreme': 858,
  'TheDarkInside': 992,
  'TheDeadEnds': 973,
  'TheDiadem': 929,
  'TheDiademEasy': 512,
  'TheDiademHard': 515,
  'TheDiademHuntingGrounds': 625,
  'TheDiademHuntingGroundsEasy': 624,
  'TheDiademTrialsOfTheFury': 630,
  'TheDiademTrialsOfTheMatron': 656,
  'TheDomanEnclave': 759,
  'TheDragonsNeck': 142,
  'TheDravanianForelands': 398,
  'TheDravanianHinterlands': 399,
  'TheDrownedCityOfSkalla': 731,
  'TheDungeonsOfLyheGhiah': 879,
  'TheDuskVigil': 434,
  'TheDyingGasp': 847,
  'TheEpicOfAlexanderUltimate': 887,
  'TheExcitatron6000': 1000,
  'TheFaceOfTrueEvil': 709,
  'TheFieldsOfGloryShatter': 554,
  'TheFinalCoilOfBahamutTurn1': 193,
  'TheFinalCoilOfBahamutTurn2': 194,
  'TheFinalCoilOfBahamutTurn3': 195,
  'TheFinalCoilOfBahamutTurn4': 196,
  'TheFinalDay': 997,
  'TheFinalStepsOfFaith': 559,
  'TheForbiddenLandEurekaAnemos': 732,
  'TheForbiddenLandEurekaHydatos': 827,
  'TheForbiddenLandEurekaPagos': 763,
  'TheForbiddenLandEurekaPyros': 795,
  'TheFractalContinuum': 430,
  'TheFractalContinuumHard': 743,
  'TheFringes': 612,
  'TheGhimlytDark': 793,
  'TheGiftOfMercy': 1019,
  'TheGrandCosmos': 884,
  'TheGreatGubalLibrary': 416,
  'TheGreatGubalLibraryHard': 578,
  'TheGreatHunt': 761,
  'TheGreatHuntExtreme': 762,
  'TheGreatShipVylbrand': 954,
  'TheHardenedHeart': 873,
  'TheHarvestBegins': 1020,
  'TheHauntedManor': 571,
  'TheHeartOfTheProblem': 718,
  'TheHeroesGauntlet': 916,
  'TheHiddenCanalsOfUznair': 725,
  'TheHowlingEye': 1047,
  'TheHowlingEyeExtreme': 297,
  'TheHowlingEyeHard': 294,
  'TheHuntersLegacy': 875,
  'TheJadeStoa': 746,
  'TheJadeStoaExtreme': 758,
  'TheKeeperOfTheLake': 150,
  'TheKillingArt': 1021,
  'TheLabyrinthOfTheAncients': 174,
  'TheLimitlessBlueExtreme': 447,
  'TheLimitlessBlueHard': 436,
  'TheLochs': 621,
  'TheLostAndTheFound': 874,
  'TheLostCanalsOfUznair': 712,
  'TheLostCityOfAmdapor': 363,
  'TheLostCityOfAmdaporHard': 519,
  'TheMinstrelsBalladEndsingersAria': 998,
  'TheMinstrelsBalladHadessElegy': 885,
  'TheMinstrelsBalladHydaelynsCall': 996,
  'TheMinstrelsBalladNidhoggsRage': 566,
  'TheMinstrelsBalladShinryusDomain': 730,
  'TheMinstrelsBalladThordansReign': 448,
  'TheMinstrelsBalladTsukuyomisPain': 779,
  'TheMinstrelsBalladUltimasBane': 348,
  'TheMinstrelsBalladZodiarksFall': 993,
  'TheMothercrystal': 995,
  'TheNavel': 1046,
  'TheNavelExtreme': 296,
  'TheNavelHard': 293,
  'TheNavelUnreal': 953,
  'TheOrbonneMonastery': 826,
  'TheOrphansAndTheBrokenBlade': 715,
  'ThePalaceOfTheDeadFloors101_110': 598,
  'ThePalaceOfTheDeadFloors111_120': 599,
  'ThePalaceOfTheDeadFloors11_20': 562,
  'ThePalaceOfTheDeadFloors121_130': 600,
  'ThePalaceOfTheDeadFloors131_140': 601,
  'ThePalaceOfTheDeadFloors141_150': 602,
  'ThePalaceOfTheDeadFloors151_160': 603,
  'ThePalaceOfTheDeadFloors161_170': 604,
  'ThePalaceOfTheDeadFloors171_180': 605,
  'ThePalaceOfTheDeadFloors181_190': 606,
  'ThePalaceOfTheDeadFloors191_200': 607,
  'ThePalaceOfTheDeadFloors1_10': 561,
  'ThePalaceOfTheDeadFloors21_30': 563,
  'ThePalaceOfTheDeadFloors31_40': 564,
  'ThePalaceOfTheDeadFloors41_50': 565,
  'ThePalaceOfTheDeadFloors51_60': 593,
  'ThePalaceOfTheDeadFloors61_70': 594,
  'ThePalaceOfTheDeadFloors71_80': 595,
  'ThePalaceOfTheDeadFloors81_90': 596,
  'ThePalaceOfTheDeadFloors91_100': 597,
  'ThePalaistra': 1032,
  'ThePeaks': 620,
  'ThePhantomsFeast': 994,
  'ThePillars': 419,
  'ThePoolOfTribute': 674,
  'ThePoolOfTributeExtreme': 677,
  'ThePortaDecumana': 1048,
  'ThePraetorium': 1044,
  'ThePuppetsBunker': 917,
  'TheQitanaRavel': 823,
  'TheRaktikaGreatwood': 817,
  'TheResonant': 684,
  'TheRidoranaLighthouse': 776,
  'TheRoyalCityOfRabanastre': 734,
  'TheRoyalMenagerie': 679,
  'TheRubySea': 613,
  'TheSeaOfClouds': 401,
  'TheSeatOfSacrifice': 922,
  'TheSeatOfSacrificeExtreme': 923,
  'TheSecondCoilOfBahamutSavageTurn1': 380,
  'TheSecondCoilOfBahamutSavageTurn2': 381,
  'TheSecondCoilOfBahamutSavageTurn3': 382,
  'TheSecondCoilOfBahamutSavageTurn4': 383,
  'TheSecondCoilOfBahamutTurn1': 355,
  'TheSecondCoilOfBahamutTurn2': 356,
  'TheSecondCoilOfBahamutTurn3': 357,
  'TheSecondCoilOfBahamutTurn4': 358,
  'TheShiftingAltarsOfUznair': 794,
  'TheShiftingOubliettesOfLyheGhiah': 924,
  'TheSingularityReactor': 437,
  'TheSirensongSea': 626,
  'TheStepsOfFaith': 143,
  'TheStigmaDreamscape': 986,
  'TheStoneVigil': 1042,
  'TheStoneVigilHard': 365,
  'TheStrikingTreeExtreme': 375,
  'TheStrikingTreeHard': 374,
  'TheSunkenTempleOfQarn': 163,
  'TheSunkenTempleOfQarnHard': 367,
  'TheSwallowsCompass': 768,
  'TheTamTaraDeepcroft': 1037,
  'TheTamTaraDeepcroftHard': 373,
  'TheTempest': 818,
  'TheTempleOfTheFist': 663,
  'TheThousandMawsOfTotoRak': 1039,
  'TheTowerAtParadigmsBreach': 966,
  'TheTowerOfBabil': 969,
  'TheTowerOfZot': 952,
  'TheTripleTriadBattlehall': 579,
  'TheTwinning': 840,
  'TheUnendingCoilOfBahamutUltimate': 733,
  'TheValentionesCeremony': 741,
  'TheVault': 421,
  'TheVoidArk': 508,
  'TheVolcanicHeart': 1033,
  'TheWanderersPalace': 159,
  'TheWanderersPalaceHard': 188,
  'TheWeaponsRefrainUltimate': 777,
  'TheWeepingCityOfMhach': 556,
  'TheWhorleaterExtreme': 359,
  'TheWhorleaterHard': 281,
  'TheWhorleaterUnreal': 972,
  'TheWillOfTheMoon': 797,
  'TheWorldOfDarkness': 151,
  'TheWreathOfSnakes': 824,
  'TheWreathOfSnakesExtreme': 825,
  'ThokAstThokExtreme': 446,
  'ThokAstThokHard': 432,
  'ThornmarchExtreme': 364,
  'ThornmarchHard': 207,
  'ToCalmerSeas': 1016,
  'TripleTriadInvitationalParlor': 941,
  'TripleTriadOpenTournament': 940,
  'UldahStepsOfNald': 130,
  'UldahStepsOfThal': 131,
  'UltimaThule': 960,
  'UltimasBaneUnreal': 1035,
  'UnderTheArmor': 190,
  'UpperLaNoscea': 139,
  'UrthsFount': 394,
  'Vanaspati': 970,
  'VowsOfVirtueDeedsOfCruelty': 893,
  'WardUp': 299,
  'WesternLaNoscea': 138,
  'WesternThanalan': 140,
  'WhenClansCollide': 723,
  'WithHeartAndSteel': 707,
  'WolvesDenPier': 250,
  'WorthyOfHisBack': 1014,
  'Xelphatol': 572,
  'Yanxia': 614,
  'Zadnor': 975
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);

/***/ }),

/***/ 902:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
  1000: {
    'contentType': 9,
    'exVersion': 4,
    'name': {
      'cn': '惊奇百宝城',
      'de': 'Euphoratron',
      'en': 'The Excitatron 6000',
      'fr': 'Le Ludodrome',
      'ja': '宝物庫 エキサイトロン',
      'ko': '보물고 익사이트론'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1002: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱1',
      'de': 'Asphodelos - Erster Kreis',
      'en': 'Asphodelos: The First Circle',
      'fr': 'Les Limbes du Pandæmonium - Parvis',
      'ja': '万魔殿パンデモニウム：辺獄編1',
      'ko': '마의 전당 판데모니움: 변옥편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1003: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱1',
      'de': 'Asphodelos - Erster Kreis (episch)',
      'en': 'Asphodelos: The First Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Parvis (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編1',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1004: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱2',
      'de': 'Asphodelos - Zweiter Kreis',
      'en': 'Asphodelos: The Second Circle',
      'fr': 'Les Limbes du Pandæmonium - Cloaque',
      'ja': '万魔殿パンデモニウム：辺獄編2',
      'ko': '마의 전당 판데모니움: 변옥편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1005: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱2',
      'de': 'Asphodelos - Zweiter Kreis (episch)',
      'en': 'Asphodelos: The Second Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Cloaque (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編2',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1006: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱3',
      'de': 'Asphodelos - Dritter Kreis',
      'en': 'Asphodelos: The Third Circle',
      'fr': 'Les Limbes du Pandæmonium - Fournaise',
      'ja': '万魔殿パンデモニウム：辺獄編3',
      'ko': '마의 전당 판데모니움: 변옥편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1007: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱3',
      'de': 'Asphodelos - Dritter Kreis (episch)',
      'en': 'Asphodelos: The Third Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Fournaise (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編3',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1008: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱4',
      'de': 'Asphodelos - Vierter Kreis',
      'en': 'Asphodelos: The Fourth Circle',
      'fr': 'Les Limbes du Pandæmonium - Abîme',
      'ja': '万魔殿パンデモニウム：辺獄編4',
      'ko': '마의 전당 판데모니움: 변옥편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1009: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱4',
      'de': 'Asphodelos - Vierter Kreis (episch)',
      'en': 'Asphodelos: The Fourth Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Abîme (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編4',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1010: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '踏破风雪',
      'de': 'Ein frostiger Empfang',
      'en': 'A Frosty Reception',
      'fr': 'Un accueil glacial',
      'ja': '霜雪を踏みしめて',
      'ko': '눈서리를 밟고'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1011: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '无尽寒夜',
      'de': 'In fremder Haut',
      'en': 'In from the Cold',
      'fr': 'Le voleur de corps',
      'ja': '寒夜のこと',
      'ko': '어느 추운 밤에'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 27
  },
  1012: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '扩散的末日',
      'de': 'Rote Himmel, roter Schnee',
      'en': 'As the Heavens Burn',
      'fr': 'L\'arène des neiges',
      'ja': '拡がる終末',
      'ko': '퍼져가는 종말'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 141
  },
  1013: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '晓月之终途',
      'de': 'Endschreiter',
      'en': 'Endwalker',
      'fr': 'Arpenteur des finitudes',
      'ja': '暁月のフィナーレ',
      'ko': '효월의 종언'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 100,
    'weatherRate': 143
  },
  1014: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '上一任阿谢姆的教导',
      'de': ' Es reimt sich auf Gebell',
      'en': 'Worthy of His Back',
      'fr': 'Le défi de l\'ancienne Azem',
      'ja': '前代アゼムの手ほどき',
      'ko': '선대 아젬과의 대련'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 134
  },
  1015: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '未来之路',
      'de': 'Offen für neue Wege',
      'en': 'A Path Unveiled',
      'fr': 'Des esprits et des hommes',
      'ja': '開かれた道の先へ',
      'ko': '열린 길 저편으로'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  1016: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '驶向融合的巨轮',
      'de': 'Im Hafen des Friedens',
      'en': 'To Calmer Seas',
      'fr': 'Cap sur la paix',
      'ja': '融和への船出',
      'ko': '화합을 향한 출항'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1017: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '英魂安息',
      'de': 'Domanisches Begräbnis',
      'en': 'Laid to Rest',
      'fr': 'Des adieux domiens',
      'ja': 'ドマの弔い',
      'ko': '도마의 추도'
    },
    'offsetX': 240,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1018: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '仰望苍穹，不断迈进',
      'de': 'Der Weg zur Erneuerung',
      'en': 'Ever March Heavensward',
      'fr': 'La voie du renouveau',
      'ja': '蒼天を仰ぎ、歩み続ける',
      'ko': '창천을 보며 나아가자'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 114
  },
  1019: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '目送生者前行',
      'de': 'Trauer und Hoffnung',
      'en': 'The Gift of Mercy',
      'fr': 'Acceptation',
      'ja': '僕たちは還り、君を見送ろう',
      'ko': '우리는 돌아가 그대를 보내리'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1020: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '大镰的意义',
      'de': 'Die Bedeutung der Sense',
      'en': 'The Harvest Begins',
      'fr': 'La vraie puissance de la faux',
      'ja': '大鎌の意味',
      'ko': '큰낫의 의미'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1021: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '暗杀道',
      'de': 'Die Kunst des Tötens',
      'en': 'The Killing Art',
      'fr': 'La voie du néant',
      'ja': '暗殺道',
      'ko': '암살의 길'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  1022: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '贤者的短杖',
      'de': 'Des Weisen wundersames Werkzeug',
      'en': 'Sage\'s Focus',
      'fr': 'Les armes du sage',
      'ja': '賢者の短杖',
      'ko': '현자의 짧은 지팡이'
    },
    'offsetX': 40,
    'offsetY': 6,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1023: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '生命瞬逝，术道恒久',
      'de': 'Das Leben ist kurz, die Kunst ist lang',
      'en': 'Life Ephemeral, Path Eternal',
      'fr': 'Existences éphémères et savoir éternel',
      'ja': '人命は儚く、術のみちは永久に',
      'ko': '생명은 덧없으나 기술은 영원하리'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 50
  },
  1032: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'de': 'Die Palästra',
      'en': 'The Palaistra',
      'fr': 'Le Palestre',
      'ja': 'パライストラ'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1033: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'de': 'Das Herz des Vulkans',
      'en': 'The Volcanic Heart',
      'fr': 'Le Cœur volcanique',
      'ja': 'ヴォルカニック・ハート'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1034: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'de': 'Wolke Sieben',
      'en': 'Cloud Nine',
      'fr': 'Le Petit Nuage',
      'ja': 'クラウドナイン'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1035: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'de': 'Traumprüfung - Ultima',
      'en': 'Ultima\'s Bane (Unreal)',
      'fr': 'Le fléau d\'Ultima (irréel)',
      'ja': '幻アルテマウェポン破壊作戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 31
  },
  1036: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '天然要害沙斯塔夏溶洞',
      'de': 'Sastasha',
      'en': 'Sastasha',
      'fr': 'Sastasha',
      'ja': '天然要害 サスタシャ浸食洞',
      'ko': '사스타샤 침식 동굴'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1037: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '地下灵殿塔姆·塔拉墓园',
      'de': 'Totenacker Tam-Tara',
      'en': 'The Tam–Tara Deepcroft',
      'fr': 'L\'Hypogée de Tam-Tara',
      'ja': '地下霊殿 タムタラの墓所',
      'ko': '탐타라 묘소'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 300,
    'weatherRate': 0
  },
  1038: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '封锁坑道铜铃铜山',
      'de': 'Kupferglocken-Mine',
      'en': 'Copperbell Mines',
      'fr': 'Les Mines de Clochecuivre',
      'ja': '封鎖坑道 カッパーベル銅山',
      'ko': '구리종 광산'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1039: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '监狱废墟托托·拉克千狱',
      'de': 'Tausend Löcher von Toto-Rak',
      'en': 'The Thousand Maws of Toto–Rak',
      'fr': 'Les Mille Gueules de Toto-Rak',
      'ja': '監獄廃墟 トトラクの千獄',
      'ko': '토토라크 감옥'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1040: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '名门府邸静语庄园',
      'de': 'Haukke-Herrenhaus',
      'en': 'Haukke Manor',
      'fr': 'Le Manoir des Haukke',
      'ja': '名門屋敷 ハウケタ御用邸',
      'ko': '하우케타 별궁'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1041: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '休养胜地布雷福洛克斯野营地',
      'de': 'Brüllvolx\' Langrast',
      'en': 'Brayflox\'s Longstop',
      'fr': 'Le Bivouac de Brayflox',
      'ja': '奪還支援 ブレイフロクスの野営地',
      'ko': '브레이플록스의 야영지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1042: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '对龙城塞石卫塔',
      'de': 'Steinerne Wacht',
      'en': 'The Stone Vigil',
      'fr': 'Le Vigile de Pierre',
      'ja': '城塞攻略 ストーンヴィジル',
      'ko': '돌방패 경계초소'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 27
  },
  1043: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '帝国南方堡外围激战',
      'de': 'Castrum Meridianum - Außenbereich',
      'en': 'Castrum Meridianum',
      'fr': 'Castrum Meridianum',
      'ja': '外郭攻略 カストルム・メリディアヌム',
      'ko': '카스트룸 메리디아눔'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1044: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '天幕魔导城最终决战',
      'de': 'Castrum Meridianum - Praetorium',
      'en': 'The Praetorium',
      'fr': 'Le Praetorium',
      'ja': '最終決戦 魔導城プラエトリウム',
      'ko': '마도성 프라이토리움'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1045: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '伊弗利特讨伐战',
      'de': 'Das Grab der Lohe',
      'en': 'The Bowl of Embers',
      'fr': 'Le Cratère des tisons',
      'ja': 'イフリート討伐戦',
      'ko': '이프리트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 25
  },
  1046: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '泰坦讨伐战',
      'de': 'Der Nabel',
      'en': 'The Navel',
      'fr': 'Le Nombril',
      'ja': 'タイタン討伐戦',
      'ko': '타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  1047: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '迦楼罗讨伐战',
      'de': 'Das Tosende Auge',
      'en': 'The Howling Eye',
      'fr': 'Hurlœil',
      'ja': 'ガルーダ討伐戦',
      'ko': '가루다 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  1048: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'de': 'Porta Decumana',
      'en': 'The Porta Decumana',
      'fr': 'Porta Decumana',
      'ja': 'アルテマウェポン破壊作戦'
    },
    'offsetX': 772,
    'offsetY': 600,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1049: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'de': 'Kap Westwind',
      'en': 'Cape Westwind',
      'fr': 'Le Cap Vendouest',
      'ja': 'リットアティン強襲戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1050: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'de': 'Alzadaals Vermächtnis',
      'en': 'Alzadaal\'s Legacy',
      'fr': 'Le legs d\'Alzadaal',
      'ja': '近東秘宝 アルザダール海底遺跡群'
    },
    'offsetX': 15,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1051: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'de': 'Nervas Reich',
      'en': 'Forlorn Glory',
      'fr': 'Nerva, le patriote',
      'ja': 'ネルウァの帝国'
    },
    'offsetX': -230,
    'offsetY': -250,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  1052: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'de': 'Das Antlitz der Kaltblütigkeit',
      'en': 'Devastation',
      'fr': 'Le Praetorium en flammes',
      'ja': 'アシエン・ラハブレア討伐戦'
    },
    'offsetX': 704,
    'offsetY': -480,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1054: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'de': 'Aglaia',
      'en': 'Aglaia',
      'fr': 'Domaine divin - Aglaé',
      'ja': '輝ける神域 アグライア'
    },
    'offsetX': -80,
    'offsetY': -550,
    'sizeFactor': 200,
    'weatherRate': 147
  },
  1058: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'de': 'Crystalline Conflict: Die Palästra (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - The Palaistra)',
      'fr': 'Crystalline Conflict (partie personnalisée - Le Palestre)',
      'ja': 'クリスタルコンフリクト(パライストラ：カスタムマッチ)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1059: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'de': 'Crystalline Conflict: Das Herz des Vulkans (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - The Volcanic Heart)',
      'fr': 'Crystalline Conflict (partie personnalisée - Le Cœur volcanique)',
      'ja': 'クリスタルコンフリクト(ヴォルカニック・ハート：カスタムマッチ)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1060: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'de': 'Crystalline Conflict: Wolke Sieben (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - Cloud Nine)',
      'fr': 'Crystalline Conflict (partie personnalisée - Le Petit Nuage)',
      'ja': 'クリスタルコンフリクト(クラウドナイン：カスタムマッチ)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  128: {
    'exVersion': 0,
    'name': {
      'cn': '利姆萨·罗敏萨上层甲板',
      'de': 'Obere Decks',
      'en': 'Limsa Lominsa Upper Decks',
      'fr': 'Limsa Lominsa - Le Tillac',
      'ja': 'リムサ・ロミンサ：上甲板層',
      'ko': '림사 로민사 상층 갑판'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 14
  },
  129: {
    'exVersion': 0,
    'name': {
      'cn': '利姆萨·罗敏萨下层甲板',
      'de': 'Untere Decks',
      'en': 'Limsa Lominsa Lower Decks',
      'fr': 'Limsa Lominsa - L\'Entrepont',
      'ja': 'リムサ・ロミンサ：下甲板層',
      'ko': '림사 로민사 하층 갑판'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 15
  },
  130: {
    'exVersion': 0,
    'name': {
      'cn': '乌尔达哈现世回廊',
      'de': 'Nald-Kreuzgang',
      'en': 'Ul\'dah - Steps of Nald',
      'fr': 'Ul\'dah - Faubourg de Nald',
      'ja': 'ウルダハ：ナル回廊',
      'ko': '울다하 날 회랑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 7
  },
  131: {
    'exVersion': 0,
    'name': {
      'cn': '乌尔达哈来生回廊',
      'de': 'Thal-Kreuzgang',
      'en': 'Ul\'dah - Steps of Thal',
      'fr': 'Ul\'dah - Faubourg de Thal',
      'ja': 'ウルダハ：ザル回廊',
      'ko': '울다하 달 회랑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 8
  },
  132: {
    'exVersion': 0,
    'name': {
      'cn': '格里达尼亚新街',
      'de': 'Neu-Gridania',
      'en': 'New Gridania',
      'fr': 'Nouvelle Gridania',
      'ja': 'グリダニア：新市街',
      'ko': '그리다니아 신시가지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 1
  },
  133: {
    'exVersion': 0,
    'name': {
      'cn': '格里达尼亚旧街',
      'de': 'Alt-Gridania',
      'en': 'Old Gridania',
      'fr': 'Vieille Gridania',
      'ja': 'グリダニア：旧市街',
      'ko': '그리다니아 구시가지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 2
  },
  134: {
    'exVersion': 0,
    'name': {
      'cn': '中拉诺西亚',
      'de': 'Zentrales La Noscea',
      'en': 'Middle La Noscea',
      'fr': 'Noscea centrale',
      'ja': '中央ラノシア',
      'ko': '중부 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 16
  },
  135: {
    'exVersion': 0,
    'name': {
      'cn': '拉诺西亚低地',
      'de': 'Unteres La Noscea',
      'en': 'Lower La Noscea',
      'fr': 'Basse-Noscea',
      'ja': '低地ラノシア',
      'ko': '저지 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 17
  },
  136: {
    'exVersion': 0,
    'name': {
      'cn': '海雾村',
      'de': 'Dorf des Nebels',
      'en': 'Mist',
      'fr': 'Brumée',
      'ja': 'ミスト・ヴィレッジ',
      'ko': '안갯빛 마을'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 14
  },
  137: {
    'exVersion': 0,
    'name': {
      'cn': '东拉诺西亚',
      'de': 'Östliches La Noscea',
      'en': 'Eastern La Noscea',
      'fr': 'Noscea orientale',
      'ja': '東ラノシア',
      'ko': '동부 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 18
  },
  138: {
    'exVersion': 0,
    'name': {
      'cn': '西拉诺西亚',
      'de': 'Westliches La Noscea',
      'en': 'Western La Noscea',
      'fr': 'Noscea occidentale',
      'ja': '西ラノシア',
      'ko': '서부 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 19
  },
  139: {
    'exVersion': 0,
    'name': {
      'cn': '拉诺西亚高地',
      'de': 'Oberes La Noscea',
      'en': 'Upper La Noscea',
      'fr': 'Haute-Noscea',
      'ja': '高地ラノシア',
      'ko': '고지 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 20
  },
  140: {
    'exVersion': 0,
    'name': {
      'cn': '西萨纳兰',
      'de': 'Westliches Thanalan',
      'en': 'Western Thanalan',
      'fr': 'Thanalan occidental',
      'ja': '西ザナラーン',
      'ko': '서부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 9
  },
  141: {
    'exVersion': 0,
    'name': {
      'cn': '中萨纳兰',
      'de': 'Zentrales Thanalan',
      'en': 'Central Thanalan',
      'fr': 'Thanalan central',
      'ja': '中央ザナラーン',
      'ko': '중부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 10
  },
  142: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '艾玛吉娜杯斗技大会决赛',
      'de': 'Das Drachenhals-Kolosseum',
      'en': 'The Dragon\'s Neck',
      'fr': 'Le Col du dragon',
      'ja': 'アマジナ杯闘技会決勝戦',
      'ko': '아마지나배 투기대회 결승전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  143: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '皇都伊修加德保卫战',
      'de': 'Der Schicksalsweg',
      'en': 'The Steps of Faith',
      'fr': 'Le Siège de la sainte Cité d\'Ishgard',
      'ja': '皇都イシュガルド防衛戦',
      'ko': '성도 이슈가르드 방어전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  145: {
    'exVersion': 0,
    'name': {
      'cn': '东萨纳兰',
      'de': 'Östliches Thanalan',
      'en': 'Eastern Thanalan',
      'fr': 'Thanalan oriental',
      'ja': '東ザナラーン',
      'ko': '동부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 11
  },
  146: {
    'exVersion': 0,
    'name': {
      'cn': '南萨纳兰',
      'de': 'Südliches Thanalan',
      'en': 'Southern Thanalan',
      'fr': 'Thanalan méridional',
      'ja': '南ザナラーン',
      'ko': '남부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 12
  },
  147: {
    'exVersion': 0,
    'name': {
      'cn': '北萨纳兰',
      'de': 'Nördliches Thanalan',
      'en': 'Northern Thanalan',
      'fr': 'Thanalan septentrional',
      'ja': '北ザナラーン',
      'ko': '북부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 13
  },
  148: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林中央林区',
      'de': 'Tiefer Wald',
      'en': 'Central Shroud',
      'fr': 'Forêt centrale',
      'ja': '黒衣森：中央森林',
      'ko': '검은장막 숲 중부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  150: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '幻龙残骸密约之塔',
      'de': 'Hüter des Sees',
      'en': 'The Keeper of the Lake',
      'fr': 'Le Gardien du lac',
      'ja': '幻龍残骸 黙約の塔',
      'ko': '묵약의 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 74
  },
  151: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '水晶塔 暗之世界',
      'de': 'Die Welt der Dunkelheit',
      'en': 'The World of Darkness',
      'fr': 'La Tour de Cristal - Monde des Ténèbres',
      'ja': 'クリスタルタワー：闇の世界',
      'ko': '크리스탈 타워: 어둠의 세계'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  152: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林东部林区',
      'de': 'Ostwald',
      'en': 'East Shroud',
      'fr': 'Forêt de l\'est',
      'ja': '黒衣森：東部森林',
      'ko': '검은장막 숲 동부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 4
  },
  153: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林南部林区',
      'de': 'Südwald',
      'en': 'South Shroud',
      'fr': 'Forêt du sud',
      'ja': '黒衣森：南部森林',
      'ko': '검은장막 숲 남부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 5
  },
  154: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林北部林区',
      'de': 'Nordwald',
      'en': 'North Shroud',
      'fr': 'Forêt du nord',
      'ja': '黒衣森：北部森林',
      'ko': '검은장막 숲 북부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 6
  },
  155: {
    'exVersion': 0,
    'name': {
      'cn': '库尔札斯中央高地',
      'de': 'Zentrales Hochland von Coerthas',
      'en': 'Coerthas Central Highlands',
      'fr': 'Hautes terres du Coerthas central',
      'ja': 'クルザス中央高地',
      'ko': '커르다스 중앙고지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  156: {
    'exVersion': 0,
    'name': {
      'cn': '摩杜纳',
      'de': 'Mor Dhona',
      'en': 'Mor Dhona',
      'fr': 'Mor Dhona',
      'ja': 'モードゥナ',
      'ko': '모르도나'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 22
  },
  159: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '神灵圣域放浪神古神殿',
      'de': 'Palast des Wanderers',
      'en': 'The Wanderer\'s Palace',
      'fr': 'Le Palais du Vagabond',
      'ja': '旅神聖域 ワンダラーパレス',
      'ko': '방랑자의 궁전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  160: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '领航明灯天狼星灯塔',
      'de': 'Pharos Sirius',
      'en': 'Pharos Sirius',
      'fr': 'Le Phare de Sirius',
      'ja': '怪鳥巨塔 シリウス大灯台',
      'ko': '시리우스 대등대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  162: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '魔兽领域日影地修炼所',
      'de': 'Halatali',
      'en': 'Halatali',
      'fr': 'Halatali',
      'ja': '魔獣領域 ハラタリ修練所',
      'ko': '할라탈리 수련장'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  163: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '古代遗迹喀恩埋没圣堂',
      'de': 'Versunkener Tempel von Qarn',
      'en': 'The Sunken Temple of Qarn',
      'fr': 'Le Temple enseveli de Qarn',
      'ja': '遺跡探索 カルン埋没寺院',
      'ko': '카른의 무너진 사원'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  167: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '邪教驻地无限城古堡',
      'de': 'Die Ruinen von Amdapor',
      'en': 'Amdapor Keep',
      'fr': 'Le Château d\'Amdapor',
      'ja': '邪教排撃 古城アムダプール',
      'ko': '옛 암다포르 성'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  170: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '流沙迷宫樵鸣洞',
      'de': 'Sägerschrei',
      'en': 'Cutter\'s Cry',
      'fr': 'Le Gouffre hurlant',
      'ja': '流砂迷宮 カッターズクライ',
      'ko': '나무꾼의 비명'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  171: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '山中战线泽梅尔要塞',
      'de': 'Die Feste Dzemael',
      'en': 'Dzemael Darkhold',
      'fr': 'La Forteresse de Dzemael',
      'ja': '掃討作戦 ゼーメル要塞',
      'ko': '제멜 요새'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  172: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '毒雾洞窟黄金谷',
      'de': 'Goldklamm',
      'en': 'The Aurum Vale',
      'fr': 'Le Val d\'Aurum',
      'ja': '霧中行軍 オーラムヴェイル',
      'ko': '금빛 골짜기'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  174: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '水晶塔 古代人迷宫',
      'de': 'Kristallturm - Das Labyrinth der Alten',
      'en': 'The Labyrinth of the Ancients',
      'fr': 'La Tour de Cristal - Dédale antique',
      'ja': 'クリスタルタワー：古代の民の迷宮',
      'ko': '크리스탈 타워: 고대인의 미궁'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  180: {
    'exVersion': 0,
    'name': {
      'cn': '拉诺西亚外地',
      'de': 'Äußeres La Noscea',
      'en': 'Outer La Noscea',
      'fr': 'Noscea extérieure',
      'ja': '外地ラノシア',
      'ko': '외지 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 24
  },
  188: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '武装圣域放浪神古神殿',
      'de': 'Palast des Wanderers (schwer)',
      'en': 'The Wanderer\'s Palace (Hard)',
      'fr': 'Le Palais du Vagabond (brutal)',
      'ja': '武装聖域 ワンダラーパレス (Hard)',
      'ko': '방랑자의 궁전(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  189: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '邪念妖地无限城古堡',
      'de': 'Die Ruinen von Amdapor (schwer)',
      'en': 'Amdapor Keep (Hard)',
      'fr': 'Le Château d\'Amdapor (brutal)',
      'ja': '邪念排撃 古城アムダプール (Hard)',
      'ko': '옛 암다포르 성(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  190: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐彷徨死灵！',
      'de': 'Bockmanns Gefolge',
      'en': 'Under the Armor',
      'fr': 'Chasse au fantôme fantoche',
      'ja': '彷徨う死霊を討て！',
      'ko': '방황하는 사령을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  191: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '驱除剧毒妖花！',
      'de': 'Unkraut jäten',
      'en': 'Pulling Poison Posies',
      'fr': 'Opération fleurs du mal',
      'ja': '有毒妖花を駆除せよ！',
      'ko': '독성 요괴꽃을 제거하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 4
  },
  192: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '消灭恶徒团伙寄生蜂团！',
      'de': 'Ins Wespennest stechen',
      'en': 'Stinging Back',
      'fr': 'Expédition punitive contre les Ventrerouge',
      'ja': '無法者「似我蜂団」を撃滅せよ！',
      'ko': '무법자 집단 \'나나니단\'을 섬멸하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 5
  },
  193: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章1',
      'de': 'Verschlungene Schatten 3 - 1',
      'en': 'The Final Coil of Bahamut - Turn 1',
      'fr': 'L\'Abîme de Bahamut I',
      'ja': '大迷宮バハムート：真成編1',
      'ko': '대미궁 바하무트: 진성편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  194: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章2',
      'de': 'Verschlungene Schatten 3 - 2',
      'en': 'The Final Coil of Bahamut - Turn 2',
      'fr': 'L\'Abîme de Bahamut II',
      'ja': '大迷宮バハムート：真成編2',
      'ko': '대미궁 바하무트: 진성편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  195: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章3',
      'de': 'Verschlungene Schatten 3 - 3',
      'en': 'The Final Coil of Bahamut - Turn 3',
      'fr': 'L\'Abîme de Bahamut III',
      'ja': '大迷宮バハムート：真成編3',
      'ko': '대미궁 바하무트: 진성편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  196: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章4',
      'de': 'Verschlungene Schatten 3 - 4',
      'en': 'The Final Coil of Bahamut - Turn 4',
      'fr': 'L\'Abîme de Bahamut IV',
      'ja': '大迷宮バハムート：真成編4',
      'ko': '대미궁 바하무트: 진성편 4'
    },
    'offsetX': -448,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 44
  },
  207: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '莫古力贤王歼灭战',
      'de': 'Königliche Konfrontation (schwer)',
      'en': 'Thornmarch (Hard)',
      'fr': 'La Lisière de ronces (brutal)',
      'ja': '善王モグル・モグXII世討滅戦',
      'ko': '선왕 모그루 모그 XII세 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 30
  },
  214: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '完成集团战训练！',
      'de': 'Einer für alle, alle für einen',
      'en': 'Basic Training: Enemy Parties',
      'fr': 'Entraînement<Indent/>: groupes d\'ennemis',
      'ja': '集団戦訓練をくぐり抜けろ！',
      'ko': '집단전 훈련을 완수하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 16
  },
  215: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '突破所有关门，讨伐最深处的敌人！',
      'de': 'Sturmkommando',
      'en': 'Basic Training: Enemy Strongholds',
      'fr': 'Entraînement<Indent/>: in<SoftHyphen/>fil<SoftHyphen/>tra<SoftHyphen/>tion en base ennemie',
      'ja': '全関門を突破し、最深部の敵を討て！',
      'ko': '관문을 돌파하고 최심부의 적을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 9
  },
  216: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '捕获金币龟！',
      'de': 'Gil oder Leben',
      'en': 'Hero on the Half Shell',
      'fr': 'Reconquête d\'une carapace escamotée',
      'ja': 'ギルガメを捕獲せよ！',
      'ko': '길거북을 사로잡아라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 10
  },
  219: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '击溃哥布林炸弹军团！',
      'de': 'Bombige Goblins',
      'en': 'Flicking Sticks and Taking Names',
      'fr': 'Les Gobelins bombardiers',
      'ja': '爆弾魔ゴブリン軍団を撃滅せよ！',
      'ko': '폭탄광 고블린 군단을 섬멸하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  220: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐梦幻之布拉奇希奥！',
      'de': 'Briaxio ausschalten',
      'en': 'All\'s Well that Ends in the Well',
      'fr': 'Briaxio à bras raccourcis',
      'ja': '夢幻のブラキシオを討て！',
      'ko': '몽환의 브라크시오를 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 5
  },
  221: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐污染源头魔界花！',
      'de': 'Tödliches Rankenspiel',
      'en': 'More than a Feeler',
      'fr': 'Sus au morbol pollueur',
      'ja': '汚染源モルボルを討て！',
      'ko': '오염원 몰볼을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 20
  },
  222: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐坑道中出现的妖异！',
      'de': 'Gefahr aus dem Nichts',
      'en': 'Annoy the Void',
      'fr': 'Buso l\'immolateur',
      'ja': '坑道に現れた妖異ブソを討て！',
      'ko': '갱도에 나타난 요마 부소를 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 17
  },
  223: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '注意无敌的眷属，讨伐大型妖异！',
      'de': 'Kampf gegen Schatten',
      'en': 'Shadow and Claw',
      'fr': 'Ombres et griffes',
      'ja': '無敵の眷属を従えし、大型妖異を討て！',
      'ko': '무적의 부하를 조종하는 요마를 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  241: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章1',
      'de': 'Verschlungene Schatten 1',
      'en': 'The Binding Coil of Bahamut - Turn 1',
      'fr': 'Le Labyrinthe de Bahamut I',
      'ja': '大迷宮バハムート：邂逅編1',
      'ko': '대미궁 바하무트: 해후편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  242: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章2',
      'de': 'Verschlungene Schatten 2',
      'en': 'The Binding Coil of Bahamut - Turn 2',
      'fr': 'Le Labyrinthe de Bahamut II',
      'ja': '大迷宮バハムート：邂逅編2',
      'ko': '대미궁 바하무트: 해후편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  243: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章3',
      'de': 'Verschlungene Schatten 3',
      'en': 'The Binding Coil of Bahamut - Turn 3',
      'fr': 'Le Labyrinthe de Bahamut III',
      'ja': '大迷宮バハムート：邂逅編3',
      'ko': '대미궁 바하무트: 해후편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  244: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章4',
      'de': 'Verschlungene Schatten 4',
      'en': 'The Binding Coil of Bahamut - Turn 4',
      'fr': 'Le Labyrinthe de Bahamut IV',
      'ja': '大迷宮バハムート：邂逅編4',
      'ko': '대미궁 바하무트: 해후편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  245: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章5',
      'de': 'Verschlungene Schatten 5',
      'en': 'The Binding Coil of Bahamut - Turn 5',
      'fr': 'Le Labyrinthe de Bahamut V',
      'ja': '大迷宮バハムート：邂逅編5',
      'ko': '대미궁 바하무트: 해후편 5'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  250: {
    'exVersion': 0,
    'name': {
      'cn': '狼狱停船场',
      'de': 'Wolfshöhlen-Pier',
      'en': 'Wolves\' Den Pier',
      'fr': 'Jetée de l\'Antre des loups',
      'ja': 'ウルヴズジェイル係船場',
      'ko': '늑대우리 부두'
    },
    'offsetX': -77,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 29
  },
  281: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '利维亚桑歼灭战',
      'de': 'Götterdämmerung - Leviathan',
      'en': 'The <Emphasis>Whorleater</Emphasis> (Hard)',
      'fr': 'Le Briseur de marées (brutal)',
      'ja': '真リヴァイアサン討滅戦',
      'ko': '진 리바이어선 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  292: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '伊弗利特歼灭战',
      'de': 'Götterdämmerung - Ifrit',
      'en': 'The Bowl of Embers (Hard)',
      'fr': 'Le Cratère des tisons (brutal)',
      'ja': '真イフリート討滅戦',
      'ko': '진 이프리트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 25
  },
  293: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '泰坦歼灭战',
      'de': 'Götterdämmerung - Titan',
      'en': 'The Navel (Hard)',
      'fr': 'Le Nombril (brutal)',
      'ja': '真タイタン討滅戦',
      'ko': '진 타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  294: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '迦楼罗歼灭战',
      'de': 'Götterdämmerung - Garuda',
      'en': 'The Howling Eye (Hard)',
      'fr': 'Hurlœil (brutal)',
      'ja': '真ガルーダ討滅戦',
      'ko': '진 가루다 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  295: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '伊弗利特歼殛战',
      'de': 'Zenit der Götter - Ifrit',
      'en': 'The Bowl of Embers (Extreme)',
      'fr': 'Le Cratère des tisons (extrême)',
      'ja': '極イフリート討滅戦',
      'ko': '극 이프리트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 25
  },
  296: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '泰坦歼殛战',
      'de': 'Zenit der Götter - Titan',
      'en': 'The Navel (Extreme)',
      'fr': 'Le Nombril (extrême)',
      'ja': '極タイタン討滅戦',
      'ko': '극 타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  297: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '迦楼罗歼殛战',
      'de': 'Zenit der Götter - Garuda',
      'en': 'The Howling Eye (Extreme)',
      'fr': 'Hurlœil (extrême)',
      'ja': '極ガルーダ討滅戦',
      'ko': '극 가루다 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  298: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐爆弹怪的女王！',
      'de': 'Miss Bombastic',
      'en': 'Long Live the Queen',
      'fr': 'Longue vie à la Reine',
      'ja': 'ボムを率いる「ボムクイーン」を討て！',
      'ko': '봄을 거느린 \'봄 여왕\'을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  299: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '歼灭特殊阵型的妖异！',
      'de': 'Unzertrennlich',
      'en': 'Ward Up',
      'fr': 'Quintettes infernaux',
      'ja': '不気味な陣形を組む妖異をせん滅せよ！',
      'ko': '불길한 진형을 짜는 요마를 섬멸하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 22
  },
  300: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '制止三方混战的巨人族，守住遗物！',
      'de': 'Wuchtige Dreifaltigkeit',
      'en': 'Solemn Trinity',
      'fr': 'Trinité sinistre',
      'ja': '三つ巴の巨人族を制し、遺物を守れ！',
      'ko': '세 거인족을 제압하여 유물을 지켜내라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 22
  },
  348: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '究极神兵破坏作战',
      'de': 'Heldenlied von Ultima',
      'en': 'The Minstrel\'s Ballad: Ultima\'s Bane',
      'fr': 'Le fléau d\'Ultima',
      'ja': '究極幻想 アルテマウェポン破壊作戦',
      'ko': '알테마 웨폰 파괴작전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 31
  },
  349: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '骚乱坑道铜铃铜山',
      'de': 'Kupferglocken-Mine (schwer)',
      'en': 'Copperbell Mines (Hard)',
      'fr': 'Les Mines de Clochecuivre (brutal)',
      'ja': '騒乱坑道 カッパーベル銅山 (Hard)',
      'ko': '구리종 광산(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  350: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '恶灵府邸静语庄园',
      'de': 'Haukke-Herrenhaus (schwer)',
      'en': 'Haukke Manor (Hard)',
      'fr': 'Le Manoir des Haukke (brutal)',
      'ja': '妖異屋敷 ハウケタ御用邸 (Hard)',
      'ko': '하우케타 별궁(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  353: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '活动挑战2',
      'de': 'Event-Inhalt 1',
      'en': 'Special Event I',
      'fr': 'Défi spécial I',
      'ja': 'イベント用コンテンツ：1',
      'ko': '이벤트용 임무: 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  354: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '活动挑战3',
      'de': 'Event-Inhalt 2',
      'en': 'Special Event II',
      'fr': 'Défi spécial II',
      'ja': 'イベント用コンテンツ：2',
      'ko': '이벤트용 임무: 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 103
  },
  355: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章1',
      'de': 'Verschlungene Schatten 2 - 1',
      'en': 'The Second Coil of Bahamut - Turn 1',
      'fr': 'Les Méandres de Bahamut I',
      'ja': '大迷宮バハムート：侵攻編1',
      'ko': '대미궁 바하무트: 침공편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  356: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章2',
      'de': 'Verschlungene Schatten 2 - 2',
      'en': 'The Second Coil of Bahamut - Turn 2',
      'fr': 'Les Méandres de Bahamut II',
      'ja': '大迷宮バハムート：侵攻編2',
      'ko': '대미궁 바하무트: 침공편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  357: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章3',
      'de': 'Verschlungene Schatten 2 - 3',
      'en': 'The Second Coil of Bahamut - Turn 3',
      'fr': 'Les Méandres de Bahamut III',
      'ja': '大迷宮バハムート：侵攻編3',
      'ko': '대미궁 바하무트: 침공편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  358: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章4',
      'de': 'Verschlungene Schatten 2 - 4',
      'en': 'The Second Coil of Bahamut - Turn 4',
      'fr': 'Les Méandres de Bahamut IV',
      'ja': '大迷宮バハムート：侵攻編4',
      'ko': '대미궁 바하무트: 침공편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  359: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '利维亚桑歼殛战',
      'de': 'Zenit der Götter - Leviathan',
      'en': 'The <Emphasis>Whorleater</Emphasis> (Extreme)',
      'fr': 'Le Briseur de marées (extrême)',
      'ja': '極リヴァイアサン討滅戦',
      'ko': '극 리바이어선 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  360: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '剑斗领域日影地修炼所',
      'de': 'Halatali (schwer)',
      'en': 'Halatali (Hard)',
      'fr': 'Halatali (brutal)',
      'ja': '剣闘領域 ハラタリ修練所 (Hard)',
      'ko': '할라탈리 수련장(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  361: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '财宝传说破舰岛',
      'de': 'Schiffbrecher-Insel',
      'en': 'Hullbreaker Isle',
      'fr': 'L\'Île de Crèvecarène',
      'ja': '財宝伝説 ハルブレーカー・アイル',
      'ko': '난파선의 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  362: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '纷争要地布雷福洛克斯野营地',
      'de': 'Brüllvolx\' Langrast (schwer)',
      'en': 'Brayflox\'s Longstop (Hard)',
      'fr': 'Le Bivouac de Brayflox (brutal)',
      'ja': '盟友支援 ブレイフロクスの野営地 (Hard)',
      'ko': '브레이플록스의 야영지(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 37
  },
  363: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '腐坏遗迹无限城市街古迹',
      'de': 'Historisches Amdapor',
      'en': 'The Lost City of Amdapor',
      'fr': 'Les Vestiges de la cité d\'Amdapor',
      'ja': '腐敗遺跡 古アムダプール市街',
      'ko': '옛 암다포르 시가지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  364: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '莫古力贤王歼殛战',
      'de': 'Königliche Konfrontation (extrem)',
      'en': 'Thornmarch (Extreme)',
      'fr': 'La Lisière de ronces (extrême)',
      'ja': '極王モグル・モグXII世討滅戦',
      'ko': '극왕 모그루 모그 XII세 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 30
  },
  365: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '激战城塞石卫塔',
      'de': 'Steinerne Wacht (schwer)',
      'en': 'The Stone Vigil (Hard)',
      'fr': 'Le Vigile de Pierre (brutal)',
      'ja': '城塞奪回 ストーンヴィジル (Hard)',
      'ko': '돌방패 경계초소(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  366: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '大桥上的决斗',
      'de': 'Duell auf der großen Brücke',
      'en': 'Battle on the Big Bridge',
      'fr': 'Affrontement sur le grand pont',
      'ja': 'ギルガメッシュ討伐戦',
      'ko': '길가메시 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  367: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '苏醒遗迹喀恩埋没圣堂',
      'de': 'Versunkener Tempel von Qarn (schwer)',
      'en': 'The Sunken Temple of Qarn (Hard)',
      'fr': 'Le Temple enseveli de Qarn (brutal)',
      'ja': '遺跡救援 カルン埋没寺院 (Hard)',
      'ko': '카른의 무너진 사원(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 41
  },
  368: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '死化奇美拉讨伐战',
      'de': 'Kampf gegen die Dhorme-Chimära',
      'en': 'A Relic Reborn: the Chimera',
      'fr': 'La chimère dhorme du Coerthas',
      'ja': 'ドルムキマイラ討伐戦',
      'ko': '도름 키마이라 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  369: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '海德拉讨伐战',
      'de': 'Kampf gegen die Hydra',
      'en': 'A Relic Reborn: the Hydra',
      'fr': 'L\'hydre d\'Halatali',
      'ja': 'ハイドラ討伐戦',
      'ko': '하이드라 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  371: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '凛冽洞天披雪大冰壁',
      'de': 'Das Schneekleid',
      'en': 'Snowcloak',
      'fr': 'Manteneige',
      'ja': '氷結潜窟 スノークローク大氷壁',
      'ko': '얼음외투 대빙벽'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  372: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '水晶塔 希尔科斯塔',
      'de': 'Kristallturm - Der Syrcus-Turm',
      'en': 'Syrcus Tower',
      'fr': 'La Tour de Cristal - Tour de Syrcus',
      'ja': 'クリスタルタワー：シルクスの塔',
      'ko': '크리스탈 타워: 시르쿠스 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  373: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '惨剧灵殿塔姆·塔拉墓园',
      'de': 'Totenacker Tam-Tara (schwer)',
      'en': 'The Tam–Tara Deepcroft (Hard)',
      'fr': 'L\'Hypogée de Tam-Tara (brutal)',
      'ja': '惨劇霊殿 タムタラの墓所 (Hard)',
      'ko': '탐타라 묘소(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 300,
    'weatherRate': 0
  },
  374: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '拉姆歼灭战',
      'de': 'Götterdämmerung - Ramuh',
      'en': 'The Striking Tree (Hard)',
      'fr': 'L\'Arbre du jugement (brutal)',
      'ja': '真ラムウ討滅戦',
      'ko': '진 라무 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 43
  },
  375: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '拉姆歼殛战',
      'de': 'Zenit der Götter - Ramuh',
      'en': 'The Striking Tree (Extreme)',
      'fr': 'L\'Arbre du jugement (extrême)',
      'ja': '極ラムウ討滅戦',
      'ko': '극 라무 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 43
  },
  376: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '周边遗迹群 (阵地战)',
      'de': 'Äußere Ruinen (Sicherung)',
      'en': 'The Borderland Ruins (Secure)',
      'fr': 'Les Ruines frontalières (annexion)',
      'ja': '外縁遺跡群 (制圧戦)',
      'ko': '외곽 유적지대(제압전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  377: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '希瓦歼灭战',
      'de': 'Götterdämmerung - Shiva',
      'en': 'The Akh Afah Amphitheatre (Hard)',
      'fr': 'L\'Amphithéâtre d\'Akh Afah (brutal)',
      'ja': '真シヴァ討滅戦',
      'ko': '진 시바 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  378: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '希瓦歼殛战',
      'de': 'Zenit der Götter - Shiva',
      'en': 'The Akh Afah Amphitheatre (Extreme)',
      'fr': 'L\'Amphithéâtre d\'Akh Afah (extrême)',
      'ja': '極シヴァ討滅戦',
      'ko': '극 시바 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  380: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章1',
      'de': 'Verschlungene Schatten 2 - 1 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 1',
      'fr': 'Les Méandres de Bahamut I (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編1',
      'ko': '대미궁 바하무트: 침공편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  381: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章2',
      'de': 'Verschlungene Schatten 2 - 2 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 2',
      'fr': 'Les Méandres de Bahamut II (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編2',
      'ko': '대미궁 바하무트: 침공편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  382: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章3',
      'de': 'Verschlungene Schatten 2 - 3 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 3',
      'fr': 'Les Méandres de Bahamut III (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編3',
      'ko': '대미궁 바하무트: 침공편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  383: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章4',
      'de': 'Verschlungene Schatten 2 - 4 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 4',
      'fr': 'Les Méandres de Bahamut IV (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編4',
      'ko': '대미궁 바하무트: 침공편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  387: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '逆转要害沙斯塔夏溶洞',
      'de': 'Sastasha (schwer)',
      'en': 'Sastasha (Hard)',
      'fr': 'Sastasha (brutal)',
      'ja': '逆襲要害 サスタシャ浸食洞 (Hard)',
      'ko': '사스타샤 침식 동굴(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  389: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：太阳海岸',
      'de': 'Chocobo-Rennen: Sonnenküste',
      'en': 'Chocobo Race: Costa del Sol',
      'fr': 'Course de chocobos<Indent/>: Costa del Sol',
      'ja': 'チョコボレース：コスタ・デル・ソル',
      'ko': '초코보 경주: 코스타 델 솔'
    },
    'offsetX': -472,
    'offsetY': -424,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  390: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：荒野大道',
      'de': 'Chocobo-Rennen: Sagolii-Straße',
      'en': 'Chocobo Race: Sagolii Road',
      'fr': 'Course de chocobos<Indent/>: Route de Sagolii',
      'ja': 'チョコボレース：サゴリーロード',
      'ko': '초코보 경주: 사골리 사막'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  391: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：恬静小路',
      'de': 'Chocobo-Rennen: Pfad der Seelenruhe',
      'en': 'Chocobo Race: Tranquil Paths',
      'fr': 'Course de chocobos<Indent/>: Sentes tranquilles',
      'ja': 'チョコボレース：トランキルパス',
      'ko': '초코보 경주: 고요한 야영지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  394: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '奥丁歼灭战',
      'de': 'Jenseits Urths Quelle',
      'en': 'Urth\'s Fount',
      'fr': 'La Fontaine d\'Urth',
      'ja': '闘神オーディン討滅戦',
      'ko': '투신 오딘 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 45
  },
  396: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '无限城的死斗',
      'de': 'Revanche in den Ruinen',
      'en': 'Battle in the Big Keep',
      'fr': 'Revanche au vieux château',
      'ja': '真ギルガメッシュ討滅戦',
      'ko': '진 길가메시 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  397: {
    'exVersion': 1,
    'name': {
      'cn': '库尔札斯西部高地',
      'de': 'Westliches Hochland von Coerthas',
      'en': 'Coerthas Western Highlands',
      'fr': 'Hautes terres du Coerthas occidental',
      'ja': 'クルザス西部高地',
      'ko': '커르다스 서부고지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 49
  },
  398: {
    'exVersion': 1,
    'name': {
      'cn': '龙堡参天高地',
      'de': 'Dravanisches Vorland',
      'en': 'The Dravanian Forelands',
      'fr': 'Avant-pays dravanien',
      'ja': '高地ドラヴァニア',
      'ko': '고지 드라바니아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 50
  },
  399: {
    'exVersion': 1,
    'name': {
      'cn': '龙堡内陆低地',
      'de': 'Dravanisches Hinterland',
      'en': 'The Dravanian Hinterlands',
      'fr': 'Arrière-pays dravanien',
      'ja': '低地ドラヴァニア',
      'ko': '저지 드라바니아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 51
  },
  400: {
    'exVersion': 1,
    'name': {
      'cn': '翻云雾海',
      'de': 'Wallende Nebel',
      'en': 'The Churning Mists',
      'fr': 'L\'Écume des cieux de Dravania',
      'ja': 'ドラヴァニア雲海',
      'ko': '드라바니아 구름바다'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 52
  },
  401: {
    'exVersion': 1,
    'name': {
      'cn': '阿巴拉提亚云海',
      'de': 'Abalathisches Wolkenmeer',
      'en': 'The Sea of Clouds',
      'fr': 'L\'Écume des cieux d\'Abalathia',
      'ja': 'アバラシア雲海',
      'ko': '아발라시아 구름바다'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 53
  },
  402: {
    'exVersion': 1,
    'name': {
      'cn': '魔大陆阿济兹拉',
      'de': 'Azys Lla',
      'en': 'Azys Lla',
      'fr': 'Azys Lla',
      'ja': 'アジス・ラー',
      'ko': '아지스 라'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 54
  },
  403: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '英雄归来',
      'de': 'Verrat der Qalyana',
      'en': 'Return of the Bull',
      'fr': 'Retour au bercail',
      'ja': '英雄の帰還',
      'ko': '영웅의 귀환'
    },
    'offsetX': -250,
    'offsetY': 128,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  416: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '学识宝库迦巴勒幻想图书馆',
      'de': 'Große Gubal-Bibliothek',
      'en': 'The Great Gubal Library',
      'fr': 'La Grande bibliothèque de Gubal',
      'ja': '禁書回収 グブラ幻想図書館',
      'ko': '구브라 환상도서관'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  417: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：竞赛教学',
      'de': 'Chocobo-Rennen: Übungsbahn',
      'en': 'Chocobo Race: Tutorial',
      'fr': 'Course d\'appentissage',
      'ja': 'チョコボレース：チュートリアル',
      'ko': '초코보 경주: 튜토리얼'
    },
    'offsetX': 0,
    'offsetY': -690,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  418: {
    'exVersion': 1,
    'name': {
      'cn': '伊修加德基础层',
      'de': 'Fundamente',
      'en': 'Foundation',
      'fr': 'Ishgard - L\'Assise',
      'ja': 'イシュガルド：下層',
      'ko': '이슈가르드 하층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 47
  },
  419: {
    'exVersion': 1,
    'name': {
      'cn': '伊修加德砥柱层',
      'de': 'Strebewerk',
      'en': 'The Pillars',
      'fr': 'Ishgard - Les Contreforts',
      'ja': 'イシュガルド：上層',
      'ko': '이슈가르드 상층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 48
  },
  420: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '空中神域不获岛',
      'de': 'Nimmerreich',
      'en': 'Neverreap',
      'fr': 'Nalloncques',
      'ja': '神域浮島 ネバーリープ',
      'ko': '거두지 않는 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  421: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '圣教中枢伊修加德教皇厅',
      'de': 'Erzbasilika',
      'en': 'The Vault',
      'fr': 'La Voûte',
      'ja': '強硬突入 イシュガルド教皇庁',
      'ko': '이슈가르드 교황청'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  426: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '那布里亚勒斯讨伐战',
      'de': 'Chrysalis',
      'en': 'The Chrysalis',
      'fr': 'La Chrysalide',
      'ja': 'アシエン・ナプリアレス討伐戦',
      'ko': '아씨엔 나브리알레스 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  430: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '博物战舰无限回廊',
      'de': 'Die Fraktal-Kontinuum',
      'en': 'The Fractal Continuum',
      'fr': 'Le Continuum fractal',
      'ja': '博物戦艦 フラクタル・コンティニアム',
      'ko': '무한연속 박물함'
    },
    'offsetX': 0,
    'offsetY': -213,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  431: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '尘封秘岩 (争夺战)',
      'de': 'Robbenholm (Eroberung)',
      'en': 'Seal Rock (Seize)',
      'fr': 'Le Rocher des tréfonds (invasion)',
      'ja': 'シールロック (争奪戦)',
      'ko': '봉인된 바위섬(쟁탈전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 59
  },
  432: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '罗波那歼灭战',
      'de': 'Götterdämmerung - Ravana',
      'en': 'Thok ast Thok (Hard)',
      'fr': 'Thok ast Thok (brutal)',
      'ja': '真ラーヴァナ討滅戦',
      'ko': '진 라바나 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 57
  },
  434: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '冰雪废堡暮卫塔',
      'de': 'Abendrot-Wacht',
      'en': 'The Dusk Vigil',
      'fr': 'Le Vigile du Crépuscule',
      'ja': '廃砦捜索 ダスクヴィジル',
      'ko': '어스름 요새'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  435: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '邪龙王座龙巢神殿',
      'de': 'Nest des Drachen',
      'en': 'The Aery',
      'fr': 'L\'Aire',
      'ja': '邪竜血戦 ドラゴンズエアリー',
      'ko': '용의 둥지'
    },
    'offsetX': -40,
    'offsetY': 55,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  436: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '俾斯麦歼灭战',
      'de': 'Götterdämmerung - Bismarck',
      'en': 'The Limitless Blue (Hard)',
      'fr': 'L\'Immensité bleue (brutal)',
      'ja': '真ビスマルク討滅戦',
      'ko': '진 비스마르크 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  437: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '圆桌骑士歼灭战',
      'de': 'Singularitäts-Reaktor',
      'en': 'The Singularity Reactor',
      'fr': 'Le Réacteur de singularité',
      'ja': 'ナイツ・オブ・ラウンド討滅戦',
      'ko': '나이츠 오브 라운드 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 56
  },
  438: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '血战苍穹魔科学研究所',
      'de': 'Ätherochemisches For<SoftHyphen/>schungs<SoftHyphen/>labor',
      'en': 'The Aetherochemical Research Facility',
      'fr': 'Le Laboratoire de magismologie',
      'ja': '蒼天聖戦 魔科学研究所',
      'ko': '마과학 연구소'
    },
    'offsetX': -18,
    'offsetY': 149,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  441: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天山绝顶索姆阿尔灵峰',
      'de': 'Sohm Al',
      'en': 'Sohm Al',
      'fr': 'Sohm Al',
      'ja': '霊峰踏破 ソーム・アル',
      'ko': '솜 알'
    },
    'offsetX': 185,
    'offsetY': 51,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  442: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章1',
      'de': 'Alexander - Faust des Vaters',
      'en': 'Alexander - The Fist of the Father',
      'fr': 'Alexander - Le Poing du Père',
      'ja': '機工城アレキサンダー：起動編1',
      'ko': '기공성 알렉산더: 기동편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  443: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章2',
      'de': 'Alexander - Elle des Vaters',
      'en': 'Alexander - The Cuff of the Father',
      'fr': 'Alexander - Le Poignet du Père',
      'ja': '機工城アレキサンダー：起動編2',
      'ko': '기공성 알렉산더: 기동편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  444: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章3',
      'de': 'Alexander - Arm des Vaters',
      'en': 'Alexander - The Arm of the Father',
      'fr': 'Alexander - Le Bras du Père',
      'ja': '機工城アレキサンダー：起動編3',
      'ko': '기공성 알렉산더: 기동편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  445: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章4',
      'de': 'Alexander - Last des Vaters',
      'en': 'Alexander - The Burden of the Father',
      'fr': 'Alexander - Le Fardeau du Père',
      'ja': '機工城アレキサンダー：起動編4',
      'ko': '기공성 알렉산더: 기동편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  446: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '罗波那歼殛战',
      'de': 'Zenit der Götter - Ravana',
      'en': 'Thok ast Thok (Extreme)',
      'fr': 'Thok ast Thok (extrême)',
      'ja': '極ラーヴァナ討滅戦',
      'ko': '극 라바나 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 57
  },
  447: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '俾斯麦歼殛战',
      'de': 'Zenit der Götter - Bismarck',
      'en': 'The Limitless Blue (Extreme)',
      'fr': 'L\'Immensité bleue (extrême)',
      'ja': '極ビスマルク討滅戦',
      'ko': '극 비스마르크 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  448: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '圆桌骑士幻想歼灭战',
      'de': 'Heldenlied von Thordans Fall',
      'en': 'The Minstrel\'s Ballad: Thordan\'s Reign',
      'fr': 'Le règne de Thordan',
      'ja': '蒼天幻想 ナイツ・オブ・ラウンド討滅戦',
      'ko': '극 나이츠 오브 라운드 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 56
  },
  449: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章1',
      'de': 'Alexander - Faust des Vaters (episch)',
      'en': 'Alexander - The Fist of the Father (Savage)',
      'fr': 'Alexander - Le Poing du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編1',
      'ko': '기공성 알렉산더: 기동편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  450: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章2',
      'de': 'Alexander - Elle des Vaters (episch)',
      'en': 'Alexander - The Cuff of the Father (Savage)',
      'fr': 'Alexander - Le Poignet du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編2',
      'ko': '기공성 알렉산더: 기동편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  451: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章3',
      'de': 'Alexander - Arm des Vaters (episch)',
      'en': 'Alexander - The Arm of the Father (Savage)',
      'fr': 'Alexander - Le Bras du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編3',
      'ko': '기공성 알렉산더: 기동편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  452: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章4',
      'de': 'Alexander - Last des Vaters (episch)',
      'en': 'Alexander - The Burden of the Father (Savage)',
      'fr': 'Alexander - Le Fardeau du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編4',
      'ko': '기공성 알렉산더: 기동편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  478: {
    'exVersion': 1,
    'name': {
      'cn': '田园郡',
      'de': 'Frohehalde',
      'en': 'Idyllshire',
      'fr': 'Idyllée',
      'ja': 'イディルシャイア',
      'ko': '이딜샤이어'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 55
  },
  506: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：大赛对战（人机对战）',
      'de': 'Kampf der Trabanten: Turnier (gegen Arenameister)',
      'en': 'LoVM: Master Tournament',
      'fr': 'Bataille de tournoi contre l\'ordinateur',
      'ja': 'LoVM：大会対戦 (CPU対戦)',
      'ko': '꼬마 친구 공방전: 대회 대결(인공 지능 대결)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  508: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '魔航船虚无方舟',
      'de': 'Die Nichts-Arche',
      'en': 'The Void Ark',
      'fr': 'L\'Arche du néant',
      'ja': '魔航船ヴォイドアーク',
      'ko': '보이드의 방주'
    },
    'offsetX': 289,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 37
  },
  509: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '活动挑战1',
      'de': 'Event-Inhalt 3',
      'en': 'Special Event III',
      'fr': 'Défi spécial III',
      'ja': 'イベント用コンテンツ：3',
      'ko': '이벤트용 임무: 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  510: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '地脉灵灯天狼星灯塔',
      'de': 'Pharos Sirius (schwer)',
      'en': 'Pharos Sirius (Hard)',
      'fr': 'Le Phare de Sirius (brutal)',
      'ja': '制圧巨塔 シリウス大灯台 (Hard)',
      'ko': '시리우스 대등대(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  511: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '草木庭园圣茉夏娜植物园',
      'de': 'Sankt Mocianne-Arboretum',
      'en': 'Saint Mocianne\'s Arboretum',
      'fr': 'L\'Arboretum Sainte-Mocianne',
      'ja': '草木庭園 聖モシャーヌ植物園',
      'ko': '성 모샨 식물원'
    },
    'offsetX': 40,
    'offsetY': 6,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  512: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛白昼探索',
      'de': 'Das Diadem (leicht)',
      'en': 'The Diadem (Easy)',
      'fr': 'Le Diadème (facile)',
      'ja': '雲海探索 ディアデム諸島 (Easy)',
      'ko': '디아뎀 제도(쉬움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 60
  },
  515: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛夜晚探索',
      'de': 'Das Diadem (schwer)',
      'en': 'The Diadem (Hard)',
      'fr': 'Le Diadème (brutal)',
      'ja': '雲海探索 ディアデム諸島 (Hard)',
      'ko': '디아뎀 제도(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 62
  },
  516: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '星海空间颠倒塔',
      'de': 'Antiturm',
      'en': 'The Antitower',
      'fr': 'L\'Antitour',
      'ja': '星海観測 逆さの塔',
      'ko': '거꾸로 선 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  517: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '萨菲洛特歼灭战',
      'de': 'Götterdämmerung - Sephirot',
      'en': 'Containment Bay S1T7',
      'fr': 'Unité de contention S1P7',
      'ja': '魔神セフィロト討滅戦',
      'ko': '마신 세피로트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 66
  },
  519: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '神圣遗迹无限城市街古迹',
      'de': 'Historisches Amdapor (schwer)',
      'en': 'The Lost City of Amdapor (Hard)',
      'fr': 'Les Vestiges de la cité d\'Amdapor (brutal)',
      'ja': '神聖遺跡 古アムダプール市街 (Hard)',
      'ko': '옛 암다포르 시가지(어려움)'
    },
    'offsetX': 64,
    'offsetY': 315,
    'sizeFactor': 200,
    'weatherRate': 63
  },
  520: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章1',
      'de': 'Alexander - Faust des Sohnes',
      'en': 'Alexander - The Fist of the Son',
      'fr': 'Alexander - Le Poing du Fils',
      'ja': '機工城アレキサンダー：律動編1',
      'ko': '기공성 알렉산더: 율동편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  521: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章2',
      'de': 'Alexander - Elle des Sohnes',
      'en': 'Alexander - The Cuff of the Son',
      'fr': 'Alexander - Le Poignet du Fils',
      'ja': '機工城アレキサンダー：律動編2',
      'ko': '기공성 알렉산더: 율동편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  522: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章3',
      'de': 'Alexander - Arm des Sohnes',
      'en': 'Alexander - The Arm of the Son',
      'fr': 'Alexander - Le Bras du Fils',
      'ja': '機工城アレキサンダー：律動編3',
      'ko': '기공성 알렉산더: 율동편 3'
    },
    'offsetX': -110,
    'offsetY': -170,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  523: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章4',
      'de': 'Alexander - Last des Sohnes',
      'en': 'Alexander - The Burden of the Son',
      'fr': 'Alexander - Le Fardeau du Fils',
      'ja': '機工城アレキサンダー：律動編4',
      'ko': '기공성 알렉산더: 율동편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  524: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '萨菲洛特歼殛战',
      'de': 'Zenit der Götter - Sephirot',
      'en': 'Containment Bay S1T7 (Extreme)',
      'fr': 'Unité de contention S1P7 (extrême)',
      'ja': '極魔神セフィロト討滅戦',
      'ko': '극 마신 세피로트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 66
  },
  529: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章1',
      'de': 'Alexander - Faust des Sohnes (episch)',
      'en': 'Alexander - The Fist of the Son (Savage)',
      'fr': 'Alexander - Le Poing du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編1',
      'ko': '기공성 알렉산더: 율동편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  530: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章2',
      'de': 'Alexander - Elle des Sohnes (episch)',
      'en': 'Alexander - The Cuff of the Son (Savage)',
      'fr': 'Alexander - Le Poignet du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編2',
      'ko': '기공성 알렉산더: 율동편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  531: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章3',
      'de': 'Alexander - Arm des Sohnes (episch)',
      'en': 'Alexander - The Arm of the Son (Savage)',
      'fr': 'Alexander - Le Bras du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編3',
      'ko': '기공성 알렉산더: 율동편(영웅) 3'
    },
    'offsetX': -110,
    'offsetY': -170,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  532: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章4',
      'de': 'Alexander - Last des Sohnes (episch)',
      'en': 'Alexander - The Burden of the Son (Savage)',
      'fr': 'Alexander - Le Fardeau du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編4',
      'ko': '기공성 알렉산더: 율동편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  533: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '四国联合军演',
      'de': 'Truppenübung der Eorzäischen Allianz',
      'en': 'A Spectacle for the Ages',
      'fr': 'La grande manœuvre éorzéenne',
      'ja': '四国合同演習',
      'ko': '4개국 합동 훈련'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  537: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '躲避范围攻击',
      'de': 'Flächenangriffen ausweichen',
      'en': 'Avoid Area of Effect Attacks',
      'fr': 'Éviter les attaques à aire d\'effet',
      'ja': '範囲攻撃を避けよう！',
      'ko': '범위 공격을 피하자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  538: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '掌握仇恨连击',
      'de': 'Mit Kombos Feindseligkeit auf sich ziehen',
      'en': 'Execute a Combo to Increase Enmity',
      'fr': 'Générer de l\'inimitié avec un combo',
      'ja': 'コンボで敵視を集めよう！',
      'ko': '콤보를 이어 적개심을 끌자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  539: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '控制敌人的仇恨',
      'de': 'Kombos im Kampf einsetzen',
      'en': 'Execute a Combo in Battle',
      'fr': 'Effectuer le combo en combat',
      'ja': '実戦でコンボに挑戦しよう！',
      'ko': '실전에서 콤보를 사용해보자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  540: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '控制多个敌人的仇恨',
      'de': 'Feindseligkeit mehrerer Gegner auf sich ziehen',
      'en': 'Accrue Enmity from Multiple Targets',
      'fr': 'Attirer l\'inimitié de plusieurs ennemis sur soi',
      'ja': '複数の敵から敵視を集めよう！',
      'ko': '다수의 적에게서 적개심을 끌자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  541: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '实战控制多个敌人的仇恨',
      'de': 'Gegen mehrere Gegner auf einmal kämpfen',
      'en': 'Engage Multiple Targets',
      'fr': 'Affronter plusieurs ennemis',
      'ja': '実戦で複数の敵と戦ってみよう！',
      'ko': '실전에서 다수의 적과 싸워보자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  542: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '控制远处敌人的仇恨',
      'de': 'Aus der Ferne Feindseligkeit auf sich ziehen',
      'en': 'Execute a Ranged Attack to Increase Enmity',
      'fr': 'Générer de l\'inimitié à distance',
      'ja': '遠距離から敵視を集めよう！',
      'ko': '멀리서 적개심을 끌자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  543: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '留心增援的敌人',
      'de': 'Feindliche Verstärkung aufhalten',
      'en': 'Engage Enemy Reinforcements',
      'fr': 'Faire face à des renforts ennemis',
      'ja': '敵の増援に対応しよう！',
      'ko': '적 지원군에 대처하자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  544: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '配合防护职业打倒单个敌人',
      'de': 'Gegner gemeinsam besiegen',
      'en': 'Assist Allies in Defeating a Target',
      'fr': 'Vaincre un ennemi en assistant des alliés',
      'ja': '味方と協力して敵を倒そう！',
      'ko': '파티원과 협력하여 적을 물리치자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  545: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '配合防护职业打倒多个敌人',
      'de': 'Den Gegner eines Verbündeten besiegen',
      'en': 'Defeat an Occupied Target',
      'fr': 'Vaincre un ennemi occupé par un allié',
      'ja': '味方が引きつけている敵を倒そう！',
      'ko': '파티원과 같은 적을 공격하자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  546: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '躲避范围攻击的同时进行战斗',
      'de': 'Angriffen ausweichen',
      'en': 'Avoid Engaged Targets',
      'fr': 'Combattre en évitant les attaques ennemies',
      'ja': '敵の攻撃を避けながら戦おう！',
      'ko': '적의 공격을 피하면서 싸우자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  548: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '灵活运用场地机关',
      'de': 'Mit dem Gelände interagieren',
      'en': 'Interact with the Battlefield',
      'fr': 'Interagir avec le décor en combat',
      'ja': 'ギミックを活用して戦おう！',
      'ko': '특수 장치를 활용하며 싸우자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  549: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '治疗防护职业',
      'de': 'Verbündete heilen',
      'en': 'Heal an Ally',
      'fr': 'Soigner un allié',
      'ja': '味方を回復しよう！',
      'ko': '파티원을 회복시키자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  550: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '治疗小队队员',
      'de': 'Mehrere Verbündete heilen',
      'en': 'Heal Multiple Allies',
      'fr': 'Soigner plusieurs alliés',
      'ja': '複数の味方を回復しよう！',
      'ko': '다수의 파티원을 회복시키자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  552: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '最终训练',
      'de': 'Letzte Übung',
      'en': 'Final Exercise',
      'fr': 'Exercice final',
      'ja': '最終訓練！',
      'ko': '마지막 훈련!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  554: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '荣誉野 (碎冰战)',
      'de': 'Feld der Ehre (Zersplitterung)',
      'en': 'The Fields of Glory (Shatter)',
      'fr': 'Les Champs de la Gloire (brise-glace)',
      'ja': 'フィールド・オブ・グローリー (砕氷戦)',
      'ko': '영광의 평원(쇄빙전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 67
  },
  555: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天龙宫殿忆罪宫',
      'de': 'Sohr Khai',
      'en': 'Sohr Khai',
      'fr': 'Sohr Khai',
      'ja': '天竜宮殿 ソール・カイ',
      'ko': '소르 카이'
    },
    'offsetX': 370,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  556: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '禁忌城邦玛哈',
      'de': 'Die Stadt der Tränen',
      'en': 'The Weeping City of Mhach',
      'fr': 'La Cité défendue de Mhach',
      'ja': '禁忌都市マハ',
      'ko': '금기도시 마하'
    },
    'offsetX': -40,
    'offsetY': -40,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  557: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '黑涡传说破舰岛',
      'de': 'Schiffbrecher-Insel (schwer)',
      'en': 'Hullbreaker Isle (Hard)',
      'fr': 'L\'Île de Crèvecarène (brutal)',
      'ja': '黒渦伝説 ハルブレーカー・アイル (Hard)',
      'ko': '난파선의 섬(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 68
  },
  558: {
    'contentType': 9,
    'exVersion': 0,
    'name': {
      'cn': '水城宝物库',
      'de': 'Aquapolis',
      'en': 'The Aquapolis',
      'fr': 'L\'Aquapole',
      'ja': '宝物庫 アクアポリス',
      'ko': '보물고 아쿠아폴리스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  559: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '尼德霍格征龙战',
      'de': 'Der letzte Schicksalsweg',
      'en': 'The Final Steps of Faith',
      'fr': 'La Dernière avancée de la Foi',
      'ja': 'ニーズヘッグ征竜戦',
      'ko': '니드호그 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  560: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '雷古拉·范·休著斯追击战',
      'de': 'Blutiges Wieder<SoftHyphen/>sehen',
      'en': 'A Bloody Reunion',
      'fr': 'Course-poursuite dans le laboratoire',
      'ja': 'レグラ・ヴァン・ヒュドルス追撃戦',
      'ko': '레굴라 반 히드루스 추격전'
    },
    'offsetX': -18,
    'offsetY': 149,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  561: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下1～10层',
      'de': 'Palast der Toten (Ebenen 1-10)',
      'en': 'The Palace of the Dead (Floors 1-10)',
      'fr': 'Le Palais des morts (sous-sols 1-10)',
      'ja': '死者の宮殿 B1～B10',
      'ko': '망자의 궁전 B1~B10'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  562: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下11～20层',
      'de': 'Palast der Toten (Ebenen 11-20)',
      'en': 'The Palace of the Dead (Floors 11-20)',
      'fr': 'Le Palais des morts (sous-sols 11-20)',
      'ja': '死者の宮殿 B11～B20',
      'ko': '망자의 궁전 B11~B20'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  563: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下21～30层',
      'de': 'Palast der Toten (Ebenen 21-30)',
      'en': 'The Palace of the Dead (Floors 21-30)',
      'fr': 'Le Palais des morts (sous-sols 21-30)',
      'ja': '死者の宮殿 B21～B30',
      'ko': '망자의 궁전 B21~B30'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  564: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下31～40层',
      'de': 'Palast der Toten (Ebenen 31-40)',
      'en': 'The Palace of the Dead (Floors 31-40)',
      'fr': 'Le Palais des morts (sous-sols 31-40)',
      'ja': '死者の宮殿 B31～B40',
      'ko': '망자의 궁전 B31~B40'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  565: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下41～50层',
      'de': 'Palast der Toten (Ebenen 41-50)',
      'en': 'The Palace of the Dead (Floors 41-50)',
      'fr': 'Le Palais des morts (sous-sols 41-50)',
      'ja': '死者の宮殿 B41～B50',
      'ko': '망자의 궁전 B41~B50'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  566: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '尼德霍格传奇征龙战',
      'de': 'Das Lied von Nidhoggs letztem Ruf',
      'en': 'The Minstrel\'s Ballad: Nidhogg\'s Rage',
      'fr': 'L\'ire de Nidhogg',
      'ja': '極ニーズヘッグ征竜戦',
      'ko': '극 니드호그 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  571: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '亡灵府邸闹鬼庄园',
      'de': 'Das Geisterschloss',
      'en': 'The Haunted Manor',
      'fr': 'Le Manoir hanté',
      'ja': '亡霊屋敷 ホーンテッドマナー',
      'ko': '유령의 집'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  572: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '险峻峡谷塞尔法特尔溪谷',
      'de': 'Xelphatol',
      'en': 'Xelphatol',
      'fr': 'Xelphatol',
      'ja': '峻厳渓谷 ゼルファトル',
      'ko': '젤파톨'
    },
    'offsetX': -148,
    'offsetY': 35,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  576: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '索菲娅歼灭战',
      'de': 'Götterdämmerung - Sophia',
      'en': 'Containment Bay P1T6',
      'fr': 'Unité de contention P1P6',
      'ja': '女神ソフィア討滅戦',
      'ko': '여신 소피아 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 69
  },
  577: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '索菲娅歼殛战',
      'de': 'Zenit der Götter - Sophia',
      'en': 'Containment Bay P1T6 (Extreme)',
      'fr': 'Unité de contention P1P6 (extrême)',
      'ja': '極女神ソフィア討滅戦',
      'ko': '극 여신 소피아 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 69
  },
  578: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '秘本宝库迦巴勒幻想图书馆',
      'de': 'Große Gubal-Bibliothek (schwer)',
      'en': 'The Great Gubal Library (Hard)',
      'fr': 'La Grande bibliothèque de Gubal (brutal)',
      'ja': '稀書回収 グブラ幻想図書館 (Hard)',
      'ko': '구브라 환상도서관(어려움)'
    },
    'offsetX': 116,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  579: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '九宫幻卡：幻卡对局室',
      'de': 'Triple Triad: Weltensalon',
      'en': 'The Triple Triad Battlehall',
      'fr': 'Arène Triple Triade',
      'ja': 'トリプルトライアド：カードバトルルーム',
      'ko': '트리플 트라이어드: 카드 대결장'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 800,
    'weatherRate': 0
  },
  580: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章1',
      'de': 'Alexander - Augen des Schöpfers',
      'en': 'Alexander - The Eyes of the Creator',
      'fr': 'Alexander - Les Yeux du Créateur',
      'ja': '機工城アレキサンダー：天動編1',
      'ko': '기공성 알렉산더: 천동편 1'
    },
    'offsetX': 75,
    'offsetY': 14,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  581: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章2',
      'de': 'Alexander - Atem des Schöpfers',
      'en': 'Alexander - The Breath of the Creator',
      'fr': 'Alexander - Le Souffle du Créateur',
      'ja': '機工城アレキサンダー：天動編2',
      'ko': '기공성 알렉산더: 천동편 2'
    },
    'offsetX': 0,
    'offsetY': -80,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  582: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章3',
      'de': 'Alexander - Herz des Schöpfers',
      'en': 'Alexander - The Heart of the Creator',
      'fr': 'Alexander - Le Cœur du Créateur',
      'ja': '機工城アレキサンダー：天動編3',
      'ko': '기공성 알렉산더: 천동편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  583: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章4',
      'de': 'Alexander - Seele des Schöpfers',
      'en': 'Alexander - The Soul of the Creator',
      'fr': 'Alexander - L\'Âme du Créateur',
      'ja': '機工城アレキサンダー：天動編4',
      'ko': '기공성 알렉산더: 천동편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  584: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章1',
      'de': 'Alexander - Augen des Schöpfers (episch)',
      'en': 'Alexander - The Eyes of the Creator (Savage)',
      'fr': 'Alexander - Les Yeux du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編1',
      'ko': '기공성 알렉산더: 천동편(영웅) 1'
    },
    'offsetX': 75,
    'offsetY': 14,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  585: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章2',
      'de': 'Alexander - Atem des Schöpfers (episch)',
      'en': 'Alexander - The Breath of the Creator (Savage)',
      'fr': 'Alexander - Le Souffle du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編2',
      'ko': '기공성 알렉산더: 천동편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': -80,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  586: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章3',
      'de': 'Alexander - Herz des Schöpfers (episch)',
      'en': 'Alexander - The Heart of the Creator (Savage)',
      'fr': 'Alexander - Le Cœur du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編3',
      'ko': '기공성 알렉산더: 천동편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  587: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章4',
      'de': 'Alexander - Seele des Schöpfers (episch)',
      'en': 'Alexander - The Soul of the Creator (Savage)',
      'fr': 'Alexander - L\'Âme du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編4',
      'ko': '기공성 알렉산더: 천동편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  589: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：玩家对战（绩点赛）',
      'de': 'Kampf der Trabanten: Gegen Spieler (um RP)',
      'en': 'LoVM: Player Battle (RP)',
      'fr': 'Bataille simple contre un joueur (avec PR)',
      'ja': 'LoVM：プレイヤー対戦 (RP変動あり)',
      'ko': '꼬마 친구 공방전: 플레이어 대결(RP 변동 있음)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  590: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：大赛对战（玩家对战）',
      'de': 'Kampf der Trabanten: Turnier (gegen Spieler)',
      'en': 'LoVM: Tournament',
      'fr': 'Bataille de tournoi contre des joueurs',
      'ja': 'LoVM：大会対戦 (プレイヤー対戦）',
      'ko': '꼬마 친구 공방전: 대회 대결(플레이어 대결)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  591: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：玩家对战（无绩点赛）',
      'de': 'Kampf der Trabanten: Gegen Spieler (ohne RP)',
      'en': 'LoVM: Player Battle (Non-RP)',
      'fr': 'Bataille simple contre un joueur (sans PR)',
      'ja': 'LoVM：プレイヤー対戦 (RP変動なし)',
      'ko': '꼬마 친구 공방전: 플레이어 대결(RP 변동 없음)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  592: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '纠缠不清的宿命',
      'de': 'Weltenübergreifendes Schicksal',
      'en': 'One Life for One World',
      'fr': 'Destins entrecroisés',
      'ja': '絡み合う宿命',
      'ko': '뒤얽히는 숙명'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  593: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下51～60层',
      'de': 'Palast der Toten (Ebenen 51 - 60)',
      'en': 'The Palace of the Dead (Floors 51-60)',
      'fr': 'Le Palais des morts (sous-sols 51-60)',
      'ja': '死者の宮殿 B51～B60',
      'ko': '망자의 궁전 B51~B60'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  594: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下61～70层',
      'de': 'Palast der Toten (Ebenen 61 - 70)',
      'en': 'The Palace of the Dead (Floors 61-70)',
      'fr': 'Le Palais des morts (sous-sols 61-70)',
      'ja': '死者の宮殿 B61～B70',
      'ko': '망자의 궁전 B61~B70'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  595: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下71～80层',
      'de': 'Palast der Toten (Ebenen 71 - 80)',
      'en': 'The Palace of the Dead (Floors 71-80)',
      'fr': 'Le Palais des morts (sous-sols 71-80)',
      'ja': '死者の宮殿 B71～B80',
      'ko': '망자의 궁전 B71~B80'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  596: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下81～90层',
      'de': 'Palast der Toten (Ebenen 81 - 90)',
      'en': 'The Palace of the Dead (Floors 81-90)',
      'fr': 'Le Palais des morts (sous-sols 81-90)',
      'ja': '死者の宮殿 B81～B90',
      'ko': '망자의 궁전 B81~B90'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  597: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下91～100层',
      'de': 'Palast der Toten (Ebenen 91 - 100)',
      'en': 'The Palace of the Dead (Floors 91-100)',
      'fr': 'Le Palais des morts (sous-sols 91-100)',
      'ja': '死者の宮殿 B91～B100',
      'ko': '망자의 궁전 B91~B100'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  598: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下101～110层',
      'de': 'Palast der Toten (Ebenen 101 - 110)',
      'en': 'The Palace of the Dead (Floors 101-110)',
      'fr': 'Le Palais des morts (sous-sols 101-110)',
      'ja': '死者の宮殿 B101～B110',
      'ko': '망자의 궁전 B101~B110'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  599: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下111～120层',
      'de': 'Palast der Toten (Ebenen 111 - 120)',
      'en': 'The Palace of the Dead (Floors 111-120)',
      'fr': 'Le Palais des morts (sous-sols 111-120)',
      'ja': '死者の宮殿 B111～B120',
      'ko': '망자의 궁전 B111~B120'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  600: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下121～130层',
      'de': 'Palast der Toten (Ebenen 121 - 130)',
      'en': 'The Palace of the Dead (Floors 121-130)',
      'fr': 'Le Palais des morts (sous-sols 121-130)',
      'ja': '死者の宮殿 B121～B130',
      'ko': '망자의 궁전 B121~B130'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  601: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下131～140层',
      'de': 'Palast der Toten (Ebenen 131 - 140)',
      'en': 'The Palace of the Dead (Floors 131-140)',
      'fr': 'Le Palais des morts (sous-sols 131-140)',
      'ja': '死者の宮殿 B131～B140',
      'ko': '망자의 궁전 B131~B140'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  602: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下141～150层',
      'de': 'Palast der Toten (Ebenen 141 - 150)',
      'en': 'The Palace of the Dead (Floors 141-150)',
      'fr': 'Le Palais des morts (sous-sols 141-150)',
      'ja': '死者の宮殿 B141～B150',
      'ko': '망자의 궁전 B141~B150'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  603: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下151～160层',
      'de': 'Palast der Toten (Ebenen 151 - 160)',
      'en': 'The Palace of the Dead (Floors 151-160)',
      'fr': 'Le Palais des morts (sous-sols 151-160)',
      'ja': '死者の宮殿 B151～B160',
      'ko': '망자의 궁전 B151~B160'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  604: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下161～170层',
      'de': 'Palast der Toten (Ebenen 161 - 170)',
      'en': 'The Palace of the Dead (Floors 161-170)',
      'fr': 'Le Palais des morts (sous-sols 161-170)',
      'ja': '死者の宮殿 B161～B170',
      'ko': '망자의 궁전 B161~B170'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  605: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下171～180层',
      'de': 'Palast der Toten (Ebenen 171 - 180)',
      'en': 'The Palace of the Dead (Floors 171-180)',
      'fr': 'Le Palais des morts (sous-sols 171-180)',
      'ja': '死者の宮殿 B171～B180',
      'ko': '망자의 궁전 B171~B180'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  606: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下181～190层',
      'de': 'Palast der Toten (Ebenen 181 - 190)',
      'en': 'The Palace of the Dead (Floors 181-190)',
      'fr': 'Le Palais des morts (sous-sols 181-190)',
      'ja': '死者の宮殿 B181～B190',
      'ko': '망자의 궁전 B181~B190'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  607: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下191～200层',
      'de': 'Palast der Toten (Ebenen 191 - 200)',
      'en': 'The Palace of the Dead (Floors 191-200)',
      'fr': 'Le Palais des morts (sous-sols 191-200)',
      'ja': '死者の宮殿 B191～B200',
      'ko': '망자의 궁전 B191~B200'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  612: {
    'exVersion': 2,
    'name': {
      'cn': '基拉巴尼亚边区',
      'de': 'Abanisches Grenzland',
      'en': 'The Fringes',
      'fr': 'Les Marges',
      'ja': 'ギラバニア辺境地帯',
      'ko': '기라바니아 변방지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 79
  },
  613: {
    'exVersion': 2,
    'name': {
      'cn': '红玉海',
      'de': 'Rubinsee',
      'en': 'The Ruby Sea',
      'fr': 'Mer de Rubis',
      'ja': '紅玉海',
      'ko': '홍옥해'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 83
  },
  614: {
    'exVersion': 2,
    'name': {
      'cn': '延夏',
      'de': 'Yanxia',
      'en': 'Yanxia',
      'fr': 'Yanxia',
      'ja': 'ヤンサ',
      'ko': '얀샤'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 84
  },
  615: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '坚牢铁壁巴埃萨长城',
      'de': 'Baelsar-Wall',
      'en': 'Baelsar\'s Wall',
      'fr': 'La Muraille de Baelsar',
      'ja': '巨大防壁 バエサルの長城',
      'ko': '바일사르 장성'
    },
    'offsetX': 182,
    'offsetY': 32,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  616: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '海底宫殿紫水宫',
      'de': 'Shisui',
      'en': 'Shisui of the Violet Tides',
      'fr': 'Le Palais aux Marées violettes',
      'ja': '海底宮殿 紫水宮',
      'ko': '시스이 궁'
    },
    'offsetX': 0,
    'offsetY': 35,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  617: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天山深境索姆阿尔灵峰',
      'de': 'Sohm Al (schwer)',
      'en': 'Sohm Al (Hard)',
      'fr': 'Sohm Al (brutal)',
      'ja': '霊峰浄化 ソーム・アル (Hard)',
      'ko': '솜 알(어려움)'
    },
    'offsetX': 128,
    'offsetY': -32,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  620: {
    'exVersion': 2,
    'name': {
      'cn': '基拉巴尼亚山区',
      'de': 'Die Zinnen',
      'en': 'The Peaks',
      'fr': 'Les Pics',
      'ja': 'ギラバニア山岳地帯',
      'ko': '기라바니아 산악지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 80
  },
  621: {
    'exVersion': 2,
    'name': {
      'cn': '基拉巴尼亚湖区',
      'de': 'Das Fenn',
      'en': 'The Lochs',
      'fr': 'Les Lacs',
      'ja': 'ギラバニア湖畔地帯',
      'ko': '기라바니아 호반지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 81
  },
  622: {
    'exVersion': 2,
    'name': {
      'cn': '太阳神草原',
      'de': 'Azim-Steppe',
      'en': 'The Azim Steppe',
      'fr': 'Steppe d\'Azim',
      'ja': 'アジムステップ',
      'ko': '아짐 대초원'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  623: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '试炼行路巴儿达木霸道',
      'de': 'Bardams Probe',
      'en': 'Bardam\'s Mettle',
      'fr': 'La Force de Bardam',
      'ja': '伝統試練 バルダム覇道',
      'ko': '바르담 패도'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  624: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛白昼探索（狩猎专用）',
      'de': 'Das Diadem - Jagdgründe (leicht)',
      'en': 'The Diadem Hunting Grounds (Easy)',
      'fr': 'Le Diadème<Indent/>: terrains de chasse (facile)',
      'ja': '雲海探索 ディアデム諸島：狩猟限定 (Easy)',
      'ko': '디아뎀 제도: 전투 한정(쉬움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 60
  },
  625: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛黄昏探索（狩猎专用）',
      'de': 'Das Diadem - Jagdgründe',
      'en': 'The Diadem Hunting Grounds',
      'fr': 'Le Diadème<Indent/>: terrains de chasse',
      'ja': '雲海探索 ディアデム諸島：狩猟限定',
      'ko': '디아뎀 제도: 전투 한정'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 61
  },
  626: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '漂流海域妖歌海',
      'de': 'Sirenen-See',
      'en': 'The Sirensong Sea',
      'fr': 'La Mer du Chant des sirènes',
      'ja': '漂流海域 セイレーン海',
      'ko': '세이렌 해'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 36
  },
  627: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '影之国',
      'de': 'Dun Scaith',
      'en': 'Dun Scaith',
      'fr': 'Dun Scaith',
      'ja': '影の国ダン・スカー',
      'ko': '둔 스카'
    },
    'offsetX': -350,
    'offsetY': -400,
    'sizeFactor': 200,
    'weatherRate': 58
  },
  628: {
    'exVersion': 2,
    'name': {
      'cn': '黄金港',
      'de': 'Kugane',
      'en': 'Kugane',
      'fr': 'Kugane',
      'ja': 'クガネ',
      'ko': '쿠가네'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 82
  },
  630: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛战争神猎场',
      'de': 'Das Diadem - Halones Prüfung',
      'en': 'The Diadem - Trials of the Fury',
      'fr': 'Le Diadème - Épreuves de Halone',
      'ja': '雲海探索 ディアデム諸島 (狩猟)',
      'ko': '디아뎀 제도: 전투'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 71
  },
  633: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '加尔提诺平原遭遇战',
      'de': 'Heliodrom',
      'en': 'The Carteneau Flats: Heliodrome',
      'fr': 'Rixe à l\'Héliodrome',
      'ja': 'カルテノー平原遭遇戦',
      'ko': '카르테노 평원 조우전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  635: {
    'exVersion': 2,
    'name': {
      'cn': '神拳痕',
      'de': 'Rhalgrs Wacht',
      'en': 'Rhalgr\'s Reach',
      'fr': 'L\'Étendue de Rhalgr',
      'ja': 'ラールガーズリーチ',
      'ko': '랄거의 손길'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 78
  },
  637: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '祖尔宛歼灭战',
      'de': 'Götterdämmerung - Zurvan',
      'en': 'Containment Bay Z1T9',
      'fr': 'Unité de contention Z1P9',
      'ja': '鬼神ズルワーン討滅戦',
      'ko': '귀신 주르반 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 75
  },
  638: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '祖尔宛歼殛战',
      'de': 'Zenit der Götter - Zurvan',
      'en': 'Containment Bay Z1T9 (Extreme)',
      'fr': 'Unité de contention Z1P9 (extrême)',
      'ja': '極鬼神ズルワーン討滅戦',
      'ko': '극 귀신 주르반 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 75
  },
  656: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛丰饶神福地',
      'de': 'Das Diadem - Nophicas Prüfung',
      'en': 'The Diadem - Trials of the Matron',
      'fr': 'Le Diadème - Épreuves de Nophica',
      'ja': '雲海探索 ディアデム諸島 (採集)',
      'ko': '디아뎀 제도: 채집'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 71
  },
  660: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '解放决战多玛王城',
      'de': 'Burg Doma',
      'en': 'Doma Castle',
      'fr': 'Le Château de Doma',
      'ja': '解放決戦 ドマ城',
      'ko': '도마 성'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  661: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '巨炮要塞帝国白山堡',
      'de': 'Castrum Abania',
      'en': 'Castrum Abania',
      'fr': 'Castrum Abania',
      'ja': '巨砲要塞 カストルム・アバニア',
      'ko': '카스트룸 아바니아'
    },
    'offsetX': 72,
    'offsetY': -186,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  662: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '恶党孤城黄金阁',
      'de': 'Schloss Kugane',
      'en': 'Kugane Castle',
      'fr': 'Le Château de Kugane',
      'ja': '悪党成敗 クガネ城',
      'ko': '쿠가네 성'
    },
    'offsetX': 70,
    'offsetY': 33,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  663: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '修行古刹星导寺',
      'de': 'Tempel der Faust',
      'en': 'The Temple of the Fist',
      'fr': 'Le Temple du Poing',
      'ja': '壊神修行 星導山寺院',
      'ko': '성도산 사원'
    },
    'offsetX': -427,
    'offsetY': -314,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  665: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '鱼道现身！',
      'de': 'Ein zweifelhaftes Angebot',
      'en': 'It\'s Probably a Trap',
      'fr': 'Un drôle de Namazu',
      'ja': 'ギョドウ現る！',
      'ko': '교도 등장!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  674: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '须佐之男歼灭战',
      'de': 'Götterdämmerung - Susano',
      'en': 'The Pool of Tribute',
      'fr': 'La Crique aux tributs',
      'ja': 'スサノオ討滅戦',
      'ko': '스사노오 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 77
  },
  677: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '须佐之男歼殛战',
      'de': 'Zenit der Götter - Susano',
      'en': 'The Pool of Tribute (Extreme)',
      'fr': 'La Crique aux tributs (extrême)',
      'ja': '極スサノオ討滅戦',
      'ko': '극 스사노오 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 77
  },
  679: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '神龙歼灭战',
      'de': 'Königliche Menagerie',
      'en': 'The Royal Menagerie',
      'fr': 'La Ménagerie royale',
      'ja': '神龍討滅戦',
      'ko': '신룡 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 76
  },
  684: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '于里昂热的秘策',
      'de': 'Wege zur Transzendenz',
      'en': 'The Resonant',
      'fr': 'La ruse d\'Urianger',
      'ja': 'ウリエンジェの秘策',
      'ko': '위리앙제의 비책'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  688: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '那达慕',
      'de': 'Naadam',
      'en': 'Naadam',
      'fr': 'La grande bataille du Naadam',
      'ja': '終節の合戦',
      'ko': '계절끝 합전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  689: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '鏖战红莲阿拉米格',
      'de': 'Ala Mhigo',
      'en': 'Ala Mhigo',
      'fr': 'Ala Mhigo',
      'ja': '紅蓮決戦 アラミゴ',
      'ko': '알라미고'
    },
    'offsetX': 292,
    'offsetY': -163,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  690: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '时空狭缝外缘',
      'de': 'Interdimensionaler Riss',
      'en': 'Interdimensional Rift',
      'fr': 'Fissure interdimensionnelle',
      'ja': '次元の狭間：外縁',
      'ko': '차원의 틈: 외곽'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 88
  },
  691: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境1',
      'de': 'Deltametrie 1.0',
      'en': 'Deltascape V1.0',
      'fr': 'Deltastice v1.0',
      'ja': '次元の狭間オメガ：デルタ編1',
      'ko': '차원의 틈 오메가: 델타편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  692: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境2',
      'de': 'Deltametrie 2.0',
      'en': 'Deltascape V2.0',
      'fr': 'Deltastice v2.0',
      'ja': '次元の狭間オメガ：デルタ編2',
      'ko': '차원의 틈 오메가: 델타편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  693: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境3',
      'de': 'Deltametrie 3.0',
      'en': 'Deltascape V3.0',
      'fr': 'Deltastice v3.0',
      'ja': '次元の狭間オメガ：デルタ編3',
      'ko': '차원의 틈 오메가: 델타편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  694: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境4',
      'de': 'Deltametrie 4.0',
      'en': 'Deltascape V4.0',
      'fr': 'Deltastice v4.0',
      'ja': '次元の狭間オメガ：デルタ編4',
      'ko': '차원의 틈 오메가: 델타편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  695: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境1',
      'de': 'Deltametrie 1.0 (episch)',
      'en': 'Deltascape V1.0 (Savage)',
      'fr': 'Deltastice v1.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編1',
      'ko': '차원의 틈 오메가: 델타편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  696: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境2',
      'de': 'Deltametrie 2.0 (episch)',
      'en': 'Deltascape V2.0 (Savage)',
      'fr': 'Deltastice v2.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編2',
      'ko': '차원의 틈 오메가: 델타편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  697: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境3',
      'de': 'Deltametrie 3.0 (episch)',
      'en': 'Deltascape V3.0 (Savage)',
      'fr': 'Deltastice v3.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編3',
      'ko': '차원의 틈 오메가: 델타편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  698: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境4',
      'de': 'Deltametrie 4.0 (episch)',
      'en': 'Deltascape V4.0 (Savage)',
      'fr': 'Deltastice v4.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編4',
      'ko': '차원의 틈 오메가: 델타편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  705: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '大会开始',
      'de': 'Thal zu Ehren',
      'en': 'In Thal\'s Name',
      'fr': 'Le tournoi commémoratif du sultanat',
      'ja': 'ウル王杯闘技会の始まり',
      'ko': '울다하 왕실배 투기대회'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 8
  },
  706: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '为了更强',
      'de': 'Die hohe Kunst des Schwertkampfs',
      'en': 'Raising the Sword',
      'fr': 'La finale des champions',
      'ja': 'さらなる剣術の高みへ',
      'ko': '더 높은 검술의 경지로'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 8
  },
  707: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '抗争之力',
      'de': 'Die Kraft des Widerstands',
      'en': 'With Heart and Steel',
      'fr': 'Transmigration démoniaque',
      'ja': '抗う力',
      'ko': '맞서는 힘'
    },
    'offsetX': 298,
    'offsetY': 350,
    'sizeFactor': 200,
    'weatherRate': 37
  },
  708: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '海都路人身首异',
      'de': 'Mord ist sein Hobby',
      'en': 'Blood on the Deck',
      'fr': 'La légende de Musosai<Indent/>: l\'assassin de Limsa Lominsa',
      'ja': '海都を震わす人斬りの宴！',
      'ko': '해양도시를 흔드는 살인자의 연회!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  709: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '极恶之人木枯',
      'de': 'Der Inbegriff des Bösen',
      'en': 'The Face of True Evil',
      'fr': 'L\'abominable Kogarashi',
      'ja': '極悪人コガラシ',
      'ko': '극악무도한 코가라시'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 49
  },
  710: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '松叶门外之变',
      'de': 'Vorfall auf dem Matsuba-Platz',
      'en': 'Matsuba Mayhem',
      'fr': 'Règlement de compte au square Matsuba',
      'ja': '松葉門外の変',
      'ko': '마츠바 사변'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 82
  },
  711: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '决战龟甲岛',
      'de': 'Ent<SoftHyphen/>schei<SoftHyphen/>dungs<SoftHyphen/>schlacht auf Bekko',
      'en': 'The Battle on Bekko',
      'fr': 'L\'af<SoftHyphen/>fron<SoftHyphen/>te<SoftHyphen/>ment de deux justices',
      'ja': 'ベッコウ島の決闘',
      'ko': '베코우 섬의 결투'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 83
  },
  712: {
    'contentType': 9,
    'exVersion': 2,
    'name': {
      'cn': '运河宝物库',
      'de': 'Kanäle von Uznair',
      'en': 'The Lost Canals of Uznair',
      'fr': 'Les Canaux perdus d\'Uznair',
      'ja': '宝物庫 ウズネアカナル',
      'ko': '보물고 우즈네어 운하'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  713: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '漆黑的巨龙',
      'de': 'Der tobende Drache',
      'en': 'Dark as the Night Sky',
      'fr': 'Aussi sombre que la nuit',
      'ja': '漆黒の巨竜',
      'ko': '칠흑의 거룡'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  714: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '红血之龙骑士',
      'de': 'Der Rubin-Drachenreiter',
      'en': 'Dragon Sound',
      'fr': 'Le Dragon écarlate',
      'ja': '紅の竜騎士',
      'ko': '붉은 용기사'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  715: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '遥远的憧憬',
      'de': 'Probe des Meisters',
      'en': 'The Orphans and the Broken Blade',
      'fr': 'L\'aspiration refoulée',
      'ja': 'あと三度、遥かな憧憬',
      'ko': '앞으로 세 번, 아득한 동경'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 86
  },
  716: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '再次相见',
      'de': 'Aus der Tiefe des Herzens',
      'en': 'Our Compromise',
      'fr': 'La dernière séparation',
      'ja': 'あと一度、君に会えたら',
      'ko': '앞으로 한 번, 너와 만날 수 있다면'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 28
  },
  717: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '原初的战士',
      'de': 'Die Urkraft in ihr',
      'en': 'Curious Gorge Meets His Match',
      'fr': 'L\'épreuve de force',
      'ja': '原初的な彼女',
      'ko': '원초적 그녀'
    },
    'offsetX': -77,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  718: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '燃烧吧高吉',
      'de': 'Kriegerische Leidenschaft',
      'en': 'The Heart of the Problem',
      'fr': 'Passion guerrière',
      'ja': '燃えよゴージ！',
      'ko': '불타올라라, 산골짜기!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  719: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '吉祥天女歼灭战',
      'de': 'Götterdämmerung - Lakshmi',
      'en': 'Emanation',
      'fr': 'Émanation',
      'ja': 'ラクシュミ討滅戦',
      'ko': '락슈미 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 87
  },
  720: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '吉祥天女歼殛战',
      'de': 'Zenit der Götter - Lakshmi',
      'en': 'Emanation (Extreme)',
      'fr': 'Émanation (extrême)',
      'ja': '極ラクシュミ討滅戦',
      'ko': '극 락슈미 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 87
  },
  722: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '穿越时空的夙愿',
      'de': 'Ein Wunsch aus alten Zeiten',
      'en': 'Our Unsung Heroes',
      'fr': 'L\'espoir en héritage',
      'ja': '時をかける願い',
      'ko': '시간을 뛰어넘은 염원'
    },
    'offsetX': -175,
    'offsetY': -297,
    'sizeFactor': 200,
    'weatherRate': 63
  },
  723: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '影隐忍法贴',
      'de': 'Aus dem Verborgenen',
      'en': 'When Clans Collide',
      'fr': 'La bataille des clans',
      'ja': '影隠忍法帖',
      'ko': '그림자 인법첩'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  725: {
    'contentType': 9,
    'exVersion': 2,
    'name': {
      'cn': '运河宝物库深层',
      'de': 'Vergessene Kanäle von Uznair',
      'en': 'The Hidden Canals of Uznair',
      'fr': 'Les Canaux cachés d\'Uznair',
      'ja': '宝物庫 ウズネアカナル深層',
      'ko': '보물고 우즈네어 운하 심층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  729: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '距骨研究所 (机动战)',
      'de': 'Astragalos',
      'en': 'Astragalos',
      'fr': 'Astragalos (machinerie)',
      'ja': 'アストラガロス (機工戦)',
      'ko': '아스트라갈로스(기공전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  730: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '神龙梦幻歼灭战',
      'de': 'Heldenlied von Shinryu',
      'en': 'The Minstrel\'s Ballad: Shinryu\'s Domain',
      'fr': 'Le domaine de Shinryu',
      'ja': '極神龍討滅戦',
      'ko': '극 신룡 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 76
  },
  731: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '沉没神殿斯卡拉遗迹',
      'de': 'Die versunkene Stadt Skalla',
      'en': 'The Drowned City of Skalla',
      'fr': 'La Cité engloutie de Skalla',
      'ja': '水没遺構 スカラ',
      'ko': '스칼라 유적'
    },
    'offsetX': 185,
    'offsetY': 5,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  732: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 常风之地',
      'de': 'Eureka Anemos',
      'en': 'The Forbidden Land, Eureka Anemos',
      'fr': 'Eurêka Anemos',
      'ja': '禁断の地 エウレカ：アネモス編',
      'ko': '금단의 땅 에우레카: 아네모스편'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 91
  },
  733: {
    'contentType': 28,
    'exVersion': 2,
    'name': {
      'cn': '巴哈姆特绝境战',
      'de': 'Endlose Schatten von Bahamut (fatal)',
      'en': 'The Unending Coil of Bahamut (Ultimate)',
      'fr': 'L\'Abîme infini de Bahamut (fatal)',
      'ja': '絶バハムート討滅戦',
      'ko': '절 바하무트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  734: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '失落之都拉巴纳斯塔',
      'de': 'Rabanastre',
      'en': 'The Royal City of Rabanastre',
      'fr': 'La Cité royale de Rabanastre',
      'ja': '失われた都 ラバナスタ',
      'ko': '왕도 라바나스터'
    },
    'offsetX': 300,
    'offsetY': -100,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  741: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '良缘仪式',
      'de': 'Valentionzeremonie',
      'en': 'The Valentione\'s Ceremony',
      'fr': 'La Cérémonie de la Valention',
      'ja': 'ヴァレンティオンセレモニー',
      'ko': '발렌티온 예식장'
    },
    'offsetX': 0,
    'offsetY': 125,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  742: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '红玉火山狱之盖',
      'de': 'Höllenspund',
      'en': 'Hells\' Lid',
      'fr': 'Le Couvercle des enfers',
      'ja': '紅玉火山 獄之蓋',
      'ko': '지옥뚜껑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  743: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '疯狂战舰无限回廊',
      'de': 'Die Fraktal-Kontinuum (schwer)',
      'en': 'The Fractal Continuum (Hard)',
      'fr': 'Le Continuum fractal (brutal)',
      'ja': '暴走戦艦 フラクタル・コンティニアム (Hard)',
      'ko': '무한연속 박물함(어려움)'
    },
    'offsetX': 0,
    'offsetY': 350,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  746: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '白虎镇魂战',
      'de': 'Seelentanz - Byakko',
      'en': 'The Jade Stoa',
      'fr': 'La Clairière de Jade',
      'ja': '白虎征魂戦',
      'ko': '백호 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 93
  },
  748: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境1',
      'de': 'Sigmametrie 1.0',
      'en': 'Sigmascape V1.0',
      'fr': 'Sigmastice v1.0',
      'ja': '次元の狭間オメガ：シグマ編1',
      'ko': '차원의 틈 오메가: 시그마편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  749: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境2',
      'de': 'Sigmametrie 2.0',
      'en': 'Sigmascape V2.0',
      'fr': 'Sigmastice v2.0',
      'ja': '次元の狭間オメガ：シグマ編2',
      'ko': '차원의 틈 오메가: 시그마편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  750: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境3',
      'de': 'Sigmametrie 3.0',
      'en': 'Sigmascape V3.0',
      'fr': 'Sigmastice v3.0',
      'ja': '次元の狭間オメガ：シグマ編3',
      'ko': '차원의 틈 오메가: 시그마편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  751: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境4',
      'de': 'Sigmametrie 4.0',
      'en': 'Sigmascape V4.0',
      'fr': 'Sigmastice v4.0',
      'ja': '次元の狭間オメガ：シグマ編4',
      'ko': '차원의 틈 오메가: 시그마편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  752: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境1',
      'de': 'Sigmametrie 1.0 (episch)',
      'en': 'Sigmascape V1.0 (Savage)',
      'fr': 'Sigmastice v1.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編1',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  753: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境2',
      'de': 'Sigmametrie 2.0 (episch)',
      'en': 'Sigmascape V2.0 (Savage)',
      'fr': 'Sigmastice v2.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編2',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  754: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境3',
      'de': 'Sigmametrie 3.0 (episch)',
      'en': 'Sigmascape V3.0 (Savage)',
      'fr': 'Sigmastice v3.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編3',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  755: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境4',
      'de': 'Sigmametrie 4.0 (episch)',
      'en': 'Sigmascape V4.0 (Savage)',
      'fr': 'Sigmastice v4.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編4',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  758: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '白虎诗魂战',
      'de': 'Seelensturm - Byakko',
      'en': 'The Jade Stoa (Extreme)',
      'fr': 'La Clairière de Jade (extrême)',
      'ja': '極白虎征魂戦',
      'ko': '극 백호 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 93
  },
  759: {
    'exVersion': 2,
    'name': {
      'cn': '多玛飞地',
      'de': 'Domanische Enklave',
      'en': 'The Doman Enclave',
      'fr': 'Quartier enclavé de Doma',
      'ja': 'ドマ町人地',
      'ko': '도마 도읍지'
    },
    'offsetX': 23,
    'offsetY': 34,
    'sizeFactor': 400,
    'weatherRate': 84
  },
  761: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '火龙狩猎战',
      'de': 'Jagd auf Rathalos',
      'en': 'The Great Hunt',
      'fr': 'Chasse au Rathalos',
      'ja': 'リオレウス狩猟戦',
      'ko': '리오레우스 수렵전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  762: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '火龙上位狩猎战',
      'de': 'Jagd auf Rathalos (schwer)',
      'en': 'The Great Hunt (Extreme)',
      'fr': 'Chasse au Rathalos (extrême)',
      'ja': '極リオレウス狩猟戦',
      'ko': '극 리오레우스 수렵전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  763: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 恒冰之地',
      'de': 'Eureka Pagos',
      'en': 'The Forbidden Land, Eureka Pagos',
      'fr': 'Eurêka Pagos',
      'ja': '禁断の地 エウレカ：パゴス編',
      'ko': '금단의 땅 에우레카: 파고스편'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 94
  },
  768: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '风水灵庙岩燕庙',
      'de': 'Kompass der Schwalbe',
      'en': 'The Swallow\'s Compass',
      'fr': 'Le Compas de l\'Hirondelle',
      'ja': '風水霊殿 ガンエン廟',
      'ko': '강엔 종묘'
    },
    'offsetX': 240,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  769: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '拂晓的少年',
      'de': 'Der Knabe der Morgenröte',
      'en': 'Emissary of the Dawn',
      'fr': 'Voyage en terre hostile',
      'ja': '「暁」の少年',
      'ko': '\'새벽\'의 소년'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  770: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 1～10层',
      'de': 'Himmelssäule (Ebenen 1-10)',
      'en': 'Heaven-on-High  (Floors 1-10)',
      'fr': 'Le Pilier des Cieux (étages 1-10)',
      'ja': 'アメノミハシラ 1～10層',
      'ko': '천궁탑 1~10층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  771: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 11～20层',
      'de': 'Himmelssäule (Ebenen 11-20)',
      'en': 'Heaven-on-High  (Floors 11-20)',
      'fr': 'Le Pilier des Cieux (étages 11-20)',
      'ja': 'アメノミハシラ 11～20層',
      'ko': '천궁탑 11~20층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  772: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 21～30层',
      'de': 'Himmelssäule (Ebenen 21-30)',
      'en': 'Heaven-on-High  (Floors 21-30)',
      'fr': 'Le Pilier des Cieux (étages 21-30)',
      'ja': 'アメノミハシラ 21～30層',
      'ko': '천궁탑 21~30층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  773: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 41～50层',
      'de': 'Himmelssäule (Ebenen 41-50)',
      'en': 'Heaven-on-High  (Floors 41-50)',
      'fr': 'Le Pilier des Cieux (étages 41-50)',
      'ja': 'アメノミハシラ 41～50層',
      'ko': '천궁탑 41~50층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  774: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 61～70层',
      'de': 'Himmelssäule (Ebenen 61-70)',
      'en': 'Heaven-on-High  (Floors 61-70)',
      'fr': 'Le Pilier des Cieux (étages 61-70)',
      'ja': 'アメノミハシラ 61～70層',
      'ko': '천궁탑 61~70층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  775: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 81～90层',
      'de': 'Himmelssäule (Ebenen 81-90)',
      'en': 'Heaven-on-High  (Floors 81-90)',
      'fr': 'Le Pilier des Cieux (étages 81-90)',
      'ja': 'アメノミハシラ 81～90層',
      'ko': '천궁탑 81~90층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  776: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '封闭圣塔黎铎拉纳大灯塔',
      'de': 'Richtfeuer von Ridorana',
      'en': 'The Ridorana Lighthouse',
      'fr': 'Le Phare de Ridorana',
      'ja': '封じられた聖塔 リドルアナ',
      'ko': '대등대 리도르아나'
    },
    'offsetX': 202,
    'offsetY': -92,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  777: {
    'contentType': 28,
    'exVersion': 2,
    'name': {
      'cn': '究极神兵绝境战',
      'de': 'Heldenlied von Ultima (fatal)',
      'en': 'The Weapon\'s Refrain (Ultimate)',
      'fr': 'La Fantasmagorie d\'Ultima (fatal)',
      'ja': '絶アルテマウェポン破壊作戦',
      'ko': '절 알테마 웨폰 파괴작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  778: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '月读歼灭战',
      'de': 'Götterdämmerung - Tsukuyomi',
      'en': 'Castrum Fluminis',
      'fr': 'Castrum Fluminis',
      'ja': 'ツクヨミ討滅戦',
      'ko': '츠쿠요미 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  779: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '月读幽夜歼灭战',
      'de': 'Zenit der Götter - Tsukuyomi',
      'en': 'The Minstrel\'s Ballad: Tsukuyomi\'s Pain',
      'fr': 'Castrum Fluminis (extrême)',
      'ja': '極ツクヨミ討滅戦',
      'ko': '극 츠쿠요미 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  782: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 31～40层',
      'de': 'Himmelssäule (Ebenen 31-40)',
      'en': 'Heaven-on-High  (Floors 31-40)',
      'fr': 'Le Pilier des Cieux (étages 31-40)',
      'ja': 'アメノミハシラ 31～40層',
      'ko': '천궁탑 31~40층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  783: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 51～60层',
      'de': 'Himmelssäule (Ebenen 51-60)',
      'en': 'Heaven-on-High  (Floors 51-60)',
      'fr': 'Le Pilier des Cieux (étages 51-60)',
      'ja': 'アメノミハシラ 51～60層',
      'ko': '천궁탑 51~60층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  784: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 71～80层',
      'de': 'Himmelssäule (Ebenen 71-80)',
      'en': 'Heaven-on-High  (Floors 71-80)',
      'fr': 'Le Pilier des Cieux (étages 71-80)',
      'ja': 'アメノミハシラ 71～80層',
      'ko': '천궁탑 71~80층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  785: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 91～100层',
      'de': 'Himmelssäule (Ebenen 91-100)',
      'en': 'Heaven-on-High  (Floors 91-100)',
      'fr': 'Le Pilier des Cieux (étages 91-100)',
      'ja': 'アメノミハシラ 91～100層',
      'ko': '천궁탑 91~100층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  788: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '污染庭园圣茉夏娜植物园',
      'de': 'Sankt Mocianne-Arboretum (schwer)',
      'en': 'Saint Mocianne\'s Arboretum (Hard)',
      'fr': 'L\'Arboretum Sainte-Mocianne (brutal)',
      'ja': '草木汚染 聖モシャーヌ植物園 (Hard)',
      'ko': '성 모샨 식물원(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  789: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '死亡大地终末焦土',
      'de': 'Das Kargland',
      'en': 'The Burn',
      'fr': 'L\'Escarre',
      'ja': '永久焦土 ザ・バーン',
      'ko': '영구 초토지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 97
  },
  790: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '灾厄重现军事演习',
      'de': 'Gedenkschlacht der Eorzäischen Allianz',
      'en': 'The Calamity Retold',
      'fr': 'Les grandes manœuvres commémoratives',
      'ja': '新生祭軍事演習',
      'ko': '신생제 군사훈련'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 95
  },
  791: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '隐塞 (机动战)',
      'de': 'Verborgene Schlucht',
      'en': 'Hidden Gorge',
      'fr': 'Gorge dérobée (machinerie)',
      'ja': 'ヒドゥンゴージ (機工戦)',
      'ko': '숨겨진 보루(기공전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  792: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '虚景跳跳乐大挑战',
      'de': 'Kaktor-Kletterwand',
      'en': 'Leap of Faith',
      'fr': 'Haute voltige',
      'ja': '挑戦！ ジャンピングアスレチック',
      'ko': '뛰어라! 점핑 운동회'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  793: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '国境防线基姆利特暗区',
      'de': 'Die Ghimlyt-Finsternis',
      'en': 'The Ghimlyt Dark',
      'fr': 'Les Ténèbres de Ghimlyt',
      'ja': '境界戦線 ギムリトダーク',
      'ko': '김리트 황야'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  794: {
    'contentType': 9,
    'exVersion': 2,
    'name': {
      'cn': '运河宝物库神殿',
      'de': 'Glücksaltäre von Uznair',
      'en': 'The Shifting Altars of Uznair',
      'fr': 'Le Temple sacré d\'Uznair',
      'ja': '宝物庫 ウズネアカナル祭殿',
      'ko': '보물고 우즈네어 운하 제전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  795: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 涌火之地',
      'de': 'Eureka Pyros',
      'en': 'The Forbidden Land, Eureka Pyros',
      'fr': 'Eurêka Pyros',
      'ja': '禁断の地 エウレカ：ピューロス編',
      'ko': '금단의 땅 에우레카: 피로스편'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 96
  },
  796: {
    'contentType': 27,
    'exVersion': 0,
    'name': {
      'cn': '出道战',
      'de': 'Debüt in der Himmlischen Arena',
      'en': 'All\'s Well That Starts Well',
      'fr': 'Début du spectacle',
      'ja': 'デビューマッチ',
      'ko': '데뷔전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  797: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '楔石洞',
      'de': 'Der Wille der Mondgöttin',
      'en': 'The Will of the Moon',
      'fr': 'Ralliement dans la steppe',
      'ja': '楔石の虚',
      'ko': '쐐기돌 동굴'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  798: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境1',
      'de': 'Alphametrie 1.0',
      'en': 'Alphascape V1.0',
      'fr': 'Alphastice v1.0',
      'ja': '次元の狭間オメガ：アルファ編1',
      'ko': '차원의 틈 오메가: 알파편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  799: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境2',
      'de': 'Alphametrie 2.0',
      'en': 'Alphascape V2.0',
      'fr': 'Alphastice v2.0',
      'ja': '次元の狭間オメガ：アルファ編2',
      'ko': '차원의 틈 오메가: 알파편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  800: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境3',
      'de': 'Alphametrie 3.0',
      'en': 'Alphascape V3.0',
      'fr': 'Alphastice v3.0',
      'ja': '次元の狭間オメガ：アルファ編3',
      'ko': '차원의 틈 오메가: 알파편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  801: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境4',
      'de': 'Alphametrie 4.0',
      'en': 'Alphascape V4.0',
      'fr': 'Alphastice v4.0',
      'ja': '次元の狭間オメガ：アルファ編4',
      'ko': '차원의 틈 오메가: 알파편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  802: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境1',
      'de': 'Alphametrie 1.0 (episch)',
      'en': 'Alphascape V1.0 (Savage)',
      'fr': 'Alphastice v1.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編1',
      'ko': '차원의 틈 오메가: 알파편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  803: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境2',
      'de': 'Alphametrie 2.0 (episch)',
      'en': 'Alphascape V2.0 (Savage)',
      'fr': 'Alphastice v2.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編2',
      'ko': '차원의 틈 오메가: 알파편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  804: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境3',
      'de': 'Alphametrie 3.0 (episch)',
      'en': 'Alphascape V3.0 (Savage)',
      'fr': 'Alphastice v3.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編3',
      'ko': '차원의 틈 오메가: 알파편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  805: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境4',
      'de': 'Alphametrie 4.0 (episch)',
      'en': 'Alphascape V4.0 (Savage)',
      'fr': 'Alphastice v4.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編4',
      'ko': '차원의 틈 오메가: 알파편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  806: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '保镖歼灭战',
      'de': 'Duell auf der Kugane-Brücke',
      'en': 'Kugane Ohashi',
      'fr': 'Le Pont Ohashi',
      'ja': '真ヨウジンボウ討滅戦',
      'ko': '진 요우진보 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  810: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '朱雀镇魂战',
      'de': 'Seelentanz - Suzaku',
      'en': 'Hells\' Kier',
      'fr': 'Le Nid des Lamentations',
      'ja': '朱雀征魂戦',
      'ko': '주작 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 98
  },
  811: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '朱雀诗魂战',
      'de': 'Seelensturm - Suzaku',
      'en': 'Hells\' Kier (Extreme)',
      'fr': 'Le Nid des Lamentations (extrême)',
      'ja': '極朱雀征魂戦',
      'ko': '극 주작 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 98
  },
  813: {
    'exVersion': 3,
    'name': {
      'cn': '雷克兰德',
      'de': 'Seenland',
      'en': 'Lakeland',
      'fr': 'Grand-Lac',
      'ja': 'レイクランド',
      'ko': '레이크랜드'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 106
  },
  814: {
    'exVersion': 3,
    'name': {
      'cn': '珂露西亚岛',
      'de': 'Kholusia',
      'en': 'Kholusia',
      'fr': 'Kholusia',
      'ja': 'コルシア島',
      'ko': '콜루시아 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 107
  },
  815: {
    'exVersion': 3,
    'name': {
      'cn': '安穆·艾兰',
      'de': 'Amh Araeng',
      'en': 'Amh Araeng',
      'fr': 'Amh Araeng',
      'ja': 'アム・アレーン',
      'ko': '아므 아랭'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 108
  },
  816: {
    'exVersion': 3,
    'name': {
      'cn': '伊尔美格',
      'de': 'Il Mheg',
      'en': 'Il Mheg',
      'fr': 'Il Mheg',
      'ja': 'イル・メグ',
      'ko': '일 메그'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 109
  },
  817: {
    'exVersion': 3,
    'name': {
      'cn': '拉凯提卡大森林',
      'de': 'Der Große Wald Rak\'tika',
      'en': 'The Rak\'tika Greatwood',
      'fr': 'Rak\'tika',
      'ja': 'ラケティカ大森林',
      'ko': '라케티카 대삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 110
  },
  818: {
    'exVersion': 3,
    'name': {
      'cn': '黑风海',
      'de': 'Tempest',
      'en': 'The Tempest',
      'fr': 'La Tempête',
      'ja': 'テンペスト',
      'ko': '템페스트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 111
  },
  819: {
    'exVersion': 3,
    'name': {
      'cn': '水晶都',
      'de': 'Crystarium',
      'en': 'The Crystarium',
      'fr': 'Cristarium',
      'ja': 'クリスタリウム',
      'ko': '크리스타리움'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 112
  },
  820: {
    'exVersion': 3,
    'name': {
      'cn': '游末邦',
      'de': 'Eulmore',
      'en': 'Eulmore',
      'fr': 'Eulmore',
      'ja': 'ユールモア',
      'ko': '율모어'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 113
  },
  821: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '水妖幻园多恩美格禁园',
      'de': 'Dohn Mheg',
      'en': 'Dohn Mheg',
      'fr': 'Dohn Mheg',
      'ja': '水妖幻園 ドォーヌ・メグ',
      'ko': '도느 메그'
    },
    'offsetX': 0,
    'offsetY': 200,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  822: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '伪造天界格鲁格火山',
      'de': 'Der Gulg',
      'en': 'Mt. Gulg',
      'fr': 'Mont Gulg',
      'ja': '偽造天界 グルグ火山',
      'ko': '굴그 화산'
    },
    'offsetX': -188,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  823: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '文明古迹奇坦那神影洞',
      'de': 'Irrungen der Qitari',
      'en': 'The Qitana Ravel',
      'fr': 'L\'Enchevêtrement des Qitari',
      'ja': '古跡探索 キタンナ神影洞',
      'ko': '키타나 신굴'
    },
    'offsetX': 0,
    'offsetY': -274,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  824: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '青龙镇魂战',
      'de': 'Seelentanz - Seiryu',
      'en': 'The Wreath of Snakes',
      'fr': 'L\'Îlot des Amertumes',
      'ja': '青龍征魂戦',
      'ko': '청룡 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 99
  },
  825: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '青龙诗魂战',
      'de': 'Seelensturm - Seiryu',
      'en': 'The Wreath of Snakes (Extreme)',
      'fr': 'L\'Îlot des Amertumes (extrême)',
      'ja': '極青龍征魂戦',
      'ko': '극 청룡 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 99
  },
  826: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '乐欲之所瓯博讷修道院',
      'de': 'Kloster von Orbonne',
      'en': 'The Orbonne Monastery',
      'fr': 'Le Monastère d\'Orbonne',
      'ja': '楽欲の僧院 オーボンヌ',
      'ko': '오본느 수도원'
    },
    'offsetX': -545,
    'offsetY': -663,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  827: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 丰水之地',
      'de': 'Eureka Hydatos',
      'en': 'The Forbidden Land, Eureka Hydatos',
      'fr': 'Eurêka Hydatos',
      'ja': '禁断の地 エウレカ：ヒュダトス編',
      'ko': '금단의 땅 에우레카: 히다토스편'
    },
    'offsetX': 0,
    'offsetY': 475,
    'sizeFactor': 100,
    'weatherRate': 100
  },
  830: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '英雄挽歌',
      'de': 'Requiem der Helden',
      'en': 'A Requiem for Heroes',
      'fr': 'Un requiem pour les héros',
      'ja': '英雄への鎮魂歌',
      'ko': '영웅을 위한 진혼가'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  831: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '多玛方城战：东风战4人亲友桌（不带食断）',
      'de': '4-Spieler-Mahjong (schnelle Partie, Kuitan deaktiviert)',
      'en': 'Four-player Mahjong (Quick Match, Kuitan Disabled)',
      'fr': 'Mahjong domien<Indent/>: 4 joueurs (partie rapide sans kuitan)',
      'ja': 'ドマ式麻雀：東風戦4人セット卓（クイタン無し）',
      'ko': '작패유희: 동풍전 4인용 탁자(부르기 단요구 없음)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  832: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '空军装甲驾驶员',
      'de': 'Luftwaffe, Feuer frei!',
      'en': 'Air Force One',
      'fr': 'As de l\'air',
      'ja': '出撃！ エアフォースパイロット',
      'ko': '출격! 에어포스 조종사'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  834: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'cn': '风之使者',
      'de': 'Durch den Sturm und zurück',
      'en': 'Messenger of the Winds',
      'fr': 'La Messagère du vent',
      'ja': '来訪せし風の御使',
      'ko': '바람의 어사'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 101
  },
  836: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '避暑离宫马利卡大井',
      'de': 'Malikahs Brunnen',
      'en': 'Malikah\'s Well',
      'fr': 'Le Puits de Malikah',
      'ja': '爽涼離宮 マリカの大井戸',
      'ko': '말리카 큰우물'
    },
    'offsetX': -65,
    'offsetY': -30,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  837: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '遇袭集落水滩村',
      'de': 'Holminster',
      'en': 'Holminster Switch',
      'fr': 'Holminster',
      'ja': '殺戮郷村 ホルミンスター',
      'ko': '홀민스터'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  838: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '末日暗影亚马乌罗提',
      'de': 'Amaurot',
      'en': 'Amaurot',
      'fr': 'Amaurote',
      'ja': '終末幻想 アーモロート',
      'ko': '아모로트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 105
  },
  840: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '异界遗构希尔科斯孪晶塔',
      'de': 'Der Kristallzwilling',
      'en': 'The Twinning',
      'fr': 'La Macle de Syrcus',
      'ja': '異界遺構 シルクス・ツイニング',
      'ko': '쌍둥이 시르쿠스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  841: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '创造机构阿尼德罗学院',
      'de': 'Akadaemia Anyder',
      'en': 'Akadaemia Anyder',
      'fr': 'Akadaemia Anydre',
      'ja': '創造機関 アナイダアカデミア',
      'ko': '애나이더 아카데미아'
    },
    'offsetX': 0,
    'offsetY': 30,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  845: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '缇坦妮雅歼灭战',
      'de': 'Offenbarung - Titania',
      'en': 'The Dancing Plague',
      'fr': 'La Valse du Monarque',
      'ja': 'ティターニア討滅戦',
      'ko': '티타니아 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 103
  },
  846: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '无瑕灵君歼灭战',
      'de': 'Offenbarung - Innozenz',
      'en': 'The Crown of the Immaculate',
      'fr': 'La Couronne de l\'Immaculé',
      'ja': 'イノセンス討滅戦',
      'ko': '이노센스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 104
  },
  847: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '哈迪斯歼灭战',
      'de': 'Offenbarung - Hades',
      'en': 'The Dying Gasp',
      'fr': 'Le Râle de l\'Agonie',
      'ja': 'ハーデス討滅戦',
      'ko': '하데스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 105
  },
  848: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '无瑕灵君歼殛战',
      'de': 'Letzte Läuterung - Innozenz',
      'en': 'The Crown of the Immaculate (Extreme)',
      'fr': 'La Couronne de l\'Immaculé (extrême)',
      'ja': '極イノセンス討滅戦',
      'ko': '극 이노센스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 104
  },
  849: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章1',
      'de': 'Edens Erwachen - Auferstehung',
      'en': 'Eden\'s Gate: Resurrection',
      'fr': 'L\'Éveil d\'Éden - Résurrection',
      'ja': '希望の園エデン：覚醒編1',
      'ko': '희망의 낙원 에덴: 각성편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  850: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章2',
      'de': 'Edens Erwachen - Niederkunft',
      'en': 'Eden\'s Gate: Descent',
      'fr': 'L\'Éveil d\'Éden - Descente',
      'ja': '希望の園エデン：覚醒編2',
      'ko': '희망의 낙원 에덴: 각성편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  851: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章3',
      'de': 'Edens Erwachen - Überflutung',
      'en': 'Eden\'s Gate: Inundation',
      'fr': 'L\'Éveil d\'Éden - Déluge',
      'ja': '希望の園エデン：覚醒編3',
      'ko': '희망의 낙원 에덴: 각성편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  852: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章4',
      'de': 'Edens Erwachen - Beerdigung',
      'en': 'Eden\'s Gate: Sepulture',
      'fr': 'L\'Éveil d\'Éden - Inhumation',
      'ja': '希望の園エデン：覚醒編4',
      'ko': '희망의 낙원 에덴: 각성편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  853: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章1',
      'de': 'Edens Erwachen - Auferstehung (episch)',
      'en': 'Eden\'s Gate: Resurrection (Savage)',
      'fr': 'L\'Éveil d\'Éden - Résurrection (sadique)',
      'ja': '希望の園エデン零式：覚醒編1',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  854: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章2',
      'de': 'Edens Erwachen - Niederkunft (episch)',
      'en': 'Eden\'s Gate: Descent (Savage)',
      'fr': 'L\'Éveil d\'Éden - Descente (sadique)',
      'ja': '希望の園エデン零式：覚醒編2',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  855: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章3',
      'de': 'Edens Erwachen - Überflutung (episch)',
      'en': 'Eden\'s Gate: Inundation (Savage)',
      'fr': 'L\'Éveil d\'Éden - Déluge (sadique)',
      'ja': '希望の園エデン零式：覚醒編3',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  856: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章4',
      'de': 'Edens Erwachen - Beerdigung (episch)',
      'en': 'Eden\'s Gate: Sepulture (Savage)',
      'fr': 'L\'Éveil d\'Éden - Inhumation (sadique)',
      'ja': '希望の園エデン零式：覚醒編4',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  858: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '缇坦妮雅歼殛战',
      'de': 'Letzte Läuterung - Titania',
      'en': 'The Dancing Plague (Extreme)',
      'fr': 'La Valse du Monarque (extrême)',
      'ja': '極ティターニア討滅戦',
      'ko': '극 티타니아 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 103
  },
  859: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '机关、诅咒、剧毒与……',
      'de': 'Der Beichtstuhl von Toupasa dem Älteren',
      'en': 'Legend of the Not-so-hidden Temple',
      'fr': 'Le Confessionnal de Toupasa l\'ancien',
      'ja': '仕掛けと呪いと毒と',
      'ko': '함정과 저주와 독'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 102
  },
  860: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '废都拿巴示艾兰',
      'de': 'Vater und Bruder',
      'en': 'Coming Clean',
      'fr': 'Sur les rails de Nabaath Areng',
      'ja': '廃都ナバスアレン',
      'ko': '나바스아렝 폐허'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 102
  },
  873: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '摇摆的天平',
      'de': 'Ob Mitleid oder Hass',
      'en': 'The Hardened Heart',
      'fr': 'Naissance d\'un bourreau',
      'ja': '揺れる天秤',
      'ko': '흔들리는 천칭'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  874: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '古代大再生魔法',
      'de': 'Alter Zauber',
      'en': 'The Lost and the Found',
      'fr': 'Magie ancestrale',
      'ja': '古の大再生魔法',
      'ko': '고대의 대재생 마법'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 110
  },
  875: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '勇敢的猎人',
      'de': 'Der Legende auf der Spur',
      'en': 'The Hunter\'s Legacy',
      'fr': 'La chasseuse de légende',
      'ja': '勇気の狩人',
      'ko': '용기 있는 사냥꾼'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 63
  },
  876: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '奈贝尔特的后悔',
      'de': 'Ein großes Opfer',
      'en': 'Nyelbert\'s Lament',
      'fr': 'Une cupidité bien généreuse',
      'ja': 'ナイルベルトの後悔',
      'ko': '나일베르트의 후회'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  879: {
    'contentType': 9,
    'exVersion': 3,
    'name': {
      'cn': '梦羽宝境',
      'de': 'Verliese von Lyhe Ghiah',
      'en': 'The Dungeons of Lyhe Ghiah',
      'fr': 'Le Donjon hypogéen du Lyhe Ghiah',
      'ja': '宝物庫 リェー・ギア・ダンジョン',
      'ko': '보물고 리예 기아 지하미궁'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  882: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '复制工厂废墟',
      'de': 'Die kopierte Fabrik',
      'en': 'The Copied Factory',
      'fr': 'La réplique de l\'usine désaffectée',
      'ja': '複製サレタ工場廃墟',
      'ko': '복제된 공장 폐허'
    },
    'offsetX': 610,
    'offsetY': 70,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  884: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '魔法宫殿宇宙宫',
      'de': 'Chateau Cosmea',
      'en': 'The Grand Cosmos',
      'fr': 'Le Cosmos coruscant',
      'ja': '魔法宮殿 グラン・コスモス',
      'ko': '그랑 코스모스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  885: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '哈迪斯孤念歼灭战',
      'de': 'Letzte Läuterung - Hades',
      'en': 'The Minstrel\'s Ballad: Hades\'s Elegy',
      'fr': 'Le Râle de l\'Agonie (extrême)',
      'ja': '極ハーデス討滅戦',
      'ko': '극 하데스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 105
  },
  887: {
    'contentType': 28,
    'exVersion': 3,
    'name': {
      'cn': '亚历山大绝境战',
      'de': 'Alexander (fatal)',
      'en': 'The Epic of Alexander (Ultimate)',
      'fr': 'L\'Odyssée d\'Alexander (fatal)',
      'ja': '絶アレキサンダー討滅戦',
      'ko': '절 알렉산더 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  888: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '昂萨哈凯尔（竞争战）',
      'de': 'Onsal Hakair (Danshig Naadam)',
      'en': 'Onsal Hakair (Danshig Naadam)',
      'fr': 'Onsal Hakair (Danshig Naadam)',
      'ja': 'オンサル・ハカイル (終節戦)',
      'ko': '온살 하카이르(계절끝 합전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 117
  },
  893: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '纯白誓约、漆黑密约',
      'de': 'Der Wolf und der Drachenreiter',
      'en': 'Vows of Virtue, Deeds of Cruelty',
      'fr': 'Vœux de vertu, actes de cruauté',
      'ja': '白き誓約、黒き密約',
      'ko': '하얀 서약, 검은 밀약'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  894: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '我心依旧',
      'de': 'Trubel im Traumland',
      'en': 'As the Heart Bids',
      'fr': 'À l\'écoute de soi',
      'ja': 'この心が望むがままに',
      'ko': '이 마음이 원하는 대로'
    },
    'offsetX': -12,
    'offsetY': 50,
    'sizeFactor': 400,
    'weatherRate': 40
  },
  897: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '红宝石神兵破坏作战',
      'de': 'Rubinfeuer - Entfesselung',
      'en': 'Cinder Drift',
      'fr': 'Les Nuées de Brandons',
      'ja': 'ルビーウェポン破壊作戦',
      'ko': '루비 웨폰 파괴작전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 28
  },
  898: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '黑风海底阿尼德罗追忆馆',
      'de': 'Anamnesis Anyder',
      'en': 'Anamnesis Anyder',
      'fr': 'Anamnesis Anydre',
      'ja': '黒風海底 アニドラス・アナムネーシス',
      'ko': '애니드라스 아남네시스'
    },
    'offsetX': 100,
    'offsetY': -390,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  900: {
    'contentType': 16,
    'exVersion': 0,
    'name': {
      'cn': '出海垂钓',
      'de': 'Auf großer Fahrt',
      'en': 'Ocean Fishing',
      'fr': 'Pêche en mer',
      'ja': 'オーシャンフィッシング',
      'ko': '먼바다 낚시'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 14
  },
  902: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章1',
      'de': 'Edens Resonanz - Entladung',
      'en': 'Eden\'s Verse: Fulmination',
      'fr': 'Les Accords d\'Éden - Fulmination',
      'ja': '希望の園エデン：共鳴編1',
      'ko': '희망의 낙원 에덴: 공명편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  903: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章2',
      'de': 'Edens Resonanz - Raserei',
      'en': 'Eden\'s Verse: Furor',
      'fr': 'Les Accords d\'Éden - Fureur',
      'ja': '希望の園エデン：共鳴編2',
      'ko': '희망의 낙원 에덴: 공명편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  904: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章3',
      'de': 'Edens Resonanz - Bildersturm',
      'en': 'Eden\'s Verse: Iconoclasm',
      'fr': 'Les Accords d\'Éden - Iconoclasme',
      'ja': '希望の園エデン：共鳴編3',
      'ko': '희망의 낙원 에덴: 공명편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  905: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章4',
      'de': 'Edens Resonanz - Erstarrung',
      'en': 'Eden\'s Verse: Refulgence',
      'fr': 'Les Accords d\'Éden - Éclat',
      'ja': '希望の園エデン：共鳴編4',
      'ko': '희망의 낙원 에덴: 공명편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  906: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章1',
      'de': 'Edens Resonanz - Entladung (episch)',
      'en': 'Eden\'s Verse: Fulmination (Savage)',
      'fr': 'Les Accords d\'Éden - Fulmination (sadique)',
      'ja': '希望の園エデン零式：共鳴編1',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  907: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章2',
      'de': 'Edens Resonanz - Raserei (episch)',
      'en': 'Eden\'s Verse: Furor (Savage)',
      'fr': 'Les Accords d\'Éden - Fureur (sadique)',
      'ja': '希望の園エデン零式：共鳴編2',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  908: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章3',
      'de': 'Edens Resonanz - Bildersturm (episch)',
      'en': 'Eden\'s Verse: Iconoclasm (Savage)',
      'fr': 'Les Accords d\'Éden - Iconoclasme (sadique)',
      'ja': '希望の園エデン零式：共鳴編3',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  909: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章4',
      'de': 'Edens Resonanz - Erstarrung (episch)',
      'en': 'Eden\'s Verse: Refulgence (Savage)',
      'fr': 'Les Accords d\'Éden - Éclat (sadique)',
      'ja': '希望の園エデン零式：共鳴編4',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  911: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '博兹雅堡垒蒸发事件',
      'de': 'Der Bozja-Vorfall',
      'en': 'The Bozja Incident',
      'fr': 'Prélude à la catastrophe',
      'ja': 'シタデル・ボズヤ蒸発事変',
      'ko': '보즈야 사건'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 123
  },
  912: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '红宝石神兵狂想作战',
      'de': 'Rubinfeuer - Trauma',
      'en': 'Cinder Drift (Extreme)',
      'fr': 'Les Nuées de Brandons (extrême)',
      'ja': '極ルビーウェポン破壊作戦',
      'ko': '극 루비 웨폰 파괴작전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 28
  },
  913: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '博兹雅堡垒追忆战',
      'de': 'Memoria Misera (extrem)',
      'en': 'Memoria Misera (Extreme)',
      'fr': 'Memoria Misera (extrême)',
      'ja': '極シタデル・ボズヤ追憶戦',
      'ko': '극 보즈야 추억전'
    },
    'offsetX': -35,
    'offsetY': 683,
    'sizeFactor': 400,
    'weatherRate': 123
  },
  914: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '英雄无法安息',
      'de': 'Von schlafenden Helden',
      'en': 'A Sleep Disturbed',
      'fr': 'L\'épreuve ronka',
      'ja': '汝、英雄の眠り妨げるは',
      'ko': '그대, 영웅의 잠을 방해하는가'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  916: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '暗影决战诺弗兰特',
      'de': 'Schlacht um Norvrandt',
      'en': 'The Heroes\' Gauntlet',
      'fr': 'La Traversée de Norvrandt',
      'ja': '漆黒決戦 ノルヴラント',
      'ko': '노르브란트'
    },
    'offsetX': 626,
    'offsetY': -611,
    'sizeFactor': 200,
    'weatherRate': 125
  },
  917: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '人偶军事基地',
      'de': 'Die Puppenfestung',
      'en': 'The Puppets\' Bunker',
      'fr': 'La base militaire des Pantins',
      'ja': '人形タチノ軍事基地',
      'ko': '인형들의 군사 기지'
    },
    'offsetX': 290,
    'offsetY': -190,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  920: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '南方博兹雅战线',
      'de': 'Bozja-Südfront',
      'en': 'The Bozjan Southern Front',
      'fr': 'Front sud de Bozja',
      'ja': '南方ボズヤ戦線',
      'ko': '남부 보즈야 전선'
    },
    'offsetX': -127,
    'offsetY': -424,
    'sizeFactor': 100,
    'weatherRate': 124
  },
  922: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '光之战士歼灭战',
      'de': 'Krieger des Lichts',
      'en': 'The Seat of Sacrifice',
      'fr': 'Le Trône du Sacrifice',
      'ja': 'ウォーリア・オブ・ライト討滅戦',
      'ko': '빛의 전사 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 125
  },
  923: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '光之战士幻耀歼灭战',
      'de': 'Krieger des Lichts (extrem)',
      'en': 'The Seat of Sacrifice (Extreme)',
      'fr': 'Le Trône du Sacrifice (extrême)',
      'ja': '極ウォーリア・オブ・ライト討滅戦',
      'ko': '극 빛의 전사 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 126
  },
  924: {
    'contentType': 9,
    'exVersion': 3,
    'name': {
      'cn': '梦羽宝殿',
      'de': 'Das Karussell von Lyhe Ghiah',
      'en': 'The Shifting Oubliettes of Lyhe Ghiah',
      'fr': 'Le Jardin secret du Lyhe Ghiah',
      'ja': '宝物庫 リェー・ギア・ダンジョン祭殿',
      'ko': '보물고 리예 기아 지하미궁 제전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  925: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '飞翔吧，前往维尔利特！',
      'de': 'Luftangriff auf Werlyt',
      'en': 'Sleep Now in Sapphire',
      'fr': 'Sur la mer de saphir',
      'ja': '飛べ！ ウェルリトへ ',
      'ko': '날아라! 웰리트를 향하여'
    },
    'offsetX': 15,
    'offsetY': -610,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  929: {
    'contentType': 16,
    'exVersion': 1,
    'name': {
      'cn': '天上福地云冠群岛',
      'de': 'Das Diadem - Erschließung',
      'en': 'The Diadem',
      'fr': 'Le Diadème',
      'ja': '雲海採集 ディアデム諸島',
      'ko': '디아뎀 제도'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 68
  },
  930: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '希瓦幻巧战',
      'de': 'Traumprüfung - Shiva',
      'en': 'The Akh Afah Amphitheatre (Unreal)',
      'fr': 'L\'Amphithéâtre d\'Akh Afah (irréel)',
      'ja': '幻シヴァ討滅戦',
      'ko': '환 시바 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  932: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '褪色的记忆',
      'de': 'Verblasste Erinnerungen',
      'en': 'Faded Memories',
      'fr': 'Souvenir périssable',
      'ja': '色あせた記憶',
      'ko': '빛바랜 기억'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 114
  },
  933: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '魔术工房玛托雅工作室',
      'de': 'Matoyas Atelier',
      'en': 'Matoya\'s Relict',
      'fr': 'L\'Atelier abandonné de Matoya',
      'ja': '魔術工房 マトーヤのアトリエ',
      'ko': '마토야의 공방'
    },
    'offsetX': 0,
    'offsetY': -75,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  934: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '绿宝石神兵破坏作战',
      'de': 'Smaragdsturm - Entfesselung',
      'en': 'Castrum Marinum',
      'fr': 'Castrum Marinum',
      'ja': 'エメラルドウェポン破壊作戦',
      'ko': '에메랄드 웨폰 파괴작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  935: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '绿宝石神兵狂想作战',
      'de': 'Smaragdsturm - Trauma',
      'en': 'Castrum Marinum (Extreme)',
      'fr': 'Castrum Marinum (extrême)',
      'ja': '極エメラルドウェポン破壊作戦',
      'ko': '극 에메랄드 웨폰 파괴작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  936: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '女王古殿',
      'de': 'Delubrum Reginae',
      'en': 'Delubrum Reginae',
      'fr': 'Delubrum Reginae',
      'ja': 'グンヒルド・ディルーブラム',
      'ko': '군힐드 사원'
    },
    'offsetX': 0,
    'offsetY': -378,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  937: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '零式女王古殿',
      'de': 'Delubrum Reginae (episch)',
      'en': 'Delubrum Reginae (Savage)',
      'fr': 'Delubrum Reginae (sadique)',
      'ja': 'グンヒルド・ディルーブラム零式',
      'ko': '군힐드 사원(영웅)'
    },
    'offsetX': 0,
    'offsetY': -378,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  938: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '黄金平原帕戈尔赞草原',
      'de': 'Die Goldene Ebene von Paglth\'an',
      'en': 'Paglth\'an',
      'fr': 'La grande prairie de Paglth\'an',
      'ja': '黄金平原 パガルザン',
      'ko': '파글단'
    },
    'offsetX': 415,
    'offsetY': -110,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  940: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '九宫幻卡：官方锦标赛',
      'de': 'Triple Triad: Manderville-Turnier',
      'en': 'Triple Triad Open Tournament',
      'fr': 'Tournoi officiel de Triple Triade',
      'ja': 'トリプルトライアド：オフィシャルトーナメント',
      'ko': '트리플 트라이어드: 공식 토너먼트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 800,
    'weatherRate': 0
  },
  941: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '九宫幻卡：锦标赛对局室',
      'de': 'Triple Triad: Privatturnier',
      'en': 'Triple Triad Invitational Parlor',
      'fr': 'Salle de tournoi libre de Triple Triade',
      'ja': 'トリプルトライアド：カスタムトーナメントルーム',
      'ko': '트리플 트라이어드: 친선 토너먼트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 800,
    'weatherRate': 0
  },
  942: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章1',
      'de': 'Edens Verheißung - Umbra',
      'en': 'Eden\'s Promise: Umbra',
      'fr': 'La Promesse d\'Éden - Nuée',
      'ja': '希望の園エデン：再生編1',
      'ko': '희망의 낙원 에덴: 재생편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  943: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章2',
      'de': 'Edens Verheißung - Litanei',
      'en': 'Eden\'s Promise: Litany',
      'fr': 'La Promesse d\'Éden - Litanie',
      'ja': '希望の園エデン：再生編2',
      'ko': '희망의 낙원 에덴: 재생편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  944: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章3',
      'de': 'Edens Verheißung - Anamorphose',
      'en': 'Eden\'s Promise: Anamorphosis',
      'fr': 'La Promesse d\'Éden - Anamorphose',
      'ja': '希望の園エデン：再生編3',
      'ko': '희망의 낙원 에덴: 재생편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  945: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章4',
      'de': 'Edens Verheißung - Ewigkeit',
      'en': 'Eden\'s Promise: Eternity',
      'fr': 'La Promesse d\'Éden - Éternité',
      'ja': '希望の園エデン：再生編4',
      'ko': '희망의 낙원 에덴: 재생편 4'
    },
    'offsetX': -71,
    'offsetY': 23,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  946: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章1',
      'de': 'Edens Verheißung - Umbra (episch)',
      'en': 'Eden\'s Promise: Umbra (Savage)',
      'fr': 'La Promesse d\'Éden - Nuée (sadique)',
      'ja': '希望の園エデン零式：再生編1',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  947: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章2',
      'de': 'Edens Verheißung - Litanei (episch)',
      'en': 'Eden\'s Promise: Litany (Savage)',
      'fr': 'La Promesse d\'Éden - Litanie (sadique)',
      'ja': '希望の園エデン零式：再生編2',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  948: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章3',
      'de': 'Edens Verheißung - Anamorphose (episch)',
      'en': 'Eden\'s Promise: Anamorphosis (Savage)',
      'fr': 'La Promesse d\'Éden - Anamorphose (sadique)',
      'ja': '希望の園エデン零式：再生編3',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  949: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章4',
      'de': 'Edens Verheißung - Ewigkeit (episch)',
      'en': 'Eden\'s Promise: Eternity (Savage)',
      'fr': 'La Promesse d\'Éden - Éternité (sadique)',
      'ja': '希望の園エデン零式：再生編4',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 75,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  950: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '钻石神兵捕获作战',
      'de': 'Diamantblitz - Entfesselung',
      'en': 'The Cloud Deck',
      'fr': 'Le Tillac des Cirrus',
      'ja': 'ダイヤウェポン捕獲作戦',
      'ko': '다이아몬드 웨폰 포획작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  951: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '钻石神兵狂想作战',
      'de': 'Diamantblitz - Trauma',
      'en': 'The Cloud Deck (Extreme)',
      'fr': 'Le Tillac des Cirrus (extrême)',
      'ja': '極ダイヤウェポン捕獲作戦',
      'ko': '극 다이아몬드 웨폰 포획작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  952: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '异形楼阁佐特塔',
      'de': 'Der Turm von Zot',
      'en': 'The Tower of Zot',
      'fr': 'La tour de Zott',
      'ja': '異形楼閣 ゾットの塔',
      'ko': '조트 탑'
    },
    'offsetX': -50,
    'offsetY': -50,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  953: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '泰坦幻巧战',
      'de': 'Traumprüfung - Titan',
      'en': 'The Navel (Unreal)',
      'fr': 'Le Nombril (irréel)',
      'ja': '幻タイタン討滅戦',
      'ko': '환 타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  954: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '威尔布兰德扬帆起航',
      'de': 'Gute Winde für Vylbrand',
      'en': 'The Great Ship Vylbrand',
      'fr': 'Un navire nommé Vylbrand',
      'ja': 'バイルブランドの船出',
      'ko': '바일브랜드 출항'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  955: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '神佑女王',
      'de': 'Hinab in die Ruinen',
      'en': 'Fit for a Queen',
      'fr': 'Que les Dieux gardent la Reine',
      'ja': 'ゴッド・セイブ・ザ・クイーン',
      'ko': '갓 세이브 더 퀸'
    },
    'offsetX': 0,
    'offsetY': -750,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  956: {
    'exVersion': 4,
    'name': {
      'cn': '迷津',
      'de': 'Labyrinthos',
      'en': 'Labyrinthos',
      'fr': 'Le Labyrinthos',
      'ja': 'ラヴィリンソス',
      'ko': '라비린토스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 131
  },
  957: {
    'exVersion': 4,
    'name': {
      'cn': '萨维奈岛',
      'de': 'Thavnair',
      'en': 'Thavnair',
      'fr': 'Thavnair',
      'ja': 'サベネア島',
      'ko': '사베네어 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 132
  },
  958: {
    'exVersion': 4,
    'name': {
      'cn': '加雷马',
      'de': 'Garlemald',
      'en': 'Garlemald',
      'fr': 'Garlemald',
      'ja': 'ガレマルド',
      'ko': '갈레말드'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 133
  },
  959: {
    'exVersion': 4,
    'name': {
      'cn': '叹息海',
      'de': 'Mare Lamentorum',
      'en': 'Mare Lamentorum',
      'fr': 'Mare Lamentorum',
      'ja': '嘆きの海',
      'ko': '비탄의 바다'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 135
  },
  960: {
    'exVersion': 4,
    'name': {
      'cn': '天外天垓',
      'de': 'Ultima Thule',
      'en': 'Ultima Thule',
      'fr': 'Ultima Thulé',
      'ja': 'ウルティマ・トゥーレ',
      'ko': '울티마 툴레'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 136
  },
  961: {
    'exVersion': 4,
    'name': {
      'cn': '厄尔庇斯',
      'de': 'Elpis',
      'en': 'Elpis',
      'fr': 'Elpis',
      'ja': 'エルピス',
      'ko': '엘피스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 134
  },
  962: {
    'exVersion': 4,
    'name': {
      'cn': '旧萨雷安',
      'de': 'Alt-Sharlayan',
      'en': 'Old Sharlayan',
      'fr': 'Vieille Sharlayan',
      'ja': 'オールド・シャーレアン',
      'ko': '올드 샬레이안'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 137
  },
  963: {
    'exVersion': 4,
    'name': {
      'cn': '拉札罕',
      'de': 'Radz-at-Han',
      'en': 'Radz-at-Han',
      'fr': 'Radz-at-Han',
      'ja': 'ラザハン',
      'ko': '라자한'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 138
  },
  966: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '希望之炮台：“塔”',
      'de': 'Der Turm, Paradigmenbrecher',
      'en': 'The Tower at Paradigm\'s Breach',
      'fr': 'La tour de la Contingence',
      'ja': '希望ノ砲台：「塔」',
      'ko': '희망의 포대: \'탑\''
    },
    'offsetX': 808,
    'offsetY': -772,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  967: {
    'exVersion': 3,
    'name': {
      'cn': '帝国海上基地干船坞',
      'de': 'Trockendock von Castrum Marinum',
      'en': 'Castrum Marinum Drydocks',
      'fr': 'Cale sèche de Castrum Marinum',
      'ja': 'カステッルム・マリヌム・ドライドック',
      'ko': '카스트룸 마리눔 건선거'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  968: {
    'contentType': 28,
    'exVersion': 4,
    'name': {
      'de': 'Drachenkrieg (fatal)',
      'en': 'Dragonsong\'s Reprise (Ultimate)',
      'fr': 'La Guerre du chant des dragons (fatal)',
      'ja': '絶竜詩戦争'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  969: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '魔导神门巴别塔',
      'de': 'Der Turm von Babil',
      'en': 'The Tower of Babil',
      'fr': 'La tour de Babil',
      'ja': '魔導神門 バブイルの塔',
      'ko': '바브일 탑'
    },
    'offsetX': 270,
    'offsetY': -300,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  970: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '末日树海万相森国',
      'de': 'Vanaspati',
      'en': 'Vanaspati',
      'fr': 'Vanaspati',
      'ja': '終末樹海 ヴァナスパティ',
      'ko': '바나스파티'
    },
    'offsetX': 280,
    'offsetY': 8,
    'sizeFactor': 200,
    'weatherRate': 141
  },
  972: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '利维亚桑幻巧战',
      'de': 'Traumprüfung - Leviathan',
      'en': 'The <Emphasis>Whorleater</Emphasis> (Unreal)',
      'fr': 'Le Briseur de marées (irréel)',
      'ja': '幻リヴァイアサン討滅戦',
      'ko': '환 리바이어선 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  973: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '最终幻想末世终迹',
      'de': 'Das Sternengrab',
      'en': 'The Dead Ends',
      'fr': 'L\'Issue aux Impasses',
      'ja': '最終幻想 レムナント',
      'ko': '잔해별'
    },
    'offsetX': -310,
    'offsetY': 15,
    'sizeFactor': 200,
    'weatherRate': 144
  },
  974: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '创造环境极北造物院',
      'de': 'Ktisis Hyperboreia',
      'en': 'Ktisis Hyperboreia',
      'fr': 'L\'Hyperborée',
      'ja': '創造環境 ヒュペルボレア造物院',
      'ko': '휘페르보레아 조물원'
    },
    'offsetX': 40,
    'offsetY': -150,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  975: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '扎杜诺尔高原',
      'de': 'Zadnor-Hochebene',
      'en': 'Zadnor',
      'fr': 'Hauts plateaux de Zadnor',
      'ja': 'ザトゥノル高原',
      'ko': '자트노르 고원'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 130
  },
  976: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '乐园都市笑笑镇',
      'de': 'Smileton',
      'en': 'Smileton',
      'fr': 'Risette-sur-lune',
      'ja': '楽園都市 スマイルトン',
      'ko': '스마일턴'
    },
    'offsetX': -22,
    'offsetY': -42,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  977: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '死斗至黎明',
      'de': 'Kampf im Morgengrauen',
      'en': 'Death Unto Dawn',
      'fr': 'Aube meurtrière',
      'ja': '黎明の死闘',
      'ko': '여명의 사투'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 114
  },
  978: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '星海深幽寻因星晶镜',
      'de': 'Das Aitiaskop',
      'en': 'The Aitiascope',
      'fr': 'Le Prisme de l\'Aitia',
      'ja': '星海潜航 アイティオン星晶鏡',
      'ko': '아이티온 별현미경'
    },
    'offsetX': 8,
    'offsetY': -501,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  986: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '电脑梦境斯提格玛四',
      'de': 'Stigma-Holometrie',
      'en': 'The Stigma Dreamscape',
      'fr': 'Rêve électrique de Stigma-4',
      'ja': '電脳夢想 スティグマ・フォー',
      'ko': '스티그마-4'
    },
    'offsetX': 144,
    'offsetY': -14,
    'sizeFactor': 200,
    'weatherRate': 140
  },
  992: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '佐迪亚克歼灭战',
      'de': 'Prophetie - Zodiark',
      'en': 'The Dark Inside',
      'fr': 'Le Cratère des Martyrs',
      'ja': 'ゾディアーク討滅戦',
      'ko': '조디아크 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  993: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '佐迪亚克暝暗歼灭战',
      'de': 'Eschatos - Zodiark',
      'en': 'The Minstrel\'s Ballad: Zodiark\'s Fall',
      'fr': 'Le Cratère des Martyrs (extrême)',
      'ja': '極ゾディアーク討滅戦',
      'ko': '극 조디아크 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  994: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '滑稽灵殿闹鬼盛宴',
      'de': 'Lustiges Bankett',
      'en': 'The Phantoms\' Feast',
      'fr': 'Le banquet cauchemardesque',
      'ja': '道化饗宴 ホーンテッドフィースト',
      'ko': '유령의 연회'
    },
    'offsetX': 20,
    'offsetY': 10,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  995: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '海德林歼灭战',
      'de': 'Prophetie - Hydaelyn',
      'en': 'The Mothercrystal',
      'fr': 'Le Cristal-mère',
      'ja': 'ハイデリン討滅戦',
      'ko': '하이델린 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  996: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '海德林晖光歼灭战',
      'de': 'Eschatos - Hydaelyn',
      'en': 'The Minstrel\'s Ballad: Hydaelyn\'s Call',
      'fr': 'Le Cristal-mère (extrême)',
      'ja': '極ハイデリン討滅戦',
      'ko': '극 하이델린 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  997: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '终结之战',
      'de': 'Prophetie - Endsängerin',
      'en': 'The Final Day',
      'fr': 'Le Répons final',
      'ja': '終焉の戦い',
      'ko': '종언의 결전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 116
  },
  998: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'de': 'Eschatos - Endsängerin',
      'en': 'The Minstrel\'s Ballad: Endsinger\'s Aria',
      'fr': 'Le Répons final (extrême)',
      'ja': '終極の戦い'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 146
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);

/***/ }),

/***/ 416:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AL": () => (/* binding */ kHealFlags),
/* harmony export */   "Fz": () => (/* binding */ ShortNamify),
/* harmony export */   "GD": () => (/* binding */ UnscrambleDamage),
/* harmony export */   "OC": () => (/* binding */ kFieldFlags),
/* harmony export */   "Tk": () => (/* binding */ GetFormattedTime),
/* harmony export */   "YU": () => (/* binding */ kShiftFlagValues),
/* harmony export */   "dH": () => (/* binding */ kAttackFlags),
/* harmony export */   "gG": () => (/* binding */ GetShareMistakeText),
/* harmony export */   "gc": () => (/* binding */ GetSoloMistakeText),
/* harmony export */   "hm": () => (/* binding */ kFlagInstantDeath),
/* harmony export */   "jT": () => (/* binding */ IsPlayerId),
/* harmony export */   "np": () => (/* binding */ playerDamageFields),
/* harmony export */   "vN": () => (/* binding */ Translate),
/* harmony export */   "zJ": () => (/* binding */ IsTriggerEnabled)
/* harmony export */ });
/* unused harmony exports kFieldDamage, damageFields */
// Fields for net log ability lines.
const kFieldFlags = 8;
const kFieldDamage = 9; // If kFieldFlags is any of these values, then consider field 10/11 as 8/9.
// It appears a little bit that flags come in pairs of values, but it's unclear
// what these mean.

const kShiftFlagValues = ['3E', '113', '213', '313'];
const kFlagInstantDeath = '36'; // Always 36 ?
// miss, damage, block, parry, instant death

const kAttackFlags = ['01', '03', '05', '06', kFlagInstantDeath];
const kHealFlags = ['04']; // TODO: should we include damage != 0 here?

const damageFields = {
  flags: `[^|]*(?:${kAttackFlags.join('|')})(?=\\|)`
};
const playerDamageFields = {
  targetId: '[^4].......',
  ...damageFields
};
/* eslint-disable max-len */

/*
Field 7 Flags:
  '0' = meditation, aoe with no targets

  damage low bytes:
    0x01 = dodge
    0x03 = damage
    0x05 = blocked damage
    0x06 = parried damage
    0x?? = instant death

  damage modifiers:
    0x100 = crit damage
    0x200 = direct hit damage
    0x300 = crit direct hit damage

  heal modifiers:
    0x00004 = heal
    0x10004 = crit heal

  Special cases:
    * If flags are 3E, shift 9+10 two over to be 7+8.  (why???)
    * Plenary indulgence has flags=113/213/313 for stacks, shift two as well.

  Damage:
    * Left-extend zeroes to 8 chars, e.g. 2934001 => 02934001, or 1000 => 00001000.
    * Should be interpreted as 4 bytes (8 chars).
    * First two bytes are damage.
    * 00004000 mask implies extra damage (and some weird math):
      bytes = ABCD, where C = 0x40.
      total damage = DA(B-D), as three bytes together interpreted as an integer.
      e.g. 424E400F => 0F 42 (4E - 0F = 3F) => 0F423F => 999999
    * 00001000 mask implies 0 damage, e.g. hallowed.

Examples:
(1) 18216 damage from Grand Cross Alpha (basic damage)
  16:40001333:Neo Exdeath:242B:Grand Cross Alpha:1048638C:Tater Tot:750003:47280000:1C:80242B:0:0:0:0:0:0:0:0:0:0:0:0:36906:41241:5160:5160:880:1000:0.009226365:-7.81128:-1.192093E-07:16043015:17702272:12000:12000:1000:1000:-0.01531982:-19.02808:0:

(2) 82538 damage from Hyperdrive (0x4000 extra damage mask)
  15:40024FBA:Kefka:28E8:Hyperdrive:106C1DBA:Okonomi Yaki:750003:426B4001:1C:28E88000:0:0:0:0:0:0:0:0:0:0:0:0:35811:62464:4560:4560:940:1000:-0.1586061:-5.753153:0:30098906:31559062:12000:12000:1000:1000:0.3508911:0.4425049:2.384186E-07:

(3) 22109 damage from Grand Cross Omega (:3E:0: shift, unknown 0x40000 flag)
  16:40001333:Neo Exdeath:242D:Grand Cross Omega:1048638C:Tater Tot:3E:0:750003:565D0000:1C:80242D:0:0:0:0:0:0:0:0:0:0:41241:41241:5160:5160:670:1000:-0.3251641:6.526299:1.192093E-07:7560944:17702272:12000:12000:1000:1000:0:19:2.384186E-07:

(4) 15732 crit heal from 3 confession stack Plenary Indulgence (:?13:4C3: shift)
  16:10647D2F:Tako Yaki:1D09:Plenary Indulgence:106DD019:Okonomi Yaki:313:4C3:10004:3D74:0:0:0:0:0:0:0:0:0:0:0:0:7124:40265:14400:9192:1000:1000:-10.78815:11.94781:0:11343:40029:19652:16451:1000:1000:6.336648:7.710004:0:

(5) instant death twister
  16:40004D5D:Twintania:26AB:Twister:10573FDC:Tini Poutini:33:0:1C:26AB8000:0:0:0:0:0:0:0:0:0:0:0:0:43985:43985:5760:5760:910:1000:-8.42179:9.49251:-1.192093E-07:57250:57250:0:0:1000:1000:-8.565645:10.20959:0:

(6) zero damage targetless aoe (E0000000 target)
  16:103AAEE4:Potato Chippy:B1:Miasma II:E0000000::0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0::::::::::19400:40287:17649:17633:1000:1000:-0.656189:-3.799561:-5.960464E-08:

*/

/* eslint-enable */

const ShortNamify = (name, playerNicks) => {
  // TODO: make this unique among the party in case of first name collisions.
  // TODO: probably this should be a general cactbot utility.
  if (!name) return '???';
  const nick = playerNicks[name];
  if (nick) return nick;
  const idx = name.indexOf(' ');
  return idx < 0 ? name : name.substr(0, idx);
};
const Translate = (lang, obj) => {
  var _obj$lang;

  if (typeof obj !== 'object') return obj;
  return (_obj$lang = obj[lang]) !== null && _obj$lang !== void 0 ? _obj$lang : obj['en'];
};
const GetFormattedTime = (baseTime, time) => {
  if (!baseTime) return '';
  const totalSeconds = Math.floor((time - baseTime) / 1000);
  const seconds = totalSeconds % 60;
  const minutes = Math.floor(totalSeconds / 60);
  return `${minutes}:${seconds < 10 ? `0${seconds}` : seconds}`;
}; // Turns a scrambled string damage field into an integer.
// Since fields are modified in place right now, this does nothing if called
// again with an integer.  This is kind of a hack, sorry.

const UnscrambleDamage = field => {
  if (field === undefined) return 0;
  const len = field.length;
  if (len <= 4) return 0; // Get the left two bytes as damage.

  let damage = parseInt(field.substr(0, len - 4), 16); // Check for third byte == 0x40.

  if (field[len - 4] === '4') {
    // Wrap in the 4th byte as extra damage.  See notes above.
    const rightDamage = parseInt(field.substr(len - 2, 2), 16);
    damage = damage - rightDamage + (rightDamage << 16);
  }

  return damage;
};
const IsPlayerId = id => {
  if (id === undefined) return false;
  const firstChar = id[0];
  return firstChar ? firstChar < '4' : false;
};
const IsTriggerEnabled = (options, id) => {
  if (id in options.DisabledTriggers) return false;
  const autoConfig = options.PerTriggerAutoConfig[id];
  if (autoConfig) return autoConfig.enabled;
  return true;
};
const GetSoloMistakeText = ability => {
  return {
    en: `${ability} (alone)`,
    de: `${ability} (allein)`,
    fr: `${ability} (seul(e))`,
    ja: `${ability} (一人)`,
    cn: `${ability} (单吃)`,
    ko: `${ability} (혼자 맞음)`
  };
};
const GetShareMistakeText = (ability, numTargets) => {
  return {
    en: `${ability} (share x${numTargets})`,
    de: `${ability} (geteilt mit ${numTargets})`,
    fr: `${ability} (partage)`,
    // FIXME
    ja: `${ability} (頭割り)`,
    // FIXME
    cn: `${ability} (重叠: ${numTargets}次)`,
    ko: `${ability} (같이 맞음: ${numTargets}명)`
  };
};

/***/ }),

/***/ 875:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {


// EXTERNAL MODULE: ./resources/not_reached.ts
var not_reached = __webpack_require__(62);
// EXTERNAL MODULE: ./resources/overlay_plugin_api.ts
var overlay_plugin_api = __webpack_require__(959);
// EXTERNAL MODULE: ./resources/user_config.ts
var user_config = __webpack_require__(456);
// EXTERNAL MODULE: ./resources/netlog_defs.ts
var netlog_defs = __webpack_require__(21);
// EXTERNAL MODULE: ./resources/netregexes.ts
var netregexes = __webpack_require__(622);
// EXTERNAL MODULE: ./resources/regexes.ts
var regexes = __webpack_require__(402);
;// CONCATENATED MODULE: ./ui/raidboss/common_replacement.ts
// TODO: maybe this should be structured identically to a timelineReplace section.
// It's awkward to refer to these string keys, so name them as replaceSync[keys.sealKey].
const syncKeys = {
  // Seal is trying to match these types of lines, and is more complicated because it's
  // trying to also capture the area name:
  //   parsed log lines: 00:0839::Something will be sealed off
  //   network log lines: 00|timestamp|0839||Something will be sealed off
  //   NetRegexes: ^^(?:00)\|(?:[^|]*)\|(?:0839)\|(?:[^|]*)\|(?:Something will be sealed off.*?)\|
  seal: '(?<=00:0839::|00\\|[^|]*\\|0839\\|\\||\\|\\(\\?:)([^|]*) will be sealed off(?: in (?:[0-9]+ seconds)?)?',
  unseal: 'is no longer sealed',
  engage: 'Engage!'
};
const textKeys = {
  // Match directions in replaceText
  // eg: `(N)`, `(SW)`, `(NE/NW)`, etc.
  E: '(?<= \\(|\\/)E(?=\\)|\\/)',
  N: '(?<= \\(|\\/)N(?=\\)|\\/)',
  S: '(?<= \\(|\\/)S(?=\\)|\\/)',
  W: '(?<= \\(|\\/)W(?=\\)|\\/)',
  NE: '(?<= \\(|\\/)NE(?=\\)|\\/)',
  NW: '(?<= \\(|\\/)NW(?=\\)|\\/)',
  SE: '(?<= \\(|\\/)SE(?=\\)|\\/)',
  SW: '(?<= \\(|\\/)SW(?=\\)|\\/)',
  // Match Roles in replaceText
  // eg: `(Tank)`, `(Healer)`, `(DPS)`, etc
  Tank: '(?<= \\(|\\/)Tanks?(?=\\)|\\/)',
  Healer: '(?<= \\(|\\/)Healers?(?=\\)|\\/)',
  DPS: '(?<= \\(|\\/)DPS(?=\\)|\\/)',
  // Match `--1--` style text.
  Number: '--(\\s*\\d+\\s*)--'
};
const common_replacement_commonReplacement = {
  replaceSync: {
    [syncKeys.seal]: {
      en: '$1 will be sealed off',
      de: 'Noch 15 Sekunden, bis sich (?:(?:der|die|das) )?(?:Zugang zu(?:[rm]| den)? )?$1 schließt',
      fr: 'Fermeture d(?:e|u|es) (?:l\'|la |les? )?$1 dans',
      ja: '$1の封鎖まであと',
      cn: '距$1被封锁还有',
      ko: '15초 후에 $1[이가] 봉쇄됩니다'
    },
    [syncKeys.unseal]: {
      en: 'is no longer sealed',
      de: 'öffnet sich (?:wieder|erneut)',
      fr: 'Ouverture ',
      ja: 'の封鎖が解かれた',
      cn: '的封锁解除了',
      ko: '의 봉쇄가 해제되었습니다'
    },
    [syncKeys.engage]: {
      en: 'Engage!',
      de: 'Start!',
      fr: 'À l\'attaque',
      ja: '戦闘開始！',
      cn: '战斗开始！',
      ko: '전투 시작!'
    }
  },
  replaceText: {
    '--adds spawn--': {
      de: '--Adds erscheinen--',
      fr: '--Apparition d\'adds--',
      ja: '--雑魚出現--',
      cn: '--小怪出现--',
      ko: '--쫄 소환--'
    },
    '--adds targetable--': {
      de: '--Adds anvisierbar--',
      fr: '--Adds ciblables--',
      ja: '--雑魚ターゲット可能--',
      cn: '--小怪可选中--',
      ko: '--쫄 타겟 가능--'
    },
    '--center--': {
      de: '--Mitte--',
      fr: '--Centre--',
      ja: '--センター--',
      cn: '--中央--',
      ko: '--중앙--'
    },
    '\\(center\\)': {
      de: '(Mitte)',
      fr: '(Centre)',
      ja: '(センター)',
      cn: '(中央)',
      ko: '(중앙)'
    },
    '--clones appear--': {
      de: '--Klone erscheinen--',
      fr: '--Apparition des clones--',
      ja: '--幻影出現--',
      cn: '--幻影出现--',
      ko: '--분신 소환--'
    },
    '--corner--': {
      de: '--Ecke--',
      fr: '--Coin--',
      ja: '--コーナー--',
      cn: '--角落--',
      ko: '--구석--'
    },
    '--dps burn--': {
      de: '--DPS burn--',
      fr: '--Burn dps--',
      ja: '--火力出せ--',
      cn: '--转火--',
      ko: '--딜 체크--'
    },
    '--east--': {
      de: '--Osten--',
      fr: '--Est--',
      ja: '--東--',
      cn: '--东--',
      ko: '--동쪽--'
    },
    '\\(east\\)': {
      de: '(Osten)',
      fr: '(Est)',
      ja: '(東)',
      cn: '(东)',
      ko: '(동쪽)'
    },
    'Enrage': {
      de: 'Finalangriff',
      fr: 'Enrage',
      ja: '時間切れ',
      cn: '狂暴',
      ko: '전멸기'
    },
    '--frozen--': {
      de: '--eingefroren--',
      fr: '--Gelé--',
      ja: '--凍結--',
      cn: '--冻结--',
      ko: '--빙결--'
    },
    '--in--': {
      de: '--Rein--',
      fr: '--Intérieur--',
      ja: '--中--',
      cn: '--内--',
      ko: '--안--'
    },
    '\\(In\\)': {
      de: '(Rein)',
      fr: '(Intérieur)',
      ja: '(中)',
      cn: '(内)',
      ko: '(안)'
    },
    '\\(inner\\)': {
      de: '(innen)',
      fr: '(intérieur)',
      ja: '(中)',
      cn: '(内)',
      ko: '(안)'
    },
    '--jump--': {
      de: '--Sprung--',
      fr: '--Saut--',
      ja: '--ジャンプ--',
      cn: '--跳--',
      ko: '--점프--'
    },
    '--knockback--': {
      de: '--Rückstoß--',
      fr: '--Poussée--',
      ja: '--ノックバック--',
      cn: '--击退--',
      ko: '--넉백--'
    },
    '--middle--': {
      de: '--Mitte--',
      fr: '--Milieu--',
      ja: '--中央--',
      cn: '--中间--',
      ko: '--중앙--'
    },
    '\\(middle\\)': {
      de: '(Mitte)',
      fr: '(Milieu)',
      ja: '(中央)',
      cn: '(中间)',
      ko: '(중앙)'
    },
    '--north--': {
      de: '--Norden--',
      fr: '--Nord--',
      ja: '--北--',
      cn: '--北--',
      ko: '--북쪽--'
    },
    '\\(north\\)': {
      de: '(Norden)',
      fr: '(Nord)',
      ja: '(北)',
      cn: '(北)',
      ko: '(북쪽)'
    },
    '--northeast--': {
      de: '--Nordosten--',
      fr: '--Nord-Est--',
      ja: '--北東--',
      cn: '--东北--',
      ko: '--북동--'
    },
    '--northwest--': {
      de: '--Nordwesten--',
      fr: '--Nord-Ouest--',
      ja: '--北西--',
      cn: '--西北--',
      ko: '--북서--'
    },
    '--out--': {
      de: '--Raus--',
      fr: '--Extérieur--',
      ja: '--外--',
      cn: '--外--',
      ko: '--밖--'
    },
    '\\(Out\\)': {
      de: '(Raus)',
      fr: '(Extérieur)',
      ja: '(外)',
      cn: '(外)',
      ko: '(밖)'
    },
    '\\(outer\\)': {
      de: '(außen)',
      fr: '(extérieur)',
      ja: '(外)',
      cn: '(外)',
      ko: '(밖)'
    },
    '\\(outside\\)': {
      de: '(Draußen)',
      fr: '(À l\'extérieur)',
      ja: '(外)',
      cn: '(外面)',
      ko: '(바깥)'
    },
    '--rotate--': {
      de: '--rotieren--',
      fr: '--rotation--',
      ja: '--回転--',
      cn: '--旋转--',
      ko: '--회전--'
    },
    '--south--': {
      de: '--Süden--',
      fr: '--Sud--',
      ja: '--南--',
      cn: '--南--',
      ko: '--남쪽--'
    },
    '\\(south\\)': {
      de: '(Süden)',
      fr: '(Sud)',
      ja: '(南)',
      cn: '(南)',
      ko: '(남쪽)'
    },
    '--southeast--': {
      de: '--Südosten--',
      fr: '--Sud-Est--',
      ja: '--南東--',
      cn: '--东南--',
      ko: '--남동--'
    },
    '--southwest--': {
      de: '--Südwesten--',
      fr: '--Sud-Ouest--',
      ja: '--南西--',
      cn: '--西南--',
      ko: '--남서--'
    },
    '--split--': {
      de: '--teilen--',
      fr: '--division--',
      ja: '--分裂--',
      cn: '--分裂--',
      ko: '--분열--'
    },
    '--stun--': {
      de: '--Betäubung--',
      fr: '--Étourdissement--',
      ja: '--スタン--',
      cn: '--击晕--',
      ko: '--기절--'
    },
    '--sync--': {
      de: '--synchronisation--',
      fr: '--synchronisation--',
      ja: '--シンク--',
      cn: '--同步化--',
      ko: '--동기화--'
    },
    '--([0-9]+x )?targetable--': {
      de: '--$1anvisierbar--',
      fr: '--$1ciblable--',
      ja: '--$1ターゲット可能--',
      cn: '--$1可选中--',
      ko: '--$1타겟 가능--'
    },
    '--teleport--': {
      de: '--teleportation--',
      fr: '--téléportation--',
      ja: '--テレポート--',
      cn: '--传送--',
      ko: '--순간 이동--'
    },
    '--untargetable--': {
      de: '--nich anvisierbar--',
      fr: '--non ciblable--',
      ja: '--ターゲット不可--',
      cn: '--无法选中--',
      ko: '--타겟 불가능--'
    },
    '--west--': {
      de: '--Westen--',
      fr: '--Ouest--',
      ja: '--西--',
      cn: '--西--',
      ko: '--서쪽--'
    },
    [textKeys.E]: {
      de: 'O',
      fr: 'E',
      ja: '東',
      cn: '东',
      ko: '동'
    },
    [textKeys.N]: {
      de: 'N',
      fr: 'N',
      ja: '北',
      cn: '北',
      ko: '북'
    },
    [textKeys.S]: {
      de: 'S',
      fr: 'S',
      ja: '南',
      cn: '南',
      ko: '남'
    },
    [textKeys.W]: {
      de: 'W',
      fr: 'O',
      ja: '西',
      cn: '西',
      ko: '서'
    },
    [textKeys.NE]: {
      de: 'NO',
      fr: 'NE',
      ja: '北東',
      cn: '东北',
      ko: '북동'
    },
    [textKeys.NW]: {
      de: 'NW',
      fr: 'NO',
      ja: '北西',
      cn: '西北',
      ko: '북서'
    },
    [textKeys.SE]: {
      de: 'SO',
      fr: 'SE',
      ja: '南東',
      cn: '东南',
      ko: '남동'
    },
    [textKeys.SW]: {
      de: 'SW',
      fr: 'SO',
      ja: '南西',
      cn: '西南',
      ko: '남서'
    },
    [textKeys.Tank]: {
      de: 'Tank',
      fr: 'Tank',
      ja: 'タンク',
      cn: '坦克',
      ko: '탱커'
    },
    [textKeys.Healer]: {
      de: 'Heiler',
      fr: 'Healer',
      ja: 'ヒーラー',
      cn: '治疗',
      ko: '힐러'
    },
    [textKeys.DPS]: {
      de: 'DPS',
      fr: 'DPS',
      ja: 'DPS',
      cn: 'DPS',
      ko: '딜러'
    },
    [textKeys.Number]: {
      de: '--$1--',
      fr: '--$1--',
      ja: '--$1--',
      cn: '--$1--',
      ko: '--$1--'
    }
  }
}; // Keys into commonReplacement objects that represent "partial" translations,
// in the sense that even if it applies, there still needs to be another
// translation for it to be complete.  These keys should be exactly the same
// as the keys from the commonReplacement block above.  These are used for
// timeline regexes only.

const common_replacement_partialCommonTimelineReplacementKeys = [// Because the zone name needs to be translated here, this is partial.
syncKeys.seal, // Directions
textKeys.E, textKeys.N, textKeys.S, textKeys.W, textKeys.NE, textKeys.NW, textKeys.SE, textKeys.SW, // Roles
textKeys.Tank, textKeys.Healer, textKeys.DPS]; // Same as the timeline version above, but only for trigger regexes.

const common_replacement_partialCommonTriggerReplacementKeys = [// Because the zone name needs to be translated here, this is partial.
syncKeys.seal];
;// CONCATENATED MODULE: ./resources/translations.ts


 // Fill in LocaleRegex so that things like LocaleRegex.countdownStart.de is a valid regex.

const localeLines = {
  countdownStart: {
    en: 'Battle commencing in (?<time>\\y{Float}) seconds! \\((?<player>.*?)\\)',
    de: 'Noch (?<time>\\y{Float}) Sekunden bis Kampfbeginn! \\((?<player>.*?)\\)',
    fr: 'Début du combat dans (?<time>\\y{Float}) secondes[ ]?! \\((?<player>.*?)\\)',
    ja: '戦闘開始まで(?<time>\\y{Float})秒！ （(?<player>.*?)）',
    cn: '距离战斗开始还有(?<time>\\y{Float})秒！ （(?<player>.*?)）',
    ko: '전투 시작 (?<time>\\y{Float})초 전! \\((?<player>.*?)\\)'
  },
  countdownEngage: {
    en: 'Engage!',
    de: 'Start!',
    fr: 'À l\'attaque[ ]?!',
    ja: '戦闘開始！',
    cn: '战斗开始！',
    ko: '전투 시작!'
  },
  countdownCancel: {
    en: 'Countdown canceled by (?<player>\\y{Name})',
    de: '(?<player>\\y{Name}) hat den Countdown abgebrochen',
    fr: 'Le compte à rebours a été interrompu par (?<player>\\y{Name})[ ]?\\.',
    ja: '(?<player>\\y{Name})により、戦闘開始カウントがキャンセルされました。',
    cn: '(?<player>\\y{Name})取消了战斗开始倒计时。',
    ko: '(?<player>\\y{Name}) 님이 초읽기를 취소했습니다\\.'
  },
  areaSeal: {
    en: '(?<area>.*?) will be sealed off in (?<time>\\y{Float}) seconds!',
    de: 'Noch (?<time>\\y{Float}) Sekunden, bis sich (?<area>.*?) schließt',
    fr: 'Fermeture (?<area>.*?) dans (?<time>\\y{Float}) secondes[ ]?\\.',
    ja: '(?<area>.*?)の封鎖まであと(?<time>\\y{Float})秒',
    cn: '距(?<area>.*?)被封锁还有(?<time>\\y{Float})秒',
    ko: '(?<time>\\y{Float})초 후에 (?<area>.*?)(이|가) 봉쇄됩니다\\.'
  },
  areaUnseal: {
    en: '(?<area>.*?) is no longer sealed.',
    de: '(?<area>.*?) öffnet sich erneut.',
    fr: 'Ouverture (?<area>.*?)[ ]?!',
    ja: '(?<area>.*?)の封鎖が解かれた……',
    cn: '(?<area>.*?)的封锁解除了',
    ko: '(?<area>.*?)의 봉쇄가 해제되었습니다\\.'
  },
  // Recipe name always start with \ue0bb
  // HQ icon is \ue03c
  craftingStart: {
    en: 'You begin synthesizing (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
    de: 'Du hast begonnen, durch Synthese (?<count>(ein(e|es|em|er)?|\\d+) )?\ue0bb(?<recipe>.*) herzustellen\\.',
    fr: 'Vous commencez à fabriquer (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(×(?<count>\\d+))?の製作を開始した。',
    cn: '(?<player>\\y{Name})开始制作“\ue0bb(?<recipe>.*)”(×(?<count>\\d+))?。',
    ko: '\ue0bb(?<recipe>.*)(×(?<count>\\d+)개)? 제작을 시작합니다\\.'
  },
  trialCraftingStart: {
    en: 'You begin trial synthesis of \ue0bb(?<recipe>.*)\\.',
    de: 'Du hast mit der Testsynthese von \ue0bb(?<recipe>.*) begonnen\\.',
    fr: 'Vous commencez une synthèse d\'essai pour une? \ue0bb(?<recipe>.*)\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習を開始した。',
    cn: '(?<player>\\y{Name})开始练习制作\ue0bb(?<recipe>.*)。',
    ko: '\ue0bb(?<recipe>.*) 제작 연습을 시작합니다\\.'
  },
  craftingFinish: {
    en: 'You synthesize (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
    de: 'Du hast erfolgreich (?<count>(ein(e|es|em|er)?|\\d+) )?(?<recipe>.*)(\ue03c)? hergestellt\\.',
    fr: 'Vous fabriquez (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+))?を完成させた！',
    cn: '(?<player>\\y{Name})制作“\ue0bb(?<recipe>.*)(\ue03c)?”(×(?<count>\\d+))?成功！',
    ko: '(?<player>\\y{Name}) 님이 \ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+)개)?(을|를) 완성했습니다!'
  },
  trialCraftingFinish: {
    en: 'Your trial synthesis of \ue0bb(?<recipe>.*) proved a success!',
    de: 'Die Testsynthese von \ue0bb(?<recipe>.*) war erfolgreich!',
    fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) a été couronnée de succès!',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に成功した！',
    cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)成功了！',
    ko: '\ue0bb(?<recipe>.*) 제작 연습에 성공했습니다!'
  },
  craftingFail: {
    en: 'Your synthesis fails!',
    de: 'Deine Synthese ist fehlgeschlagen!',
    fr: 'La synthèse échoue\\.{3}',
    ja: '(?<player>\\y{Name})は製作に失敗した……',
    cn: '(?<player>\\y{Name})制作失败了……',
    ko: '제작에 실패했습니다……\\.'
  },
  trialCraftingFail: {
    en: 'Your trial synthesis of \ue0bb(?<recipe>.*) failed\\.{3}',
    de: 'Die Testsynthese von \ue0bb(?<recipe>.*) ist fehlgeschlagen\\.{3}',
    fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) s\'est soldée par un échec\\.{3}',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に失敗した……',
    cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)失败了……',
    ko: '\ue0bb(?<recipe>.*) 제작 연습에 실패했습니다……\\.'
  },
  craftingCancel: {
    en: 'You cancel the synthesis\\.',
    de: 'Du hast die Synthese abgebrochen\\.',
    fr: 'La synthèse est annulée\\.',
    ja: '(?<player>\\y{Name})は製作を中止した。',
    cn: '(?<player>\\y{Name})中止了制作作业。',
    ko: '제작을 중지했습니다\\.'
  },
  trialCraftingCancel: {
    en: 'You abandoned trial synthesis\\.',
    de: 'Testsynthese abgebrochen\\.',
    fr: 'Vous avez interrompu la synthèse d\'essai\\.',
    ja: '(?<player>\\y{Name})は製作練習を中止した。',
    cn: '(?<player>\\y{Name})停止了练习。',
    ko: '제작 연습을 중지했습니다\\.'
  }
};

class RegexSet {
  get localeRegex() {
    if (this.regexes) return this.regexes;
    this.regexes = this.buildLocaleRegexes(localeLines, s => regexes/* default.gameLog */.Z.gameLog({
      line: s + '.*?'
    }));
    return this.regexes;
  }

  get localeNetRegex() {
    if (this.netRegexes) return this.netRegexes;
    this.netRegexes = this.buildLocaleRegexes(localeLines, s => netregexes/* default.gameLog */.Z.gameLog({
      line: s + '[^|]*?'
    }));
    return this.netRegexes;
  }

  buildLocaleRegexes(locales, builder) {
    return Object.fromEntries(Object.entries(locales).map(([key, lines]) => [key, this.buildLocaleRegex(lines, builder)]));
  }

  buildLocaleRegex(lines, builder) {
    const regexEn = builder(lines.en);
    return {
      en: regexEn,
      de: lines.de !== undefined ? builder(lines.de) : regexEn,
      fr: lines.fr !== undefined ? builder(lines.fr) : regexEn,
      ja: lines.ja !== undefined ? builder(lines.ja) : regexEn,
      cn: lines.cn !== undefined ? builder(lines.cn) : regexEn,
      ko: lines.ko !== undefined ? builder(lines.ko) : regexEn
    };
  }

}

const regexSet = new RegexSet();
const LocaleRegex = regexSet.localeRegex;
const LocaleNetRegex = regexSet.localeNetRegex; // Translate a trigger or timeline regex (replaceSync) or timeline text (replaceText),
// returning the text and whether or not it can be considered "translated".
// Note, this won't catch anything that needs multiple translations, but will catch
// anything from common translations that are partial (e.g. a seal regex needs
// a zone name to be considered a full translation.

const translateWithReplacements = (text, replaceKey, replaceLang, replacements) => {
  // All regex replacements are always global.
  const isGlobal = replaceKey === 'replaceSync';
  let wasTranslated = false;

  for (const r of replacements !== null && replacements !== void 0 ? replacements : []) {
    if (r.locale && r.locale !== replaceLang) continue;
    const reps = r[replaceKey];
    if (!reps) continue;

    for (const [key, value] of Object.entries(reps)) {
      const regex = isGlobal ? Regexes.parseGlobal(key) : Regexes.parse(key);
      if (text.match(regex)) wasTranslated = true;
      text = text.replace(regex, value);
    }
  } // Common Replacements


  const replacement = commonReplacement[replaceKey];

  for (const [key, value] of Object.entries(replacement !== null && replacement !== void 0 ? replacement : {})) {
    const repl = value[replaceLang];
    if (repl === undefined) continue;
    const regex = isGlobal ? Regexes.parseGlobal(key) : Regexes.parse(key);
    const partialKeys = replaceKey === 'replaceSync' ? partialCommonTriggerReplacementKeys : partialCommonTimelineReplacementKeys;

    if (text.match(regex)) {
      // Consider any partial translations as "not found" (e.g. a seal
      // message that still needs the zone name to be translated to be
      // considered fully translated).
      let isPartial = false;

      for (const partialKey of partialKeys) {
        if (Regexes.parseGlobal(partialKey).test(key)) {
          isPartial = true;
          break;
        }
      }

      if (!isPartial) wasTranslated = true;
    }

    text = text.replace(regex, repl);
  }

  return {
    text,
    wasTranslated
  };
}; // Translates a timeline or trigger regex for a given language.

const translateRegex = (text, replaceLang, replacements) => {
  if (typeof text === 'string') return translateWithReplacements(text, 'replaceSync', replaceLang, replacements).text;
  return translateWithReplacements(text.source, 'replaceSync', replaceLang, replacements).text;
}; // Translates a timeline text for a given language.

const translateText = (text, replaceLang, replacements) => translateWithReplacements(text, 'replaceText', replaceLang, replacements).text;
// EXTERNAL MODULE: ./resources/util.ts
var util = __webpack_require__(509);
// EXTERNAL MODULE: ./resources/zone_id.ts
var zone_id = __webpack_require__(588);
// EXTERNAL MODULE: ./resources/zone_info.ts
var zone_info = __webpack_require__(902);
;// CONCATENATED MODULE: ./ui/oopsyraidsy/combat_state.ts
// Handles when to start and stop combat.
// Outside callers (e.g. DamageTracker) can call StartCombat/StopCombat as needed from
// various sources (lines, events) and this will apply hysteresis to only emit
// OnStartEncounter/OnStopEncounter events back to DamageTracker on edge transitions.
class CombatState {
  constructor(damageTracker) {
    this.damageTracker = damageTracker;
    this.Reset();
  }

  Reset() {
    this.startTime = undefined;
    this.stopTime = undefined;
  }

  StartCombat(timestamp) {
    // Wiping / in combat state / damage are all racy with each other.
    // One potential ordering:
    //   -in combat: false
    //   -wipe
    //   -belated death/damage <-- this damage shouldn't start
    //   -damage (early pull) <-- this damage should
    //   -in combat: true
    // Therefore, suppress "start combat" after wipes within a short
    // period of time.  Gross.
    if (this.startTime !== undefined) return;
    const kMinimumSecondsAfterWipe = 5;
    if (this.stopTime && timestamp - this.stopTime < 1000 * kMinimumSecondsAfterWipe) return;
    this.startTime = timestamp;
    this.stopTime = undefined;
    this.damageTracker.OnStartEncounter(timestamp);
  }

  StopCombat(timestamp) {
    if (this.stopTime !== undefined) return;
    this.startTime = undefined;
    this.stopTime = timestamp;
    this.damageTracker.OnStopEncounter(timestamp);
  }

}
// EXTERNAL MODULE: ./ui/oopsyraidsy/oopsy_common.ts
var oopsy_common = __webpack_require__(416);
;// CONCATENATED MODULE: ./resources/party.ts


const emptyRoleToPartyNames = () => {
  return {
    tank: [],
    healer: [],
    dps: [],
    crafter: [],
    gatherer: [],
    none: []
  };
};

class PartyTracker {
  details = [];
  partyNames_ = [];
  partyIds_ = [];
  allianceNames_ = [];
  allianceIds_ = [];
  nameToRole_ = {};
  idToName_ = {};
  roleToPartyNames_ = emptyRoleToPartyNames(); // Bind this to PartyChanged events.

  onPartyChanged(e) {
    this.reset();
    this.details = e.party;

    for (const p of e.party) {
      this.allianceIds_.push(p.id);
      this.allianceNames_.push(p.name);
      const jobName = util/* default.jobEnumToJob */.Z.jobEnumToJob(p.job);
      const role = util/* default.jobToRole */.Z.jobToRole(jobName);
      this.idToName_[p.id] = p.name;
      this.nameToRole_[p.name] = role;

      if (p.inParty) {
        this.partyIds_.push(p.id);
        this.partyNames_.push(p.name);
        this.roleToPartyNames_[role].push(p.name);
      }
    }
  }

  reset() {
    // original event data
    this.details = [];
    this.partyNames_ = [];
    this.partyIds_ = [];
    this.allianceNames_ = [];
    this.allianceIds_ = [];
    this.nameToRole_ = {};
    this.idToName_ = {}; // role -> [names] but only for party

    this.roleToPartyNames_ = emptyRoleToPartyNames();
  } // returns an array of the names of players in your immediate party


  get partyNames() {
    return this.partyNames_;
  }

  get partyIds() {
    return this.partyIds_;
  } // returns an array of the names of players in your alliance


  get allianceNames() {
    return this.allianceNames_;
  } // returns an array of the names of tanks in your immediate party


  get tankNames() {
    return this.roleToPartyNames_['tank'];
  } // returns an array of the names of healers in your immediate party


  get healerNames() {
    return this.roleToPartyNames_['healer'];
  } // returns an array of the names of dps players in your immediate party


  get dpsNames() {
    return this.roleToPartyNames_['dps'];
  } // returns true if the named player in your alliance is a particular role


  isRole(name, role) {
    return this.nameToRole_[name] === role;
  } // returns true if the named player in your alliance is a tank


  isTank(name) {
    return this.isRole(name, 'tank');
  } // returns true if the named player in your alliance is a healer


  isHealer(name) {
    return this.isRole(name, 'healer');
  } // returns true if the named player in your alliance is a dps


  isDPS(name) {
    return this.isRole(name, 'dps');
  } // returns true if the named player is in your immediate party


  inParty(name) {
    return this.partyNames.includes(name);
  } // returns true if the named player is in your alliance


  inAlliance(name) {
    return this.allianceNames.includes(name);
  } // for a named player, returns the other tank in your immediate party
  // if named player is not a tank, or there's not exactly two tanks
  // in your immediate party, returns null.


  otherTank(name) {
    const names = this.tankNames;
    if (names.length !== 2) return;
    if (names[0] === name) return names[1];
    if (names[1] === name) return names[0];
  } // see: otherTank, but for healers.


  otherHealer(name) {
    const names = this.roleToPartyNames_['healer'];
    if (names.length !== 2) return;
    if (names[0] === name) return names[1];
    if (names[1] === name) return names[0];
  } // returns the job name of the specified party member


  jobName(name) {
    var _this$details$partyIn;

    const partyIndex = this.partyNames.indexOf(name);
    if (partyIndex >= 0) return util/* default.jobEnumToJob */.Z.jobEnumToJob((_this$details$partyIn = this.details[partyIndex]) === null || _this$details$partyIn === void 0 ? void 0 : _this$details$partyIn.job);
  }

  nameFromId(id) {
    return this.idToName_[id];
  }

}
;// CONCATENATED MODULE: ./ui/oopsyraidsy/buff_map.ts
const missedEffectBuffMap = [{
  id: 'Collective Unconscious',
  type: 'mitigation',
  effectId: '351',
  collectSeconds: 20
}, {
  id: 'Passage of Arms',
  type: 'mitigation',
  // Arms Up = 498 (others), Passage Of Arms = 497 (you).  Use both in case everybody is missed.
  effectId: ['497', '498'],
  ignoreSelf: true,
  collectSeconds: 15
}, {
  id: 'Divine Veil',
  type: 'mitigation',
  effectId: '2D7',
  ignoreSelf: true,
  collectSeconds: 2
}, {
  // RPR heal
  id: 'Crest of Time Returned',
  type: 'heal',
  effectId: 'A26',
  collectSeconds: 2
}];
const missedAbilityBuffMap = [{
  id: 'Heart Of Light',
  type: 'mitigation',
  abilityId: '3F20'
}, {
  id: 'Dark Missionary',
  type: 'mitigation',
  abilityId: '4057'
}, {
  id: 'Shake It Off',
  type: 'mitigation',
  abilityId: '1CDC'
}, {
  id: 'Technical Finish',
  type: 'damage',
  // 3F44 is the correct Quadruple Technical Finish, others are Dinky Technical Finish.
  abilityId: ['3F41', '3F42', '3F43', '3F44']
}, {
  id: 'Divination',
  type: 'damage',
  abilityId: '40A8'
}, {
  id: 'Brotherhood',
  type: 'damage',
  abilityId: '1CE4'
}, {
  id: 'Battle Litany',
  type: 'damage',
  abilityId: 'DE5'
}, {
  id: 'Embolden',
  type: 'damage',
  abilityId: '1D60'
}, {
  id: 'Battle Voice',
  type: 'damage',
  abilityId: '76',
  // TODO: remove this line after 5.x is not supported anymore.
  // Technically Battle Voice can't miss the bard itself, so this is a noop in 6.x.
  ignoreSelf: true
}, {
  // 5x
  id: 'Devotion',
  type: 'damage',
  abilityId: '1D1A'
}, {
  id: 'Searing Light',
  type: 'damage',
  abilityId: '64F2'
}, {
  id: 'Arcane Circle',
  type: 'damage',
  abilityId: '5F55'
}, {
  id: 'Troubadour',
  type: 'mitigation',
  abilityId: '1CED'
}, {
  id: 'Tactician',
  type: 'mitigation',
  abilityId: '41F9'
}, {
  id: 'Shield Samba',
  type: 'mitigation',
  abilityId: '3E8C'
}, {
  id: 'Mantra',
  type: 'mitigation',
  abilityId: '41'
}, {
  // LB1
  id: 'Healing Wind',
  type: 'heal',
  abilityId: 'CE'
}, {
  // LB2
  id: 'Breath of the Earth',
  type: 'heal',
  abilityId: 'CF'
}, {
  // LB 3
  id: 'Pulse of Life',
  type: 'heal',
  abilityId: 'D0'
}, {
  // SMN phoenix heal
  id: 'Everlasting Flight',
  type: 'heal',
  abilityId: '4085'
}, {
  id: 'Medica',
  type: 'heal',
  abilityId: '7C'
}, {
  id: 'Medica II',
  type: 'heal',
  abilityId: '85'
}, {
  id: 'Afflatus Rapture',
  type: 'heal',
  abilityId: '4096'
}, {
  id: 'Temperance',
  type: 'heal',
  abilityId: '751'
}, {
  id: 'Plenary Indulgence',
  type: 'heal',
  abilityId: '1D09'
}, {
  id: 'Succor',
  type: 'heal',
  abilityId: 'BA'
}, {
  id: 'Indomitability',
  type: 'heal',
  abilityId: 'DFF'
}, {
  id: 'Deployment Tactics',
  type: 'heal',
  abilityId: 'E01'
}, {
  id: 'Whispering Dawn',
  type: 'heal',
  abilityId: '323'
}, {
  id: 'Fey Blessing',
  type: 'heal',
  abilityId: '40A0'
}, {
  id: 'Consolation',
  type: 'heal',
  abilityId: '40A3'
}, {
  id: 'Angel\'s Whisper',
  type: 'heal',
  abilityId: '40A6'
}, {
  id: 'Fey Illumination',
  type: 'mitigation',
  abilityId: '325'
}, {
  id: 'Seraphic Illumination',
  type: 'mitigation',
  abilityId: '40A7'
}, {
  // Technically the mitigation is "Desperate Measures", but it comes from
  // the Expedient ability on each player and "Expedience" is the haste buff.
  id: 'Expedient',
  type: 'mitigation',
  abilityId: '650C'
}, {
  id: 'Kerachole',
  type: 'mitigation',
  abilityId: '5EEA'
}, {
  id: 'Panhaima',
  type: 'mitigation',
  abilityId: '5EF7'
}, {
  id: 'Angel Feathers',
  type: 'heal',
  abilityId: '1097'
}, {
  id: 'Helios',
  type: 'heal',
  abilityId: 'E10'
}, {
  id: 'Aspected Helios',
  type: 'heal',
  abilityId: ['E11', '3200']
}, {
  id: 'Celestial Opposition',
  type: 'heal',
  abilityId: '40A9'
}, {
  id: 'Stellar Burst',
  type: 'heal',
  abilityId: '1D10'
}, {
  id: 'Stellar Explosion',
  type: 'heal',
  abilityId: '1D11'
}, {
  id: 'Astral Stasis',
  type: 'heal',
  abilityId: '1098'
}, {
  id: 'Prognosis',
  type: 'heal',
  abilityId: '5EDE'
}, {
  id: 'Physis',
  type: 'heal',
  abilityId: '5EE0'
}, {
  id: 'Eukrasian Prognosis',
  type: 'heal',
  abilityId: '5EE4'
}, {
  id: 'Ixochole',
  type: 'heal',
  abilityId: '5EEB'
}, {
  id: 'Pepsis',
  type: 'heal',
  abilityId: '5EED'
}, {
  id: 'Physis II',
  type: 'heal',
  abilityId: '5EEE'
}, {
  id: 'Holos',
  type: 'heal',
  abilityId: '5EF6'
}, {
  id: 'Pneuma',
  type: 'heal',
  // 5EFE on enemies, and 6CB6 on friendlies.
  abilityId: '6CB6'
}, {
  id: 'White Wind',
  type: 'heal',
  abilityId: '2C8E'
}, {
  id: 'Gobskin',
  type: 'heal',
  abilityId: '4780'
}, {
  id: 'Lost Aethershield',
  type: 'mitigation',
  abilityId: '5753'
}];
const generateBuffTriggerIds = () => {
  const buffs = [...missedEffectBuffMap, ...missedAbilityBuffMap];
  buffs.sort((a, b) => a.id.localeCompare(b.id));
  return buffs.map(buff => `Buff ${buff.id}`);
};
;// CONCATENATED MODULE: ./ui/oopsyraidsy/death_report.ts



// TODO: lots of things left to do with death reports
// * probably include max hp as well?
// * consolidate HoT/DoT (with expandable CSS)
// * show mitigation effects that are active during damage (with icons?? or at least text to start?)
//   * also need to track effects that are active prior to the set of events passed in
//   * also need to handle effects lost (and gained?!) after death
// * consolidate multiple damage that killed (e.g. Solemn Confiteor x4) into summary text
// * maybe if a player is fully healed, trim abilities before that?
const processAbilityLine = splitLine => {
  var _splitLine$flagIdx, _splitLine;

  const flagIdx = netlog_defs/* default.Ability.fields.flags */.Z.Ability.fields.flags;
  let flags = (_splitLine$flagIdx = splitLine[flagIdx]) !== null && _splitLine$flagIdx !== void 0 ? _splitLine$flagIdx : '';
  let damage = (_splitLine = splitLine[flagIdx + 1]) !== null && _splitLine !== void 0 ? _splitLine : '';

  if (oopsy_common/* kShiftFlagValues.includes */.YU.includes(flags)) {
    var _splitLine2, _splitLine3;

    flags = (_splitLine2 = splitLine[flagIdx + 2]) !== null && _splitLine2 !== void 0 ? _splitLine2 : flags;
    damage = (_splitLine3 = splitLine[flagIdx + 3]) !== null && _splitLine3 !== void 0 ? _splitLine3 : damage;
  }

  const amount = (0,oopsy_common/* UnscrambleDamage */.GD)(damage);
  const lowByte = `00${flags}`.substr(-2);
  return {
    amount: amount,
    lowByte: lowByte,
    flags: flags,
    isHeal: oopsy_common/* kHealFlags.includes */.AL.includes(lowByte),
    isAttack: oopsy_common/* kAttackFlags.includes */.dH.includes(lowByte)
  };
};

// Contains all the information to display information about a player's death.
// `events` contain the last N seconds of tracked line events that pertain to the player.
// This class's job is to sort through those raw lines and generate a subset of parsed
// lines that various views might want to display in some fashion.
class DeathReport {
  constructor(data) {
    this.lang = data.lang;
    this.baseTimestamp = data.baseTimestamp;
    this.deathTimestamp = data.deathTimestamp;
    this.targetId = data.targetId;
    this.targetName = data.targetName;
    this.events = data.events;
  } // Generates an OopsyMistake that represents this DeathReport.


  static generateMistake(data) {
    // Walk backward through events until we find the last damage or a death reason.
    for (let i = data.events.length - 1; i >= 0; i--) {
      const event = data.events[i];
      if (!event) break;

      if (event.type === 'DeathReason') {
        return {
          type: 'death',
          name: data.targetName,
          text: event.text,
          report: data
        };
      } // TODO: consider combining multiple abilities that are taken in a very
      // short period of time, e.g. "A + B" or "C x4".


      if (event.type === 'Ability') {
        const ability = processAbilityLine(event.splitLine);

        if (ability.isAttack && ability.amount > 0) {
          var _event$splitLine$logD, _event$splitLine$logD2;

          const abilityName = (_event$splitLine$logD = event.splitLine[netlog_defs/* default.Ability.fields.ability */.Z.Ability.fields.ability]) !== null && _event$splitLine$logD !== void 0 ? _event$splitLine$logD : '???';
          const currentHp = (_event$splitLine$logD2 = event.splitLine[netlog_defs/* default.Ability.fields.targetCurrentHp */.Z.Ability.fields.targetCurrentHp]) !== null && _event$splitLine$logD2 !== void 0 ? _event$splitLine$logD2 : '???';
          const text = `${abilityName} (${ability.amount}/${currentHp})`;
          return {
            type: 'death',
            name: data.targetName,
            text: text,
            report: data
          };
        }
      }
    }

    return {
      type: 'death',
      name: data.targetName,
      text: '???',
      report: data
    };
  } // A helper function to turn a timestamp into a string relative to this DeathReport.
  // The base timestamp it is relative to is generally the start of the fight.


  makeRelativeTimeString(timestamp) {
    const base = this.baseTimestamp;
    if (!base) return '';
    const deltaMs = timestamp - base;
    const prefix = deltaMs < 0 ? '-' : '';
    const deltaTotalSeconds = Math.round(Math.abs(deltaMs) / 1000);
    const deltaSeconds = `00${deltaTotalSeconds % 60}`.substr(-2);
    const deltaMinutes = Math.floor(deltaTotalSeconds / 60);
    return `${prefix}${deltaMinutes}:${deltaSeconds}`;
  } // Lazily do some work to process the tracked lines from `this.events` into something that
  // can be displayed to the user.  This is the model for the live/summary views.


  parseReportLines() {
    if (this.parsedReportLines) return this.parsedReportLines;
    this.parsedReportLines = [];
    let lastCertainHp = undefined;
    let currentHp = undefined;
    let deathReasonIdx = undefined;

    for (const event of this.events) {
      let parsed = undefined;
      if (event.type === 'Ability') parsed = this.processAbility(event);else if (event.type === 'HoTDoT') parsed = this.processHoTDoT(event);else if (event.type === 'MissedAbility' || event.type === 'MissedEffect') parsed = this.processMissedBuff(event);else if (event.type === 'Mistake') parsed = this.processMistake(event);else if (event.type === 'DeathReason') parsed = this.processDeathReason(event); // After this point, we will always append this event,
      // but still have some post-processing to do.

      if (!parsed) continue;

      if (event.type === 'Ability' && parsed.amount !== undefined && parsed.amount < 0 && deathReasonIdx !== undefined) {
        // Found damage after a DeathReason, remove previous DeathReason.
        this.parsedReportLines.splice(deathReasonIdx);
        deathReasonIdx = undefined;
      } else if (event.type === 'DeathReason') {
        // Found a new DeathReason, track this index in case it needs to be removed.
        deathReasonIdx = this.parsedReportLines.length;
      } // Touch up the hp so it looks more valid.  There are only hp fields on certain
      // log lines, and more importantly it is polled from memory.  Therefore, if a
      // player takes a bunch of attacks simultaneously, the hp will be the same on
      // every line.  This looks incorrect, so do our best to fix this up.


      if (currentHp === undefined || lastCertainHp === undefined) {
        // If we haven't seen any log lines with hp yet, try to set it as an initial guess.
        currentHp = parsed.currentHp;
        lastCertainHp = parsed.currentHp;
      } else if (parsed.currentHp !== lastCertainHp) {
        // If we see a new hp value, then this is likely valid.
        currentHp = lastCertainHp = parsed.currentHp;
      } else {
        // For log lines that don't have a hitpoints line, fill in our best guess.
        // Or, we're seeing an identical hp value, so use previously adjusted amount.
        parsed.currentHp = currentHp;
      } // Note: parsed.amount < 0 is damage, parsed.amount > 0 is heals.


      if (currentHp !== undefined && parsed.amount !== undefined) {
        var _parsed, _parsed$icon;

        // If this attack killed somebody (or this is overkill), set an icon unless there's
        // already a mistake icon set.  Don't do this for belated heals because it looks weird.
        if (parsed.amount < 0 && currentHp + parsed.amount <= 0) (_parsed$icon = (_parsed = parsed).icon) !== null && _parsed$icon !== void 0 ? _parsed$icon : _parsed.icon = 'death'; // TODO: maybe use max hp here to clamp this?

        currentHp += parsed.amount;
      }

      this.parsedReportLines.push(parsed);
    }

    return this.parsedReportLines;
  }

  processGainsEffect(event) {
    var _event$splitLine$logD3;

    // TODO: we also need to filter effects that we don't care about, e.g. swiftcast?
    const effectName = (_event$splitLine$logD3 = event.splitLine[netlog_defs/* default.GainsEffect.fields.effect */.Z.GainsEffect.fields.effect]) !== null && _event$splitLine$logD3 !== void 0 ? _event$splitLine$logD3 : '???';
    const text = (0,oopsy_common/* Translate */.vN)(this.lang, {
      en: `Gain: ${effectName}`,
      de: `Erhalten: ${effectName}`,
      fr: `Gagne: ${effectName}`,
      ja: `獲得: ${effectName}`,
      cn: `获得: ${effectName}`,
      ko: `얻음: ${effectName}`
    });
    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      text: text
    };
  }

  processLosesEffect(event) {
    var _event$splitLine$logD4;

    // TODO: we also need to filter effects that we don't care about, e.g. swiftcast?
    const effectName = (_event$splitLine$logD4 = event.splitLine[netlog_defs/* default.LosesEffect.fields.effect */.Z.LosesEffect.fields.effect]) !== null && _event$splitLine$logD4 !== void 0 ? _event$splitLine$logD4 : '???';
    const text = (0,oopsy_common/* Translate */.vN)(this.lang, {
      en: `Lose: ${effectName}`,
      de: `Verloren: ${effectName}`,
      fr: `Perd: ${effectName}`,
      ja: `失う: ${effectName}`,
      cn: `失去: ${effectName}`,
      ko: `잃음: ${effectName}`
    });
    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      text: text
    };
  }

  processAbility(event) {
    var _splitLine$logDefinit, _event$mistakeText;

    const splitLine = event.splitLine;
    const ability = processAbilityLine(splitLine); // Zero damage abilities can be noisy and don't contribute much information, so skip.

    if (ability.amount === 0) return;
    let amount;
    let amountClass;
    let amountStr;

    if (ability.isHeal) {
      amountClass = 'heal';
      amountStr = ability.amount > 0 ? `+${ability.amount.toString()}` : ability.amount.toString();
      amount = ability.amount;
    } else if (ability.isAttack) {
      amountClass = 'damage';
      amountStr = ability.amount > 0 ? `-${ability.amount.toString()}` : ability.amount.toString();
      amount = -1 * ability.amount;
    } // Ignore abilities that are not damage or heals.  Any important abilities should generate an
    // effect.


    if (amountClass === undefined || amountStr === undefined) return;
    const abilityName = (_splitLine$logDefinit = splitLine[netlog_defs/* default.Ability.fields.ability */.Z.Ability.fields.ability]) !== null && _splitLine$logDefinit !== void 0 ? _splitLine$logDefinit : '???';
    const currentHpStr = splitLine[netlog_defs/* default.Ability.fields.targetCurrentHp */.Z.Ability.fields.targetCurrentHp];
    const currentHp = currentHpStr !== undefined ? parseInt(currentHpStr) : 0;
    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      currentHp: currentHp,
      amount: amount,
      amountStr: amountStr,
      amountClass: amountClass,
      icon: event.mistake,
      text: (_event$mistakeText = event.mistakeText) !== null && _event$mistakeText !== void 0 ? _event$mistakeText : abilityName
    };
  }

  processHoTDoT(event) {
    var _event$splitLine$logD5;

    const which = event.splitLine[netlog_defs/* default.NetworkDoT.fields.which */.Z.NetworkDoT.fields.which];
    const isHeal = which === 'HoT'; // Note: this amount is just raw bytes, and not the UnscrambleDamage version.

    let amount = parseInt((_event$splitLine$logD5 = event.splitLine[netlog_defs/* default.NetworkDoT.fields.damage */.Z.NetworkDoT.fields.damage]) !== null && _event$splitLine$logD5 !== void 0 ? _event$splitLine$logD5 : '', 16);
    if (amount <= 0) return;
    let amountClass;
    let amountStr;

    if (isHeal) {
      amountClass = 'heal';
      amountStr = amount > 0 ? `+${amount.toString()}` : amount.toString();
    } else {
      amountClass = 'damage';
      amountStr = amount > 0 ? `-${amount.toString()}` : amount.toString();
      amount *= -1;
    }

    const currentHpStr = event.splitLine[netlog_defs/* default.NetworkDoT.fields.currentHp */.Z.NetworkDoT.fields.currentHp];
    const currentHp = currentHpStr !== undefined ? parseInt(currentHpStr) : 0; // TODO: this line has an effect id, but we don't have an id -> string mapping for all ids.
    // We could consider looking this up in effects to try to find a name, but common ones
    // like Regen or Asylum aren't mapped there.

    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      currentHp: currentHp,
      amount: amount,
      amountStr: amountStr,
      amountClass: amountClass,
      text: which
    };
  }

  processMissedBuff(event) {
    let buffName;
    let sourceName;

    if (event.type === 'MissedAbility') {
      buffName = event.splitLine[netlog_defs/* default.Ability.fields.ability */.Z.Ability.fields.ability];
      sourceName = event.splitLine[netlog_defs/* default.Ability.fields.source */.Z.Ability.fields.source];
    } else if (event.type === 'MissedEffect') {
      buffName = event.splitLine[netlog_defs/* default.GainsEffect.fields.effect */.Z.GainsEffect.fields.effect];
      sourceName = event.splitLine[netlog_defs/* default.GainsEffect.fields.source */.Z.GainsEffect.fields.source];
    }

    if (!buffName || !sourceName) return;
    const text = (0,oopsy_common/* Translate */.vN)(this.lang, {
      en: `Missed ${buffName} (${sourceName})`,
      de: `${buffName} verfehlte (${sourceName})`,
      fr: `${buffName} manqué(e) (${sourceName})`,
      ja: `${buffName}をミスした (${sourceName}から)`,
      cn: `没吃到 ${buffName} (来自${sourceName})`,
      ko: `${buffName} 놓침 (${sourceName})`
    });
    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      icon: 'heal',
      text: (0,oopsy_common/* Translate */.vN)(this.lang, text)
    };
  }

  processMistake(event) {
    const mistake = event.mistakeEvent;
    const triggerType = mistake.triggerType; // Buffs are handled separately, and Damage types are annotated directly on the lines
    // where there is damage, rather than having a separate line.  Solo/Share mistakes
    // are merged with their ability via `mistakeText`.

    if (triggerType === 'Buff' || triggerType === 'Damage' || triggerType === 'Solo' || triggerType === 'Share') return;
    const text = (0,oopsy_common/* Translate */.vN)(this.lang, mistake.text);
    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      icon: mistake.type,
      text: text
    };
  }

  processDeathReason(event) {
    return {
      timestamp: event.timestamp,
      timestampStr: this.makeRelativeTimeString(event.timestamp),
      type: event.type,
      icon: 'death',
      text: event.text
    };
  }

}
;// CONCATENATED MODULE: ./ui/oopsyraidsy/missed_buff_collector.ts

// Abilities seem roughly instant.
// Observation: up to ~1.2 seconds for an effect to roll through the party.
const defaultCollectSeconds = 0.5;
// Handles tracking whether everybody received a buff or not.
// In response to missed buffs, calls `collectedBuffCallback` when timestamps have expired.
class MissedBuffCollector {
  buffs = {};

  constructor(requestTimestampCallback, collectedBuffCallback) {
    this.requestTimestampCallback = requestTimestampCallback;
    this.collectedBuffCallback = collectedBuffCallback;
  } // TODO: call something like this on zone change, etc?


  ExpireBuffsIfNeeded(timestamp) {
    for (const buffList of Object.values(this.buffs)) {
      for (const buffId of Object.keys(buffList)) {
        const collectedBuff = buffList[buffId];
        if (!collectedBuff) continue;
        if (timestamp > collectedBuff.timestamp) collectedBuff.expireCallback(timestamp);
      }
    }
  } // Caller has vetted that we care about the target, so we don't need to do that here.
  // Most (all) buffs only hit the party, and so no need to vet that the source is in the party.


  OnAbilityBuff(splitLine, buff) {
    const sourceId = splitLine[netlog_defs/* default.Ability.fields.sourceId */.Z.Ability.fields.sourceId];
    const targetId = splitLine[netlog_defs/* default.Ability.fields.targetId */.Z.Ability.fields.targetId];
    const buffName = splitLine[netlog_defs/* default.Ability.fields.ability */.Z.Ability.fields.ability];
    const timestamp = splitLine[netlog_defs/* default.Ability.fields.timestamp */.Z.Ability.fields.timestamp];
    if (sourceId === undefined || targetId === undefined || buffName === undefined || timestamp === undefined) return;
    this.OnBuff(new Date(timestamp).getTime(), splitLine, buff, buffName, sourceId, targetId);
  }

  OnEffectBuff(splitLine, buff) {
    const sourceId = splitLine[netlog_defs/* default.GainsEffect.fields.sourceId */.Z.GainsEffect.fields.sourceId];
    const targetId = splitLine[netlog_defs/* default.GainsEffect.fields.targetId */.Z.GainsEffect.fields.targetId];
    const buffName = splitLine[netlog_defs/* default.GainsEffect.fields.effect */.Z.GainsEffect.fields.effect];
    const timestamp = splitLine[netlog_defs/* default.GainsEffect.fields.timestamp */.Z.GainsEffect.fields.timestamp];
    if (sourceId === undefined || targetId === undefined || buffName === undefined || timestamp === undefined) return;
    this.OnBuff(new Date(timestamp).getTime(), splitLine, buff, buffName, sourceId, targetId);
  }

  OnBuff(timestamp, splitLine, buff, buffName, sourceId, targetId) {
    var _this$buffs, _this$buffs$sourceId, _buff$collectSeconds;

    const buffList = (_this$buffs$sourceId = (_this$buffs = this.buffs)[sourceId]) !== null && _this$buffs$sourceId !== void 0 ? _this$buffs$sourceId : _this$buffs[sourceId] = {}; // Expire this buff if needed.

    const expiredBuff = buffList[buff.id];

    if (expiredBuff && timestamp > expiredBuff.expireTimestamp) {
      // Handle and remove this buff if it has expired.
      expiredBuff.expireCallback(timestamp);
    } // If we're already tracking, and it hasn't expired, just append the targetId.


    const collectedBuff = buffList[buff.id];

    if (collectedBuff) {
      collectedBuff.targetIds.push(targetId);
      return;
    } // Otherwise, we're tracking a new buff.


    const collectSeconds = (_buff$collectSeconds = buff.collectSeconds) !== null && _buff$collectSeconds !== void 0 ? _buff$collectSeconds : defaultCollectSeconds;
    const expireTimestamp = timestamp + collectSeconds * 1000;

    const expireCallback = timestamp => {
      var _this$buffs$sourceId2, _this$buffs$sourceId3;

      // Re-get the buff from the map, so that repeated calls to expireCallback will not
      // call the collectedBuffCallback multiple times.
      const expiredBuff = (_this$buffs$sourceId2 = this.buffs[sourceId]) === null || _this$buffs$sourceId2 === void 0 ? void 0 : _this$buffs$sourceId2[buff.id];
      if (!expiredBuff) return;
      this.collectedBuffCallback(timestamp, expiredBuff);
      (_this$buffs$sourceId3 = this.buffs[sourceId]) === null || _this$buffs$sourceId3 === void 0 ? true : delete _this$buffs$sourceId3[buff.id];
    }; // If we get here, this buff is not being tracked yet.


    buffList[buff.id] = {
      timestamp: timestamp,
      splitLine: splitLine,
      expireTimestamp: expireTimestamp,
      sourceId: sourceId,
      buffName: buffName,
      targetIds: [targetId],
      buff: buff,
      expireCallback: expireCallback
    };
    this.requestTimestampCallback(expireTimestamp, expireCallback);
  }

}
;// CONCATENATED MODULE: ./ui/oopsyraidsy/player_state_tracker.ts







const emptyId = 'E0000000';
const timestampFieldIdx = 1; // TODO: add this to effect_id.ts?

const raiseEffectId = '94';

const getTimestamp = splitLine => {
  const timestampField = splitLine[timestampFieldIdx];
  if (timestampField === undefined) throw new not_reached/* UnreachableCode */.$();
  return new Date(timestampField).getTime();
};

// * Tracks various state about the party (party, pets, buffs, deaths).
// * Generates some internal mistakes that need extra tracking (missed buffs, deaths)
// * Tracks events in `trackedEvents` that can be handed to DeathReports for processing.
class PlayerStateTracker {
  triggerSets = [];
  partyIds = new Set();
  deadIds = new Set();
  idToPartyInfo = {};
  petIdToOwnerId = {};
  abilityIdToBuff = {};
  effectIdToBuff = {};
  trackedEvents = [];
  trackedEffectMap = {}; // The minimum amount of time to keep events for.

  eventWindowMs = 20 * 1000; // The time delta in the future to request cleaning up events from the past, after a cleanup.
  // The larger this is, the more it exchanges memory for cpu, to keep more events rather than
  // constantly cycling `trackedEvents`.  0 = clean up immediately.

  cleanupWindowMs = this.eventWindowMs * 2;
  // Cached ability -> mistake icon types for "simple" mistakes.
  mistakeDamageMap = {};
  mistakeShareMap = {};
  mistakeSoloMap = {};

  constructor(options, collector, requestTimestampCallback) {
    this.options = options;
    this.collector = collector;
    this.partyTracker = new PartyTracker();
    this.missedBuffCollector = new MissedBuffCollector(requestTimestampCallback, (timestamp, buff) => this.OnBuffCollected(timestamp, buff)); // Build maps of ids to buffs for ease of use.

    for (const buff of missedAbilityBuffMap) {
      if (typeof buff.abilityId === 'string') {
        this.abilityIdToBuff[buff.abilityId] = buff;
      } else {
        for (const id of buff.abilityId) this.abilityIdToBuff[id] = buff;
      }
    }

    for (const buff of missedEffectBuffMap) {
      if (typeof buff.effectId === 'string') {
        this.effectIdToBuff[buff.effectId] = buff;
      } else {
        for (const id of buff.effectId) this.effectIdToBuff[id] = buff;
      }
    }

    this.OnPartyChanged();
  }

  OnStartEncounter(timestamp) {
    this.baseTime = timestamp;
    this.collector.StartEncounter(timestamp);
  }

  OnStopEncounter(_timestamp) {// TODO: forward this along to MistakeObserver
  }

  PushTriggerSet(set) {
    this.triggerSets.push(set);

    for (const set of this.triggerSets) {
      for (const value of Object.values((_set$damageWarn = set.damageWarn) !== null && _set$damageWarn !== void 0 ? _set$damageWarn : {})) {
        var _set$damageWarn;

        this.mistakeDamageMap[value] = 'warn';
      }

      for (const value of Object.values((_set$damageFail = set.damageFail) !== null && _set$damageFail !== void 0 ? _set$damageFail : {})) {
        var _set$damageFail;

        this.mistakeDamageMap[value] = 'fail';
      }

      for (const value of Object.values((_set$shareWarn = set.shareWarn) !== null && _set$shareWarn !== void 0 ? _set$shareWarn : {})) {
        var _set$shareWarn;

        this.mistakeShareMap[value] = 'warn';
      }

      for (const value of Object.values((_set$shareFail = set.shareFail) !== null && _set$shareFail !== void 0 ? _set$shareFail : {})) {
        var _set$shareFail;

        this.mistakeShareMap[value] = 'fail';
      }

      for (const value of Object.values((_set$soloWarn = set.soloWarn) !== null && _set$soloWarn !== void 0 ? _set$soloWarn : {})) {
        var _set$soloWarn;

        this.mistakeSoloMap[value] = 'warn';
      }

      for (const value of Object.values((_set$soloFail = set.soloFail) !== null && _set$soloFail !== void 0 ? _set$soloFail : {})) {
        var _set$soloFail;

        this.mistakeSoloMap[value] = 'fail';
      }
    }
  }

  ClearTriggerSets() {
    this.triggerSets = [];
    this.mistakeDamageMap = {};
    this.mistakeShareMap = {};
    this.mistakeSoloMap = {};
  } // Called to update the list of player ids we care about.


  OnPartyChanged() {
    // TODO: do we need to clean anything else up here if this changes?
    // Or, do we just assume party doesn't change unless at zone change, so ignore edge cases?
    const arr = [...this.partyTracker.partyIds]; // Include the player in the party for mistakes even if there is no party.

    if (this.myPlayerId && !arr.includes(this.myPlayerId)) arr.push(this.myPlayerId);
    this.partyIds = new Set(arr);
  }

  Reset() {
    // Deliberately do not clear idToPartyInfo here.
    this.petIdToOwnerId = {};
    this.deadIds.clear();
    this.trackedEvents = [];
    this.baseTime = undefined;
  }

  OnChangeZone(timestamp, zoneName, zoneId) {
    this.Reset(); // combatants and party info are re-sent on zone change, so clear here
    // to periodically trim this.

    this.idToPartyInfo = {};
    this.collector.OnChangeZone(timestamp, zoneName, zoneId);
  }

  OnAddedCombatant(_line, splitLine) {
    const id = splitLine[netlog_defs/* default.AddedCombatant.fields.id */.Z.AddedCombatant.fields.id];
    const name = splitLine[netlog_defs/* default.AddedCombatant.fields.name */.Z.AddedCombatant.fields.name];
    const worldIdStr = splitLine[netlog_defs/* default.AddedCombatant.fields.worldId */.Z.AddedCombatant.fields.worldId];
    const jobStr = splitLine[netlog_defs/* default.AddedCombatant.fields.job */.Z.AddedCombatant.fields.job];

    if (id !== undefined && name !== undefined && worldIdStr !== undefined && jobStr !== undefined) {
      // Generate the party info we would get from OverlayPlugin via logs.
      const worldId = parseInt(worldIdStr);
      const job = parseInt(jobStr); // Consider everybody in the party for now and we'll figure it out later.

      const inParty = true;
      this.idToPartyInfo[id] = {
        id,
        name,
        worldId,
        job,
        inParty
      };
    } // Track pet owners as well.


    const petId = splitLine[netlog_defs/* default.AddedCombatant.fields.id */.Z.AddedCombatant.fields.id];
    const ownerId = splitLine[netlog_defs/* default.AddedCombatant.fields.ownerId */.Z.AddedCombatant.fields.ownerId];
    if (petId === undefined || ownerId === undefined) return;
    if (ownerId === '0' || ownerId === '0000') return; // Fix any lowercase ids.

    this.petIdToOwnerId[petId.toUpperCase()] = ownerId.toUpperCase();
  }

  OnPartyList(_line, splitLine) {
    var _splitLine$logDefinit;

    // So that party lists can be used from logs, we will fake `onPartyChanged` events
    // using log information.  AddedCombatant seems to come before PartyList lines,
    // so we accumulate those and then generate the party info from here.
    // Start from id0 and drop the hash at the end.
    const count = parseInt((_splitLine$logDefinit = splitLine[netlog_defs/* default.PartyList.fields.partyCount */.Z.PartyList.fields.partyCount]) !== null && _splitLine$logDefinit !== void 0 ? _splitLine$logDefinit : '');
    if (isNaN(count)) return;
    const ids = splitLine.slice(netlog_defs/* default.PartyList.fields.id0 */.Z.PartyList.fields.id0, -1);
    const party = [];
    ids.forEach((id, idx) => {
      const p = this.idToPartyInfo[id];
      if (!p) return; // count is 1-indexed and idx is 0-indexed.

      p.inParty = idx < count;
      party.push(p);
    });
    this.partyTracker.onPartyChanged({
      party
    });
    this.OnPartyChanged();
  }

  OnChangedPlayer(_line, splitLine) {
    const id = splitLine[netlog_defs/* default.ChangedPlayer.fields.id */.Z.ChangedPlayer.fields.id];
    if (id) this.SetPlayerId(id);
  }

  SetPlayerId(id) {
    if (this.myPlayerId === id) return;
    this.myPlayerId = id;
    this.OnPartyChanged();
  }

  IsInParty(id) {
    var _this$petIdToOwnerId$;

    if (id === undefined) return false;
    return this.partyIds.has((_this$petIdToOwnerId$ = this.petIdToOwnerId[id]) !== null && _this$petIdToOwnerId$ !== void 0 ? _this$petIdToOwnerId$ : id);
  }

  IsPlayerInParty(id) {
    if (id === undefined) return false;
    return this.partyIds.has(id);
  }

  OnAbility(_line, splitLine) {
    // Abilities can not miss everybody (e.g. Battle Voice never hitting the source)
    // so check both target and source.
    const targetId = splitLine[netlog_defs/* default.Ability.fields.targetId */.Z.Ability.fields.targetId];
    const sourceId = splitLine[netlog_defs/* default.Ability.fields.sourceId */.Z.Ability.fields.sourceId];
    const targetInParty = this.IsInParty(targetId);
    const sourceInParty = this.IsInParty(sourceId);
    if (sourceId === undefined || targetId === undefined) return; // Just in case, if a target is performing actions, then they are alive.

    if (sourceInParty) this.deadIds.delete(sourceId);
    const abilityId = splitLine[netlog_defs/* default.Ability.fields.id */.Z.Ability.fields.id];
    if (abilityId === undefined) return; // Only track events on players.  Ideally, it'd be nice to only include
    // party members in tracked events, but this is used for death reports
    // on dead non-party members.
    // TODO: maybe oopsy should only report party failures?

    if ((0,oopsy_common/* IsPlayerId */.jT)(targetId)) {
      this.trackedEvents.push({
        timestamp: getTimestamp(splitLine),
        type: 'Ability',
        targetId: targetId,
        splitLine: splitLine
      });
    } // Report missed buffs on the party.


    if (!targetInParty && !sourceInParty) return;
    const buff = this.abilityIdToBuff[abilityId];
    if (buff) this.missedBuffCollector.OnAbilityBuff(splitLine, buff);
  }

  OnGainsEffect(_line, splitLine) {
    var _this$trackedEffectMa, _this$trackedEffectMa2;

    const targetId = splitLine[netlog_defs/* default.GainsEffect.fields.targetId */.Z.GainsEffect.fields.targetId]; // Do not consider pets gaining effects here.
    // Summoner pets (e.g. Demi-Phoenix) gain party buffs (e.g. Embolden), with no sourceId/source.

    if (!targetId || !this.IsPlayerInParty(targetId)) return;
    const effectId = splitLine[netlog_defs/* default.GainsEffect.fields.effectId */.Z.GainsEffect.fields.effectId];
    if (effectId === undefined) return;
    const timestamp = getTimestamp(splitLine); // We need to request a cleanup somewhere.  Assume that somebody will gain an effect
    // at some point.  These happen less often than abilities, so we do it here just
    // to reduce per-log overhead.

    if (this.nextPruneTimestamp === undefined) {
      this.nextPruneTimestamp = timestamp + this.cleanupWindowMs;
    } else if (timestamp > this.nextPruneTimestamp) {
      this.PruneTrackedEvents(timestamp - this.eventWindowMs);
      this.nextPruneTimestamp = timestamp + this.cleanupWindowMs;
    } // Upon coming back to life, players get Transcendent / Weakness / Brink of Death.
    // However, they also get a Raise effect prior to coming back to life.


    if (effectId !== raiseEffectId) this.deadIds.delete(targetId); // Keep track of active buffs in case they have a very long duration and fall outside the
    // window of this.trackedEffects.

    const event = {
      timestamp: timestamp,
      type: 'GainsEffect',
      targetId: targetId,
      splitLine: splitLine
    };
    ((_this$trackedEffectMa2 = (_this$trackedEffectMa = this.trackedEffectMap)[targetId]) !== null && _this$trackedEffectMa2 !== void 0 ? _this$trackedEffectMa2 : _this$trackedEffectMa[targetId] = {})[effectId] = event;
    this.trackedEvents.push(event);
    const buff = this.effectIdToBuff[effectId.toUpperCase()];
    if (buff) this.missedBuffCollector.OnEffectBuff(splitLine, buff);
  }

  OnLosesEffect(_line, splitLine) {
    var _this$trackedEffectMa3;

    const targetId = splitLine[netlog_defs/* default.GainsEffect.fields.targetId */.Z.GainsEffect.fields.targetId];
    if (!targetId || !this.IsPlayerInParty(targetId)) return;
    const effectId = splitLine[netlog_defs/* default.GainsEffect.fields.effectId */.Z.GainsEffect.fields.effectId];
    if (effectId === undefined) return;
    this.trackedEvents.push({
      timestamp: getTimestamp(splitLine),
      type: 'LosesEffect',
      targetId: targetId,
      splitLine: splitLine
    });
    (_this$trackedEffectMa3 = this.trackedEffectMap[targetId]) === null || _this$trackedEffectMa3 === void 0 ? true : delete _this$trackedEffectMa3[effectId];
  }

  OnDeathReason(timestamp, reason) {
    const targetId = reason.id;
    if (!targetId || !(0,oopsy_common/* IsPlayerId */.jT)(targetId)) return;
    const text = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, reason.text);
    if (!text) return;
    this.trackedEvents.push({
      timestamp: timestamp,
      type: 'DeathReason',
      targetId: targetId,
      text: text
    });
  }

  OnMistakeObj(timestamp, mistake) {
    this.collector.OnMistakeObj(timestamp, mistake);
    const targetId = mistake.reportId;
    if (!targetId || !(0,oopsy_common/* IsPlayerId */.jT)(targetId)) return;
    this.trackedEvents.push({
      timestamp: timestamp,
      type: 'Mistake',
      targetId: targetId,
      mistakeEvent: mistake
    });
  } // Returns an event for why this person died.


  OnDefeated(_line, splitLine) {
    var _splitLine$logDefinit2;

    const targetId = splitLine[netlog_defs/* default.WasDefeated.fields.targetId */.Z.WasDefeated.fields.targetId];
    if (!targetId || !(0,oopsy_common/* IsPlayerId */.jT)(targetId)) return;
    const targetInParty = this.IsInParty(targetId);
    if (targetInParty) this.deadIds.add(targetId);
    const timestamp = getTimestamp(splitLine);
    const firstTimestamp = timestamp - this.eventWindowMs;
    const events = this.trackedEvents.filter(event => {
      return event.timestamp >= firstTimestamp && event.targetId === targetId;
    }); // Mark simple mistakes that can be attached to single ability ids.

    for (const event of events) {
      if (event.type !== 'Ability') continue;
      const id = event.splitLine[netlog_defs/* default.Ability.fields.id */.Z.Ability.fields.id];
      if (!id) continue;
      const type = event.splitLine[netlog_defs/* default.None.fields.type */.Z.None.fields.type];
      const targetCountStr = event.splitLine[netlog_defs/* default.Ability.fields.targetCount */.Z.Ability.fields.targetCount];
      const targetCount = parseInt(targetCountStr !== null && targetCountStr !== void 0 ? targetCountStr : '1'); // Some abilities (e.g. Kampeos Harma 6826) are AOE Ability types but only hit one person.
      // The reverse (Ability.type but targetCount > 1) is not possible.

      const isSharedDamage = type === netlog_defs/* default.NetworkAOEAbility.type */.Z.NetworkAOEAbility.type && targetCount !== 1; // Combining share/solo mistake lines with ability damage lines is a bit of
      // duplication, but unless PlayerStateTracker generated share/solo/damage mistakes
      // itself, there's no way to undo the mistake + ability.  So, we'll add the
      // mistake text into the TrackedEventLine for the ability and hide the mistake.

      if (id in this.mistakeDamageMap) {
        event.mistake = this.mistakeDamageMap[id];
      } else if (isSharedDamage && id in this.mistakeShareMap) {
        var _event$splitLine$logD;

        event.mistake = this.mistakeShareMap[id];
        const ability = (_event$splitLine$logD = event.splitLine[netlog_defs/* default.Ability.fields.ability */.Z.Ability.fields.ability]) !== null && _event$splitLine$logD !== void 0 ? _event$splitLine$logD : '???';
        event.mistakeText = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, (0,oopsy_common/* GetShareMistakeText */.gG)(ability, targetCount));
      } else if (!isSharedDamage && id in this.mistakeSoloMap) {
        var _event$splitLine$logD2;

        event.mistake = this.mistakeSoloMap[id];
        const ability = (_event$splitLine$logD2 = event.splitLine[netlog_defs/* default.Ability.fields.ability */.Z.Ability.fields.ability]) !== null && _event$splitLine$logD2 !== void 0 ? _event$splitLine$logD2 : '???';
        event.mistakeText = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, (0,oopsy_common/* GetSoloMistakeText */.gc)(ability));
      }
    }

    const targetName = (_splitLine$logDefinit2 = splitLine[netlog_defs/* default.WasDefeated.fields.target */.Z.WasDefeated.fields.target]) !== null && _splitLine$logDefinit2 !== void 0 ? _splitLine$logDefinit2 : '???';
    const reportData = {
      lang: this.options.DisplayLanguage,
      baseTimestamp: this.baseTime,
      deathTimestamp: timestamp,
      targetId: targetId,
      targetName: targetName,
      events: events
    };
    const mistake = DeathReport.generateMistake(reportData);
    this.collector.OnMistakeObj(timestamp, mistake);
  }

  OnHoTDoT(_line, splitLine) {
    const targetId = splitLine[netlog_defs/* default.NetworkDoT.fields.id */.Z.NetworkDoT.fields.id];
    if (!targetId || !this.IsInParty(targetId)) return;
    this.trackedEvents.push({
      timestamp: getTimestamp(splitLine),
      type: 'HoTDoT',
      targetId: targetId,
      splitLine: splitLine
    });
  }

  OnWipe(_line, _splitLine) {
    this.Reset();
  }

  OnBuffCollected(timestamp, collected) {
    // TODO: maybe 'mitigation' should become a separate mistake type?
    const type = collected.buff.type === 'mitigation' ? 'heal' : collected.buff.type;
    const ownerId = this.petIdToOwnerId[collected.sourceId];
    const blameId = ownerId !== null && ownerId !== void 0 ? ownerId : collected.sourceId;
    const sourceName = this.partyTracker.nameFromId(blameId);

    if (sourceName === undefined) {
      const line = JSON.stringify(collected.splitLine);
      console.error(`Couldn't find name for ${blameId} (owner: ${ownerId !== null && ownerId !== void 0 ? ownerId : 'none'}), ${line}`);
      return;
    }

    const gotBuffMap = {};
    if (collected.buff.ignoreSelf) gotBuffMap[blameId] = true;

    for (const id of collected.targetIds) gotBuffMap[id] = true;

    const missedIds = this.partyTracker.partyIds.filter(id => {
      // Filter out any empty ids here.
      if (id === emptyId) return false; // A player is missed if they didn't get the buff and aren't dead.

      return !gotBuffMap[id] && !this.deadIds.has(id);
    });
    if (missedIds.length === 0) return; // Append events for each missed player for death reports.
    // Whereas the `OnMistakeObj` call blames the source for missing a number of targets,
    // `this.trackedEvents` informs a target in a death report that they were missed by a source.

    if (collected.buff.type === 'heal' || collected.buff.type === 'mitigation') {
      for (const targetId of missedIds) {
        this.trackedEvents.push({
          timestamp: getTimestamp(collected.splitLine),
          type: 'abilityId' in collected.buff ? 'MissedAbility' : 'MissedEffect',
          targetId: targetId,
          splitLine: collected.splitLine
        });
      }
    }

    const missedNames = missedIds.map(id => {
      const name = this.partyTracker.nameFromId(id);

      if (!name) {
        const line = JSON.stringify(collected.splitLine);
        console.error(`Couldn't find name for ${id}, ${line}`);
      }

      return name !== null && name !== void 0 ? name : '???';
    }); // TODO: oopsy could really use mouseover popups for details.

    if (missedNames.length < 4) {
      const nameList = missedNames.map(name => {
        return (0,oopsy_common/* ShortNamify */.Fz)(name, this.options.PlayerNicks);
      }).join(', '); // As a TrackedLineEvent has been pushed for each person missed already,
      // explicitly don't add a `reportId` field on these mistakes.

      this.OnMistakeObj(timestamp, {
        type: type,
        blame: sourceName,
        triggerType: 'Buff',
        text: {
          en: `${collected.buffName} missed ${nameList}`,
          de: `${collected.buffName} verfehlt ${nameList}`,
          fr: `${collected.buffName} manqué(e) sur ${nameList}`,
          ja: `(${nameList}) が${collected.buffName}を受けなかった`,
          cn: `${nameList} 没受到 ${collected.buffName}`,
          ko: `${collected.buffName} ${nameList}에게 적용안됨`
        }
      });
      return;
    } // If there's too many people, just list the number of people missed.
    // TODO: we could also list everybody on separate lines?


    this.OnMistakeObj(timestamp, {
      type: type,
      blame: sourceName,
      triggerType: 'Buff',
      text: {
        en: `${collected.buffName} missed ${missedNames.length} people`,
        de: `${collected.buffName} verfehlte ${missedNames.length} Personen`,
        fr: `${collected.buffName} manqué(e) sur ${missedNames.length} personnes`,
        ja: `${missedNames.length}人が${collected.buffName}を受けなかった`,
        cn: `有${missedNames.length}人没受到 ${collected.buffName}`,
        ko: `${collected.buffName} ${missedNames.length}명에게 적용안됨`
      }
    });
  }

  PruneTrackedEvents(timestamp) {
    // Remove any tracked events that occurred prior to `timestamp`.
    const idx = this.trackedEvents.findIndex(event => event.timestamp >= timestamp);
    if (idx === -1) return;
    this.trackedEvents = this.trackedEvents.slice(idx);
  }

}
;// CONCATENATED MODULE: ./ui/oopsyraidsy/damage_tracker.ts










const actorControlFadeInCommand = '40000010';
const partyWipeText = {
  en: 'Party Wipe',
  de: 'Gruppe ausgelöscht',
  fr: 'Party Wipe',
  ja: 'ワイプ',
  cn: '团灭',
  ko: '파티 전멸'
};
const earlyPullText = {
  en: 'early pull',
  de: 'zu früh angegriffen',
  fr: 'early pull',
  ja: 'タゲ取り早い',
  cn: '抢开',
  ko: '풀링 빠름'
};
const latePullText = {
  en: 'late pull',
  de: 'zu spät angegriffen',
  fr: 'late pull',
  ja: 'タゲ取り遅い',
  cn: '晚开',
  ko: '풀링 늦음'
}; // Internal trigger id for early pull

const earlyPullTriggerId = 'General Early Pull';

const isOopsyMistake = x => 'type' in x;

class DamageTracker {
  inCombat = false;
  ignoreZone = false;
  timers = [];
  triggers = [];
  combatState = new CombatState(this);
  lastTimestamp = 0;
  triggerSuppress = {};
  timestampCallbacks = [];
  job = 'NONE';
  role = 'none';
  me = '';
  zoneId = zone_id/* default.MatchAll */.Z.MatchAll;
  contentType = 0;

  constructor(options, collector, dataFiles) {
    this.options = options;
    this.collector = collector;
    this.dataFiles = dataFiles;

    const timestampCallback = (timestamp, callback) => this.OnRequestTimestampCallback(timestamp, callback);

    this.playerStateTracker = new PlayerStateTracker(this.options, this.collector, timestampCallback);
    const lang = this.options.ParserLanguage;
    this.countdownEngageRegex = LocaleNetRegex.countdownEngage[lang];
    this.countdownStartRegex = LocaleNetRegex.countdownStart[lang];
    this.countdownCancelRegex = LocaleNetRegex.countdownCancel[lang];
    this.abilityFullRegex = netregexes/* default.abilityFull */.Z.abilityFull();
    this.wipeCactbotEcho = netregexes/* default.echo */.Z.echo({
      line: 'cactbot wipe.*?'
    });
    this.wipeEndEcho = netregexes/* default.echo */.Z.echo({
      line: 'end'
    });
    this.data = this.GetDataObject();
    this.Reset();
  }

  OnRequestTimestampCallback(timestamp, callback) {
    this.timestampCallbacks.push({
      timestamp: timestamp,
      callback: callback
    }); // Sort earliest to latest.

    this.timestampCallbacks.sort((a, b) => a.timestamp - b.timestamp);
  }

  GetDataObject() {
    return {
      me: this.me,
      job: this.job,
      role: this.role,
      party: this.playerStateTracker.partyTracker,
      inCombat: this.inCombat,
      ShortName: name => (0,oopsy_common/* ShortNamify */.Fz)(name, this.options.PlayerNicks),
      IsPlayerId: oopsy_common/* IsPlayerId */.jT,
      DamageFromMatches: matches => (0,oopsy_common/* UnscrambleDamage */.GD)(matches === null || matches === void 0 ? void 0 : matches.damage),
      options: this.options,
      // Deprecated.
      ParseLocaleFloat: parseFloat
    };
  } // TODO: this shouldn't clear timers and triggers
  // TODO: seems like some reloads are causing the /poke test to get undefined


  Reset() {
    this.data = this.GetDataObject();
    this.triggerSuppress = {};

    for (const timer of this.timers) window.clearTimeout(timer);

    this.timers = [];
  }

  OnEngage(timestamp) {
    this.engageTime = timestamp;
    if (!this.firstPuller || !this.combatState.startTime) return;
    const seconds = (timestamp - this.combatState.startTime) / 1000;

    if (seconds >= this.options.MinimumTimeForPullMistake) {
      var _Translate;

      const mistakeStr = (_Translate = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, earlyPullText)) !== null && _Translate !== void 0 ? _Translate : '';
      const text = `${mistakeStr} (${seconds.toFixed(1)}s)`;

      if ((0,oopsy_common/* IsTriggerEnabled */.zJ)(this.options, earlyPullTriggerId)) {
        this.playerStateTracker.OnMistakeObj(timestamp, {
          type: 'pull',
          name: this.firstPuller,
          blame: this.firstPuller,
          text: text
        });
      }
    }
  }

  UpdateLastTimestamp(splitLine) {
    const timeField = splitLine[netlog_defs/* default.None.fields.timestamp */.Z.None.fields.timestamp];
    if (timeField) this.lastTimestamp = new Date(timeField).getTime();
  }

  OnNetLog(e) {
    if (this.ignoreZone) return;
    const line = e.rawLine;
    const splitLine = e.line;
    const type = splitLine[netlog_defs/* default.None.fields.type */.Z.None.fields.type]; // If we're waiting on a timestamp callback, check if any have passed with this line.
    // Ignore game log lines, which don't track milliseconds.

    if (type !== netlog_defs/* default.GameLog.type */.Z.GameLog.type) {
      this.UpdateLastTimestamp(splitLine);
      let timestampCallback = this.timestampCallbacks[0];

      while (timestampCallback) {
        if (this.lastTimestamp < timestampCallback.timestamp) break;
        timestampCallback.callback(this.lastTimestamp);
        this.timestampCallbacks.shift();
        timestampCallback = this.timestampCallbacks[0];
      }
    }

    switch (type) {
      case netlog_defs/* default.GameLog.type */.Z.GameLog.type:
        if (this.countdownEngageRegex.test(line)) {
          // It would be ideal if we could use the log timestamp, but many early/late pulls are <1s,
          // and the accuracy of game log lines is also at most 1s off from real time.
          this.OnEngage(Date.now());
        }

        if (this.countdownStartRegex.test(line) || this.countdownCancelRegex.test(line)) this.combatState.Reset();
        if (this.wipeCactbotEcho.test(line) || this.wipeEndEcho.test(line)) this.Wipe(this.lastTimestamp);
        break;

      case netlog_defs/* default.ChangeZone.type */.Z.ChangeZone.type:
        {
          const name = splitLine[netlog_defs/* default.ChangeZone.fields.name */.Z.ChangeZone.fields.name];
          const id = splitLine[netlog_defs/* default.ChangeZone.fields.id */.Z.ChangeZone.fields.id];
          if (name !== undefined && id !== undefined) this.SetZone(this.lastTimestamp, name, parseInt(id, 16));
        }
        break;

      case netlog_defs/* default.PartyList.type */.Z.PartyList.type:
        this.playerStateTracker.OnPartyList(line, splitLine);
        break;

      case netlog_defs/* default.ChangedPlayer.type */.Z.ChangedPlayer.type:
        this.playerStateTracker.OnChangedPlayer(line, splitLine);
        break;

      case netlog_defs/* default.AddedCombatant.type */.Z.AddedCombatant.type:
        this.playerStateTracker.OnAddedCombatant(line, splitLine);
        break;

      case netlog_defs/* default.Ability.type */.Z.Ability.type:
      case netlog_defs/* default.NetworkAOEAbility.type */.Z.NetworkAOEAbility.type:
        this.OnAbilityEvent(line, splitLine);
        this.playerStateTracker.OnAbility(line, splitLine);
        break;

      case netlog_defs/* default.WasDefeated.type */.Z.WasDefeated.type:
        this.playerStateTracker.OnDefeated(line, splitLine);
        break;

      case netlog_defs/* default.GainsEffect.type */.Z.GainsEffect.type:
        this.playerStateTracker.OnGainsEffect(line, splitLine);
        break;

      case netlog_defs/* default.LosesEffect.type */.Z.LosesEffect.type:
        this.playerStateTracker.OnLosesEffect(line, splitLine);
        break;

      case netlog_defs/* default.NetworkDoT.type */.Z.NetworkDoT.type:
        this.playerStateTracker.OnHoTDoT(line, splitLine);
        break;

      case netlog_defs/* default.ActorControl.type */.Z.ActorControl.type:
        if (splitLine[netlog_defs/* default.ActorControl.fields.command */.Z.ActorControl.fields.command] === actorControlFadeInCommand) {
          this.Wipe(this.lastTimestamp);
          this.playerStateTracker.OnWipe(line, splitLine);
        }

        break;
    } // Process triggers after abilities, so that death reasons for abilities that do damage get
    // listed after the damage from that ability.


    for (const trigger of this.triggers) {
      const matches = trigger.localRegex.exec(line);
      if (matches) this.OnTrigger(trigger, matches, this.lastTimestamp);
    }
  }

  OnAbilityEvent(line, splitLine) {
    if (this.firstPuller || this.combatState.startTime) return; // This is kind of obnoxious to have to regex match every ability line that's already split.
    // But, it turns it into a usable match object.
    // TODO: use log definitions here??

    const lineMatches = this.abilityFullRegex.exec(line);
    if (!lineMatches || !lineMatches.groups) return;
    const matches = lineMatches.groups; // Shift damage and flags forward for mysterious spurious :3E:0:.
    // Plenary Indulgence also appears to prepend confession stacks.
    // UNKNOWN: Can these two happen at the same time?

    const origFlags = splitLine[oopsy_common/* kFieldFlags */.OC];

    if (origFlags && oopsy_common/* kShiftFlagValues.includes */.YU.includes(origFlags)) {
      var _splitLine, _splitLine2;

      matches.flags = (_splitLine = splitLine[oopsy_common/* kFieldFlags */.OC + 2]) !== null && _splitLine !== void 0 ? _splitLine : matches.flags;
      matches.damage = (_splitLine2 = splitLine[oopsy_common/* kFieldFlags */.OC + 3]) !== null && _splitLine2 !== void 0 ? _splitLine2 : matches.damage;
    } // Length 1 or 2.


    let lowByte = matches.flags.substr(-2);
    if (lowByte.length === 1) lowByte = '0' + lowByte;
    if (!oopsy_common/* kAttackFlags.includes */.dH.includes(lowByte)) return; // Start combat first prior to sending a late pull mistake,
    // as starting a new combat can reset the live list.

    this.combatState.StartCombat(this.lastTimestamp);
    if ((0,oopsy_common/* IsPlayerId */.jT)(matches.sourceId)) this.firstPuller = matches.source;else if ((0,oopsy_common/* IsPlayerId */.jT)(matches.targetId)) this.firstPuller = matches.target;else this.firstPuller = '???';

    if (this.engageTime) {
      const seconds = (Date.now() - this.engageTime) / 1000;

      if (seconds >= this.options.MinimumTimeForPullMistake) {
        var _Translate2;

        const mistakeStr = (_Translate2 = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, latePullText)) !== null && _Translate2 !== void 0 ? _Translate2 : '';
        const text = `${mistakeStr} (${seconds.toFixed(1)}s)`;

        if ((0,oopsy_common/* IsTriggerEnabled */.zJ)(this.options, earlyPullTriggerId)) {
          this.playerStateTracker.OnMistakeObj(this.lastTimestamp, {
            type: 'pull',
            name: this.firstPuller,
            blame: this.firstPuller,
            text: text
          });
        }
      }
    }
  }

  OnStartEncounter(timestamp) {
    this.playerStateTracker.OnStartEncounter(timestamp);
  }

  OnStopEncounter(timestamp) {
    this.playerStateTracker.OnStopEncounter(timestamp);
    this.firstPuller = undefined;
    this.engageTime = undefined;
  }

  OnTrigger(trigger, execMatches, timestamp) {
    const triggerTime = Date.now(); // TODO: turn this into a helper?? this was copied/pasted from popup-text.js
    // If using named groups, treat matches.groups as matches
    // so triggers can do things like matches.target.

    let matches = {}; // If using named groups, treat matches.groups as matches
    // so triggers can do things like matches.target.

    if (execMatches.groups) {
      matches = execMatches.groups;
    } else {
      // If there are no matching groups, reproduce the old js logic where
      // groups ended up as the original RegExpExecArray object
      execMatches.forEach((value, idx) => {
        matches[idx] = value;
      });
    }

    if (trigger.id) {
      if (!(0,oopsy_common/* IsTriggerEnabled */.zJ)(this.options, trigger.id)) return;

      if (trigger.id in this.triggerSuppress) {
        const suppressTime = this.triggerSuppress[trigger.id];
        if (suppressTime && suppressTime > triggerTime) return;
        delete this.triggerSuppress[trigger.id];
      }
    }

    const ValueOrFunction = (f, matches) => {
      return typeof f === 'function' ? f(this.data, matches) : f;
    };

    if ('condition' in trigger) {
      const condition = ValueOrFunction(trigger.condition, matches);
      if (condition === undefined || condition === null || condition === false) return;
    }

    const delayField = 'delaySeconds' in trigger ? ValueOrFunction(trigger.delaySeconds, matches) : 0;
    const delaySeconds = delayField === undefined || delayField === null || delayField === false || typeof delayField !== 'number' ? 0 : delayField;
    const suppress = 'suppressSeconds' in trigger ? ValueOrFunction(trigger.suppressSeconds, matches) : 0;
    if (trigger.id && typeof suppress === 'number' && suppress > 0) this.triggerSuppress[trigger.id] = triggerTime + suppress * 1000;

    const f = () => {
      if ('mistake' in trigger) {
        const m = ValueOrFunction(trigger.mistake, matches);

        if (typeof m === 'object') {
          const mistakeTimestamp = timestamp + delaySeconds * 1000;

          if (Array.isArray(m)) {
            for (const mistake of m) this.playerStateTracker.OnMistakeObj(mistakeTimestamp, mistake);
          } else if (isOopsyMistake(m)) {
            this.playerStateTracker.OnMistakeObj(mistakeTimestamp, m);
          }
        }
      }

      if ('deathReason' in trigger) {
        const ret = ValueOrFunction(trigger.deathReason, matches);

        if (ret !== null && typeof ret === 'object' && !Array.isArray(ret)) {
          if (!isOopsyMistake(ret)) this.playerStateTracker.OnDeathReason(timestamp, ret);
        }
      }

      if ('run' in trigger) ValueOrFunction(trigger.run, matches);
    };

    if (delaySeconds <= 0) f();else this.timers.push(window.setTimeout(f, delaySeconds * 1000));
  }

  Wipe(timestamp) {
    this.playerStateTracker.OnMistakeObj(timestamp, {
      type: 'wipe',
      text: partyWipeText
    });
    this.Reset();
    this.combatState.StopCombat(timestamp);
  } // Similar to PlayerStateTracker handling OnPlayerChanged events plus ChangedPlayer lines,
  // handling this event is extra insurance for reloads in the middle of a zone when
  // there won't be ChangeZone lines to do it more naturally.


  OnChangeZone(e) {
    this.SetZone(this.lastTimestamp, e.zoneName, e.zoneID);
  }

  SetZone(timestamp, zoneName, zoneId) {
    var _zoneInfo$contentType;

    if (this.zoneId === zoneId) return;
    this.zoneName = zoneName;
    this.zoneId = zoneId;
    const zoneInfo = zone_info/* default */.Z[this.zoneId];
    this.contentType = (_zoneInfo$contentType = zoneInfo === null || zoneInfo === void 0 ? void 0 : zoneInfo.contentType) !== null && _zoneInfo$contentType !== void 0 ? _zoneInfo$contentType : 0;
    this.combatState.StopCombat(timestamp);
    this.combatState.Reset();
    this.playerStateTracker.ClearTriggerSets();
    this.playerStateTracker.OnChangeZone(timestamp, zoneName, zoneId);
    this.ReloadTriggers();
  }

  OnInCombatChangedEvent(e) {
    // Don't send StartCombat with a timestamp=0 before we've seen any
    // log messages.  This can happen if you reload while in combat.
    // We'll see an action event soon enough to also start combat.
    if (!this.lastTimestamp) return;

    if (this.inCombat !== e.detail.inGameCombat) {
      if (e.detail.inGameCombat) this.combatState.StartCombat(this.lastTimestamp);else this.combatState.StopCombat(this.lastTimestamp);
    }

    this.inCombat = e.detail.inGameCombat;
    this.data.inCombat = this.inCombat;
  }

  AddDamageTriggers(type, dict) {
    if (!dict) return;

    for (const key in dict) {
      const id = dict[key];
      const trigger = {
        id: key,
        type: 'Ability',
        netRegex: netregexes/* default.abilityFull */.Z.abilityFull({
          id: id,
          ...oopsy_common/* playerDamageFields */.np
        }),
        mistake: (_data, matches) => {
          return {
            type: type,
            blame: matches.target,
            reportId: matches.targetId,
            triggerType: 'Damage',
            text: matches.ability
          };
        }
      };
      this.ProcessTrigger(trigger);
    }
  }

  AddGainsEffectTriggers(type, dict) {
    if (!dict) return;

    for (const key in dict) {
      const id = dict[key];
      const trigger = {
        id: key,
        type: 'GainsEffect',
        netRegex: netregexes/* default.gainsEffect */.Z.gainsEffect({
          effectId: id
        }),
        mistake: (_data, matches) => {
          return {
            type: type,
            blame: matches.target,
            reportId: matches.targetId,
            triggerType: 'GainsEffect',
            text: matches.effect
          };
        }
      };
      this.ProcessTrigger(trigger);
    }
  } // Helper function for "double tap" shares where multiple players share
  // damage when it should only be on one person, such as a spread mechanic.


  AddShareTriggers(type, dict) {
    if (!dict) return;

    for (const key in dict) {
      const id = dict[key];
      const trigger = {
        id: key,
        type: 'Ability',
        netRegex: netregexes/* default.ability */.Z.ability({
          type: '22',
          id: id,
          ...oopsy_common/* playerDamageFields */.np
        }),
        mistake: (_data, matches) => {
          // Some single target damage is still marked as AOEActionEffect type 22, so check
          // the number of targets that it hits.
          const numTargets = parseInt(matches.targetCount);
          if (numTargets === 1 || isNaN(numTargets)) return;
          return {
            type: type,
            blame: matches.target,
            reportId: matches.targetId,
            triggerType: 'Share',
            text: (0,oopsy_common/* GetShareMistakeText */.gG)(matches.ability, numTargets)
          };
        }
      };
      this.ProcessTrigger(trigger);
    }
  }

  AddSoloTriggers(type, dict) {
    if (!dict) return;

    for (const key in dict) {
      const id = dict[key];
      const trigger = {
        id: key,
        type: 'Ability',
        netRegex: netregexes/* default.abilityFull */.Z.abilityFull({
          type: '21',
          id: id,
          ...oopsy_common/* playerDamageFields */.np
        }),
        mistake: (_data, matches) => {
          return {
            type: type,
            blame: matches.target,
            reportId: matches.targetId,
            triggerType: 'Solo',
            text: (0,oopsy_common/* GetSoloMistakeText */.gc)(matches.ability)
          };
        }
      };
      this.ProcessTrigger(trigger);
    }
  }

  ReloadTriggers() {
    this.ProcessDataFiles(); // Wait for datafiles / jobs / zone events / localization.

    if (!this.triggerSets || !this.zoneName) return;
    this.Reset();
    this.triggers = [];
    this.ignoreZone = this.options.IgnoreContentTypes.includes(this.contentType) || this.options.IgnoreZoneIds.includes(this.zoneId);
    if (this.ignoreZone) return;

    for (const set of this.triggerSets) {
      if ('zoneId' in set) {
        if (set.zoneId !== zone_id/* default.MatchAll */.Z.MatchAll && set.zoneId !== this.zoneId && !(typeof set.zoneId === 'object' && set.zoneId.includes(this.zoneId))) continue;
      } else if ('zoneRegex' in set) {
        const zoneError = s => {
          var _set$filename;

          console.error(`${s}: ${JSON.stringify(set.zoneRegex)} in ${(_set$filename = set.filename) !== null && _set$filename !== void 0 ? _set$filename : '???'}`);
        };

        let zoneRegex = set.zoneRegex;

        if (typeof zoneRegex !== 'object') {
          zoneError('zoneRegex must be translatable object or regexp');
          continue;
        } else if (!(zoneRegex instanceof RegExp)) {
          const parserLang = this.options.ParserLanguage || 'en';

          if (parserLang in zoneRegex) {
            zoneRegex = zoneRegex[parserLang];
          } else if ('en' in zoneRegex) {
            zoneRegex = zoneRegex['en'];
          } else {
            zoneError('unknown zoneRegex language');
            continue;
          }

          if (!(zoneRegex instanceof RegExp)) {
            zoneError('zoneRegex must be regexp');
            continue;
          }
        }

        if (this.zoneName.search(regexes/* default.parse */.Z.parse(zoneRegex)) < 0) continue;
      } else {
        return;
      }

      if (this.options.Debug) {
        if (set.filename) console.log(`Loading ${set.filename}`);else console.log('Loading user triggers for zone');
      }

      this.AddDamageTriggers('warn', set.damageWarn);
      this.AddDamageTriggers('fail', set.damageFail);
      this.AddGainsEffectTriggers('warn', set.gainsEffectWarn);
      this.AddGainsEffectTriggers('fail', set.gainsEffectFail);
      this.AddShareTriggers('warn', set.shareWarn);
      this.AddShareTriggers('fail', set.shareFail);
      this.AddSoloTriggers('warn', set.soloWarn);
      this.AddSoloTriggers('fail', set.soloFail);

      for (const trigger of (_set$triggers = set.triggers) !== null && _set$triggers !== void 0 ? _set$triggers : []) {
        var _set$triggers;

        this.ProcessTrigger(trigger);
      }

      this.playerStateTracker.PushTriggerSet(set);
    }
  }

  ProcessTrigger(trigger) {
    // This is a bit of a hack, but LooseOopsyTrigger extends OopsyTrigger<OopsyData>
    // but not vice versa.  Because the NetMatches['Ability'] requires a number
    // of fields, Matches cannot be assigned to Matches & NetMatches['Ability'].
    const looseTrigger = trigger;
    const regex = looseTrigger.netRegex; // Some oopsy triggers (e.g. early pull) have only an id.

    if (!regex) return;
    this.triggers.push({ ...looseTrigger,
      localRegex: regexes/* default.parse */.Z.parse(Array.isArray(regex) ? regexes/* default.anyOf */.Z.anyOf(regex) : regex)
    });
  }

  OnPlayerChange(e) {
    if (this.job === e.detail.job && this.me === e.detail.name) return;
    this.me = e.detail.name;
    this.job = e.detail.job;
    this.role = util/* default.jobToRole */.Z.jobToRole(this.job);
    this.ReloadTriggers();
    this.playerStateTracker.SetPlayerId(e.detail.id.toString(16));
  }

  ProcessDataFiles() {
    // Only run this once.
    if (this.triggerSets) return;
    this.triggerSets = this.options.Triggers;

    for (const [filename, json] of Object.entries(this.dataFiles)) {
      if (typeof json !== 'object') {
        console.error('Unexpected JSON from ' + filename + ', expected an object');
        continue;
      }

      const hasZoneRegex = ('zoneRegex' in json);
      const hasZoneId = ('zoneId' in json);

      if (!hasZoneRegex && !hasZoneId || hasZoneRegex && hasZoneId) {
        console.error('Unexpected JSON from ' + filename + ', need one of zoneRegex/zoneID');
        continue;
      }

      if ('triggers' in json) {
        if (typeof json.triggers !== 'object' || !(json.triggers.length >= 0)) {
          console.error('Unexpected JSON from ' + filename + ', expected triggers to be an array');
          continue;
        }
      }

      const set = {
        filename: filename,
        ...json
      };
      this.triggerSets.push(set);
    }

    this.ReloadTriggers();
  }

}
// EXTERNAL MODULE: ./ui/oopsyraidsy/data/oopsy_manifest.txt + 167 modules
var oopsy_manifest = __webpack_require__(790);
;// CONCATENATED MODULE: ./ui/oopsyraidsy/mistake_collector.ts

const broadcastSource = 'oopsyraidsy';
const msgSyncRequestType = 'SyncRequest';
const msgSyncResponseType = 'SyncResponse'; // MistakeForwarder forwards observer calls to all observers.
// It also collects all events in case a broadcast sync is requested.

class MistakeCollector {
  observers = [];
  events = [];
  creationTime = Date.now();

  constructor(options, shouldSync) {
    this.options = options;
    this.shouldSync = shouldSync;
    this.AddObserver(this);
    this.RequestSync();
  }

  DebugPrint(str) {
    if (this.options.Debug) console.error(str);
  }

  RequestSync() {
    if (!this.shouldSync) return;
    this.DebugPrint(`RequestSync: ${this.creationTime}`);
    void (0,overlay_plugin_api/* callOverlayHandler */.ae)({
      call: 'broadcast',
      source: broadcastSource,
      msg: {
        type: msgSyncRequestType,
        id: this.creationTime,
        timestamp: this.creationTime
      }
    });
  }

  SendSyncResponse() {
    if (!this.shouldSync) return;
    this.DebugPrint(`SendSyncResponse: ${this.creationTime}`);
    void (0,overlay_plugin_api/* callOverlayHandler */.ae)({
      call: 'broadcast',
      source: broadcastSource,
      msg: {
        type: msgSyncResponseType,
        id: this.creationTime,
        timestamp: this.creationTime,
        data: JSON.stringify(this.events)
      }
    });
  }

  ReceiveSyncResponse(timestamp, data) {
    var _this$latestSyncTimes;

    this.DebugPrint(`ReceiveSyncResponse: ${timestamp} (prev: ${(_this$latestSyncTimes = this.latestSyncTimestamp) !== null && _this$latestSyncTimes !== void 0 ? _this$latestSyncTimes : ''})`);
    this.latestSyncTimestamp = timestamp;

    try {
      const parsed = JSON.parse(data);

      if (!Array.isArray(parsed)) {
        console.error('Malformed sync response');
        return;
      } // TODO: giant hacky type assertion here because type guarding this seems complicated.
      // TODO: maybe there's some automated tooling we could use for this?


      const events = parsed;

      for (const observer of this.observers) observer.OnSyncEvents(events);
    } catch (e) {
      console.error(e);
    }
  }

  OnBroadcastMessage(e) {
    if (!this.shouldSync) return;
    if (e.source !== broadcastSource) return;
    const msg = e.msg;
    if (msg === null || typeof msg !== 'object') return; // Turn an unknown into an indexable object.
    // TODO: is there some better way to do this?

    const obj = {};

    for (const [key, value] of Object.entries(msg !== null && msg !== void 0 ? msg : {})) obj[key] = value; // Ignore messages from ourselves.
    // TODO: do we actually receive broadcast messages from ourselves, if subscribed?


    if (obj.id === this.creationTime || obj.id === undefined) return;

    if (obj.type === msgSyncRequestType) {
      // If this collector was created after this timestamp request, ignore it.
      if (typeof obj.timestamp !== 'number' || obj.timestamp < this.creationTime) {
        this.DebugPrint(`OnBroadcastMessage: ignoring: (past creation): ${obj.timestamp}`);
        return;
      }

      this.SendSyncResponse();
    } else if (obj.type === msgSyncResponseType) {
      if (typeof obj.timestamp !== 'number') return; // If we have data from further in the past, don't overwrite with partial future data.

      if (this.latestSyncTimestamp && this.latestSyncTimestamp <= obj.timestamp) {
        this.DebugPrint(`OnBroadcastMessage: ignoring (past data): ${obj.timestamp}`);
        return;
      }

      const data = obj.data;
      if (typeof data === 'string') this.ReceiveSyncResponse(obj.timestamp, data);
    }
  }

  OnEvent(event) {
    this.events.push(event);
  }

  OnSyncEvents(events) {
    // Clobber our current set of events with synced events.
    //
    // TODO: there could be some raciness here where if you open up the summary
    // mid-fight, then an event could get dropped that occurred after the sync
    // request but before the sync response was received.  This is not worth
    // solving at the moment though.
    this.events = events;
  }

  AddObserver(observer) {
    this.observers.push(observer);
  }

  OnMistakeObj(timestamp, m) {
    if (!m) return;

    for (const observer of this.observers) {
      observer.OnEvent({
        timestamp: timestamp,
        type: 'Mistake',
        mistake: m
      });
    }
  }

  StartEncounter(timestamp) {
    for (const observer of this.observers) {
      observer.OnEvent({
        timestamp: timestamp,
        type: 'StartEncounter'
      });
    }
  }

  OnChangeZone(timestamp, zoneName, zoneId) {
    for (const observer of this.observers) {
      observer.OnEvent({
        timestamp: timestamp,
        type: 'ChangeZone',
        zoneName: zoneName,
        zoneId: zoneId
      });
    }
  }

}
;// CONCATENATED MODULE: ./ui/oopsyraidsy/oopsy_live_list.ts




const kCopiedMessage = {
  en: 'Copied!',
  de: 'Kopiert!',
  fr: 'Copié !',
  ja: 'コピーした！',
  cn: '已复制！',
  ko: '복사 완료!'
};
const errorMessageEnableACTWS = {
  en: 'Plugins -> OverlayPlugin WSServer -> Stream/Local Overlay -> Start',
  de: 'Plugins -> OverlayPlugin WSServer -> Stream/Local Overlay -> Start',
  fr: 'Plugins -> OverlayPlugin WSServer -> Stream/Local Overlay -> Start',
  cn: 'Plugins -> OverlayPlugin WSServer -> 直播/本地悬浮窗 -> 启用',
  ko: 'Plugins -> OverlayPlugin WSServer -> Stream/Local 오버레이 -> 시작'
};
class DeathReportLive {
  reportQueue = [];
  queueTimeoutHandle = 0;

  constructor(options, reportElem) {
    this.options = options;
    this.reportElem = reportElem;
  } // Briefly shows a death report on screen for a few seconds while in combat.
  // If one is already showing, queues it up to display after.
  // TODO: add some CSS animation here to fade it in/out?
  // TODO: should we show the player's death report with no timer while they are dead?


  queue(report) {
    const timeoutMs = this.options.TimeToShowDeathReportMs;
    if (timeoutMs <= 0) return;
    const isFirstReport = this.reportQueue.length === 0;
    this.reportQueue.push(report);

    if (isFirstReport) {
      this.setDeathReport(report);
      this.queueTimeoutHandle = window.setTimeout(() => this.handleQueue(), timeoutMs);
    }
  }

  handleQueue() {
    const r = this.reportQueue.shift();

    if (!r) {
      this.cancelQueue();
      this.hide();
      return;
    }

    this.setDeathReport(r);
    this.queueTimeoutHandle = window.setTimeout(() => this.handleQueue(), this.options.TimeToShowDeathReportMs);
  } // Cancels the queue of death reports and shows this one immediately.


  show(report) {
    this.cancelQueue();
    this.setDeathReport(report);
  }

  mouseOver(report, inCombat) {
    // While in combat, mouseovers interrupt the queue and temporarily show
    // TODO: should there be no timer and we just show while mouseovering?
    if (inCombat) {
      this.cancelQueue();
      this.hide();
      this.queue(report);
    } else {
      this.show(report);
    }
  }

  hide() {
    while (this.reportElem.lastChild) this.reportElem.removeChild(this.reportElem.lastChild);

    this.cancelQueue();
  }

  cancelQueue() {
    this.reportQueue = [];
    window.clearTimeout(this.queueTimeoutHandle);
    this.queueTimeoutHandle = 0;
  }

  setDeathReport(report) {
    this.hide();
    const container = document.createElement('div');
    container.classList.add('livelist-shadow');
    this.reportElem.appendChild(container);
    const titleDiv = document.createElement('div');
    titleDiv.classList.add('death-title');
    container.appendChild(titleDiv);
    const titleIcon = document.createElement('div');
    titleIcon.classList.add('death-title-icon', 'mistake-icon', 'death');
    titleDiv.appendChild(titleIcon);
    const titleText = document.createElement('div');
    titleText.classList.add('death-title-text');
    titleText.innerHTML = report.targetName;
    titleDiv.appendChild(titleText);
    const closeButton = document.createElement('div');
    closeButton.classList.add('death-title-close', 'mistake-icon', 'icon-entry', 'icon-close');
    closeButton.addEventListener('click', () => {
      // Clicking the close button also cancels the queue.  Otherwise, you
      // close one and then another appears seconds later, which seems incorrect.
      this.cancelQueue();
      this.hide();
    });
    titleDiv.appendChild(closeButton);
    const detailsDiv = document.createElement('div');
    detailsDiv.classList.add('death-details');
    container.appendChild(detailsDiv);

    for (const event of report.parseReportLines()) {
      var _event$currentHp;

      this.AppendDetails(detailsDiv, event.timestampStr, (_event$currentHp = event.currentHp) === null || _event$currentHp === void 0 ? void 0 : _event$currentHp.toString(), event.amountStr, event.amountClass, event.icon, event.text);
    }
  }

  AppendDetails(detailsDiv, timestampStr, currentHp, amount, amountClass, icon, text) {
    const hpElem = document.createElement('div');
    hpElem.classList.add('death-row-hp');
    if (currentHp !== undefined) hpElem.innerText = currentHp;
    detailsDiv.appendChild(hpElem);
    const damageElem = document.createElement('div');
    damageElem.classList.add('death-row-amount');
    if (amountClass) damageElem.classList.add(amountClass);
    if (amount !== undefined) damageElem.innerText = amount;
    detailsDiv.appendChild(damageElem);
    const iconElem = document.createElement('div');
    iconElem.classList.add('death-row-icon');
    if (icon !== undefined) iconElem.classList.add('mistake-icon', icon);
    detailsDiv.appendChild(iconElem);
    const textElem = document.createElement('div');
    textElem.classList.add('death-row-text');
    if (text !== undefined) textElem.innerHTML = text;
    detailsDiv.appendChild(textElem);
    const timeElem = document.createElement('div');
    timeElem.classList.add('death-row-time');
    timeElem.innerText = timestampStr;
    detailsDiv.appendChild(timeElem);
  }

}
class OopsyLiveList {
  inCombat = false;
  numItems = 0;
  items = [];
  itemIdxToListener = {};

  constructor(options, scroller) {
    this.options = options;
    this.scroller = scroller;
    const container = this.scroller.children[0];
    if (!container) throw new not_reached/* UnreachableCode */.$();
    this.container = container;
    const reportDiv = document.getElementById('death-report');
    if (!reportDiv) throw new not_reached/* UnreachableCode */.$();
    if (this.options.DeathReportSide !== 'disabled') this.deathReport = new DeathReportLive(options, reportDiv);
    document.body.classList.add(`report-side-${this.options.DeathReportSide}`);
    const iconContainer = document.getElementById('icon-container');
    if (!iconContainer) throw new not_reached/* UnreachableCode */.$();
    this.iconContainer = iconContainer;
    const closeDiv = document.getElementById('icon-close');
    if (!closeDiv) throw new not_reached/* UnreachableCode */.$();
    closeDiv.addEventListener('click', () => {
      this.Reset();
    });
    const summaryDiv = document.getElementById('icon-summary');
    if (!summaryDiv) throw new not_reached/* UnreachableCode */.$();
    summaryDiv.addEventListener('click', () => {
      const regex = /\w*.html$/;

      if (!regex.exec(window.location.href)) {
        console.error(`Unable to parse location for summary: ${window.location.href}`);
        return;
      }

      const url = window.location.href.replace(regex, 'oopsy_summary.html');
      (0,overlay_plugin_api/* callOverlayHandler */.ae)({
        call: 'openWebsiteWithWS',
        url: url
      }).catch(() => {
        console.error(`Failed to open summary`);
        this.OnMistakeObj(Date.now(), {
          type: 'fail',
          text: errorMessageEnableACTWS
        });
      });
    });
    this.Reset();
    this.SetInCombat(false);
  }

  SetInCombat(inCombat) {
    // For usability sake:
    //   - to avoid dungeon trash starting stopping combat and resetting the
    //     list repeatedly, only reset when ACT starts a new encounter.
    //   - for consistency with DPS meters, fflogs, etc, use ACT's encounter
    //     time as the start time, not when game combat becomes true.
    //   - to make it more readable, show/hide old mistakes out of game
    //     combat, and consider early pulls starting game combat early.  This
    //     allows for one long dungeon ACT encounter to have multiple early
    //     or late pulls.
    if (this.inCombat === inCombat) return;
    this.inCombat = inCombat;

    if (inCombat) {
      document.body.classList.remove('out-of-combat');
      this.HideOldItems();
    } else {
      // TODO: Add an X button to hide/clear the list.
      document.body.classList.add('out-of-combat');
      this.ShowAllItems();
    }
  }

  OnMistakeObj(timestamp, m) {
    var _this$deathReport, _m$name;

    const report = m.report ? new DeathReport(m.report) : undefined;
    if (report) (_this$deathReport = this.deathReport) === null || _this$deathReport === void 0 ? void 0 : _this$deathReport.queue(report);
    const iconClass = m.type;
    const blame = (_m$name = m.name) !== null && _m$name !== void 0 ? _m$name : m.blame;
    const blameText = blame ? (0,oopsy_common/* ShortNamify */.Fz)(blame, this.options.PlayerNicks) + ': ' : '';
    const translatedText = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, m.text);
    if (!translatedText) return;
    const time = (0,oopsy_common/* GetFormattedTime */.Tk)(this.baseTime, timestamp);
    const text = `${blameText}${translatedText}`;
    const maxItems = this.options.NumLiveListItemsInCombat; // Get an existing row or create a new one.

    let rowDiv;
    const itemIdx = this.numItems;
    if (itemIdx < this.items.length) rowDiv = this.items[itemIdx];
    if (!rowDiv) rowDiv = this.MakeRow(); // Clean up / add any event listeners.

    const listener = this.itemIdxToListener[itemIdx];

    if (listener) {
      rowDiv.removeEventListener('mousemove', listener);
      delete this.itemIdxToListener[itemIdx];
    }

    if (report) {
      const func = () => {
        var _this$deathReport2;

        return (_this$deathReport2 = this.deathReport) === null || _this$deathReport2 === void 0 ? void 0 : _this$deathReport2.mouseOver(report, this.inCombat);
      };

      rowDiv.addEventListener('mousemove', func);
      this.itemIdxToListener[itemIdx] = func;
    }

    this.numItems++;
    const iconDiv = document.createElement('div');
    iconDiv.classList.add('mistake-icon');
    iconDiv.classList.add(iconClass);
    rowDiv.appendChild(iconDiv);
    const textDiv = document.createElement('div');
    textDiv.classList.add('mistake-text');
    textDiv.innerHTML = text;
    rowDiv.appendChild(textDiv);
    const timeDiv = document.createElement('div');
    timeDiv.classList.add('mistake-time');
    timeDiv.innerHTML = time;
    rowDiv.appendChild(timeDiv); // Hide anything over the limit from the past.

    if (this.inCombat) {
      var _this$items;

      if (this.numItems > maxItems) (_this$items = this.items[this.numItems - maxItems - 1]) === null || _this$items === void 0 ? void 0 : _this$items.classList.add('hide');
    } // Show and scroll to bottom.


    this.container.classList.remove('hide');
    this.iconContainer.classList.remove('hide');
    this.scroller.scrollTop = this.scroller.scrollHeight;
  }

  MakeRow() {
    const div = document.createElement('div');
    div.classList.add('mistake-row'); // click-to-copy function

    div.addEventListener('click', () => {
      var _div$childNodes$1$tex, _div$childNodes$, _div$childNodes$2;

      const mistakeText = (_div$childNodes$1$tex = (_div$childNodes$ = div.childNodes[1]) === null || _div$childNodes$ === void 0 ? void 0 : _div$childNodes$.textContent) !== null && _div$childNodes$1$tex !== void 0 ? _div$childNodes$1$tex : '';
      const mistakeTime = (_div$childNodes$2 = div.childNodes[2]) === null || _div$childNodes$2 === void 0 ? void 0 : _div$childNodes$2.textContent;
      const str = mistakeTime ? `[${mistakeTime}] ${mistakeText}` : mistakeText;
      const el = document.createElement('textarea');
      el.value = str;
      document.body.appendChild(el);
      el.select();
      document.execCommand('copy');
      document.body.removeChild(el); // copied message

      const msg = document.createElement('div');
      msg.classList.add('copied-msg');
      msg.innerText = kCopiedMessage[this.options.DisplayLanguage] || kCopiedMessage['en'];
      msg.style.width = `${div.clientWidth}px`;
      msg.style.height = `${div.clientHeight}px`;
      div.appendChild(msg);
      window.setTimeout(() => {
        // oopsy live list may have been hidden/destroyed before the timeout happens.
        if (msg.parentNode) div.removeChild(msg);
      }, 1000);
    });
    this.items.push(div);
    this.container.appendChild(div);
    return div;
  }

  ShowAllItems() {
    for (const item of this.items) item.classList.remove('hide');

    this.scroller.scrollTop = this.scroller.scrollHeight;
  }

  HideOldItems() {
    const maxItems = this.options.NumLiveListItemsInCombat;

    for (let i = 0; i < this.items.length - maxItems; ++i) {
      var _this$items$i;

      (_this$items$i = this.items[i]) === null || _this$items$i === void 0 ? void 0 : _this$items$i.classList.add('hide');
    }
  }

  Reset() {
    var _this$deathReport3;

    this.container.classList.add('hide');
    this.iconContainer.classList.add('hide');
    this.items = [];
    this.numItems = 0;
    this.container.innerHTML = '';
    this.itemIdxToListener = {};
    (_this$deathReport3 = this.deathReport) === null || _this$deathReport3 === void 0 ? void 0 : _this$deathReport3.hide();
  }

  OnEvent(event) {
    if (event.type === 'Mistake') this.OnMistakeObj(event.timestamp, event.mistake);else if (event.type === 'StartEncounter') this.StartEncounter(event.timestamp);else if (event.type === 'ChangeZone') this.OnChangeZone();
  }

  OnSyncEvents(_events) {// don't bother syncing for the live list
  }

  StartEncounter(timestamp) {
    this.Reset();
    this.baseTime = timestamp;
  }

  OnChangeZone() {
    this.Reset();
  }

}
// EXTERNAL MODULE: ./resources/content_type.ts
var content_type = __webpack_require__(873);
;// CONCATENATED MODULE: ./ui/oopsyraidsy/ability_name_map.ts
const abilityNameMap = {
  '5C6': 'Attack',
  '5C7': 'Attack',
  '5C8': 'Attack',
  '5C9': 'Attack',
  '19E7': 'Attack',
  '1AE2': 'Attack',
  '1AFE': 'Attack',
  '1C97': 'Attack',
  '1CB7': 'Attack',
  '2157': 'Lakshmi Auto',
  '21C5': 'Attack',
  '22EA': 'Attack',
  '23F2': 'Exdeath Auto',
  '249F': 'Attack',
  '24E1': 'Attack',
  '24E2': 'Attack',
  '24E8': 'Attack',
  '25B6': 'Attack',
  '26A7': 'Twin Auto',
  '26B4': 'Nael Auto',
  '26D0': 'Baha Auto',
  '2705': 'Attack',
  '27FC': 'Attack',
  '27FD': 'Attack',
  '27FE': 'Attack',
  '27FF': 'Attack',
  '28C1': 'Attack',
  '2B3E': 'Attack',
  // uwu temp
  '2B51': 'Attack',
  '2B53': 'Slipstream',
  '2B42': 'Mistral Song',
  '2B41': 'Grand Whirlwind',
  '2B50': 'Downburst',
  '2B45': 'Cyclone',
  '2B46': 'Gigaburst',
  '2B4D': 'Feather Rain',
  '2B54': 'Mistral Shriek',
  '2B48': 'Friction',
  '2BB5': 'Super Cyclone',
  '2B47': 'Super Cyclone',
  '2B55': 'Aerial Blast',
  '2B4B': 'Mistral Song',
  '2B52': 'Eye Of The Storm',
  '2B4E': 'Wicked Wheel',
  '2B4F': 'Wicked Tornado',
  '2B5F': 'Crimson Cyclone',
  '2B61': 'Radiant Plume',
  '2B57': 'Vulcan Burst',
  '2B56': 'Incinerate',
  '2B49': 'Mesohigh',
  '1CD': 'Nail Adds',
  '2C19': 'Infernal Fetters',
  '2B5A': 'Eruption',
  '2B5B': 'Inferno Howl',
  '2B5C': 'Searing Wind',
  '2B5E': 'Hellfire',
  '2B5D': 'Flaming Crush',
  '2CFD': 'Geocrush',
  '2B90': 'Earthen Fury',
  '2B58': 'Infernal Surge',
  '2B62': 'Rock Buster',
  '2B63': 'Mountain Buster',
  '2B64': 'Weight Of The Land',
  '2B65': 'Weight Of The Land',
  '2B66': 'Jump',
  '2B67': 'Upheaval',
  '2B68': 'Geocrush',
  '2B69': 'Bury',
  '2B6A': 'Detonation',
  '2B6B': 'Rock Throw',
  '2B6C': 'Rock Throw',
  '2B6D': 'Granite Impact',
  '2B6E': 'Freefire',
  '2B6F': 'Landslide',
  '2B70': 'Landslide',
  '2B71': 'Landslide',
  '2C18': 'Tumult',
  // TEA
  '4978': 'Attack',
  '4979': 'Attack'
};
;// CONCATENATED MODULE: ./ui/oopsyraidsy/oopsy_options.ts




const defaultOopsyNonConfigOptions = {
  Triggers: [],
  PlayerNicks: {},
  DisabledTriggers: {},
  IgnoreContentTypes: [content_type/* default.Pvp */.Z.Pvp, content_type/* default.Eureka */.Z.Eureka],
  IgnoreZoneIds: [// Bozja zones have an (unnamed) content type of 29 which also applies
  // to Delubrum Reginae (which we want oopsy on).  So, ignore by zone.
  zone_id/* default.TheBozjanSouthernFront */.Z.TheBozjanSouthernFront, zone_id/* default.Zadnor */.Z.Zadnor],
  AbilityIdNameMap: abilityNameMap,
  PerTriggerAutoConfig: {}
}; // TODO: figure out how to get this type from oopsyraidsy_config??
// These values are overwritten and are just here for typing.

const defaultOopsyConfigOptions = {
  NumLiveListItemsInCombat: 5,
  MinimumTimeForPullMistake: 0.4,
  TimeToShowDeathReportMs: 4000,
  DeathReportSide: 'left'
};
// See user/raidboss-example.js for documentation.
const Options = { ...user_config/* default.getDefaultBaseOptions */.Z.getDefaultBaseOptions(),
  ...defaultOopsyNonConfigOptions,
  ...defaultOopsyConfigOptions
};
/* harmony default export */ const oopsy_options = (Options);
;// CONCATENATED MODULE: ./ui/oopsyraidsy/oopsy_summary_list.ts


class OopsySummaryTable {
  // TODO: should this come from options?
  types = ['death', 'fail', 'warn', 'pull'];
  sortCol = 'death';
  sortAsc = false;

  constructor(options, table) {
    this.options = options;
    this.table = table;
    // this.table has one column for name, and then one for each of the types.
    document.documentElement.style.setProperty('--table-cols', (this.types.length + 1).toString());
  }

  Reset() {
    this.mistakes = undefined;

    while ((_this$table = this.table) !== null && _this$table !== void 0 && _this$table.lastChild) {
      var _this$table;

      this.table.removeChild(this.table.lastChild);
    }
  }

  BuildHeaderRow(parent) {
    const dummyFirstDiv = document.createElement('div');
    dummyFirstDiv.classList.add('header', 'name');
    parent.appendChild(dummyFirstDiv);

    for (const type of this.types) {
      const typeElem = document.createElement('div');
      typeElem.classList.add('header', 'mistake-icon', type);
      parent.appendChild(typeElem);
      typeElem.addEventListener('click', () => {
        if (this.sortCol === type) {
          this.sortAsc = !this.sortAsc;
          this.SortTable();
          return;
        }

        this.sortAsc = false;
        this.sortCol = type;
        this.SortTable();
      });
    }
  }

  BuildPlayerRow(parent, name) {
    const nameElem = document.createElement('div');
    nameElem.classList.add('name');
    nameElem.innerText = name;
    parent.appendChild(nameElem);
    const row = {
      nameElem: nameElem,
      entries: {}
    };

    for (const type of this.types) {
      const elem = document.createElement('div');
      elem.classList.add('number');
      parent.appendChild(elem);
      row.entries[type] = {
        count: 0,
        elem: elem
      };
    }

    return row;
  }

  OnMistakeObj(m) {
    var _m$name, _this$mistakes, _this$mistakes$name;

    const longName = (_m$name = m.name) !== null && _m$name !== void 0 ? _m$name : m.blame;
    if (!longName) return;
    const name = (0,oopsy_common/* ShortNamify */.Fz)(longName, this.options.PlayerNicks); // Don't create a player row if the summary doesn't care about this type of mistake.

    if (!this.types.includes(m.type)) return;

    if (!this.mistakes) {
      // Wait until we've seen any mistakes to start the table.
      this.BuildHeaderRow(this.table);
      this.mistakes = {};
    }

    const row = (_this$mistakes$name = (_this$mistakes = this.mistakes)[name]) !== null && _this$mistakes$name !== void 0 ? _this$mistakes$name : _this$mistakes[name] = this.BuildPlayerRow(this.table, name);
    const entry = row.entries[m.type];
    if (!entry) return;
    entry.count++;
    entry.elem.innerText = entry.count.toString();
    if (m.type === this.sortCol) this.SortTable();
  }

  SortTable() {
    if (!this.mistakes) return; // Generate counts.

    const counts = {};

    for (const [name, row] of Object.entries(this.mistakes)) {
      var _entry$count;

      const entry = row.entries[this.sortCol];
      counts[name] = (_entry$count = entry === null || entry === void 0 ? void 0 : entry.count) !== null && _entry$count !== void 0 ? _entry$count : 0;
    } // Sort names by counts.


    const names = Object.keys(counts);
    if (this.sortAsc) names.sort((a, b) => {
      var _counts$a, _counts$b;

      return ((_counts$a = counts[a]) !== null && _counts$a !== void 0 ? _counts$a : -1) - ((_counts$b = counts[b]) !== null && _counts$b !== void 0 ? _counts$b : -1);
    });else names.sort((a, b) => {
      var _counts$b2, _counts$a2;

      return ((_counts$b2 = counts[b]) !== null && _counts$b2 !== void 0 ? _counts$b2 : -1) - ((_counts$a2 = counts[a]) !== null && _counts$a2 !== void 0 ? _counts$a2 : -1);
    }); // Apply style to sort by ordering.

    for (const [name, row] of Object.entries(this.mistakes)) {
      const idx = names.indexOf(name).toString();
      row.nameElem.style.setProperty('order', idx);

      for (const entry of Object.values(row.entries)) entry.elem.style.setProperty('order', idx);
    }
  }

  OnEvent(event) {
    if (event.type === 'Mistake') this.OnMistakeObj(event.mistake);
  }

  OnSyncEvents(events) {
    this.Reset();

    for (const event of events) this.OnEvent(event);
  }

}
class OopsySummaryList {
  pullIdx = 0;
  currentDiv = null;

  constructor(options, container) {
    this.options = options;
    this.container = container;
    this.container.classList.remove('hide');
  }

  Reset() {
    this.pullIdx = 0;
    this.baseTime = undefined;
    this.currentDiv = null;

    while ((_this$container = this.container) !== null && _this$container !== void 0 && _this$container.lastChild) {
      var _this$container;

      this.container.removeChild(this.container.lastChild);
    }
  }

  GetTimeStr(d) {
    // ISO-8601 or death.
    const month = `0${d.getMonth() + 1}`.slice(-2);
    const day = `0${d.getDate()}`.slice(-2);
    const hours = `00${d.getHours()}`.slice(-2);
    const minutes = `00${d.getMinutes()}`.slice(-2);
    return `${d.getFullYear()}-${month}-${day} ${hours}:${minutes}`;
  }

  StartNewSectionIfNeeded(timestamp) {
    if (this.currentDiv) return this.currentDiv;
    const section = document.createElement('div');
    section.classList.add('section');
    this.container.appendChild(section);
    const headerDiv = document.createElement('div');
    headerDiv.classList.add('section-header');
    section.appendChild(headerDiv); // TODO: It would kind of be nice to sync this with pullcounter,
    // but it's not clear how to connect these two.

    this.pullIdx++;
    const pullDiv = document.createElement('div');
    pullDiv.innerText = `Pull ${this.pullIdx}`;
    headerDiv.appendChild(pullDiv);
    const zoneDiv = document.createElement('div');
    if (this.zoneName) zoneDiv.innerText = `(${this.zoneName})`;
    headerDiv.appendChild(zoneDiv);
    const timeDiv = document.createElement('div');
    timeDiv.innerText = this.GetTimeStr(new Date(timestamp));
    headerDiv.appendChild(timeDiv);
    const rowContainer = document.createElement('div');
    rowContainer.classList.add('section-rows');
    section.appendChild(rowContainer);
    this.currentDiv = rowContainer;
    return this.currentDiv;
  }

  EndSection() {
    this.currentDiv = null;
  }

  OnMistakeObj(timestamp, m) {
    var _m$name2;

    const iconClass = m.type;
    const blame = (_m$name2 = m.name) !== null && _m$name2 !== void 0 ? _m$name2 : m.blame;
    const blameText = blame ? `${(0,oopsy_common/* ShortNamify */.Fz)(blame, this.options.PlayerNicks)}: ` : '';
    const text = (0,oopsy_common/* Translate */.vN)(this.options.DisplayLanguage, m.text);
    if (!text) return;
    this.AddLine(m, iconClass, `${blameText} ${text}`, (0,oopsy_common/* GetFormattedTime */.Tk)(this.baseTime, timestamp));
  }

  AddLine(m, iconClass, text, time) {
    var _this$baseTime;

    const currentSection = this.StartNewSectionIfNeeded((_this$baseTime = this.baseTime) !== null && _this$baseTime !== void 0 ? _this$baseTime : Date.now());
    const rowDiv = document.createElement('div');
    rowDiv.classList.add('mistake-row');
    currentSection.appendChild(rowDiv); // TODO: maybe combine this with OopsyLiveList.

    const iconDiv = document.createElement('div');
    iconDiv.classList.add('mistake-icon');
    iconDiv.classList.add(iconClass);
    rowDiv.appendChild(iconDiv);
    const textDiv = document.createElement('div');
    textDiv.classList.add('mistake-text');
    textDiv.innerHTML = text;
    rowDiv.appendChild(textDiv);
    const timeDiv = document.createElement('div');
    timeDiv.classList.add('mistake-time');
    timeDiv.innerHTML = time;
    rowDiv.appendChild(timeDiv);
    if (!m.report) return;
    const collapserDiv = document.createElement('div');
    collapserDiv.classList.add('mistake-collapser');
    rowDiv.appendChild(collapserDiv);
    const detailsDiv = document.createElement('div');
    detailsDiv.classList.add('death-details');
    currentSection.appendChild(detailsDiv);
    let expanded = false;
    rowDiv.addEventListener('click', () => {
      expanded = !expanded;

      if (expanded) {
        collapserDiv.classList.add('expanded');
        detailsDiv.classList.add('expanded');
      } else {
        collapserDiv.classList.remove('expanded');
        detailsDiv.classList.remove('expanded');
      }
    });
    const report = new DeathReport(m.report);

    for (const event of report.parseReportLines()) {
      const hpElem = document.createElement('div');
      hpElem.classList.add('death-row-hp');
      if (event.currentHp !== undefined) hpElem.innerText = event.currentHp.toString();
      detailsDiv.appendChild(hpElem);
      const damageElem = document.createElement('div');
      damageElem.classList.add('death-row-amount');
      if (event.amountClass) damageElem.classList.add(event.amountClass);
      if (event.amountStr !== undefined) damageElem.innerText = event.amountStr;
      detailsDiv.appendChild(damageElem);
      const iconElem = document.createElement('div');
      iconElem.classList.add('death-row-icon');
      if (event.icon !== undefined) iconElem.classList.add('mistake-icon', event.icon);
      detailsDiv.appendChild(iconElem);
      const textElem = document.createElement('div');
      textElem.classList.add('death-row-text');
      if (event.text !== undefined) textElem.innerHTML = event.text;
      detailsDiv.appendChild(textElem);
      const timeElem = document.createElement('div');
      timeElem.classList.add('death-row-time');
      timeElem.innerText = event.timestampStr;
      detailsDiv.appendChild(timeElem);
    }
  }

  OnEvent(event) {
    if (event.type === 'Mistake') this.OnMistakeObj(event.timestamp, event.mistake);else if (event.type === 'StartEncounter') this.StartEncounter(event.timestamp);else if (event.type === 'ChangeZone') this.OnChangeZone(event.zoneName);
  }

  OnSyncEvents(events) {
    this.Reset();

    for (const event of events) this.OnEvent(event);
  }

  StartEncounter(timestamp) {
    // TODO: If you reload the summary while in combat, then the OnInCombatChangedEvent
    // for the current combat will send a new StartEncounter (creating a new section)
    // even though the current combat is still ongoing.  We could try to handle this
    // by explicitly having StartEncounter/StopEncounter however this requires a bit
    // of wrangling to get right.  For now, don't reload the summary while in combat.  ;)
    this.EndSection();
    this.baseTime = timestamp;
    this.StartNewSectionIfNeeded(timestamp);
  }

  OnChangeZone(zoneName) {
    this.zoneName = zoneName;
  }

}
;// CONCATENATED MODULE: ./ui/oopsyraidsy/oopsyraidsy_config.ts




const oopsyHelpers = ['damageWarn', 'damageFail', 'shareWarn', 'shareFail', 'gainsEffectWarn', 'gainsEffectFail']; // This could be a checkbox, but it's possible we could add more things here,
// like changing fail->warning or who knows what.

const kTriggerOptions = {
  default: {
    label: {
      en: '✔ Defaults',
      de: '✔ Standards',
      fr: '✔ Défauts',
      ja: '✔ 初期設定',
      cn: '✔ 默认设置',
      ko: '✔ 기본'
    }
  },
  disabled: {
    label: {
      en: '❌ Disabled',
      de: '❌ Deaktiviert',
      fr: '❌ Désactivé',
      ja: '❌ 無効',
      cn: '❌ 禁用',
      ko: '❌ 비활성화'
    }
  }
};

class OopsyConfigurator {
  optionKey = 'oopsyraidsy';

  constructor(cactbotConfigurator) {
    this.base = cactbotConfigurator;
  }

  buildUI(container, files) {
    const fileMap = this.processOopsyFiles(files);
    const expansionDivs = {};

    for (const info of Object.values(fileMap)) {
      const expansion = info.prefix;
      if (!info.triggers || Object.keys(info.triggers).length === 0) continue;
      let expansionDiv = expansionDivs[expansion];

      if (!expansionDiv) {
        const expansionContainer = document.createElement('div');
        expansionContainer.classList.add('trigger-expansion-container', 'collapsed');
        container.appendChild(expansionContainer);
        const expansionHeader = document.createElement('div');
        expansionHeader.classList.add('trigger-expansion-header');

        expansionHeader.onclick = () => {
          expansionContainer.classList.toggle('collapsed');
        };

        expansionHeader.innerText = expansion;
        expansionContainer.appendChild(expansionHeader);
        expansionDiv = expansionDivs[expansion] = expansionContainer;
      }

      const triggerContainer = document.createElement('div');
      triggerContainer.classList.add('trigger-file-container', 'collapsed');
      expansionDiv.appendChild(triggerContainer);
      const headerDiv = document.createElement('div');
      headerDiv.classList.add('trigger-file-header');

      headerDiv.onclick = () => {
        triggerContainer.classList.toggle('collapsed');
      };

      const parts = [info.title, info.type, expansion];

      for (const part of parts) {
        if (!part) continue;
        const partDiv = document.createElement('div');
        partDiv.classList.add('trigger-file-header-part');
        partDiv.innerText = part;
        headerDiv.appendChild(partDiv);
      }

      triggerContainer.appendChild(headerDiv);
      const triggerOptions = document.createElement('div');
      triggerOptions.classList.add('trigger-file-options');
      triggerContainer.appendChild(triggerOptions);

      for (const id of Object.keys((_info$triggers = info.triggers) !== null && _info$triggers !== void 0 ? _info$triggers : {})) {
        var _info$triggers;

        // Build the trigger label.
        const triggerDiv = document.createElement('div');
        triggerDiv.innerHTML = id;
        triggerDiv.classList.add('trigger');
        triggerOptions.appendChild(triggerDiv); // Container for the right side ui (select boxes, all of the info).

        const triggerDetails = document.createElement('div');
        triggerDetails.classList.add('trigger-details');
        triggerOptions.appendChild(triggerDetails);
        triggerDetails.appendChild(this.buildTriggerOptions(id, triggerDiv));
      }
    }
  }

  buildTriggerOptions(id, labelDiv) {
    const kField = 'Output';
    const div = document.createElement('div');
    div.classList.add('trigger-options');

    const updateLabel = input => {
      if (input.value === 'hidden' || input.value === 'disabled') labelDiv.classList.add('disabled');else labelDiv.classList.remove('disabled');
    };

    const input = document.createElement('select');
    div.appendChild(input);
    const selectValue = this.base.getOption(this.optionKey, ['triggers', id, kField], 'default');

    for (const [key, value] of Object.entries(kTriggerOptions)) {
      const elem = document.createElement('option');
      elem.innerHTML = this.base.translate(value.label);
      elem.value = key;
      elem.selected = key === selectValue;
      input.appendChild(elem);
      updateLabel(input);

      input.onchange = () => {
        updateLabel(input);
        let value = input.value;
        if (value.includes('default')) value = 'default';
        this.base.setOption(this.optionKey, ['triggers', id, kField], input.value);
      };
    }

    return div;
  }

  processOopsyFiles(files) {
    const map = this.base.processFiles(files); // Hackily insert "missed buffs" into the list of triggers.

    const generalEntry = map['00-misc-general'];
    if (!generalEntry) throw new not_reached/* UnreachableCode */.$();
    const fakeBuffs = { ...generalEntry,
      fileKey: '00-misc-buffs',
      filename: 'buff_map.ts',
      title: this.base.translate({
        en: 'Missed Buffs',
        de: 'Verfehlte Buffs',
        fr: 'Buffs manqués',
        ja: '欠けバフ',
        cn: '遗漏Buff',
        ko: '놓친 버프 알림'
      }),
      triggerSet: {
        triggers: generateBuffTriggerIds().map(id => {
          return {
            id: id
          };
        })
      }
    };
    map[fakeBuffs.fileKey] = fakeBuffs;

    for (const item of Object.values(map)) {
      item.triggers = {};
      const triggerSet = item.triggerSet;

      for (const prop of oopsyHelpers) {
        const obj = triggerSet[prop];
        if (obj === undefined || obj === null) continue;

        if (typeof obj === 'object') {
          for (const id in obj) item.triggers[id] = {
            id: id
          };
        }
      }

      if (!triggerSet.triggers) continue;

      for (const trigger of triggerSet.triggers) {
        if (!trigger.id) continue; // Skip triggers that just set data, but include triggers that are just ids.

        if (trigger.run && !trigger.mistake) continue;
        item.triggers[trigger.id] = trigger;
      }
    }

    return map;
  }

}

const templateOptions = {
  buildExtraUI: (base, container) => {
    const builder = new OopsyConfigurator(base);
    builder.buildUI(container, oopsy_manifest/* default */.Z);
  },
  processExtraOptions: (baseOptions, savedConfig) => {
    var _PerTriggerAutoConfig, _options$_PerTriggerA;

    // TODO: Rewrite user_config to be templated on option type so that this function knows
    // what type of options it is using.  Without this, perTriggerAutoConfig is unknown.
    const options = baseOptions;
    const perTriggerAutoConfig = (_options$_PerTriggerA = options[_PerTriggerAutoConfig = 'PerTriggerAutoConfig']) !== null && _options$_PerTriggerA !== void 0 ? _options$_PerTriggerA : options[_PerTriggerAutoConfig] = {};
    if (typeof savedConfig !== 'object' || Array.isArray(savedConfig)) return;
    const triggers = savedConfig['triggers'];
    if (typeof triggers !== 'object' || Array.isArray(triggers)) return;

    for (const [id, entry] of Object.entries(triggers)) {
      if (typeof entry !== 'object' || Array.isArray(entry)) continue;
      const output = entry['Output'];
      if (output === undefined) continue;
      perTriggerAutoConfig[id] = {
        enabled: output !== 'disabled'
      };
    }
  },
  options: [{
    id: 'Debug',
    name: {
      en: 'Enable debug mode',
      de: 'Aktiviere Debugmodus',
      fr: 'Activer le mode debug',
      ja: 'デバッグモードを有効にする',
      cn: '启用调试模式',
      ko: '디버그 모드 활성화'
    },
    type: 'checkbox',
    debugOnly: true,
    default: false
  }, {
    id: 'NumLiveListItemsInCombat',
    name: {
      en: 'Number of mistakes to show in combat',
      de: 'Anzahl der Fehler, die während des Kampfes angezeigt werden',
      fr: 'Nombre de fautes à afficher en combat',
      ja: '戦闘中に表示するミスをした回数',
      cn: '战斗中显示的错误数量',
      ko: '전투 중 표시할 실수들의 개수'
    },
    type: 'integer',
    default: 5
  }, {
    id: 'MinimumTimeForPullMistake',
    name: {
      en: 'Minimum time to show early pull (seconds)',
      de: 'Minimum Zeit in der Early-Pulls angezeigt werden (in Sekunden)',
      fr: 'Durée minimale pour afficher l\'early pull (secondes)',
      ja: 'タゲ取るのが早かったら、ミスとして表示する、カウントダウンとの最短時間 (秒)',
      cn: '显示提前开怪最小时间 (秒)',
      ko: '풀링이 빠르다고 표시 할 최소 시간 (초)'
    },
    type: 'float',
    default: 0.4
  }, {
    id: 'TimeToShowDeathReportSeconds',
    name: {
      en: 'Seconds to show death report on death (0=none)',
      de: 'Sekunden um den Todesreport beim Tot anzuzeigen (0=niemals)',
      fr: 'Durée d’affichage (en secondes) du rapport de mort (0 = aucun)',
      ja: '倒れた時にデスレポートを表示 (0=非表示)',
      cn: '死亡时显示死亡报告的秒数 (0=不显示)',
      ko: '죽었을 때 사망 보고서를 보여주는 시간(초) (0=비활성화)'
    },
    type: 'float',
    default: 4,
    setterFunc: (options, value) => {
      let seconds;
      if (typeof value === 'string') seconds = parseFloat(value);else if (typeof value === 'number') seconds = value;else return;
      options['TimeToShowDeathReportMs'] = seconds * 1000;
    }
  }, {
    id: 'DeathReportSide',
    name: {
      en: 'How to show the death report',
      de: 'Wie zeige ich den Todesreport an',
      fr: 'Où afficher le rapport de mort',
      ja: 'デスレポートの表示方法',
      cn: '死亡报告的显示方式',
      ko: '사망 보고서 표시 위치'
    },
    type: 'select',
    options: {
      en: {
        'Left Side': 'left',
        'Right Side': 'right',
        '❌ Disabled': 'disabled'
      },
      de: {
        'Left Side': 'links',
        'Right Side': 'rechts',
        '❌ Disabled': 'deaktiviert'
      },
      fr: {
        'Côté gauche': 'gauche',
        'Côté droit': 'droite',
        '❌ Disabled': 'désactivé'
      },
      ja: {
        '左側': 'left',
        '右側': 'right',
        '❌ 無効': 'disabled'
      },
      cn: {
        '左侧': 'left',
        '右侧': 'right',
        '❌ 禁用': 'disabled'
      },
      ko: {
        '왼쪽': 'left',
        '오른쪽': 'right',
        '❌ 비활성화': 'disabled'
      }
    },
    default: 'left'
  }]
};

const userFileHandler = (name, _files, baseOptions, basePath) => {
  // TODO: Rewrite user_config to be templated on option type so that this function knows
  // what type of options it is using.
  if (!baseOptions.Triggers) return;

  for (const baseTriggerSet of baseOptions.Triggers) {
    const set = baseTriggerSet; // Annotate triggers with where they came from.  Note, options is passed in repeatedly
    // as multiple sets of user files add triggers, so only process each file once.

    if (set.isUserTriggerSet) continue; // `filename` here is just cosmetic for better debug printing to make it more clear
    // where a trigger or an override is coming from.

    set.filename = `${basePath}${name}`;
    set.isUserTriggerSet = true;
  }
};

user_config/* default.registerOptions */.Z.registerOptions('oopsyraidsy', templateOptions, userFileHandler);
;// CONCATENATED MODULE: ./ui/oopsyraidsy/oopsyraidsy.ts












const addDebugInfo = (collector, numMistakes) => {
  // TODO: maybe this should use the fake_name_generator.
  const names = ['Tini Poutini', 'Potato Chippy', 'Papas Fritas', 'Tater Tot', 'Hash Brown', 'French Fry'];
  const types = ['death', 'fail', 'warn', 'pull']; // TODO: this should probably start/stop combat too for the summary page?

  let fakeTimestamp = 0;
  collector.StartEncounter(fakeTimestamp);

  for (let i = 0; i < numMistakes; ++i) {
    var _types$Math$floor;

    fakeTimestamp += 1000;
    collector.OnMistakeObj(fakeTimestamp, {
      type: (_types$Math$floor = types[Math.floor(Math.random() * types.length)]) !== null && _types$Math$floor !== void 0 ? _types$Math$floor : 'good',
      blame: names[Math.floor(Math.random() * names.length)],
      text: 'stuff'
    });
  }
}; // Note: changes to this setup function should be reflected in
// oopsy_viewer as well.

user_config/* default.getUserConfigLocation */.Z.getUserConfigLocation('oopsyraidsy', oopsy_options, () => {
  const options = { ...oopsy_options
  };
  const mistakeCollector = new MistakeCollector(options, true);
  const summaryElement = document.getElementById('summary');
  const liveListElement = document.getElementById('livelist'); // Choose the ui based on whether this is the summary view or the live list.
  // They have different elements in the file.

  if (summaryElement) {
    const listView = new OopsySummaryList(options, summaryElement);
    mistakeCollector.AddObserver(listView);
    const tableElement = document.getElementById('mistake-table');
    if (!tableElement) throw new not_reached/* UnreachableCode */.$();
    const table = new OopsySummaryTable(options, tableElement);
    mistakeCollector.AddObserver(table);
  } else if (liveListElement) {
    const listView = new OopsyLiveList(options, liveListElement);
    mistakeCollector.AddObserver(listView);
    (0,overlay_plugin_api/* addOverlayListener */.PS)('onInCombatChangedEvent', e => listView.SetInCombat(e.detail.inGameCombat));
  } else {
    throw new not_reached/* UnreachableCode */.$();
  } // NOTE: add "debug=1" url parameter to add extra events.


  const params = new URLSearchParams(window.location.search);
  if (params.get('debug')) addDebugInfo(mistakeCollector, 2200);
  const damageTracker = new DamageTracker(options, mistakeCollector, oopsy_manifest/* default */.Z);
  (0,overlay_plugin_api/* addOverlayListener */.PS)('LogLine', e => damageTracker.OnNetLog(e));
  (0,overlay_plugin_api/* addOverlayListener */.PS)('onPlayerChangedEvent', e => damageTracker.OnPlayerChange(e));
  (0,overlay_plugin_api/* addOverlayListener */.PS)('ChangeZone', e => damageTracker.OnChangeZone(e));
  (0,overlay_plugin_api/* addOverlayListener */.PS)('onInCombatChangedEvent', e => {
    damageTracker.OnInCombatChangedEvent(e);
  });
  (0,overlay_plugin_api/* addOverlayListener */.PS)('BroadcastMessage', e => mistakeCollector.OnBroadcastMessage(e));
  void (0,overlay_plugin_api/* callOverlayHandler */.ae)({
    call: 'cactbotRequestPlayerUpdate'
  });
});
;// CONCATENATED MODULE: ./ui/oopsyraidsy/oopsy_live.ts



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			137: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkcactbot"] = self["webpackChunkcactbot"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, [727], () => (__webpack_require__(875)))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNBLCtCQUErQix3Q0FBd0M7V0FDdkU7V0FDQTtXQUNBO1dBQ0E7V0FDQSxpQkFBaUIscUJBQXFCO1dBQ3RDO1dBQ0E7V0FDQSxrQkFBa0IscUJBQXFCO1dBQ3ZDO1dBQ0E7V0FDQSxLQUFLO1dBQ0w7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBOzs7OztXQzNCQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHlDQUF5Qyx3Q0FBd0M7V0FDakY7V0FDQTtXQUNBOzs7OztXQ1BBOzs7OztXQ0FBOztXQUVBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTs7V0FFQTs7V0FFQTs7V0FFQTs7V0FFQTs7V0FFQTs7V0FFQTs7V0FFQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxNQUFNLHFCQUFxQjtXQUMzQjtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBOztXQUVBO1dBQ0E7V0FDQTs7Ozs7VUVoREE7VUFDQTtVQUNBO1VBQ0E7VUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvY29uZGl0aW9ucy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL2NvbnRlbnRfdHlwZS50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL2xhbmd1YWdlcy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL25ldGxvZ19kZWZzLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvbmV0cmVnZXhlcy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL25vdF9yZWFjaGVkLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvb3V0cHV0cy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL292ZXJsYXlfcGx1Z2luX2FwaS50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL3JlZ2V4ZXMudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy9yZXNwb25zZXMudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy91c2VyX2NvbmZpZy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL3V0aWwudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy96b25lX2lkLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvem9uZV9pbmZvLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9vb3BzeXJhaWRzeS9vb3BzeV9jb21tb24udHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2NvbW1vbl9yZXBsYWNlbWVudC50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL3RyYW5zbGF0aW9ucy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvb29wc3lyYWlkc3kvY29tYmF0X3N0YXRlLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvcGFydHkudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL29vcHN5cmFpZHN5L2J1ZmZfbWFwLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9vb3BzeXJhaWRzeS9kZWF0aF9yZXBvcnQudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL29vcHN5cmFpZHN5L21pc3NlZF9idWZmX2NvbGxlY3Rvci50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvb29wc3lyYWlkc3kvcGxheWVyX3N0YXRlX3RyYWNrZXIudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL29vcHN5cmFpZHN5L2RhbWFnZV90cmFja2VyLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9vb3BzeXJhaWRzeS9taXN0YWtlX2NvbGxlY3Rvci50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvb29wc3lyYWlkc3kvb29wc3lfbGl2ZV9saXN0LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9vb3BzeXJhaWRzeS9hYmlsaXR5X25hbWVfbWFwLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9vb3BzeXJhaWRzeS9vb3BzeV9vcHRpb25zLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9vb3BzeXJhaWRzeS9vb3BzeV9zdW1tYXJ5X2xpc3QudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL29vcHN5cmFpZHN5L29vcHN5cmFpZHN5X2NvbmZpZy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvb29wc3lyYWlkc3kvb29wc3lyYWlkc3kudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL29vcHN5cmFpZHN5L29vcHN5X2xpdmUudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jYWN0Ym90L3dlYnBhY2svcnVudGltZS9jaHVuayBsb2FkZWQiLCJ3ZWJwYWNrOi8vY2FjdGJvdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2NhY3Rib3Qvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vY2FjdGJvdC93ZWJwYWNrL2JlZm9yZS1zdGFydHVwIiwid2VicGFjazovL2NhY3Rib3Qvd2VicGFjay9zdGFydHVwIiwid2VicGFjazovL2NhY3Rib3Qvd2VicGFjay9hZnRlci1zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZvciBjb25zaXN0ZW5jeSB3aXRoIFJlc3BvbnNlcywgQ29uZGl0aW9uc1xyXG4vLyBhcmUgYWxzbyBmdW5jdGlvbnMuXHJcblxyXG5pbXBvcnQgeyBSYWlkYm9zc0RhdGEgYXMgRGF0YSB9IGZyb20gJy4uL3R5cGVzL2RhdGEnO1xyXG5pbXBvcnQgeyBUYXJnZXRlZE1hdGNoZXMgfSBmcm9tICcuLi90eXBlcy90cmlnZ2VyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICB0YXJnZXRJc1lvdSgpOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzKSA9PiBib29sZWFuIHtcclxuICAgIHJldHVybiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzKSA9PiBkYXRhLm1lID09PSBtYXRjaGVzPy50YXJnZXQ7XHJcbiAgfSxcclxuICB0YXJnZXRJc05vdFlvdSgpOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzKSA9PiBib29sZWFuIHtcclxuICAgIHJldHVybiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzKSA9PiBkYXRhLm1lICE9PSBtYXRjaGVzPy50YXJnZXQ7XHJcbiAgfSxcclxuICBjYXJlc0Fib3V0QU9FKCk6IChkYXRhOiBEYXRhKSA9PiBib29sZWFuIHtcclxuICAgIHJldHVybiAoZGF0YTogRGF0YSkgPT5cclxuICAgICAgZGF0YS5yb2xlID09PSAndGFuaycgfHwgZGF0YS5yb2xlID09PSAnaGVhbGVyJyB8fCBkYXRhLkNhbkFkZGxlKCkgfHwgZGF0YS5qb2IgPT09ICdCTFUnO1xyXG4gIH0sXHJcbiAgY2FyZXNBYm91dE1hZ2ljYWwoKTogKGRhdGE6IERhdGEpID0+IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChkYXRhOiBEYXRhKSA9PlxyXG4gICAgICBkYXRhLnJvbGUgPT09ICd0YW5rJyB8fCBkYXRhLnJvbGUgPT09ICdoZWFsZXInIHx8IGRhdGEuQ2FuQWRkbGUoKSB8fCBkYXRhLmpvYiA9PT0gJ0JMVSc7XHJcbiAgfSxcclxuICBjYXJlc0Fib3V0UGh5c2ljYWwoKTogKGRhdGE6IERhdGEpID0+IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChkYXRhOiBEYXRhKSA9PlxyXG4gICAgICBkYXRhLnJvbGUgPT09ICd0YW5rJyB8fCBkYXRhLnJvbGUgPT09ICdoZWFsZXInIHx8IGRhdGEuQ2FuRmVpbnQoKSB8fCBkYXRhLmpvYiA9PT0gJ0JMVSc7XHJcbiAgfSxcclxufTtcclxuIiwiLy8gQXV0by1nZW5lcmF0ZWQgZnJvbSBnZW5fem9uZV9pZF9hbmRfaW5mby5weVxyXG4vLyBETyBOT1QgRURJVCBUSElTIEZJTEUgRElSRUNUTFlcclxuXHJcbmNvbnN0IGRhdGEgPSB7XHJcbiAgJ0JlYXN0VHJpYmVRdWVzdHMnOiAxMyxcclxuICAnQ29tcGFuaW9ucyc6IDEyLFxyXG4gICdDdXN0b21EZWxpdmVyaWVzJzogMjUsXHJcbiAgJ0RlZXBEdW5nZW9ucyc6IDIxLFxyXG4gICdEaXNjaXBsZXNPZlRoZUhhbmQnOiAxNyxcclxuICAnRGlzY2lwbGVzT2ZUaGVMYW5kJzogMTYsXHJcbiAgJ0R1bmdlb25zJzogMixcclxuICAnRHV0eVJvdWxldHRlJzogMSxcclxuICAnRXVyZWthJzogMjYsXHJcbiAgJ0ZhdGVzJzogOCxcclxuICAnR29sZFNhdWNlcic6IDE5LFxyXG4gICdHcmFuZENvbXBhbnknOiAxMSxcclxuICAnR3VpbGRoZXN0cyc6IDMsXHJcbiAgJ0xldmVxdWVzdHMnOiAxMCxcclxuICAnT3ZlcmFsbENvbXBsZXRpb24nOiAxNCxcclxuICAnUGxheWVyQ29tbWVuZGF0aW9uJzogMTUsXHJcbiAgJ1B2cCc6IDYsXHJcbiAgJ1F1ZXN0QmF0dGxlcyc6IDcsXHJcbiAgJ1JhaWRzJzogNSxcclxuICAnUmV0YWluZXJWZW50dXJlcyc6IDE4LFxyXG4gICdUcmVhc3VyZUh1bnQnOiA5LFxyXG4gICdUcmlhbHMnOiA0LFxyXG4gICdVbHRpbWF0ZVJhaWRzJzogMjgsXHJcbiAgJ1dvbmRyb3VzVGFpbHMnOiAyNCxcclxufSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRhdGE7XHJcbiIsImV4cG9ydCBjb25zdCBsYW5ndWFnZXMgPSBbJ2VuJywgJ2RlJywgJ2ZyJywgJ2phJywgJ2NuJywgJ2tvJ10gYXMgY29uc3Q7XHJcblxyXG5leHBvcnQgdHlwZSBMYW5nID0gdHlwZW9mIGxhbmd1YWdlc1tudW1iZXJdO1xyXG5cclxuZXhwb3J0IHR5cGUgTm9uRW5MYW5nID0gRXhjbHVkZTxMYW5nLCAnZW4nPjtcclxuXHJcbmV4cG9ydCBjb25zdCBsYW5nTWFwOiB7IFtsYW5nIGluIExhbmddOiB7IFtsYW5nIGluIExhbmddOiBzdHJpbmcgfSB9ID0ge1xyXG4gIGVuOiB7XHJcbiAgICBlbjogJ0VuZ2xpc2gnLFxyXG4gICAgZGU6ICdHZXJtYW4nLFxyXG4gICAgZnI6ICdGcmVuY2gnLFxyXG4gICAgamE6ICdKYXBhbmVzZScsXHJcbiAgICBjbjogJ0NoaW5lc2UnLFxyXG4gICAga286ICdLb3JlYW4nLFxyXG4gIH0sXHJcbiAgZGU6IHtcclxuICAgIGVuOiAnRW5nbGlzY2gnLFxyXG4gICAgZGU6ICdEZXV0c2NoJyxcclxuICAgIGZyOiAnRnJhbnrDtnNpc2NoJyxcclxuICAgIGphOiAnSmFwYW5pc2NoJyxcclxuICAgIGNuOiAnQ2hpbmVzaXNjaCcsXHJcbiAgICBrbzogJ0tvcmVhbmlzY2gnLFxyXG4gIH0sXHJcbiAgZnI6IHtcclxuICAgIGVuOiAnQW5nbGFpcycsXHJcbiAgICBkZTogJ0FsbGVtYW5kJyxcclxuICAgIGZyOiAnRnJhbsOnYWlzJyxcclxuICAgIGphOiAnSmFwb25haXMnLFxyXG4gICAgY246ICdDaGlub2lzJyxcclxuICAgIGtvOiAnQ29yw6llbicsXHJcbiAgfSxcclxuICBqYToge1xyXG4gICAgZW46ICfoi7Hoqp4nLFxyXG4gICAgZGU6ICfjg4njgqTjg4Toqp4nLFxyXG4gICAgZnI6ICfjg5Xjg6njg7Pjgrnoqp4nLFxyXG4gICAgamE6ICfml6XmnKzoqp4nLFxyXG4gICAgY246ICfkuK3lm73oqp4nLFxyXG4gICAga286ICfpn5Plm73oqp4nLFxyXG4gIH0sXHJcbiAgY246IHtcclxuICAgIGVuOiAn6Iux5paHJyxcclxuICAgIGRlOiAn5b635paHJyxcclxuICAgIGZyOiAn5rOV5paHJyxcclxuICAgIGphOiAn5pel5paHJyxcclxuICAgIGNuOiAn5Lit5paHJyxcclxuICAgIGtvOiAn6Z+p5paHJyxcclxuICB9LFxyXG4gIGtvOiB7XHJcbiAgICBlbjogJ+yYgeyWtCcsXHJcbiAgICBkZTogJ+uPheydvOyWtCcsXHJcbiAgICBmcjogJ+2UhOuekeyKpOyWtCcsXHJcbiAgICBqYTogJ+ydvOuzuOyWtCcsXHJcbiAgICBjbjogJ+ykkeq1reyWtCcsXHJcbiAgICBrbzogJ+2VnOq1reyWtCcsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBjb25zdCBpc0xhbmcgPSAobGFuZz86IHN0cmluZyk6IGxhbmcgaXMgTGFuZyA9PiB7XHJcbiAgY29uc3QgbGFuZ1N0cnM6IHJlYWRvbmx5IHN0cmluZ1tdID0gbGFuZ3VhZ2VzO1xyXG4gIGlmIChsYW5nID09PSB1bmRlZmluZWQpXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgcmV0dXJuIGxhbmdTdHJzLmluY2x1ZGVzKGxhbmcpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGxhbmdUb0xvY2FsZSA9IChsYW5nOiBMYW5nKTogc3RyaW5nID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgZW46ICdlbicsXHJcbiAgICBkZTogJ2RlJyxcclxuICAgIGZyOiAnZnInLFxyXG4gICAgamE6ICdqYScsXHJcbiAgICBjbjogJ3poLUNOJyxcclxuICAgIGtvOiAna28nLFxyXG4gIH1bbGFuZ107XHJcbn07XHJcbiIsImltcG9ydCB7IE5ldEZpZWxkc1JldmVyc2UgfSBmcm9tICcuLi90eXBlcy9uZXRfZmllbGRzJztcclxuXHJcbmV4cG9ydCB0eXBlIExvZ0RlZmluaXRpb24gPSB7XHJcbiAgdHlwZTogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICAvLyBQYXJzZWQgQUNUIGxvZyBsaW5lIHR5cGUuXHJcbiAgbWVzc2FnZVR5cGU6IHN0cmluZztcclxuICAvLyBpbmNsdWRlIGFsbCBvZiB0aGVzZSBsaW5lcyBpbiBhbnkgc3BsaXRcclxuICBnbG9iYWxJbmNsdWRlPzogYm9vbGVhbjtcclxuICAvLyBpbmNsdWRlIHRoZSBsYXN0IGxpbmUgb2YgdGhpcyB0eXBlIGluIGFueSBzcGxpdFxyXG4gIGxhc3RJbmNsdWRlPzogYm9vbGVhbjtcclxuICAvLyB3aGV0aGVyIHRoaXMgbGluZSBjYW4gYmUgYW5vbnltaXplZFxyXG4gIGNhbkFub255bWl6ZT86IGJvb2xlYW47XHJcbiAgLy8gbmVlZHMgbW9yZSBpbmZvcm1hdGlvbiwgbmV2ZXIgc2VlbiB0aGlzIGxvZ1xyXG4gIGlzVW5rbm93bj86IGJvb2xlYW47XHJcbiAgLy8gZmllbGRzIGF0IHRoaXMgaW5kZXggYW5kIGJleW9uZCBhcmUgY2xlYXJlZCwgd2hlbiBhbm9ueW1pemluZ1xyXG4gIGZpcnN0VW5rbm93bkZpZWxkPzogbnVtYmVyO1xyXG4gIGZpZWxkcz86IHsgW2ZpZWxkTmFtZTogc3RyaW5nXTogbnVtYmVyIH07XHJcbiAgc3ViRmllbGRzPzoge1xyXG4gICAgW2ZpZWxkTmFtZTogc3RyaW5nXToge1xyXG4gICAgICBbZmllbGRWYWx1ZTogc3RyaW5nXToge1xyXG4gICAgICAgIG5hbWU6IHN0cmluZztcclxuICAgICAgICBjYW5Bbm9ueW1pemU6IGJvb2xlYW47XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gIH07XHJcbiAgLy8gbWFwIG9mIGluZGV4ZXMgZnJvbSBhIHBsYXllciBpZCB0byB0aGUgaW5kZXggb2YgdGhhdCBwbGF5ZXIgbmFtZVxyXG4gIHBsYXllcklkcz86IHsgW2ZpZWxkSWR4OiBudW1iZXJdOiBudW1iZXIgfCBudWxsIH07XHJcbiAgLy8gYSBsaXN0IG9mIGZpZWxkcyB0aGF0IGFyZSBvayB0byBiZSBibGFuayAob3IgaGF2ZSBpbnZhbGlkIGlkcylcclxuICBibGFua0ZpZWxkcz86IHJlYWRvbmx5IG51bWJlcltdO1xyXG4gIC8vIHRoaXMgZmllbGQgYW5kIGFueSBmaWVsZCBhZnRlciB3aWxsIGJlIHRyZWF0ZWQgYXMgb3B0aW9uYWwgd2hlbiBjcmVhdGluZyBjYXB0dXJpbmcgcmVnZXhlc1xyXG4gIGZpcnN0T3B0aW9uYWxGaWVsZDogKG51bWJlciB8IHVuZGVmaW5lZCk7XHJcbn07XHJcbmV4cG9ydCB0eXBlIExvZ0RlZmluaXRpb25NYXAgPSB7IFtuYW1lOiBzdHJpbmddOiBMb2dEZWZpbml0aW9uIH07XHJcbnR5cGUgTG9nRGVmaW5pdGlvblZlcnNpb25NYXAgPSB7IFt2ZXJzaW9uOiBzdHJpbmddOiBMb2dEZWZpbml0aW9uTWFwIH07XHJcblxyXG5jb25zdCBsYXRlc3RMb2dEZWZpbml0aW9ucyA9IHtcclxuICBHYW1lTG9nOiB7XHJcbiAgICB0eXBlOiAnMDAnLFxyXG4gICAgbmFtZTogJ0dhbWVMb2cnLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdDaGF0TG9nJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGNvZGU6IDIsXHJcbiAgICAgIG5hbWU6IDMsXHJcbiAgICAgIGxpbmU6IDQsXHJcbiAgICB9LFxyXG4gICAgc3ViRmllbGRzOiB7XHJcbiAgICAgIGNvZGU6IHtcclxuICAgICAgICAnMDAzOSc6IHtcclxuICAgICAgICAgIG5hbWU6ICdtZXNzYWdlJyxcclxuICAgICAgICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgICcwMDM4Jzoge1xyXG4gICAgICAgICAgbmFtZTogJ2VjaG8nLFxyXG4gICAgICAgICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJzAwNDQnOiB7XHJcbiAgICAgICAgICBuYW1lOiAnZGlhbG9nJyxcclxuICAgICAgICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgICcwODM5Jzoge1xyXG4gICAgICAgICAgbmFtZTogJ21lc3NhZ2UnLFxyXG4gICAgICAgICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBDaGFuZ2Vab25lOiB7XHJcbiAgICB0eXBlOiAnMDEnLFxyXG4gICAgbmFtZTogJ0NoYW5nZVpvbmUnLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdUZXJyaXRvcnknLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgaWQ6IDIsXHJcbiAgICAgIG5hbWU6IDMsXHJcbiAgICB9LFxyXG4gICAgbGFzdEluY2x1ZGU6IHRydWUsXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIENoYW5nZWRQbGF5ZXI6IHtcclxuICAgIHR5cGU6ICcwMicsXHJcbiAgICBuYW1lOiAnQ2hhbmdlZFBsYXllcicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ0NoYW5nZVByaW1hcnlQbGF5ZXInLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgaWQ6IDIsXHJcbiAgICAgIG5hbWU6IDMsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICB9LFxyXG4gICAgbGFzdEluY2x1ZGU6IHRydWUsXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIEFkZGVkQ29tYmF0YW50OiB7XHJcbiAgICB0eXBlOiAnMDMnLFxyXG4gICAgbmFtZTogJ0FkZGVkQ29tYmF0YW50JyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnQWRkQ29tYmF0YW50JyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGlkOiAyLFxyXG4gICAgICBuYW1lOiAzLFxyXG4gICAgICBqb2I6IDQsXHJcbiAgICAgIGxldmVsOiA1LFxyXG4gICAgICBvd25lcklkOiA2LFxyXG4gICAgICB3b3JsZElkOiA3LFxyXG4gICAgICB3b3JsZDogOCxcclxuICAgICAgbnBjTmFtZUlkOiA5LFxyXG4gICAgICBucGNCYXNlSWQ6IDEwLFxyXG4gICAgICBjdXJyZW50SHA6IDExLFxyXG4gICAgICBocDogMTIsXHJcbiAgICAgIGN1cnJlbnRNcDogMTMsXHJcbiAgICAgIG1wOiAxNCxcclxuICAgICAgLy8gbWF4VHA6IDE1LFxyXG4gICAgICAvLyB0cDogMTYsXHJcbiAgICAgIHg6IDE3LFxyXG4gICAgICB5OiAxOCxcclxuICAgICAgejogMTksXHJcbiAgICAgIGhlYWRpbmc6IDIwLFxyXG4gICAgfSxcclxuICAgIHBsYXllcklkczoge1xyXG4gICAgICAyOiAzLFxyXG4gICAgICA2OiBudWxsLFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgUmVtb3ZlZENvbWJhdGFudDoge1xyXG4gICAgdHlwZTogJzA0JyxcclxuICAgIG5hbWU6ICdSZW1vdmVkQ29tYmF0YW50JyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnUmVtb3ZlQ29tYmF0YW50JyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGlkOiAyLFxyXG4gICAgICBuYW1lOiAzLFxyXG4gICAgICBqb2I6IDQsXHJcbiAgICAgIGxldmVsOiA1LFxyXG4gICAgICBvd25lcjogNixcclxuICAgICAgd29ybGQ6IDgsXHJcbiAgICAgIG5wY05hbWVJZDogOSxcclxuICAgICAgbnBjQmFzZUlkOiAxMCxcclxuICAgICAgaHA6IDEyLFxyXG4gICAgICB4OiAxNyxcclxuICAgICAgeTogMTgsXHJcbiAgICAgIHo6IDE5LFxyXG4gICAgICBoZWFkaW5nOiAyMCxcclxuICAgIH0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgMjogMyxcclxuICAgICAgNjogbnVsbCxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIFBhcnR5TGlzdDoge1xyXG4gICAgdHlwZTogJzExJyxcclxuICAgIG5hbWU6ICdQYXJ0eUxpc3QnLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdQYXJ0eUxpc3QnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgcGFydHlDb3VudDogMixcclxuICAgICAgaWQwOiAzLFxyXG4gICAgICBpZDE6IDQsXHJcbiAgICAgIGlkMjogNSxcclxuICAgICAgaWQzOiA2LFxyXG4gICAgICBpZDQ6IDcsXHJcbiAgICAgIGlkNTogOCxcclxuICAgICAgaWQ2OiA5LFxyXG4gICAgICBpZDc6IDEwLFxyXG4gICAgICBpZDg6IDExLFxyXG4gICAgICBpZDk6IDEyLFxyXG4gICAgICBpZDEwOiAxMyxcclxuICAgICAgaWQxMTogMTQsXHJcbiAgICAgIGlkMTI6IDE1LFxyXG4gICAgICBpZDEzOiAxNixcclxuICAgICAgaWQxNDogMTcsXHJcbiAgICAgIGlkMTU6IDE4LFxyXG4gICAgICBpZDE2OiAxOSxcclxuICAgICAgaWQxNzogMjAsXHJcbiAgICAgIGlkMTg6IDIxLFxyXG4gICAgICBpZDE5OiAyMixcclxuICAgICAgaWQyMDogMjMsXHJcbiAgICAgIGlkMjE6IDI0LFxyXG4gICAgICBpZDIyOiAyNSxcclxuICAgICAgaWQyMzogMjYsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDM6IG51bGwsXHJcbiAgICAgIDQ6IG51bGwsXHJcbiAgICAgIDU6IG51bGwsXHJcbiAgICAgIDY6IG51bGwsXHJcbiAgICAgIDc6IG51bGwsXHJcbiAgICAgIDg6IG51bGwsXHJcbiAgICAgIDk6IG51bGwsXHJcbiAgICAgIDEwOiBudWxsLFxyXG4gICAgICAxMTogbnVsbCxcclxuICAgICAgMTI6IG51bGwsXHJcbiAgICAgIDEzOiBudWxsLFxyXG4gICAgICAxNDogbnVsbCxcclxuICAgICAgMTU6IG51bGwsXHJcbiAgICAgIDE2OiBudWxsLFxyXG4gICAgICAxNzogbnVsbCxcclxuICAgICAgMTg6IG51bGwsXHJcbiAgICAgIDE5OiBudWxsLFxyXG4gICAgICAyMDogbnVsbCxcclxuICAgICAgMjE6IG51bGwsXHJcbiAgICAgIDIyOiBudWxsLFxyXG4gICAgICAyMzogbnVsbCxcclxuICAgICAgMjQ6IG51bGwsXHJcbiAgICAgIDI1OiBudWxsLFxyXG4gICAgICAyNjogbnVsbCxcclxuICAgIH0sXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IDMsXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBsYXN0SW5jbHVkZTogdHJ1ZSxcclxuICB9LFxyXG4gIFBsYXllclN0YXRzOiB7XHJcbiAgICB0eXBlOiAnMTInLFxyXG4gICAgbmFtZTogJ1BsYXllclN0YXRzJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnUGxheWVyU3RhdHMnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgam9iOiAyLFxyXG4gICAgICBzdHJlbmd0aDogMyxcclxuICAgICAgZGV4dGVyaXR5OiA0LFxyXG4gICAgICB2aXRhbGl0eTogNSxcclxuICAgICAgaW50ZWxsaWdlbmNlOiA2LFxyXG4gICAgICBtaW5kOiA3LFxyXG4gICAgICBwaWV0eTogOCxcclxuICAgICAgYXR0YWNrUG93ZXI6IDksXHJcbiAgICAgIGRpcmVjdEhpdDogMTAsXHJcbiAgICAgIGNyaXRpY2FsSGl0OiAxMSxcclxuICAgICAgYXR0YWNrTWFnaWNQb3RlbmN5OiAxMixcclxuICAgICAgaGVhbE1hZ2ljUG90ZW5jeTogMTMsXHJcbiAgICAgIGRldGVybWluYXRpb246IDE0LFxyXG4gICAgICBza2lsbFNwZWVkOiAxNSxcclxuICAgICAgc3BlbGxTcGVlZDogMTYsXHJcbiAgICAgIHRlbmFjaXR5OiAxOCxcclxuICAgICAgbG9jYWxDb250ZW50SWQ6IDE5LFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGxhc3RJbmNsdWRlOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBTdGFydHNVc2luZzoge1xyXG4gICAgdHlwZTogJzIwJyxcclxuICAgIG5hbWU6ICdTdGFydHNVc2luZycsXHJcbiAgICBtZXNzYWdlVHlwZTogJ1N0YXJ0c0Nhc3RpbmcnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgc291cmNlSWQ6IDIsXHJcbiAgICAgIHNvdXJjZTogMyxcclxuICAgICAgaWQ6IDQsXHJcbiAgICAgIGFiaWxpdHk6IDUsXHJcbiAgICAgIHRhcmdldElkOiA2LFxyXG4gICAgICB0YXJnZXQ6IDcsXHJcbiAgICAgIGNhc3RUaW1lOiA4LFxyXG4gICAgICB4OiA5LFxyXG4gICAgICB5OiAxMCxcclxuICAgICAgejogMTEsXHJcbiAgICAgIGhlYWRpbmc6IDEyLFxyXG4gICAgfSxcclxuICAgIGJsYW5rRmllbGRzOiBbNl0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgMjogMyxcclxuICAgICAgNjogNyxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIEFiaWxpdHk6IHtcclxuICAgIHR5cGU6ICcyMScsXHJcbiAgICBuYW1lOiAnQWJpbGl0eScsXHJcbiAgICBtZXNzYWdlVHlwZTogJ0FjdGlvbkVmZmVjdCcsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBzb3VyY2VJZDogMixcclxuICAgICAgc291cmNlOiAzLFxyXG4gICAgICBpZDogNCxcclxuICAgICAgYWJpbGl0eTogNSxcclxuICAgICAgdGFyZ2V0SWQ6IDYsXHJcbiAgICAgIHRhcmdldDogNyxcclxuICAgICAgZmxhZ3M6IDgsXHJcbiAgICAgIGRhbWFnZTogOSxcclxuICAgICAgdGFyZ2V0Q3VycmVudEhwOiAyNCxcclxuICAgICAgdGFyZ2V0TWF4SHA6IDI1LFxyXG4gICAgICB0YXJnZXRDdXJyZW50TXA6IDI2LFxyXG4gICAgICB0YXJnZXRNYXhNcDogMjcsXHJcbiAgICAgIC8vIHRhcmdldEN1cnJlbnRUcDogMjgsXHJcbiAgICAgIC8vIHRhcmdldE1heFRwOiAyOSxcclxuICAgICAgdGFyZ2V0WDogMzAsXHJcbiAgICAgIHRhcmdldFk6IDMxLFxyXG4gICAgICB0YXJnZXRaOiAzMixcclxuICAgICAgdGFyZ2V0SGVhZGluZzogMzMsXHJcbiAgICAgIGN1cnJlbnRIcDogMzQsXHJcbiAgICAgIG1heEhwOiAzNSxcclxuICAgICAgY3VycmVudE1wOiAzNixcclxuICAgICAgbWF4TXA6IDM3LFxyXG4gICAgICAvLyBjdXJyZW50VHA6IDM4O1xyXG4gICAgICAvLyBtYXhUcDogMzk7XHJcbiAgICAgIHg6IDQwLFxyXG4gICAgICB5OiA0MSxcclxuICAgICAgejogNDIsXHJcbiAgICAgIGhlYWRpbmc6IDQzLFxyXG4gICAgICBzZXF1ZW5jZTogNDQsXHJcbiAgICAgIHRhcmdldEluZGV4OiA0NSxcclxuICAgICAgdGFyZ2V0Q291bnQ6IDQ2LFxyXG4gICAgfSxcclxuICAgIHBsYXllcklkczoge1xyXG4gICAgICAyOiAzLFxyXG4gICAgICA2OiA3LFxyXG4gICAgfSxcclxuICAgIGJsYW5rRmllbGRzOiBbNl0sXHJcbiAgICBmaXJzdFVua25vd25GaWVsZDogNDQsXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIE5ldHdvcmtBT0VBYmlsaXR5OiB7XHJcbiAgICB0eXBlOiAnMjInLFxyXG4gICAgbmFtZTogJ05ldHdvcmtBT0VBYmlsaXR5JyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnQU9FQWN0aW9uRWZmZWN0JyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIHNvdXJjZUlkOiAyLFxyXG4gICAgICBzb3VyY2U6IDMsXHJcbiAgICAgIGlkOiA0LFxyXG4gICAgICBhYmlsaXR5OiA1LFxyXG4gICAgICB0YXJnZXRJZDogNixcclxuICAgICAgdGFyZ2V0OiA3LFxyXG4gICAgICBmbGFnczogOCxcclxuICAgICAgZGFtYWdlOiA5LFxyXG4gICAgICB0YXJnZXRDdXJyZW50SHA6IDI0LFxyXG4gICAgICB0YXJnZXRNYXhIcDogMjUsXHJcbiAgICAgIHRhcmdldEN1cnJlbnRNcDogMjYsXHJcbiAgICAgIHRhcmdldE1heE1wOiAyNyxcclxuICAgICAgLy8gdGFyZ2V0Q3VycmVudFRwOiAyOCxcclxuICAgICAgLy8gdGFyZ2V0TWF4VHA6IDI5LFxyXG4gICAgICB0YXJnZXRYOiAzMCxcclxuICAgICAgdGFyZ2V0WTogMzEsXHJcbiAgICAgIHRhcmdldFo6IDMyLFxyXG4gICAgICB0YXJnZXRIZWFkaW5nOiAzMyxcclxuICAgICAgY3VycmVudEhwOiAzNCxcclxuICAgICAgbWF4SHA6IDM1LFxyXG4gICAgICBjdXJyZW50TXA6IDM2LFxyXG4gICAgICBtYXhNcDogMzcsXHJcbiAgICAgIC8vIGN1cnJlbnRUcDogMzg7XHJcbiAgICAgIC8vIG1heFRwOiAzOTtcclxuICAgICAgeDogNDAsXHJcbiAgICAgIHk6IDQxLFxyXG4gICAgICB6OiA0MixcclxuICAgICAgaGVhZGluZzogNDMsXHJcbiAgICAgIHNlcXVlbmNlOiA0NCxcclxuICAgICAgdGFyZ2V0SW5kZXg6IDQ1LFxyXG4gICAgICB0YXJnZXRDb3VudDogNDYsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICAgIDY6IDcsXHJcbiAgICB9LFxyXG4gICAgYmxhbmtGaWVsZHM6IFs2XSxcclxuICAgIGZpcnN0VW5rbm93bkZpZWxkOiA0NCxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgTmV0d29ya0NhbmNlbEFiaWxpdHk6IHtcclxuICAgIHR5cGU6ICcyMycsXHJcbiAgICBuYW1lOiAnTmV0d29ya0NhbmNlbEFiaWxpdHknLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdDYW5jZWxBY3Rpb24nLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgc291cmNlSWQ6IDIsXHJcbiAgICAgIHNvdXJjZTogMyxcclxuICAgICAgaWQ6IDQsXHJcbiAgICAgIG5hbWU6IDUsXHJcbiAgICAgIHJlYXNvbjogNixcclxuICAgIH0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgMjogMyxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIE5ldHdvcmtEb1Q6IHtcclxuICAgIHR5cGU6ICcyNCcsXHJcbiAgICBuYW1lOiAnTmV0d29ya0RvVCcsXHJcbiAgICBtZXNzYWdlVHlwZTogJ0RvVEhvVCcsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBpZDogMixcclxuICAgICAgbmFtZTogMyxcclxuICAgICAgd2hpY2g6IDQsXHJcbiAgICAgIGVmZmVjdElkOiA1LFxyXG4gICAgICBkYW1hZ2U6IDYsXHJcbiAgICAgIGN1cnJlbnRIcDogNyxcclxuICAgICAgbWF4SHA6IDgsXHJcbiAgICAgIGN1cnJlbnRNcDogOSxcclxuICAgICAgbWF4TXA6IDEwLFxyXG4gICAgICAvLyBjdXJyZW50VHA6IDExLFxyXG4gICAgICAvLyBtYXhUcDogMTIsXHJcbiAgICAgIHg6IDEzLFxyXG4gICAgICB5OiAxNCxcclxuICAgICAgejogMTUsXHJcbiAgICAgIGhlYWRpbmc6IDE2LFxyXG4gICAgfSxcclxuICAgIHBsYXllcklkczoge1xyXG4gICAgICAyOiAzLFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgV2FzRGVmZWF0ZWQ6IHtcclxuICAgIHR5cGU6ICcyNScsXHJcbiAgICBuYW1lOiAnV2FzRGVmZWF0ZWQnLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdEZWF0aCcsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICB0YXJnZXRJZDogMixcclxuICAgICAgdGFyZ2V0OiAzLFxyXG4gICAgICBzb3VyY2VJZDogNCxcclxuICAgICAgc291cmNlOiA1LFxyXG4gICAgfSxcclxuICAgIHBsYXllcklkczoge1xyXG4gICAgICAyOiAzLFxyXG4gICAgICA0OiA1LFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgR2FpbnNFZmZlY3Q6IHtcclxuICAgIHR5cGU6ICcyNicsXHJcbiAgICBuYW1lOiAnR2FpbnNFZmZlY3QnLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdTdGF0dXNBZGQnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgZWZmZWN0SWQ6IDIsXHJcbiAgICAgIGVmZmVjdDogMyxcclxuICAgICAgZHVyYXRpb246IDQsXHJcbiAgICAgIHNvdXJjZUlkOiA1LFxyXG4gICAgICBzb3VyY2U6IDYsXHJcbiAgICAgIHRhcmdldElkOiA3LFxyXG4gICAgICB0YXJnZXQ6IDgsXHJcbiAgICAgIGNvdW50OiA5LFxyXG4gICAgICB0YXJnZXRNYXhIcDogMTAsXHJcbiAgICAgIHNvdXJjZU1heEhwOiAxMSxcclxuICAgIH0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgNTogNixcclxuICAgICAgNzogOCxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIEhlYWRNYXJrZXI6IHtcclxuICAgIHR5cGU6ICcyNycsXHJcbiAgICBuYW1lOiAnSGVhZE1hcmtlcicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ1RhcmdldEljb24nLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgdGFyZ2V0SWQ6IDIsXHJcbiAgICAgIHRhcmdldDogMyxcclxuICAgICAgaWQ6IDYsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBOZXR3b3JrUmFpZE1hcmtlcjoge1xyXG4gICAgdHlwZTogJzI4JyxcclxuICAgIG5hbWU6ICdOZXR3b3JrUmFpZE1hcmtlcicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ1dheW1hcmtNYXJrZXInLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgb3BlcmF0aW9uOiAyLFxyXG4gICAgICB3YXltYXJrOiAzLFxyXG4gICAgICBpZDogNCxcclxuICAgICAgbmFtZTogNSxcclxuICAgICAgeDogNixcclxuICAgICAgeTogNyxcclxuICAgICAgejogOCxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIE5ldHdvcmtUYXJnZXRNYXJrZXI6IHtcclxuICAgIHR5cGU6ICcyOScsXHJcbiAgICBuYW1lOiAnTmV0d29ya1RhcmdldE1hcmtlcicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ1NpZ25NYXJrZXInLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgb3BlcmF0aW9uOiAyLCAvLyBBZGQsIFVwZGF0ZSwgRGVsZXRlXHJcbiAgICAgIHdheW1hcms6IDMsXHJcbiAgICAgIGlkOiA0LFxyXG4gICAgICBuYW1lOiA1LFxyXG4gICAgICB0YXJnZXRJZDogNixcclxuICAgICAgdGFyZ2V0TmFtZTogNyxcclxuICAgIH0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgNDogbnVsbCxcclxuICAgICAgNTogbnVsbCxcclxuICAgIH0sXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIExvc2VzRWZmZWN0OiB7XHJcbiAgICB0eXBlOiAnMzAnLFxyXG4gICAgbmFtZTogJ0xvc2VzRWZmZWN0JyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnU3RhdHVzUmVtb3ZlJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGVmZmVjdElkOiAyLFxyXG4gICAgICBlZmZlY3Q6IDMsXHJcbiAgICAgIHNvdXJjZUlkOiA1LFxyXG4gICAgICBzb3VyY2U6IDYsXHJcbiAgICAgIHRhcmdldElkOiA3LFxyXG4gICAgICB0YXJnZXQ6IDgsXHJcbiAgICAgIGNvdW50OiA5LFxyXG4gICAgfSxcclxuICAgIHBsYXllcklkczoge1xyXG4gICAgICA1OiA2LFxyXG4gICAgICA3OiA4LFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgTmV0d29ya0dhdWdlOiB7XHJcbiAgICB0eXBlOiAnMzEnLFxyXG4gICAgbmFtZTogJ05ldHdvcmtHYXVnZScsXHJcbiAgICBtZXNzYWdlVHlwZTogJ0dhdWdlJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGlkOiAyLFxyXG4gICAgICBkYXRhMDogMyxcclxuICAgICAgZGF0YTE6IDQsXHJcbiAgICAgIGRhdGEyOiA1LFxyXG4gICAgICBkYXRhMzogNixcclxuICAgIH0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgMjogbnVsbCxcclxuICAgIH0sXHJcbiAgICAvLyBTb21ldGltZXMgdGhpcyBsYXN0IGZpZWxkIGxvb2tzIGxpa2UgYSBwbGF5ZXIgaWQuXHJcbiAgICAvLyBGb3Igc2FmZXR5LCBhbm9ueW1pemUgYWxsIG9mIHRoZSBnYXVnZSBkYXRhLlxyXG4gICAgZmlyc3RVbmtub3duRmllbGQ6IDMsXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIE5ldHdvcmtXb3JsZDoge1xyXG4gICAgdHlwZTogJzMyJyxcclxuICAgIG5hbWU6ICdOZXR3b3JrV29ybGQnLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdXb3JsZCcsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgfSxcclxuICAgIGlzVW5rbm93bjogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgQWN0b3JDb250cm9sOiB7XHJcbiAgICB0eXBlOiAnMzMnLFxyXG4gICAgbmFtZTogJ0FjdG9yQ29udHJvbCcsXHJcbiAgICBtZXNzYWdlVHlwZTogJ0RpcmVjdG9yJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGluc3RhbmNlOiAyLFxyXG4gICAgICBjb21tYW5kOiAzLFxyXG4gICAgICBkYXRhMDogNCxcclxuICAgICAgZGF0YTE6IDUsXHJcbiAgICAgIGRhdGEyOiA2LFxyXG4gICAgICBkYXRhMzogNyxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIE5hbWVUb2dnbGU6IHtcclxuICAgIHR5cGU6ICczNCcsXHJcbiAgICBuYW1lOiAnTmFtZVRvZ2dsZScsXHJcbiAgICBtZXNzYWdlVHlwZTogJ05hbWVUb2dnbGUnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgaWQ6IDIsXHJcbiAgICAgIG5hbWU6IDMsXHJcbiAgICAgIHRhcmdldElkOiA0LFxyXG4gICAgICB0YXJnZXROYW1lOiA1LFxyXG4gICAgICB0b2dnbGU6IDYsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICAgIDQ6IDUsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBUZXRoZXI6IHtcclxuICAgIHR5cGU6ICczNScsXHJcbiAgICBuYW1lOiAnVGV0aGVyJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnVGV0aGVyJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIHNvdXJjZUlkOiAyLFxyXG4gICAgICBzb3VyY2U6IDMsXHJcbiAgICAgIHRhcmdldElkOiA0LFxyXG4gICAgICB0YXJnZXQ6IDUsXHJcbiAgICAgIGlkOiA4LFxyXG4gICAgfSxcclxuICAgIHBsYXllcklkczoge1xyXG4gICAgICAyOiAzLFxyXG4gICAgICA0OiA1LFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0VW5rbm93bkZpZWxkOiA5LFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBMaW1pdEJyZWFrOiB7XHJcbiAgICB0eXBlOiAnMzYnLFxyXG4gICAgbmFtZTogJ0xpbWl0QnJlYWsnLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdMaW1pdEJyZWFrJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIHZhbHVlSGV4OiAyLFxyXG4gICAgICBiYXJzOiAzLFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgTmV0d29ya0VmZmVjdFJlc3VsdDoge1xyXG4gICAgdHlwZTogJzM3JyxcclxuICAgIG5hbWU6ICdOZXR3b3JrRWZmZWN0UmVzdWx0JyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnRWZmZWN0UmVzdWx0JyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGlkOiAyLFxyXG4gICAgICBuYW1lOiAzLFxyXG4gICAgICBzZXF1ZW5jZUlkOiA0LFxyXG4gICAgICBjdXJyZW50SHA6IDUsXHJcbiAgICAgIG1heEhwOiA2LFxyXG4gICAgICBjdXJyZW50TXA6IDcsXHJcbiAgICAgIG1heE1wOiA4LFxyXG4gICAgICAvLyBjdXJyZW50VHA6IDksXHJcbiAgICAgIC8vIG1heFRwOiAxMCxcclxuICAgICAgeDogMTEsXHJcbiAgICAgIHk6IDEyLFxyXG4gICAgICB6OiAxMyxcclxuICAgICAgaGVhZGluZzogMTQsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICB9LFxyXG4gICAgZmlyc3RVbmtub3duRmllbGQ6IDIyLFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBTdGF0dXNFZmZlY3Q6IHtcclxuICAgIHR5cGU6ICczOCcsXHJcbiAgICBuYW1lOiAnU3RhdHVzRWZmZWN0JyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnU3RhdHVzTGlzdCcsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICB0YXJnZXRJZDogMixcclxuICAgICAgdGFyZ2V0OiAzLFxyXG4gICAgICBqb2JMZXZlbERhdGE6IDQsXHJcbiAgICAgIGhwOiA1LFxyXG4gICAgICBtYXhIcDogNixcclxuICAgICAgbXA6IDcsXHJcbiAgICAgIG1heE1wOiA4LFxyXG4gICAgICB4OiAxMSxcclxuICAgICAgeTogMTIsXHJcbiAgICAgIHo6IDEzLFxyXG4gICAgICBoZWFkaW5nOiAxNCxcclxuICAgICAgZGF0YTA6IDE1LFxyXG4gICAgICBkYXRhMTogMTYsXHJcbiAgICAgIGRhdGEyOiAxNyxcclxuICAgICAgZGF0YTM6IDE4LFxyXG4gICAgICBkYXRhNDogMTksXHJcbiAgICAgIGRhdGE1OiAyMCxcclxuICAgICAgLy8gVmFyaWFibGUgbnVtYmVyIG9mIHRyaXBsZXRzIGhlcmUsIGJ1dCBhdCBsZWFzdCBvbmUuXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICB9LFxyXG4gICAgZmlyc3RVbmtub3duRmllbGQ6IDIwLFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiAxOCxcclxuICB9LFxyXG4gIE5ldHdvcmtVcGRhdGVIUDoge1xyXG4gICAgdHlwZTogJzM5JyxcclxuICAgIG5hbWU6ICdOZXR3b3JrVXBkYXRlSFAnLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdVcGRhdGVIcCcsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBpZDogMixcclxuICAgICAgbmFtZTogMyxcclxuICAgICAgY3VycmVudEhwOiA0LFxyXG4gICAgICBtYXhIcDogNSxcclxuICAgICAgY3VycmVudE1wOiA2LFxyXG4gICAgICBtYXhNcDogNyxcclxuICAgICAgLy8gY3VycmVudFRwOiA4LFxyXG4gICAgICAvLyBtYXhUcDogOSxcclxuICAgICAgeDogMTAsXHJcbiAgICAgIHk6IDExLFxyXG4gICAgICB6OiAxMixcclxuICAgICAgaGVhZGluZzogMTMsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBNYXA6IHtcclxuICAgIHR5cGU6ICc0MCcsXHJcbiAgICBuYW1lOiAnTWFwJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnQ2hhbmdlTWFwJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGlkOiAyLFxyXG4gICAgICByZWdpb25OYW1lOiAzLFxyXG4gICAgICBwbGFjZU5hbWU6IDQsXHJcbiAgICAgIHBsYWNlTmFtZVN1YjogNSxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIFN5c3RlbUxvZ01lc3NhZ2U6IHtcclxuICAgIHR5cGU6ICc0MScsXHJcbiAgICBuYW1lOiAnU3lzdGVtTG9nTWVzc2FnZScsXHJcbiAgICBtZXNzYWdlVHlwZTogJ1N5c3RlbUxvZ01lc3NhZ2UnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgaW5zdGFuY2U6IDIsXHJcbiAgICAgIGlkOiAzLFxyXG4gICAgICBwYXJhbTA6IDQsXHJcbiAgICAgIHBhcmFtMTogNSxcclxuICAgICAgcGFyYW0yOiA2LFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgU3RhdHVzTGlzdDM6IHtcclxuICAgIHR5cGU6ICc0MicsXHJcbiAgICBuYW1lOiAnU3RhdHVzTGlzdDMnLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdTdGF0dXNMaXN0MycsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBpZDogMixcclxuICAgICAgbmFtZTogMyxcclxuICAgICAgLy8gdHJpcGxldHMgb2YgZmllbGRzIGZyb20gaGVyZSAoZWZmZWN0SWQsIGRhdGEsIHBsYXllcklkKT9cclxuICAgIH0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgMjogMyxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IDQsXHJcbiAgICBmaXJzdFVua25vd25GaWVsZDogNCxcclxuICB9LFxyXG4gIFBhcnNlckluZm86IHtcclxuICAgIHR5cGU6ICcyNDknLFxyXG4gICAgbmFtZTogJ1BhcnNlckluZm8nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdTZXR0aW5ncycsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgfSxcclxuICAgIGdsb2JhbEluY2x1ZGU6IHRydWUsXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIFByb2Nlc3NJbmZvOiB7XHJcbiAgICB0eXBlOiAnMjUwJyxcclxuICAgIG5hbWU6ICdQcm9jZXNzSW5mbycsXHJcbiAgICBtZXNzYWdlVHlwZTogJ1Byb2Nlc3MnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgIH0sXHJcbiAgICBnbG9iYWxJbmNsdWRlOiB0cnVlLFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBEZWJ1Zzoge1xyXG4gICAgdHlwZTogJzI1MScsXHJcbiAgICBuYW1lOiAnRGVidWcnLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdEZWJ1ZycsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgfSxcclxuICAgIGdsb2JhbEluY2x1ZGU6IHRydWUsXHJcbiAgICBjYW5Bbm9ueW1pemU6IGZhbHNlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBQYWNrZXREdW1wOiB7XHJcbiAgICB0eXBlOiAnMjUyJyxcclxuICAgIG5hbWU6ICdQYWNrZXREdW1wJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnUGFja2V0RHVtcCcsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogZmFsc2UsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIFZlcnNpb246IHtcclxuICAgIHR5cGU6ICcyNTMnLFxyXG4gICAgbmFtZTogJ1ZlcnNpb24nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdWZXJzaW9uJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICB9LFxyXG4gICAgZ2xvYmFsSW5jbHVkZTogdHJ1ZSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgRXJyb3I6IHtcclxuICAgIHR5cGU6ICcyNTQnLFxyXG4gICAgbmFtZTogJ0Vycm9yJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnRXJyb3InLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IGZhbHNlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBOb25lOiB7XHJcbiAgICB0eXBlOiAnWzAtOV0rJyxcclxuICAgIG5hbWU6ICdOb25lJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnTm9uZScsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgfSxcclxuICAgIGlzVW5rbm93bjogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcblxyXG5leHBvcnQgY29uc3QgbG9nRGVmaW5pdGlvbnNWZXJzaW9ucyA9IHtcclxuICAnbGF0ZXN0JzogbGF0ZXN0TG9nRGVmaW5pdGlvbnMsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBWZXJpZnkgdGhhdCB0aGlzIGhhcyB0aGUgcmlnaHQgdHlwZSwgYnV0IGV4cG9ydCBgYXMgY29uc3RgLlxyXG5jb25zdCBhc3NlcnRMb2dEZWZpbml0aW9uczogTG9nRGVmaW5pdGlvblZlcnNpb25NYXAgPSBsb2dEZWZpbml0aW9uc1ZlcnNpb25zO1xyXG5jb25zb2xlLmFzc2VydChhc3NlcnRMb2dEZWZpbml0aW9ucyk7XHJcblxyXG5leHBvcnQgdHlwZSBMb2dEZWZpbml0aW9ucyA9IHR5cGVvZiBsb2dEZWZpbml0aW9uc1ZlcnNpb25zWydsYXRlc3QnXTtcclxuZXhwb3J0IHR5cGUgTG9nRGVmaW5pdGlvblR5cGVzID0ga2V5b2YgTG9nRGVmaW5pdGlvbnM7XHJcbmV4cG9ydCB0eXBlIExvZ0RlZmluaXRpb25WZXJzaW9ucyA9IGtleW9mIHR5cGVvZiBsb2dEZWZpbml0aW9uc1ZlcnNpb25zO1xyXG5cclxuZXhwb3J0IHR5cGUgUGFyc2VIZWxwZXJGaWVsZDxcclxuICBUeXBlIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzLFxyXG4gIEZpZWxkcyBleHRlbmRzIE5ldEZpZWxkc1JldmVyc2VbVHlwZV0sXHJcbiAgRmllbGQgZXh0ZW5kcyBrZXlvZiBGaWVsZHMsXHJcbj4gPSB7XHJcbiAgZmllbGQ6IEZpZWxkc1tGaWVsZF0gZXh0ZW5kcyBzdHJpbmcgPyBGaWVsZHNbRmllbGRdIDogbmV2ZXI7XHJcbiAgdmFsdWU/OiBzdHJpbmc7XHJcbiAgb3B0aW9uYWw/OiBib29sZWFuO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgUGFyc2VIZWxwZXJGaWVsZHM8VCBleHRlbmRzIExvZ0RlZmluaXRpb25UeXBlcz4gPSB7XHJcbiAgW2ZpZWxkIGluIGtleW9mIE5ldEZpZWxkc1JldmVyc2VbVF1dOiBQYXJzZUhlbHBlckZpZWxkPFQsIE5ldEZpZWxkc1JldmVyc2VbVF0sIGZpZWxkPjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxvZ0RlZmluaXRpb25zVmVyc2lvbnNbJ2xhdGVzdCddO1xyXG4iLCJpbXBvcnQgeyBOZXRGaWVsZHNSZXZlcnNlIH0gZnJvbSAnLi4vdHlwZXMvbmV0X2ZpZWxkcyc7XHJcbmltcG9ydCB7IE5ldFBhcmFtcyB9IGZyb20gJy4uL3R5cGVzL25ldF9wcm9wcyc7XHJcbmltcG9ydCB7IENhY3Rib3RCYXNlUmVnRXhwIH0gZnJvbSAnLi4vdHlwZXMvbmV0X3RyaWdnZXInO1xyXG5cclxuaW1wb3J0IHtcclxuICBsb2dEZWZpbml0aW9uc1ZlcnNpb25zLFxyXG4gIExvZ0RlZmluaXRpb25UeXBlcyxcclxuICBMb2dEZWZpbml0aW9uVmVyc2lvbnMsXHJcbiAgUGFyc2VIZWxwZXJGaWVsZHMsXHJcbn0gZnJvbSAnLi9uZXRsb2dfZGVmcyc7XHJcbmltcG9ydCBSZWdleGVzIGZyb20gJy4vcmVnZXhlcyc7XHJcblxyXG5jb25zdCBzZXBhcmF0b3IgPSAnXFxcXHwnO1xyXG5jb25zdCBtYXRjaERlZmF1bHQgPSAnW158XSonO1xyXG5cclxuLy8gSWYgTmV0UmVnZXhlcy5zZXRGbGFnVHJhbnNsYXRpb25zTmVlZGVkIGlzIHNldCB0byB0cnVlLCB0aGVuIGFueVxyXG4vLyByZWdleCBjcmVhdGVkIHRoYXQgcmVxdWlyZXMgYSB0cmFuc2xhdGlvbiB3aWxsIGJlZ2luIHdpdGggdGhpcyBzdHJpbmdcclxuLy8gYW5kIG1hdGNoIHRoZSBtYWdpY1N0cmluZ1JlZ2V4LiAgVGhpcyBpcyBtYXliZSBhIGJpdCBnb29meSwgYnV0IGlzXHJcbi8vIGEgcHJldHR5IHN0cmFpZ2h0Zm9yd2FyZCB3YXkgdG8gbWFyayByZWdleGVzIGZvciB0cmFuc2xhdGlvbnMuXHJcbi8vIElmIGlzc3VlICMxMzA2IGlzIGV2ZXIgcmVzb2x2ZWQsIHdlIGNhbiByZW1vdmUgdGhpcy5cclxuY29uc3QgbWFnaWNUcmFuc2xhdGlvblN0cmluZyA9IGBeXmA7XHJcbmNvbnN0IG1hZ2ljU3RyaW5nUmVnZXggPSAvXlxcXlxcXi87XHJcbmNvbnN0IGtleXNUaGF0UmVxdWlyZVRyYW5zbGF0aW9uID0gW1xyXG4gICdhYmlsaXR5JyxcclxuICAnbmFtZScsXHJcbiAgJ3NvdXJjZScsXHJcbiAgJ3RhcmdldCcsXHJcbiAgJ2xpbmUnLFxyXG5dO1xyXG5cclxuY29uc3QgZGVmYXVsdFBhcmFtcyA9IDxcclxuICBUIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzLFxyXG4gIFYgZXh0ZW5kcyBMb2dEZWZpbml0aW9uVmVyc2lvbnMsXHJcbj4odHlwZTogVCwgdmVyc2lvbjogViwgaW5jbHVkZT86IHN0cmluZ1tdKTogUGFydGlhbDxQYXJzZUhlbHBlckZpZWxkczxUPj4gPT4ge1xyXG4gIGluY2x1ZGUgPz89IE9iamVjdC5rZXlzKGxvZ0RlZmluaXRpb25zVmVyc2lvbnNbdmVyc2lvbl1bdHlwZV0uZmllbGRzKTtcclxuICBjb25zdCBwYXJhbXM6IHsgW2luZGV4OiBudW1iZXJdOiB7IGZpZWxkOiBzdHJpbmc7IHZhbHVlPzogc3RyaW5nOyBvcHRpb25hbDogYm9vbGVhbiB9IH0gPSB7fTtcclxuICBjb25zdCBmaXJzdE9wdGlvbmFsRmllbGQgPSBsb2dEZWZpbml0aW9uc1ZlcnNpb25zW3ZlcnNpb25dW3R5cGVdLmZpcnN0T3B0aW9uYWxGaWVsZDtcclxuXHJcbiAgZm9yIChjb25zdCBbcHJvcCwgaW5kZXhdIG9mIE9iamVjdC5lbnRyaWVzKGxvZ0RlZmluaXRpb25zVmVyc2lvbnNbdmVyc2lvbl1bdHlwZV0uZmllbGRzKSkge1xyXG4gICAgaWYgKCFpbmNsdWRlLmluY2x1ZGVzKHByb3ApKVxyXG4gICAgICBjb250aW51ZTtcclxuICAgIGNvbnN0IHBhcmFtOiB7IGZpZWxkOiBzdHJpbmc7IHZhbHVlPzogc3RyaW5nOyBvcHRpb25hbDogYm9vbGVhbiB9ID0ge1xyXG4gICAgICBmaWVsZDogcHJvcCxcclxuICAgICAgb3B0aW9uYWw6IGZpcnN0T3B0aW9uYWxGaWVsZCAhPT0gdW5kZWZpbmVkICYmIGluZGV4ID49IGZpcnN0T3B0aW9uYWxGaWVsZCxcclxuICAgIH07XHJcbiAgICBpZiAocHJvcCA9PT0gJ3R5cGUnKVxyXG4gICAgICBwYXJhbS52YWx1ZSA9IGxvZ0RlZmluaXRpb25zVmVyc2lvbnNbdmVyc2lvbl1bdHlwZV0udHlwZTtcclxuXHJcbiAgICBwYXJhbXNbaW5kZXhdID0gcGFyYW07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcGFyYW1zIGFzIHVua25vd24gYXMgUGFydGlhbDxQYXJzZUhlbHBlckZpZWxkczxUPj47XHJcbn07XHJcblxyXG50eXBlIFBhcnNlSGVscGVyVHlwZTxUIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzPiA9XHJcbiAgJiB7XHJcbiAgICBbZmllbGQgaW4gRXh0cmFjdDxrZXlvZiBOZXRGaWVsZHNSZXZlcnNlW1RdLCBzdHJpbmc+XT86IHN0cmluZztcclxuICB9XHJcbiAgJiB7IGNhcHR1cmU/OiBib29sZWFuIH07XHJcblxyXG5jb25zdCBwYXJzZUhlbHBlciA9IDxUIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzPihcclxuICBwYXJhbXM6IFBhcnNlSGVscGVyVHlwZTxUPiB8IHVuZGVmaW5lZCxcclxuICBmdW5jTmFtZTogc3RyaW5nLFxyXG4gIGZpZWxkczogUGFydGlhbDxQYXJzZUhlbHBlckZpZWxkczxUPj4sXHJcbik6IENhY3Rib3RCYXNlUmVnRXhwPFQ+ID0+IHtcclxuICBwYXJhbXMgPSBwYXJhbXMgPz8ge307XHJcbiAgY29uc3QgdmFsaWRGaWVsZHM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gIGZvciAoY29uc3QgaW5kZXggaW4gZmllbGRzKSB7XHJcbiAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tpbmRleF07XHJcbiAgICBpZiAoZmllbGQpXHJcbiAgICAgIHZhbGlkRmllbGRzLnB1c2goZmllbGQuZmllbGQpO1xyXG4gIH1cclxuXHJcbiAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhwYXJhbXMsIGZ1bmNOYW1lLCBbJ2NhcHR1cmUnLCAuLi52YWxpZEZpZWxkc10pO1xyXG5cclxuICAvLyBGaW5kIHRoZSBsYXN0IGtleSB3ZSBjYXJlIGFib3V0LCBzbyB3ZSBjYW4gc2hvcnRlbiB0aGUgcmVnZXggaWYgbmVlZGVkLlxyXG4gIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChwYXJhbXMuY2FwdHVyZSk7XHJcbiAgY29uc3QgZmllbGRLZXlzID0gT2JqZWN0LmtleXMoZmllbGRzKS5zb3J0KChhLCBiKSA9PiBwYXJzZUludChhKSAtIHBhcnNlSW50KGIpKTtcclxuICBsZXQgbWF4S2V5U3RyOiBzdHJpbmc7XHJcbiAgaWYgKGNhcHR1cmUpIHtcclxuICAgIGNvbnN0IGtleXM6IEV4dHJhY3Q8a2V5b2YgTmV0RmllbGRzUmV2ZXJzZVtUXSwgc3RyaW5nPltdID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWVsZHMpXHJcbiAgICAgIGtleXMucHVzaChrZXkpO1xyXG4gICAgbGV0IHRtcEtleSA9IGtleXMucG9wKCk7XHJcbiAgICBpZiAodG1wS2V5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgbWF4S2V5U3RyID0gZmllbGRLZXlzW2ZpZWxkS2V5cy5sZW5ndGggLSAxXSA/PyAnMCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3aGlsZSAoXHJcbiAgICAgICAgZmllbGRzW3RtcEtleV0/Lm9wdGlvbmFsICYmXHJcbiAgICAgICAgISgoZmllbGRzW3RtcEtleV0/LmZpZWxkID8/ICcnKSBpbiBwYXJhbXMpXHJcbiAgICAgIClcclxuICAgICAgICB0bXBLZXkgPSBrZXlzLnBvcCgpO1xyXG4gICAgICBtYXhLZXlTdHIgPSB0bXBLZXkgPz8gJzAnO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBtYXhLZXlTdHIgPSAnMCc7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWVsZHMpIHtcclxuICAgICAgY29uc3QgdmFsdWUgPSBmaWVsZHNba2V5XSA/PyB7fTtcclxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGZpZWxkc1trZXldPy5maWVsZDtcclxuICAgICAgaWYgKGZpZWxkTmFtZSAhPT0gdW5kZWZpbmVkICYmIGZpZWxkTmFtZSBpbiBwYXJhbXMpXHJcbiAgICAgICAgbWF4S2V5U3RyID0ga2V5O1xyXG4gICAgfVxyXG4gIH1cclxuICBjb25zdCBtYXhLZXkgPSBwYXJzZUludChtYXhLZXlTdHIpO1xyXG5cclxuICAvLyBGb3IgdGVzdGluZywgaXQncyB1c2VmdWwgdG8ga25vdyBpZiB0aGlzIGlzIGEgcmVnZXggdGhhdCByZXF1aXJlc1xyXG4gIC8vIHRyYW5zbGF0aW9uLiAgV2UgdGVzdCB0aGlzIGJ5IHNlZWluZyBpZiB0aGVyZSBhcmUgYW55IHNwZWNpZmllZFxyXG4gIC8vIGZpZWxkcywgYW5kIGlmIHNvLCBpbnNlcnRpbmcgYSBtYWdpYyBzdHJpbmcgdGhhdCB3ZSBjYW4gZGV0ZWN0LlxyXG4gIC8vIFRoaXMgbGV0cyB1cyBkaWZmZXJlbnRpYXRlIGJldHdlZW4gXCJyZWdleCB0aGF0IHNob3VsZCBiZSB0cmFuc2xhdGVkXCJcclxuICAvLyBlLmcuIGEgcmVnZXggd2l0aCBgdGFyZ2V0YCBzcGVjaWZpZWQsIGFuZCBcInJlZ2V4IHRoYXQgc2hvdWxkbid0XCJcclxuICAvLyBlLmcuIGEgZ2FpbnMgZWZmZWN0IHdpdGgganVzdCBlZmZlY3RJZCBzcGVjaWZpZWQuXHJcbiAgY29uc3QgdHJhbnNQYXJhbXMgPSBPYmplY3Qua2V5cyhwYXJhbXMpLmZpbHRlcigoaykgPT4ga2V5c1RoYXRSZXF1aXJlVHJhbnNsYXRpb24uaW5jbHVkZXMoaykpO1xyXG4gIGNvbnN0IG5lZWRzVHJhbnNsYXRpb25zID0gTmV0UmVnZXhlcy5mbGFnVHJhbnNsYXRpb25zTmVlZGVkICYmIHRyYW5zUGFyYW1zLmxlbmd0aCA+IDA7XHJcblxyXG4gIC8vIEJ1aWxkIHRoZSByZWdleCBmcm9tIHRoZSBmaWVsZHMuXHJcbiAgbGV0IHN0ciA9IG5lZWRzVHJhbnNsYXRpb25zID8gbWFnaWNUcmFuc2xhdGlvblN0cmluZyA6ICdeJztcclxuICBsZXQgbGFzdEtleSA9IC0xO1xyXG4gIGZvciAoY29uc3Qga2V5U3RyIGluIGZpZWxkcykge1xyXG4gICAgY29uc3Qga2V5ID0gcGFyc2VJbnQoa2V5U3RyKTtcclxuICAgIC8vIEZpbGwgaW4gYmxhbmtzLlxyXG4gICAgY29uc3QgbWlzc2luZ0ZpZWxkcyA9IGtleSAtIGxhc3RLZXkgLSAxO1xyXG4gICAgaWYgKG1pc3NpbmdGaWVsZHMgPT09IDEpXHJcbiAgICAgIHN0ciArPSAnXFxcXHl7TmV0RmllbGR9JztcclxuICAgIGVsc2UgaWYgKG1pc3NpbmdGaWVsZHMgPiAxKVxyXG4gICAgICBzdHIgKz0gYFxcXFx5e05ldEZpZWxkfXske21pc3NpbmdGaWVsZHN9fWA7XHJcbiAgICBsYXN0S2V5ID0ga2V5O1xyXG5cclxuICAgIGNvbnN0IHZhbHVlID0gZmllbGRzW2tleVN0cl07XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JylcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2Z1bmNOYW1lfTogaW52YWxpZCB2YWx1ZTogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XHJcblxyXG4gICAgY29uc3QgZmllbGROYW1lID0gZmllbGRzW2tleVN0cl0/LmZpZWxkO1xyXG4gICAgY29uc3QgZmllbGRWYWx1ZSA9IGZpZWxkc1trZXlTdHJdPy52YWx1ZT8udG9TdHJpbmcoKSA/PyBtYXRjaERlZmF1bHQ7XHJcblxyXG4gICAgaWYgKGZpZWxkTmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHN0ciArPSBSZWdleGVzLm1heWJlQ2FwdHVyZShcclxuICAgICAgICAvLyBtb3JlIGFjY3VyYXRlIHR5cGUgaW5zdGVhZCBvZiBgYXNgIGNhc3RcclxuICAgICAgICAvLyBtYXliZSB0aGlzIGZ1bmN0aW9uIG5lZWRzIGEgcmVmYWN0b3JpbmdcclxuICAgICAgICBjYXB0dXJlLFxyXG4gICAgICAgIGZpZWxkTmFtZSxcclxuICAgICAgICBwYXJhbXNbZmllbGROYW1lXSxcclxuICAgICAgICBmaWVsZFZhbHVlLFxyXG4gICAgICApICtcclxuICAgICAgICBzZXBhcmF0b3I7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdHIgKz0gZmllbGRWYWx1ZSArIHNlcGFyYXRvcjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdG9wIGlmIHdlJ3JlIG5vdCBjYXB0dXJpbmcgYW5kIGRvbid0IGNhcmUgYWJvdXQgZnV0dXJlIGZpZWxkcy5cclxuICAgIGlmIChrZXkgPj0gbWF4S2V5KVxyXG4gICAgICBicmVhaztcclxuICB9XHJcbiAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKSBhcyBDYWN0Ym90QmFzZVJlZ0V4cDxUPjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5ldFJlZ2V4ZXMge1xyXG4gIHN0YXRpYyBsb2dWZXJzaW9uOiBMb2dEZWZpbml0aW9uVmVyc2lvbnMgPSAnbGF0ZXN0JztcclxuXHJcbiAgc3RhdGljIGZsYWdUcmFuc2xhdGlvbnNOZWVkZWQgPSBmYWxzZTtcclxuICBzdGF0aWMgc2V0RmxhZ1RyYW5zbGF0aW9uc05lZWRlZCh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgTmV0UmVnZXhlcy5mbGFnVHJhbnNsYXRpb25zTmVlZGVkID0gdmFsdWU7XHJcbiAgfVxyXG4gIHN0YXRpYyBkb2VzTmV0UmVnZXhOZWVkVHJhbnNsYXRpb24ocmVnZXg6IFJlZ0V4cCB8IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgLy8gTmVlZCB0byBgc2V0RmxhZ1RyYW5zbGF0aW9uc05lZWRlZGAgYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cclxuICAgIGNvbnNvbGUuYXNzZXJ0KE5ldFJlZ2V4ZXMuZmxhZ1RyYW5zbGF0aW9uc05lZWRlZCk7XHJcbiAgICBjb25zdCBzdHIgPSB0eXBlb2YgcmVnZXggPT09ICdzdHJpbmcnID8gcmVnZXggOiByZWdleC5zb3VyY2U7XHJcbiAgICByZXR1cm4gISFtYWdpY1N0cmluZ1JlZ2V4LmV4ZWMoc3RyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTIwLTB4MTQtbmV0d29ya3N0YXJ0c2Nhc3RpbmdcclxuICAgKi9cclxuICBzdGF0aWMgc3RhcnRzVXNpbmcocGFyYW1zPzogTmV0UGFyYW1zWydTdGFydHNVc2luZyddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J1N0YXJ0c1VzaW5nJz4ge1xyXG4gICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ3N0YXJ0c1VzaW5nJywgZGVmYXVsdFBhcmFtcygnU3RhcnRzVXNpbmcnLCBOZXRSZWdleGVzLmxvZ1ZlcnNpb24pKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTIxLTB4MTUtbmV0d29ya2FiaWxpdHlcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yMi0weDE2LW5ldHdvcmthb2VhYmlsaXR5XHJcbiAgICovXHJcbiAgc3RhdGljIGFiaWxpdHkocGFyYW1zPzogTmV0UGFyYW1zWydBYmlsaXR5J10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnQWJpbGl0eSc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdhYmlsaXR5Jywge1xyXG4gICAgICAuLi5kZWZhdWx0UGFyYW1zKCdBYmlsaXR5JywgTmV0UmVnZXhlcy5sb2dWZXJzaW9uKSxcclxuICAgICAgLy8gT3ZlcnJpZGUgdHlwZVxyXG4gICAgICAwOiB7IGZpZWxkOiAndHlwZScsIHZhbHVlOiAnMlsxMl0nLCBvcHRpb25hbDogZmFsc2UgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjEtMHgxNS1uZXR3b3JrYWJpbGl0eVxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTIyLTB4MTYtbmV0d29ya2FvZWFiaWxpdHlcclxuICAgKlxyXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgYWJpbGl0eWAgaW5zdGVhZFxyXG4gICAqL1xyXG4gIHN0YXRpYyBhYmlsaXR5RnVsbChwYXJhbXM/OiBOZXRQYXJhbXNbJ0FiaWxpdHknXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdBYmlsaXR5Jz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYWJpbGl0eShwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjctMHgxYi1uZXR3b3JrdGFyZ2V0aWNvbi1oZWFkLW1hcmtlclxyXG4gICAqL1xyXG4gIHN0YXRpYyBoZWFkTWFya2VyKHBhcmFtcz86IE5ldFBhcmFtc1snSGVhZE1hcmtlciddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0hlYWRNYXJrZXInPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnaGVhZE1hcmtlcicsIGRlZmF1bHRQYXJhbXMoJ0hlYWRNYXJrZXInLCBOZXRSZWdleGVzLmxvZ1ZlcnNpb24pKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTAzLTB4MDMtYWRkY29tYmF0YW50XHJcbiAgICovXHJcbiAgc3RhdGljIGFkZGVkQ29tYmF0YW50KHBhcmFtcz86IE5ldFBhcmFtc1snQWRkZWRDb21iYXRhbnQnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdBZGRlZENvbWJhdGFudCc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICAnYWRkZWRDb21iYXRhbnQnLFxyXG4gICAgICBkZWZhdWx0UGFyYW1zKCdBZGRlZENvbWJhdGFudCcsIE5ldFJlZ2V4ZXMubG9nVmVyc2lvbiwgW1xyXG4gICAgICAgICd0eXBlJyxcclxuICAgICAgICAndGltZXN0YW1wJyxcclxuICAgICAgICAnaWQnLFxyXG4gICAgICAgICduYW1lJyxcclxuICAgICAgXSksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMDMtMHgwMy1hZGRjb21iYXRhbnRcclxuICAgKi9cclxuICBzdGF0aWMgYWRkZWRDb21iYXRhbnRGdWxsKFxyXG4gICAgcGFyYW1zPzogTmV0UGFyYW1zWydBZGRlZENvbWJhdGFudCddLFxyXG4gICk6IENhY3Rib3RCYXNlUmVnRXhwPCdBZGRlZENvbWJhdGFudCc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICAnYWRkZWRDb21iYXRhbnRGdWxsJyxcclxuICAgICAgZGVmYXVsdFBhcmFtcygnQWRkZWRDb21iYXRhbnQnLCBOZXRSZWdleGVzLmxvZ1ZlcnNpb24pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTA0LTB4MDQtcmVtb3ZlY29tYmF0YW50XHJcbiAgICovXHJcbiAgc3RhdGljIHJlbW92aW5nQ29tYmF0YW50KFxyXG4gICAgcGFyYW1zPzogTmV0UGFyYW1zWydSZW1vdmVkQ29tYmF0YW50J10sXHJcbiAgKTogQ2FjdGJvdEJhc2VSZWdFeHA8J1JlbW92ZWRDb21iYXRhbnQnPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIoXHJcbiAgICAgIHBhcmFtcyxcclxuICAgICAgJ3JlbW92aW5nQ29tYmF0YW50JyxcclxuICAgICAgZGVmYXVsdFBhcmFtcygnUmVtb3ZlZENvbWJhdGFudCcsIE5ldFJlZ2V4ZXMubG9nVmVyc2lvbiksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjYtMHgxYS1uZXR3b3JrYnVmZlxyXG4gICAqL1xyXG4gIHN0YXRpYyBnYWluc0VmZmVjdChwYXJhbXM/OiBOZXRQYXJhbXNbJ0dhaW5zRWZmZWN0J10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnR2FpbnNFZmZlY3QnPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnZ2FpbnNFZmZlY3QnLCBkZWZhdWx0UGFyYW1zKCdHYWluc0VmZmVjdCcsIE5ldFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJlZmVyIGdhaW5zRWZmZWN0IG92ZXIgdGhpcyBmdW5jdGlvbiB1bmxlc3MgeW91IHJlYWxseSBuZWVkIGV4dHJhIGRhdGEuXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMzgtMHgyNi1uZXR3b3Jrc3RhdHVzZWZmZWN0c1xyXG4gICAqL1xyXG4gIHN0YXRpYyBzdGF0dXNFZmZlY3RFeHBsaWNpdChcclxuICAgIHBhcmFtcz86IE5ldFBhcmFtc1snU3RhdHVzRWZmZWN0J10sXHJcbiAgKTogQ2FjdGJvdEJhc2VSZWdFeHA8J1N0YXR1c0VmZmVjdCc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICAnc3RhdHVzRWZmZWN0RXhwbGljaXQnLFxyXG4gICAgICBkZWZhdWx0UGFyYW1zKCdTdGF0dXNFZmZlY3QnLCBOZXRSZWdleGVzLmxvZ1ZlcnNpb24pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTMwLTB4MWUtbmV0d29ya2J1ZmZyZW1vdmVcclxuICAgKi9cclxuICBzdGF0aWMgbG9zZXNFZmZlY3QocGFyYW1zPzogTmV0UGFyYW1zWydMb3Nlc0VmZmVjdCddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0xvc2VzRWZmZWN0Jz4ge1xyXG4gICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ2xvc2VzRWZmZWN0JywgZGVmYXVsdFBhcmFtcygnTG9zZXNFZmZlY3QnLCBOZXRSZWdleGVzLmxvZ1ZlcnNpb24pKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTM1LTB4MjMtbmV0d29ya3RldGhlclxyXG4gICAqL1xyXG4gIHN0YXRpYyB0ZXRoZXIocGFyYW1zPzogTmV0UGFyYW1zWydUZXRoZXInXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdUZXRoZXInPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAndGV0aGVyJywgZGVmYXVsdFBhcmFtcygnVGV0aGVyJywgTmV0UmVnZXhlcy5sb2dWZXJzaW9uKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiAndGFyZ2V0JyB3YXMgZGVmZWF0ZWQgYnkgJ3NvdXJjZSdcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yNS0weDE5LW5ldHdvcmtkZWF0aFxyXG4gICAqL1xyXG4gIHN0YXRpYyB3YXNEZWZlYXRlZChwYXJhbXM/OiBOZXRQYXJhbXNbJ1dhc0RlZmVhdGVkJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnV2FzRGVmZWF0ZWQnPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnd2FzRGVmZWF0ZWQnLCBkZWZhdWx0UGFyYW1zKCdXYXNEZWZlYXRlZCcsIE5ldFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMDAtMHgwMC1sb2dsaW5lXHJcbiAgICovXHJcbiAgc3RhdGljIGVjaG8ocGFyYW1zPzogTmV0UGFyYW1zWydHYW1lTG9nJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnR2FtZUxvZyc+IHtcclxuICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAndW5kZWZpbmVkJylcclxuICAgICAgcGFyYW1zID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKFxyXG4gICAgICBwYXJhbXMsXHJcbiAgICAgICdlY2hvJyxcclxuICAgICAgWyd0eXBlJywgJ3RpbWVzdGFtcCcsICdjb2RlJywgJ25hbWUnLCAnbGluZScsICdjYXB0dXJlJ10sXHJcbiAgICApO1xyXG4gICAgcGFyYW1zLmNvZGUgPSAnMDAzOCc7XHJcbiAgICByZXR1cm4gTmV0UmVnZXhlcy5nYW1lTG9nKHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0wMC0weDAwLWxvZ2xpbmVcclxuICAgKi9cclxuICBzdGF0aWMgZGlhbG9nKHBhcmFtcz86IE5ldFBhcmFtc1snR2FtZUxvZyddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0dhbWVMb2cnPiB7XHJcbiAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgIHBhcmFtcyA9IHt9O1xyXG4gICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICAnZGlhbG9nJyxcclxuICAgICAgWyd0eXBlJywgJ3RpbWVzdGFtcCcsICdjb2RlJywgJ25hbWUnLCAnbGluZScsICdjYXB0dXJlJ10sXHJcbiAgICApO1xyXG4gICAgcGFyYW1zLmNvZGUgPSAnMDA0NCc7XHJcbiAgICByZXR1cm4gTmV0UmVnZXhlcy5nYW1lTG9nKHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0wMC0weDAwLWxvZ2xpbmVcclxuICAgKi9cclxuICBzdGF0aWMgbWVzc2FnZShwYXJhbXM/OiBOZXRQYXJhbXNbJ0dhbWVMb2cnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdHYW1lTG9nJz4ge1xyXG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBwYXJhbXMgPSB7fTtcclxuICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoXHJcbiAgICAgIHBhcmFtcyxcclxuICAgICAgJ21lc3NhZ2UnLFxyXG4gICAgICBbJ3R5cGUnLCAndGltZXN0YW1wJywgJ2NvZGUnLCAnbmFtZScsICdsaW5lJywgJ2NhcHR1cmUnXSxcclxuICAgICk7XHJcbiAgICBwYXJhbXMuY29kZSA9ICcwODM5JztcclxuICAgIHJldHVybiBOZXRSZWdleGVzLmdhbWVMb2cocGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZpZWxkczogY29kZSwgbmFtZSwgbGluZSwgY2FwdHVyZVxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTAwLTB4MDAtbG9nbGluZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBnYW1lTG9nKHBhcmFtcz86IE5ldFBhcmFtc1snR2FtZUxvZyddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0dhbWVMb2cnPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnZ2FtZUxvZycsIGRlZmF1bHRQYXJhbXMoJ0dhbWVMb2cnLCBOZXRSZWdleGVzLmxvZ1ZlcnNpb24pKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTAwLTB4MDAtbG9nbGluZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBnYW1lTmFtZUxvZyhwYXJhbXM/OiBOZXRQYXJhbXNbJ0dhbWVMb2cnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdHYW1lTG9nJz4ge1xyXG4gICAgLy8gQmFja3dhcmRzIGNvbXBhdGFiaWxpdHkuXHJcbiAgICByZXR1cm4gTmV0UmVnZXhlcy5nYW1lTG9nKHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0xMi0weDBjLXBsYXllcnN0YXRzXHJcbiAgICovXHJcbiAgc3RhdGljIHN0YXRDaGFuZ2UocGFyYW1zPzogTmV0UGFyYW1zWydQbGF5ZXJTdGF0cyddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J1BsYXllclN0YXRzJz4ge1xyXG4gICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ3N0YXRDaGFuZ2UnLCBkZWZhdWx0UGFyYW1zKCdQbGF5ZXJTdGF0cycsIE5ldFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMDEtMHgwMS1jaGFuZ2V6b25lXHJcbiAgICovXHJcbiAgc3RhdGljIGNoYW5nZVpvbmUocGFyYW1zPzogTmV0UGFyYW1zWydDaGFuZ2Vab25lJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnQ2hhbmdlWm9uZSc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdjaGFuZ2Vab25lJywgZGVmYXVsdFBhcmFtcygnQ2hhbmdlWm9uZScsIE5ldFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMzMtMHgyMS1uZXR3b3JrNmQtYWN0b3ItY29udHJvbFxyXG4gICAqL1xyXG4gIHN0YXRpYyBuZXR3b3JrNmQocGFyYW1zPzogTmV0UGFyYW1zWydBY3RvckNvbnRyb2wnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdBY3RvckNvbnRyb2wnPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnbmV0d29yazZkJywgZGVmYXVsdFBhcmFtcygnQWN0b3JDb250cm9sJywgTmV0UmVnZXhlcy5sb2dWZXJzaW9uKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0zNC0weDIyLW5ldHdvcmtuYW1ldG9nZ2xlXHJcbiAgICovXHJcbiAgc3RhdGljIG5hbWVUb2dnbGUocGFyYW1zPzogTmV0UGFyYW1zWydOYW1lVG9nZ2xlJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnTmFtZVRvZ2dsZSc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICduYW1lVG9nZ2xlJywgZGVmYXVsdFBhcmFtcygnTmFtZVRvZ2dsZScsIE5ldFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtNDAtMHgyOC1tYXBcclxuICAgKi9cclxuICBzdGF0aWMgbWFwKHBhcmFtcz86IE5ldFBhcmFtc1snTWFwJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnTWFwJz4ge1xyXG4gICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ21hcCcsIGRlZmF1bHRQYXJhbXMoJ01hcCcsIE5ldFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtNDEtMHgyOS1zeXN0ZW1sb2dtZXNzYWdlXHJcbiAgICovXHJcbiAgc3RhdGljIHN5c3RlbUxvZ01lc3NhZ2UoXHJcbiAgICBwYXJhbXM/OiBOZXRQYXJhbXNbJ1N5c3RlbUxvZ01lc3NhZ2UnXSxcclxuICApOiBDYWN0Ym90QmFzZVJlZ0V4cDwnU3lzdGVtTG9nTWVzc2FnZSc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICAnc3lzdGVtTG9nTWVzc2FnZScsXHJcbiAgICAgIGRlZmF1bHRQYXJhbXMoJ1N5c3RlbUxvZ01lc3NhZ2UnLCBOZXRSZWdleGVzLmxvZ1ZlcnNpb24pLFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIiwiLy8gSGVscGVyIEVycm9yIGZvciBUeXBlU2NyaXB0IHNpdHVhdGlvbnMgd2hlcmUgdGhlIHByb2dyYW1tZXIgdGhpbmtzIHRoZXlcclxuLy8ga25vdyBiZXR0ZXIgdGhhbiBUeXBlU2NyaXB0IHRoYXQgc29tZSBzaXR1YXRpb24gd2lsbCBuZXZlciBvY2N1ci5cclxuXHJcbi8vIFRoZSBpbnRlbnRpb24gaGVyZSBpcyB0aGF0IHRoZSBwcm9ncmFtbWVyIGRvZXMgbm90IGV4cGVjdCBhIHBhcnRpY3VsYXJcclxuLy8gYml0IG9mIGNvZGUgdG8gaGFwcGVuLCBhbmQgc28gaGFzIG5vdCB3cml0dGVuIGNhcmVmdWwgZXJyb3IgaGFuZGxpbmcuXHJcbi8vIElmIGl0IGRvZXMgb2NjdXIsIGF0IGxlYXN0IHRoZXJlIHdpbGwgYmUgYW4gZXJyb3IgYW5kIHdlIGNhbiBmaWd1cmUgb3V0IHdoeS5cclxuLy8gVGhpcyBpcyBwcmVmZXJhYmxlIHRvIGNhc3Rpbmcgb3IgZGlzYWJsaW5nIFR5cGVTY3JpcHQgYWx0b2dldGhlciBpbiBvcmRlciB0b1xyXG4vLyBhdm9pZCBzeW50YXggZXJyb3JzLlxyXG5cclxuLy8gT25lIGNvbW1vbiBleGFtcGxlIGlzIGEgcmVnZXgsIHdoZXJlIGlmIHRoZSByZWdleCBtYXRjaGVzIHRoZW4gYWxsIG9mIHRoZVxyXG4vLyAobm9uLW9wdGlvbmFsKSByZWdleCBncm91cHMgd2lsbCBhbHNvIGJlIHZhbGlkLCBidXQgVHlwZVNjcmlwdCBkb2Vzbid0IGtub3cuXHJcbmV4cG9ydCBjbGFzcyBVbnJlYWNoYWJsZUNvZGUgZXh0ZW5kcyBFcnJvciB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcignVGhpcyBjb2RlIHNob3VsZG5cXCd0IGJlIHJlYWNoZWQnKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRnVsbExvY2FsZVRleHQgfSBmcm9tICcuLi90eXBlcy90cmlnZ2VyJztcclxuXHJcbi8vIE91dHB1dCBzdHJpbmdzIGZvciBub3cgcmVxdWlyZSBhIGZpZWxkIGZvciBldmVyeSBsYW5ndWFnZSwgc28gdGhpcyBpcyBhXHJcbi8vIGhlbHBlciBmdW5jdGlvbiB0byBnZW5lcmF0ZSBvbmUgZm9yIGxpdGVyYWwgbnVtYmVycy5cclxuY29uc3QgbnVtYmVyVG9PdXRwdXRTdHJpbmcgPSBmdW5jdGlvbihuOiBudW1iZXIpOiBGdWxsTG9jYWxlVGV4dCB7XHJcbiAgY29uc3Qgc3RyID0gbi50b1N0cmluZygpO1xyXG4gIHJldHVybiB7XHJcbiAgICBlbjogc3RyLFxyXG4gICAgZGU6IHN0cixcclxuICAgIGZyOiBzdHIsXHJcbiAgICBqYTogc3RyLFxyXG4gICAgY246IHN0cixcclxuICAgIGtvOiBzdHIsXHJcbiAgfTtcclxufTtcclxuXHJcbi8vIEdlbmVyYWwgZ3VpZGVsaW5lczpcclxuLy8gKiBwcm9wZXJ0eSBuYW1lcyBzaG91bGQgY2xvc2VseSBtYXRjaCBFbmdsaXNoIHRleHRcclxuLy8gKiB1c2UgT25QbGF5ZXIgc3VmZml4IGZvciB0aGluZ3Mgd2l0aCBgJHtwbGF5ZXJ9YFxyXG4vLyAqIHVzZSBPblRhcmdldCBzdWZmaXggZm9yIHRoaW5ncyB3aXRoIGAke25hbWV9YFxyXG4vLyAqIGFueSBvdGhlciBwYXJhbWV0ZXJzIChvZiB3aGljaCB0aGVyZSBhcmUgbm9uZSwgY3VycmVudGx5KSBzaG91bGQgdXNlIGNvbnNpc3RlbnQgc3VmZml4ZXMuXHJcbi8vICogdGhlIHZhbHVlIG9mIGVhY2ggcHJvcGVydHkgc2hvdWxkIGJlIGEgc2luZ2xlIG9iamVjdCB3aXRoIGxvY2FsaXplZCBrZXlzXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBhb2U6IHtcclxuICAgIGVuOiAnYW9lJyxcclxuICAgIGRlOiAnQW9FJyxcclxuICAgIGZyOiAnQW9FJyxcclxuICAgIGphOiAnQW9FJyxcclxuICAgIGNuOiAnQW9FJyxcclxuICAgIGtvOiAn7KCE7LK0IOqzteqyqScsXHJcbiAgfSxcclxuICBiaWdBb2U6IHtcclxuICAgIGVuOiAnYmlnIGFvZSEnLFxyXG4gICAgZGU6ICdHcm/Dn2UgQW9FIScsXHJcbiAgICBmcjogJ0dyb3NzZSBBb0UgIScsXHJcbiAgICBqYTogJ+Wkp+ODgOODoeODvOOCuEFvRScsXHJcbiAgICBjbjogJ+Wkp0FvReS8pOWus++8gScsXHJcbiAgICBrbzogJ+qwle2VnCDsoITssrQg6rO16rKpIScsXHJcbiAgfSxcclxuICB0YW5rQnVzdGVyOiB7XHJcbiAgICBlbjogJ1RhbmsgQnVzdGVyJyxcclxuICAgIGRlOiAnVGFuayBidXN0ZXInLFxyXG4gICAgZnI6ICdUYW5rIGJ1c3RlcicsXHJcbiAgICBqYTogJ+OCv+ODs+OCr+ODkOOCueOCv+ODvCcsXHJcbiAgICBjbjogJ+WdpuWFi+atu+WIkScsXHJcbiAgICBrbzogJ+2DseuyhCcsXHJcbiAgfSxcclxuICBtaW5pQnVzdGVyOiB7XHJcbiAgICBlbjogJ01pbmkgQnVzdGVyJyxcclxuICAgIGRlOiAnS2xlaW5lciBUYW5rYnVzdGVyJyxcclxuICAgIGZyOiAnTWluaSBCdXN0ZXInLFxyXG4gICAgamE6ICfjg5/jg4vjg5Djgrnjgr/jg7wnLFxyXG4gICAgY246ICflsI/mrbvliJEnLFxyXG4gICAga286ICfslb3tlZwg7YOx67KEJyxcclxuICB9LFxyXG4gIHRhbmtCdXN0ZXJPblBsYXllcjoge1xyXG4gICAgZW46ICdUYW5rIEJ1c3RlciBvbiAke3BsYXllcn0nLFxyXG4gICAgZGU6ICdUYW5rIGJ1c3RlciBhdWYgJHtwbGF5ZXJ9JyxcclxuICAgIGZyOiAnVGFuayBidXN0ZXIgc3VyICR7cGxheWVyfScsXHJcbiAgICBqYTogJyR7cGxheWVyfeOBq+OCv+ODs+OCr+ODkOOCueOCv+ODvCcsXHJcbiAgICBjbjogJ+atu+WIkSDngrkgJHtwbGF5ZXJ9JyxcclxuICAgIGtvOiAnXCIke3BsYXllcn1cIiDtg7HrsoQnLFxyXG4gIH0sXHJcbiAgdGFua0J1c3Rlck9uWW91OiB7XHJcbiAgICBlbjogJ1RhbmsgQnVzdGVyIG9uIFlPVScsXHJcbiAgICBkZTogJ1RhbmsgYnVzdGVyIGF1ZiBESVInLFxyXG4gICAgZnI6ICdUYW5rIGJ1c3RlciBzdXIgVk9VUycsXHJcbiAgICBqYTogJ+iHquWIhuOBq+OCv+ODs+OCr+ODkOOCueOCv+ODvCcsXHJcbiAgICBjbjogJ+atu+WIkeeCueWQjScsXHJcbiAgICBrbzogJ+2DseuyhCDrjIDsg4HsnpAnLFxyXG4gIH0sXHJcbiAgLy8gd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgdGFua2J1c3RlcnMgZ29pbmcgb3V0XHJcbiAgdGFua0J1c3RlcnM6IHtcclxuICAgIGVuOiAnVGFuayBCdXN0ZXJzJyxcclxuICAgIGRlOiAnVGFuayBidXN0ZXInLFxyXG4gICAgZnI6ICdUYW5rIGJ1c3RlcnMnLFxyXG4gICAgamE6ICfjgr/jg7Pjgq/jg5Djgrnjgr/jg7wnLFxyXG4gICAgY246ICflnablhYvmrbvliJEnLFxyXG4gICAga286ICftg7HrsoQnLFxyXG4gIH0sXHJcbiAgdGFua0NsZWF2ZToge1xyXG4gICAgZW46ICdUYW5rIGNsZWF2ZScsXHJcbiAgICBkZTogJ1RhbmsgQ2xlYXZlJyxcclxuICAgIGZyOiAnVGFuayBjbGVhdmUnLFxyXG4gICAgamE6ICfliY3mlrnnr4Tlm7LmlLvmkoMnLFxyXG4gICAgY246ICfpobrliognLFxyXG4gICAga286ICfqtJHsl60g7YOx67KEJyxcclxuICB9LFxyXG4gIGF2b2lkVGFua0NsZWF2ZToge1xyXG4gICAgZW46ICdBdm9pZCB0YW5rIGNsZWF2ZScsXHJcbiAgICBkZTogJ1RhbmsgQ2xlYXZlIGF1c3dlaWNoZW4nLFxyXG4gICAgZnI6ICfDiXZpdGV6IGxlIHRhbmsgY2xlYXZlJyxcclxuICAgIGphOiAn5YmN5pa556+E5Zuy5pS75pKD44KS6YG/44GR44KLJyxcclxuICAgIGNuOiAn6L+c56a76aG65YqIJyxcclxuICAgIGtvOiAn6rSR7JetIO2DseuyhCDtlLztlZjquLAnLFxyXG4gIH0sXHJcbiAgdGFua0NsZWF2ZU9uWW91OiB7XHJcbiAgICBlbjogJ1RhbmsgY2xlYXZlIG9uIFlPVScsXHJcbiAgICBkZTogJ1RhbmsgQ2xlYXZlIGF1ZCBESVInLFxyXG4gICAgZnI6ICdUYW5rIGNsZWF2ZSBzdXIgVk9VUycsXHJcbiAgICBqYTogJ+iHquWIhuOBq+WJjeaWueevhOWbsuaUu+aSgycsXHJcbiAgICBjbjogJ+mhuuWKiOeCueWQjScsXHJcbiAgICBrbzogJ+uCmOyXkOqyjCDqtJHsl60g7YOx67KEJyxcclxuICB9LFxyXG4gIHNoYXJlZFRhbmtidXN0ZXI6IHtcclxuICAgIGVuOiAnU2hhcmVkIFRhbmsgQnVzdGVyJyxcclxuICAgIGZyOiAnUGFydGFnZXogbGUgVGFuayBidXN0ZXInLFxyXG4gICAgY246ICfliIbmkYrmrbvliJEnLFxyXG4gICAga286ICfsiZDslrQg7YOx67KEJyxcclxuICB9LFxyXG4gIHNoYXJlZFRhbmtidXN0ZXJPbllvdToge1xyXG4gICAgZW46ICdTaGFyZWQgVGFuayBCdXN0ZXIgb24gWU9VJyxcclxuICAgIGRlOiAnZ2V0ZWlsdGVyIFRhbmtidXN0ZXIgYXVmIERJUicsXHJcbiAgICBmcjogJ1RhbmsgYnVzdGVyIMOgIHBhcnRhZ2VyIHN1ciBWT1VTJyxcclxuICAgIGphOiAn6Ieq5YiG44Gr44K/44Oz44Kv44K344Kn44KiJyxcclxuICAgIGNuOiAn5YiG5pGK5q275YiR54K55ZCNJyxcclxuICAgIGtvOiAn7ImQ7Ja0IO2DseuyhCDrjIDsg4HsnpAnLFxyXG4gIH0sXHJcbiAgc2hhcmVkVGFua2J1c3Rlck9uUGxheWVyOiB7XHJcbiAgICBlbjogJ1NoYXJlZCBUYW5rIEJ1c3RlciBvbiAke3BsYXllcn0nLFxyXG4gICAgZGU6ICdnZXRlaWx0ZXIgVGFua2J1c3RlciBvbiAke3BsYXllcn0nLFxyXG4gICAgZnI6ICdUYW5rIGJ1c3RlciDDoCBwYXJ0YWdlciBzdXIgJHtwbGF5ZXJ9JyxcclxuICAgIGphOiAnJHtwbGF5ZXJ9IOOBq+OCv+ODs+OCr+OCt+OCp+OCoicsXHJcbiAgICBjbjogJ+WIhuaRiuatu+WIkeeCuSAke3BsYXllcn0nLFxyXG4gICAga286ICdcIiR7cGxheWVyfVwiIOyJkOyWtCDtg7HrsoQnLFxyXG4gIH0sXHJcbiAgdGFua1N3YXA6IHtcclxuICAgIGVuOiAnVGFuayBTd2FwIScsXHJcbiAgICBkZTogJ1Rhbmt3ZWNoc2VsIScsXHJcbiAgICBmcjogJ1Rhbmsgc3dhcCAhJyxcclxuICAgIGphOiAn44K/44Oz44Kv44K544Kk44OD44OBIScsXHJcbiAgICBjbjogJ+aNolTvvIEnLFxyXG4gICAga286ICftg7Eg6rWQ64yAJyxcclxuICB9LFxyXG4gIHNwcmVhZDoge1xyXG4gICAgZW46ICdTcHJlYWQnLFxyXG4gICAgZGU6ICdWZXJ0ZWlsZW4nLFxyXG4gICAgZnI6ICdEaXNwZXJzZXotdm91cycsXHJcbiAgICBqYTogJ+aVo+mWiycsXHJcbiAgICBjbjogJ+WIhuaVoycsXHJcbiAgICBrbzogJ+yCsOqwnCcsXHJcbiAgfSxcclxuICBzdGFja01hcmtlcjoge1xyXG4gICAgLy8gZm9yIHN0YWNrIG1hcmtlciBzaXR1YXRpb25zXHJcbiAgICBlbjogJ1N0YWNrJyxcclxuICAgIGRlOiAnU2FtbWVsbicsXHJcbiAgICBmcjogJ1BhY2tlei12b3VzJyxcclxuICAgIGphOiAn6aCt5Ymy44KKJyxcclxuICAgIGNuOiAn5YiG5pGKJyxcclxuICAgIGtvOiAn7ImQ7Ja0646AJyxcclxuICB9LFxyXG4gIGdldFRvZ2V0aGVyOiB7XHJcbiAgICAvLyBmb3IgZ2V0dGluZyB0b2dldGhlciB3aXRob3V0IHN0YWNrIG1hcmtlclxyXG4gICAgZW46ICdTdGFjaycsXHJcbiAgICBkZTogJ1NhbW1lbG4nLFxyXG4gICAgZnI6ICdQYWNrZXotdm91cycsXHJcbiAgICBqYTogJ+mbhuWQiCcsXHJcbiAgICBjbjogJ+mbhuWQiCcsXHJcbiAgICBrbzogJ+uqqOydtOq4sCcsXHJcbiAgfSxcclxuICBzdGFja09uWW91OiB7XHJcbiAgICBlbjogJ1N0YWNrIG9uIFlPVScsXHJcbiAgICBkZTogJ0F1ZiBESVIgc2FtbWVsbicsXHJcbiAgICBmcjogJ1BhY2thZ2Ugc3VyIFZPVVMnLFxyXG4gICAgamE6ICfoh6rliIbjgavpm4blkIgnLFxyXG4gICAgY246ICfpm4blkIjngrnlkI0nLFxyXG4gICAga286ICfsiZDslrTsp5Ug64yA7IOB7J6QJyxcclxuICB9LFxyXG4gIHN0YWNrT25QbGF5ZXI6IHtcclxuICAgIGVuOiAnU3RhY2sgb24gJHtwbGF5ZXJ9JyxcclxuICAgIGRlOiAnQXVmICR7cGxheWVyfSBzYW1tZWxuJyxcclxuICAgIGZyOiAnUGFja2V6LXZvdXMgc3VyICR7cGxheWVyfScsXHJcbiAgICBqYTogJyR7cGxheWVyfeOBq+mbhuWQiCcsXHJcbiAgICBjbjogJ+mdoOi/kSAke3BsYXllcn3pm4blkIgnLFxyXG4gICAga286ICdcIiR7cGxheWVyfVwiIOyJkOyWtOynlScsXHJcbiAgfSxcclxuICBzdGFja01pZGRsZToge1xyXG4gICAgZW46ICdTdGFjayBpbiBtaWRkbGUnLFxyXG4gICAgZGU6ICdJbiBkZXIgTWl0dGUgc2FtbWVsbicsXHJcbiAgICBmcjogJ1BhY2tlei12b3VzIGF1IG1pbGlldScsXHJcbiAgICBqYTogJ+S4reWkruOBp+mbhuWQiCcsXHJcbiAgICBjbjogJ+S4remXtOmbhuWQiCcsXHJcbiAgICBrbzogJ+ykkeyVmeyXkOyEnCDrqqjsnbTquLAnLFxyXG4gIH0sXHJcbiAgZG9yaXRvU3RhY2s6IHtcclxuICAgIGVuOiAnRG9yaXRvIFN0YWNrJyxcclxuICAgIGRlOiAnTWl0IE1hcmtlciBzYW1tZWxuJyxcclxuICAgIGZyOiAnUGFja2V6IGxlcyBtYXJxdWFnZXMnLFxyXG4gICAgamE6ICfjg57jg7zjgqvjg7zku5jjgZHjgZ/kurrjgajpm4blkIgnLFxyXG4gICAgY246ICfngrnlkI3pm4blkIgnLFxyXG4gICAga286ICfsp5Xrgbzrpqwg66qo7J206riwJyxcclxuICB9LFxyXG4gIHNwcmVhZFRoZW5TdGFjazoge1xyXG4gICAgZW46ICdTcHJlYWQgPT4gU3RhY2snLFxyXG4gICAgZGU6ICdWZXJ0ZWlsZW4gPT4gU2FtbWVsbicsXHJcbiAgICBmcjogJ0Rpc3BlcnNpb24gPT4gUGFja2FnZScsXHJcbiAgICBqYTogJ+aVo+mWiyA9PiDpm4blkIgnLFxyXG4gICAgY246ICfliIbmlaMgPT4g6ZuG5ZCIJyxcclxuICAgIGtvOiAn7IKw6rCcID0+IOynke2VqScsXHJcbiAgfSxcclxuICBzdGFja1RoZW5TcHJlYWQ6IHtcclxuICAgIGVuOiAnU3RhY2sgPT4gU3ByZWFkJyxcclxuICAgIGRlOiAnU2FtbWVsbiA9PiBWZXJ0ZWlsZW4nLFxyXG4gICAgZnI6ICdQYWNrYWdlID0+IERpc3BlcnNpb24nLFxyXG4gICAgamE6ICfjgrnjgr/jg4Pjgq8gPT4g5pWj6ZaLJyxcclxuICAgIGNuOiAn6ZuG5ZCIID0+IOWIhuaVoycsXHJcbiAgICBrbzogJ+ynke2VqSA9PiDsgrDqsJwnLFxyXG4gIH0sXHJcbiAgZHJhd0luOiB7XHJcbiAgICAvLyBPcHBvc2l0ZSBvZiBhIGtub2NrYmFjay5cclxuICAgIGVuOiAnRHJhdyBJbicsXHJcbiAgICBkZTogJ0Vpbnp1ZycsXHJcbiAgICBmcjogJ0F0dHJhY3Rpb24nLFxyXG4gICAgamE6ICflkLjovrzjgb8nLFxyXG4gICAgY246ICflkLjlvJUnLFxyXG4gICAga286ICfrgYzslrTri7nquYAnLFxyXG4gIH0sXHJcbiAga25vY2tiYWNrOiB7XHJcbiAgICBlbjogJ0tub2NrYmFjaycsXHJcbiAgICBkZTogJ1LDvGNrc3Rvw58nLFxyXG4gICAgZnI6ICdQb3Vzc8OpZScsXHJcbiAgICBqYTogJ+ODjuODg+OCr+ODkOODg+OCrycsXHJcbiAgICBjbjogJ+WHu+mAgCcsXHJcbiAgICBrbzogJ+uEieuwsScsXHJcbiAgfSxcclxuICBrbm9ja2JhY2tPbllvdToge1xyXG4gICAgZW46ICdLbm9ja2JhY2sgb24gWU9VJyxcclxuICAgIGRlOiAnUsO8Y2tzdG/DnyBhdWYgRElSJyxcclxuICAgIGZyOiAnUG91c3PDqWUgc3VyIFZPVVMnLFxyXG4gICAgamE6ICfoh6rliIbjgavjg47jg4Pjgq/jg5Djg4Pjgq8nLFxyXG4gICAgY246ICflh7vpgIDngrnlkI0nLFxyXG4gICAga286ICfrhInrsLHsp5Ug64yA7IOB7J6QJyxcclxuICB9LFxyXG4gIGtub2NrYmFja09uUGxheWVyOiB7XHJcbiAgICBlbjogJ0tub2NrYmFjayBvbiAke3BsYXllcn0nLFxyXG4gICAgZGU6ICdSw7xja3N0b8OfIGF1ZiAke3BsYXllcn0nLFxyXG4gICAgZnI6ICdQb3Vzc8OpZSBzdXIgJHtwbGF5ZXJ9JyxcclxuICAgIGphOiAnJHtwbGF5ZXJ944Gr44OO44OD44Kv44OQ44OD44KvJyxcclxuICAgIGNuOiAn5Ye76YCA54K55ZCNJHtwbGF5ZXJ9JyxcclxuICAgIGtvOiAnXCIke3BsYXllcn1cIiDrhInrsLHsp5UnLFxyXG4gIH0sXHJcbiAgbG9va1Rvd2FyZHNCb3NzOiB7XHJcbiAgICBlbjogJ0xvb2sgVG93YXJkcyBCb3NzJyxcclxuICAgIGRlOiAnQW5zY2hhdWVuIEJvc3MnLFxyXG4gICAgZnI6ICdSZWdhcmRleiBsZSBib3NzJyxcclxuICAgIGphOiAn44Oc44K544KS6KaL44KLJyxcclxuICAgIGNuOiAn6Z2i5ZCRQm9zcycsXHJcbiAgICBrbzogJ+yzkOuLpOuztOq4sCcsXHJcbiAgfSxcclxuICBsb29rQXdheToge1xyXG4gICAgZW46ICdMb29rIEF3YXknLFxyXG4gICAgZGU6ICdXZWdzY2hhdWVuJyxcclxuICAgIGZyOiAnUmVnYXJkZXogYWlsbGV1cnMnLFxyXG4gICAgamE6ICfjg5zjgrnjgpLopovjgarjgYQnLFxyXG4gICAgY246ICfog4zlr7lCb3NzJyxcclxuICAgIGtvOiAn65Kk64+M6riwJyxcclxuICB9LFxyXG4gIGxvb2tBd2F5RnJvbVBsYXllcjoge1xyXG4gICAgZW46ICdMb29rIEF3YXkgZnJvbSAke3BsYXllcn0nLFxyXG4gICAgZGU6ICdTY2hhdSB3ZWcgdm9uICR7cGxheWVyfScsXHJcbiAgICBmcjogJ05lIHJlZ2FyZGV6IHBhcyAke3BsYXllcn0nLFxyXG4gICAgamE6ICcke3BsYXllcn3jgpLopovjgarjgYQnLFxyXG4gICAgY246ICfog4zlr7kke3BsYXllcn0nLFxyXG4gICAga286ICcke3BsYXllcn3sl5DqsozshJwg65Kk64+M6riwJyxcclxuICB9LFxyXG4gIGxvb2tBd2F5RnJvbVRhcmdldDoge1xyXG4gICAgZW46ICdMb29rIEF3YXkgZnJvbSAke25hbWV9JyxcclxuICAgIGRlOiAnU2NoYXUgd2VnIHZvbiAke25hbWV9JyxcclxuICAgIGZyOiAnTmUgcmVnYXJkZXogcGFzICR7bmFtZX0nLFxyXG4gICAgamE6ICcke25hbWV944KS6KaL44Gq44GEJyxcclxuICAgIGNuOiAn6IOM5a+5JHtuYW1lfScsXHJcbiAgICBrbzogJyR7bmFtZX3sl5DqsozshJwg65Kk64+M6riwJyxcclxuICB9LFxyXG4gIGdldEJlaGluZDoge1xyXG4gICAgZW46ICdHZXQgQmVoaW5kJyxcclxuICAgIGRlOiAnSGludGVyIGlobicsXHJcbiAgICBmcjogJ1Bhc3NleiBkZXJyacOocmUnLFxyXG4gICAgamE6ICfog4zpnaLjgbgnLFxyXG4gICAgY246ICfljrvog4zlkI4nLFxyXG4gICAga286ICfrs7TsiqQg65Kk66GcJyxcclxuICB9LFxyXG4gIGdvRnJvbnRPclNpZGVzOiB7XHJcbiAgICBlbjogJ0dvIEZyb250IC8gU2lkZXMnLFxyXG4gICAgZGU6ICdHZWhlIG5hY2ggVm9ybmUvIHp1IGRlbiBTZWl0ZW4nLFxyXG4gICAgZnI6ICdBbGxleiBEZXZhbnQgLyBDw7R0w6lzJyxcclxuICAgIGphOiAn5YmN77yP5qiq44G4JyxcclxuICAgIGNuOiAn5Y675YmN5L6n5pa5JyxcclxuICAgIGtvOiAn67O07IqkIO2bhOuwqSDtlLztlZjquLAnLFxyXG4gIH0sXHJcbiAgZ29Gcm9udDoge1xyXG4gICAgZW46ICdHbyBGcm9udCcsXHJcbiAgICBkZTogJ0dlaCBuYWNoIHZvcm4nLFxyXG4gICAgZnI6ICdBbGxleiBEZXZhbnQnLFxyXG4gICAgamE6ICfliY3jgbgnLFxyXG4gICAgY246ICfljrvliY3pnaInLFxyXG4gICAga286ICfslZ7snLzroZwnLFxyXG4gIH0sXHJcbiAgLy8gZ2V0VW5kZXIgaXMgdXNlZCB3aGVuIHlvdSBoYXZlIHRvIGdldCBpbnRvIHRoZSBib3NzZXMgaGl0Ym94XHJcbiAgZ2V0VW5kZXI6IHtcclxuICAgIGVuOiAnR2V0IFVuZGVyJyxcclxuICAgIGRlOiAnVW50ZXIgaWhuJyxcclxuICAgIGZyOiAnRW4gZGVzc291cycsXHJcbiAgICBqYTogJ+ODnOOCueOBq+iyvOOCiuS7mOOBjycsXHJcbiAgICBjbjogJ+WOu+iEmuS4iycsXHJcbiAgICBrbzogJ+uztOyKpCDslYTrnpjroZwnLFxyXG4gIH0sXHJcbiAgLy8gaW4gaXMgbW9yZSBsaWtlIFwiZ2V0IGNsb3NlIGJ1dCBtYXliZSBldmVuIG1lbGVlIHJhbmdlIGlzIGZpbmVcIlxyXG4gIGluOiB7XHJcbiAgICBlbjogJ0luJyxcclxuICAgIGRlOiAnUmVpbicsXHJcbiAgICBmcjogJ0ludMOpcmlldXInLFxyXG4gICAgamE6ICfkuK3jgbgnLFxyXG4gICAgY246ICfpnaDov5EnLFxyXG4gICAga286ICfslYjsnLzroZwnLFxyXG4gIH0sXHJcbiAgLy8gb3V0IG1lYW5zIGdldCBmYXIgYXdheVxyXG4gIG91dDoge1xyXG4gICAgZW46ICdPdXQnLFxyXG4gICAgZGU6ICdSYXVzJyxcclxuICAgIGZyOiAnRXh0w6lyaWV1cicsXHJcbiAgICBqYTogJ+WkluOBuCcsXHJcbiAgICBjbjogJ+i/nOemuycsXHJcbiAgICBrbzogJ+uwluycvOuhnCcsXHJcbiAgfSxcclxuICBvdXRPZk1lbGVlOiB7XHJcbiAgICBlbjogJ091dCBvZiBtZWxlZScsXHJcbiAgICBkZTogJ1JhdXMgYXVzIE5haGthbXBmJyxcclxuICAgIGZyOiAnU29ydGV6IGRlIGxhIG3DqmzDqWUnLFxyXG4gICAgamE6ICfov5HmjqXmnIDlpKfjg6zjg7PjgrgnLFxyXG4gICAgY246ICfov5HmiJjmnIDov5zot53nprvlm57pgb8nLFxyXG4gICAga286ICfqt7zsoJHrspTsnIQg67CW7Jy866GcJyxcclxuICB9LFxyXG4gIGluVGhlbk91dDoge1xyXG4gICAgZW46ICdJbiwgdGhlbiBvdXQnLFxyXG4gICAgZGU6ICdSZWluLCBkYW5uIHJhdXMnLFxyXG4gICAgZnI6ICdJbnTDqXJpZXVyLCBwdWlzIGV4dMOpcmlldXInLFxyXG4gICAgamE6ICfkuK0gPT4g5aSWJyxcclxuICAgIGNuOiAn5YWI6Z2g6L+R77yM5YaN6L+c56a7JyxcclxuICAgIGtvOiAn7JWI7Jy866GcID0+IOuwluycvOuhnCcsXHJcbiAgfSxcclxuICBvdXRUaGVuSW46IHtcclxuICAgIGVuOiAnT3V0LCB0aGVuIGluJyxcclxuICAgIGRlOiAnUmF1cywgZGFubiByZWluJyxcclxuICAgIGZyOiAnRXh0w6lyaWV1ciwgcHVpcyBpbnTDqXJpZXVyJyxcclxuICAgIGphOiAn5aSWID0+IOS4rScsXHJcbiAgICBjbjogJ+WFiOi/nOemu++8jOWGjemdoOi/kScsXHJcbiAgICBrbzogJ+uwluycvOuhnCA9PiDslYjsnLzroZwnLFxyXG4gIH0sXHJcbiAgYmFja1RoZW5Gcm9udDoge1xyXG4gICAgZW46ICdCYWNrIFRoZW4gRnJvbnQnLFxyXG4gICAgZGU6ICdOYWNoIEhpbnRlbiwgZGFuYWNoIG5hY2ggVm9ybmUnLFxyXG4gICAgZnI6ICdEZXJyacOocmUgcHVpcyBkZXZhbnQnLFxyXG4gICAgamE6ICflvozjgo0gPT4g5YmNJyxcclxuICAgIGNuOiAn5ZCOID0+IOWJjScsXHJcbiAgICBrbzogJ+uSpOuhnCA9PiDslZ7snLzroZwnLFxyXG4gIH0sXHJcbiAgZnJvbnRUaGVuQmFjazoge1xyXG4gICAgZW46ICdGcm9udCBUaGVuIEJhY2snLFxyXG4gICAgZGU6ICdOYWNoIFZvcm5lLCBkYW5hY2ggbmFjaCBIaW50ZW4nLFxyXG4gICAgZnI6ICdEZXZhbnQgcHVpcyBkZXJyacOocmUnLFxyXG4gICAgamE6ICfliY0gPT4g5b6M44KNJyxcclxuICAgIGNuOiAn5YmNID0+IOWQjicsXHJcbiAgICBrbzogJ+yVnuycvOuhnCA9PiDrkqTroZwnLFxyXG4gIH0sXHJcbiAgZ29JbnRvTWlkZGxlOiB7XHJcbiAgICBlbjogJ0dldCBNaWRkbGUnLFxyXG4gICAgZGU6ICdpbiBkaWUgTWl0dGUgZ2VoZW4nLFxyXG4gICAgZnI6ICdBbGxleiBhdSBtaWxpZXUnLFxyXG4gICAgamE6ICfkuK3jgbgnLFxyXG4gICAgY246ICfljrvkuK3pl7QnLFxyXG4gICAga286ICfspJHslZnsnLzroZwnLFxyXG4gIH0sXHJcbiAgcmlnaHQ6IHtcclxuICAgIGVuOiAnUmlnaHQnLFxyXG4gICAgZGU6ICdSZWNodHMnLFxyXG4gICAgZnI6ICfDgCBkcm9pdGUnLFxyXG4gICAgamE6ICflj7PjgbgnLFxyXG4gICAgY246ICflj7MnLFxyXG4gICAga286ICfsmKTrpbjsqr0nLFxyXG4gIH0sXHJcbiAgbGVmdDoge1xyXG4gICAgZW46ICdMZWZ0JyxcclxuICAgIGRlOiAnTGlua3MnLFxyXG4gICAgZnI6ICfDgCBnYXVjaGUnLFxyXG4gICAgamE6ICflt6bjgbgnLFxyXG4gICAgY246ICflt6YnLFxyXG4gICAga286ICfsmbzsqr0nLFxyXG4gIH0sXHJcbiAgZ2V0TGVmdEFuZFdlc3Q6IHtcclxuICAgIGVuOiAnPD0gR2V0IExlZnQvV2VzdCcsXHJcbiAgICBkZTogJzw9IE5hY2ggTGlua3MvV2VzdGVuJyxcclxuICAgIGZyOiAnPD0gQWxsZXogw6AgR2F1Y2hlL091ZXN0JyxcclxuICAgIGphOiAnPD0g5bemL+ilv+OBuCcsXHJcbiAgICBjbjogJzw9IOWOu+W3pi/opb/ovrknLFxyXG4gICAga286ICc8PSDsmbzsqr3snLzroZwnLFxyXG4gIH0sXHJcbiAgZ2V0UmlnaHRBbmRFYXN0OiB7XHJcbiAgICBlbjogJ0dldCBSaWdodC9FYXN0ID0+JyxcclxuICAgIGRlOiAnTmFjaCBSZWNodHMvT3N0ZW4gPT4nLFxyXG4gICAgZnI6ICdBbGxleiDDoCBEcm9pdGUvRXN0ID0+JyxcclxuICAgIGphOiAn5Y+zL+adseOBuCA9PicsXHJcbiAgICBjbjogJ+WOu+WPsy/kuJzovrkgPT4nLFxyXG4gICAga286ICfsmKTrpbjsqr3snLzroZwgPT4nLFxyXG4gIH0sXHJcbiAgZ29Gcm9udEJhY2s6IHtcclxuICAgIGVuOiAnR28gRnJvbnQvQmFjaycsXHJcbiAgICBkZTogJ0dlaCBuYWNoIFZvcm5lL0hpbnRlbicsXHJcbiAgICBmcjogJ0FsbGV6IERldmFudC9EZXJyacOocmUnLFxyXG4gICAgamE6ICfnuKbjgbgnLFxyXG4gICAgY246ICfljrvliY3lkI4nLFxyXG4gICAga286ICfslZ4v65Kk66GcJyxcclxuICB9LFxyXG4gIHNpZGVzOiB7XHJcbiAgICBlbjogJ1NpZGVzJyxcclxuICAgIGRlOiAnU2VpdGVuJyxcclxuICAgIGZyOiAnQ8O0dMOpcycsXHJcbiAgICBqYTogJ+aoquOBuCcsXHJcbiAgICBjbjogJ+WOu+S+p+mdoicsXHJcbiAgICBrbzogJ+yWkeyYhuycvOuhnCcsXHJcbiAgfSxcclxuICBtaWRkbGU6IHtcclxuICAgIGVuOiAnTWlkZGxlJyxcclxuICAgIGRlOiAnTWl0dGUnLFxyXG4gICAgZnI6ICdNaWxpZXUnLFxyXG4gICAgamE6ICfkuK3jgbgnLFxyXG4gICAgY246ICfkuK3pl7QnLFxyXG4gICAga286ICfspJHslZknLFxyXG4gIH0sXHJcbiAgLy8ga2lsbEFkZHMgaXMgdXNlZCBmb3IgYWRkcyB0aGF0IHdpbGwgYWx3YXlzIGJlIGF2YWlsYWJsZVxyXG4gIGtpbGxBZGRzOiB7XHJcbiAgICBlbjogJ0tpbGwgYWRkcycsXHJcbiAgICBkZTogJ0FkZHMgYmVzaWVnZW4nLFxyXG4gICAgZnI6ICdUdWV6IGxlcyBhZGRzJyxcclxuICAgIGphOiAn6ZuR6a2a44KS5Yem55CGJyxcclxuICAgIGNuOiAn5Ye75p2A5bCP5oCqJyxcclxuICAgIGtvOiAn7KuEIOyeoeq4sCcsXHJcbiAgfSxcclxuICAvLyBraWxsRXh0cmFBZGQgaXMgdXNlZCBmb3IgYWRkcyB0aGF0IGFwcGVhciBpZiBhIG1lY2hhbmljIHdhcyBub3QgcGxheWVkIGNvcnJlY3RseVxyXG4gIGtpbGxFeHRyYUFkZDoge1xyXG4gICAgZW46ICdLaWxsIEV4dHJhIEFkZCcsXHJcbiAgICBkZTogJ0FkZCBiZXNpZWdlbicsXHJcbiAgICBmcjogJ1R1ZXogbFxcJ2FkZCcsXHJcbiAgICBqYTogJ+mbkemtmuOCkuWAkuOBmScsXHJcbiAgICBjbjogJ+WHu+adgOWwj+aAqicsXHJcbiAgICBrbzogJ+yrhCDsnqHquLAnLFxyXG4gIH0sXHJcbiAgYXdheUZyb21Gcm9udDoge1xyXG4gICAgZW46ICdBd2F5IEZyb20gRnJvbnQnLFxyXG4gICAgZGU6ICdXZWcgdm9uIFZvcm5lJyxcclxuICAgIGZyOiAnw4lsb2lnbmV6LXZvdXMgZHUgZGV2YW50JyxcclxuICAgIGphOiAn5YmN5pa544GL44KJ6Zui44KM44KLJyxcclxuICAgIGNuOiAn6L+c56a75q2j6Z2iJyxcclxuICAgIGtvOiAn67O07IqkIOyghOuwqSDtlLztlZjquLAnLFxyXG4gIH0sXHJcbiAgc2xlZXBUYXJnZXQ6IHtcclxuICAgIGVuOiAnU2xlZXAgJHtuYW1lfScsXHJcbiAgICBkZTogJ1NjaGxhZiBhdWYgJHtuYW1lfScsXHJcbiAgICBmcjogJ1NvbW1laWwgc3VyICR7bmFtZX0nLFxyXG4gICAgamE6ICcke25hbWV9IOOBq+OCueODquODl+ODqycsXHJcbiAgICBjbjogJ+WCrOecoCAke25hbWV9JyxcclxuICAgIGtvOiAnJHtuYW1lfSDsiqzrpqztlIwnLFxyXG4gIH0sXHJcbiAgc3R1blRhcmdldDoge1xyXG4gICAgZW46ICdTdHVuICR7bmFtZX0nLFxyXG4gICAgZGU6ICdCZXTDpHVidW5nIGF1ZiAke25hbWV9JyxcclxuICAgIGZyOiAnw4l0b3VyZGlzc2V6ICR7bmFtZX0nLFxyXG4gICAgamE6ICcke25hbWV9IOOBq+OCueOCv+ODsycsXHJcbiAgICBjbjogJ+ecqeaZlSAke25hbWV9JyxcclxuICAgIGtvOiAnJHtuYW1lfeq4sOygiCcsXHJcbiAgfSxcclxuICBpbnRlcnJ1cHRUYXJnZXQ6IHtcclxuICAgIGVuOiAnaW50ZXJydXB0ICR7bmFtZX0nLFxyXG4gICAgZGU6ICd1bnRlcmJyZWNoZSAke25hbWV9JyxcclxuICAgIGZyOiAnSW50ZXJyb21wZXogJHtuYW1lfScsXHJcbiAgICBqYTogJyR7bmFtZX0g44Gr5rKI6buZJyxcclxuICAgIGNuOiAn5omT5patJHtuYW1lfScsXHJcbiAgICBrbzogJyR7bmFtZX3quLDsiKAg7Iuc7KCEIOuBiuq4sCcsXHJcbiAgfSxcclxuICBwcmV5T25Zb3U6IHtcclxuICAgIGVuOiAnUHJleSBvbiBZT1UnLFxyXG4gICAgZGU6ICdNYXJrZXIgYXVmIERJUicsXHJcbiAgICBmcjogJ01hcnF1YWdlIHN1ciBWT1VTJyxcclxuICAgIGphOiAn6Ieq5YiG44Gr5o2V6aOfJyxcclxuICAgIGNuOiAn5o6g6aOf54K55ZCNJyxcclxuICAgIGtvOiAn7ZmN7Jil7KeVIOuMgOyDgeyekCcsXHJcbiAgfSxcclxuICBwcmV5T25QbGF5ZXI6IHtcclxuICAgIGVuOiAnUHJleSBvbiAke3BsYXllcn0nLFxyXG4gICAgZGU6ICdNYXJrZXIgYXVmICR7cGxheWVyfScsXHJcbiAgICBmcjogJ01hcnF1YWdlIHN1ciAke3BsYXllcn0nLFxyXG4gICAgamE6ICcke3BsYXllcn3jgavmjZXpo58nLFxyXG4gICAgY246ICfmjqDpo5/ngrnlkI0ke3BsYXllcn0nLFxyXG4gICAga286ICdcIiR7cGxheWVyfVwiIO2ZjeyYpeynlScsXHJcbiAgfSxcclxuICBhd2F5RnJvbUdyb3VwOiB7XHJcbiAgICBlbjogJ0F3YXkgZnJvbSBHcm91cCcsXHJcbiAgICBkZTogJ1dlZyB2b24gZGVyIEdydXBwZScsXHJcbiAgICBmcjogJ8OJbG9pZ25lei12b3VzIGR1IGdyb3VwZScsXHJcbiAgICBqYTogJ+WkluOBuCcsXHJcbiAgICBjbjogJ+i/nOemu+S6uue+pCcsXHJcbiAgICBrbzogJ+uLpOuluCDsgqzrnozrk6Tqs7wg65ao7Ja07KeA6riwJyxcclxuICB9LFxyXG4gIGF3YXlGcm9tUGxheWVyOiB7XHJcbiAgICBlbjogJ0F3YXkgZnJvbSAke3BsYXllcn0nLFxyXG4gICAgZGU6ICdXZWcgdm9uICR7cGxheWVyfScsXHJcbiAgICBmcjogJ8OJbG9pZ25lei12b3VzIGRlICR7cGxheWVyfScsXHJcbiAgICBqYTogJyR7cGxheWVyfeOBi+OCiembouOCjOOCiycsXHJcbiAgICBjbjogJ+i/nOemuyR7cGxheWVyfScsXHJcbiAgICBrbzogJ1wiJHtwbGF5ZXJ9XCLsl5DqsozshJwg66mA7Ja07KeA6riwJyxcclxuICB9LFxyXG4gIG1ldGVvck9uWW91OiB7XHJcbiAgICBlbjogJ01ldGVvciBvbiBZT1UnLFxyXG4gICAgZGU6ICdNZXRlb3IgYXVmIERJUicsXHJcbiAgICBmcjogJ03DqXTDqW9yZSBzdXIgVk9VUycsXHJcbiAgICBqYTogJ+iHquWIhuOBq+ODoeODhuOCqicsXHJcbiAgICBjbjogJ+mZqOefs+eCueWQjScsXHJcbiAgICBrbzogJ+uCmOyXkOqyjCDrqZTthYzsmKTsp5UnLFxyXG4gIH0sXHJcbiAgc3RvcE1vdmluZzoge1xyXG4gICAgZW46ICdTdG9wIE1vdmluZyEnLFxyXG4gICAgZGU6ICdCZXdlZ3VuZyBzdG9wcGVuIScsXHJcbiAgICBmcjogJ05lIGJvdWdleiBwYXMgIScsXHJcbiAgICBqYTogJ+enu+WLleemgeatou+8gScsXHJcbiAgICBjbjogJ+WBnOatouenu+WKqO+8gScsXHJcbiAgICBrbzogJ+ydtOuPmSDrqYjstpTquLAhJyxcclxuICB9LFxyXG4gIHN0b3BFdmVyeXRoaW5nOiB7XHJcbiAgICBlbjogJ1N0b3AgRXZlcnl0aGluZyEnLFxyXG4gICAgZGU6ICdTdG9wcGUgQWxsZXMhJyxcclxuICAgIGZyOiAnQXJyw6p0ZXogVE9VVCAhJyxcclxuICAgIGphOiAn6KGM5YuV56aB5q2i77yBJyxcclxuICAgIGNuOiAn5YGc5q2i6KGM5Yqo77yBJyxcclxuICAgIGtvOiAn7ZaJ64+ZIOupiOy2lOq4sCEnLFxyXG4gIH0sXHJcbiAgbW92ZUF3YXk6IHtcclxuICAgIC8vIG1vdmUgYXdheSB0byBkb2RnZSBhb2VzXHJcbiAgICBlbjogJ01vdmUhJyxcclxuICAgIGRlOiAnQmV3ZWdlbiEnLFxyXG4gICAgZnI6ICdCb3VnZXogIScsXHJcbiAgICBqYTogJ+mBv+OBkeOBpu+8gScsXHJcbiAgICBjbjogJ+W/q+i6suW8gO+8gScsXHJcbiAgICBrbzogJ+ydtOuPme2VmOq4sCEnLFxyXG4gIH0sXHJcbiAgbW92ZUFyb3VuZDoge1xyXG4gICAgLy8gbW92ZSBhcm91bmQgKGUuZy4ganVtcGluZykgdG8gYXZvaWQgYmVpbmcgZnJvemVuXHJcbiAgICBlbjogJ01vdmUhJyxcclxuICAgIGRlOiAnQmV3ZWdlbiEnLFxyXG4gICAgZnI6ICdCb3VnZXogIScsXHJcbiAgICBqYTogJ+WLleOBj++8gScsXHJcbiAgICBjbjogJ+W/q+WKqO+8gScsXHJcbiAgICBrbzogJ+ybgOyngeydtOq4sCEnLFxyXG4gIH0sXHJcbiAgYnJlYWtDaGFpbnM6IHtcclxuICAgIGVuOiAnQnJlYWsgY2hhaW5zJyxcclxuICAgIGRlOiAnS2V0dGUgemVyYnJlY2hlbicsXHJcbiAgICBmcjogJ0JyaXNleiBsZXMgY2hhaW5lcycsXHJcbiAgICBqYTogJ+e3muOCkuWIh+OCiycsXHJcbiAgICBjbjogJ+WIh+aWrei/nue6vycsXHJcbiAgICBrbzogJ+yEoCDrgYrquLAnLFxyXG4gIH0sXHJcbiAgbW92ZUNoYWluc1RvZ2V0aGVyOiB7XHJcbiAgICBlbjogJ01vdmUgY2hhaW5zIHRvZ2V0aGVyJyxcclxuICAgIGRlOiAnS2V0dGVuIHp1c2FtbWVuIGJld2VnZW4nLFxyXG4gICAgZnI6ICdCb3VnZXogbGVzIGNoYWluZXMgZW5zZW1ibGUnLFxyXG4gICAgamE6ICfnt5rlkIzlo6vkuIDnt5Ljgavnp7vli5UnLFxyXG4gICAgY246ICfov57nur/kuIDotbfnp7vliqgnLFxyXG4gICAga286ICfshKAg67aZ7Ja07IScIOqwmeydtCDsm4Dsp4HsnbTquLAnLFxyXG4gIH0sXHJcbiAgZWFydGhzaGFrZXJPbllvdToge1xyXG4gICAgZW46ICdFYXJ0aCBTaGFrZXIgb24gWU9VJyxcclxuICAgIGRlOiAnRXJkc3Rvw58gYXVmIERJUicsXHJcbiAgICBmcjogJ01hcnF1ZSBkZSB0ZXJyZSBzdXIgVk9VUycsXHJcbiAgICBqYTogJ+iHquWIhuOBq+OCouODvOOCueOCt+OCp+OCpOOCq+ODvCcsXHJcbiAgICBjbjogJ+Wkp+WcsOaRh+WKqOeCueWQjScsXHJcbiAgICBrbzogJ+yWtOyKpOynlSDrjIDsg4HsnpAnLFxyXG4gIH0sXHJcbiAgd2FrZVVwOiB7XHJcbiAgICBlbjogJ1dBS0UgVVAnLFxyXG4gICAgZGU6ICdBVUZXQUNIRU4nLFxyXG4gICAgZnI6ICdSw4lWRUlMTEUtVE9JJyxcclxuICAgIGphOiAn55uu44KS6Kaa44G+44GX44Gm77yBJyxcclxuICAgIGNuOiAn6YaS6YaS77yB5Yqo5LiA5Yqo77yB77yBJyxcclxuICAgIGtvOiAn7J287Ja064KY7IS47JqUIScsXHJcbiAgfSxcclxuICBjbG9zZVRldGhlcnNXaXRoUGxheWVyOiB7XHJcbiAgICBlbjogJ0Nsb3NlIFRldGhlcnMgKCR7cGxheWVyfSknLFxyXG4gICAgZGU6ICdOYWhlIFZlcmJpbmR1bmdlbiAoJHtwbGF5ZXJ9KScsXHJcbiAgICBmcjogJ0xpZW5zIHByb2NoZXMgYXZlYyAoJHtwbGF5ZXJ9KScsXHJcbiAgICBqYTogJygke3BsYXllcn0p44Gr6L+R44Gl44GPJyxcclxuICAgIGNuOiAn6Z2g6L+R6L+e57q/ICgke3BsYXllcn0pJyxcclxuICAgIGtvOiAn7IOB64yA7JmAIOqwgOq5jOydtCDrtpnquLAgKCR7cGxheWVyfSknLFxyXG4gIH0sXHJcbiAgZmFyVGV0aGVyc1dpdGhQbGF5ZXI6IHtcclxuICAgIGVuOiAnRmFyIFRldGhlcnMgKCR7cGxheWVyfSknLFxyXG4gICAgZGU6ICdFbnRmZXJudGUgVmVyYmluZHVuZ2VuICgke3BsYXllcn0pJyxcclxuICAgIGZyOiAnTGllbnMgw6lsb2lnbsOpcyBhdmVjICgke3BsYXllcn0pJyxcclxuICAgIGphOiAnICgke3BsYXllcn0p44GL44KJ6Zui44KM44KLJyxcclxuICAgIGNuOiAn6L+c56a76L+e57q/ICgke3BsYXllcn0pJyxcclxuICAgIGtvOiAn7IOB64yA7JmAIOuWqOyWtOyngOq4sCAoJHtwbGF5ZXJ9KScsXHJcbiAgfSxcclxuICB1bmtub3duOiB7XHJcbiAgICBlbjogJz8/PycsXHJcbiAgICBkZTogJz8/PycsXHJcbiAgICBmcjogJz8/PycsXHJcbiAgICBqYTogJz8/PycsXHJcbiAgICBjbjogJz8/PycsXHJcbiAgICBrbzogJz8/PycsXHJcbiAgfSxcclxuICBub3J0aDoge1xyXG4gICAgZW46ICdOb3J0aCcsXHJcbiAgICBkZTogJ05vcmRlbicsXHJcbiAgICBmcjogJ05vcmQnLFxyXG4gICAgamE6ICfljJcnLFxyXG4gICAgY246ICfkuIoo5YyXKScsXHJcbiAgICBrbzogJ+u2geyqvScsXHJcbiAgfSxcclxuICBzb3V0aDoge1xyXG4gICAgZW46ICdTb3V0aCcsXHJcbiAgICBkZTogJ1PDvGRlbicsXHJcbiAgICBmcjogJ1N1ZCcsXHJcbiAgICBqYTogJ+WNlycsXHJcbiAgICBjbjogJ+S4iyjljZcpJyxcclxuICAgIGtvOiAn64Ko7Kq9JyxcclxuICB9LFxyXG4gIGVhc3Q6IHtcclxuICAgIGVuOiAnRWFzdCcsXHJcbiAgICBkZTogJ09zdGVuJyxcclxuICAgIGZyOiAnRXN0JyxcclxuICAgIGphOiAn5p2xJyxcclxuICAgIGNuOiAn5Y+zKOS4nCknLFxyXG4gICAga286ICfrj5nsqr0nLFxyXG4gIH0sXHJcbiAgd2VzdDoge1xyXG4gICAgZW46ICdXZXN0JyxcclxuICAgIGRlOiAnV2VzdGVuJyxcclxuICAgIGZyOiAnT3Vlc3QnLFxyXG4gICAgamE6ICfopb8nLFxyXG4gICAgY246ICflt6Yo6KW/KScsXHJcbiAgICBrbzogJ+yEnOyqvScsXHJcbiAgfSxcclxuICBub3J0aHdlc3Q6IHtcclxuICAgIGVuOiAnTm9ydGh3ZXN0JyxcclxuICAgIGRlOiAnTm9yZHdlc3RlbicsXHJcbiAgICBmcjogJ05vcmQtT3Vlc3QnLFxyXG4gICAgamE6ICfljJfopb8nLFxyXG4gICAgY246ICflt6bkuIoo6KW/5YyXKScsXHJcbiAgICBrbzogJ+u2geyEnOyqvScsXHJcbiAgfSxcclxuICBub3J0aGVhc3Q6IHtcclxuICAgIGVuOiAnTm9ydGhlYXN0JyxcclxuICAgIGRlOiAnTm9yZG9zdGVuJyxcclxuICAgIGZyOiAnTm9yZC1Fc3QnLFxyXG4gICAgamE6ICfljJfmnbEnLFxyXG4gICAgY246ICflj7PkuIoo5Lic5YyXKScsXHJcbiAgICBrbzogJ+u2geuPmeyqvScsXHJcbiAgfSxcclxuICBzb3V0aHdlc3Q6IHtcclxuICAgIGVuOiAnU291dGh3ZXN0JyxcclxuICAgIGRlOiAnU8O8ZHdlc3RlbicsXHJcbiAgICBmcjogJ1N1ZC1PdWVzdCcsXHJcbiAgICBqYTogJ+WNl+ilvycsXHJcbiAgICBjbjogJ+W3puS4iyjopb/ljZcpJyxcclxuICAgIGtvOiAn64Ko7ISc7Kq9JyxcclxuICB9LFxyXG4gIHNvdXRoZWFzdDoge1xyXG4gICAgZW46ICdTb3V0aGVhc3QnLFxyXG4gICAgZGU6ICdTw7xkb3N0ZW4nLFxyXG4gICAgZnI6ICdTdWQtRXN0JyxcclxuICAgIGphOiAn5Y2X5p2xJyxcclxuICAgIGNuOiAn5Y+z5LiLKOS4nOWNlyknLFxyXG4gICAga286ICfrgqjrj5nsqr0nLFxyXG4gIH0sXHJcbiAgZGlyTjoge1xyXG4gICAgZW46ICdOJyxcclxuICAgIGRlOiAnTicsXHJcbiAgICBmcjogJ04nLFxyXG4gICAgamE6ICfljJcnLFxyXG4gICAgY246ICfkuIoo5YyXKScsXHJcbiAgICBrbzogJ+u2gScsXHJcbiAgfSxcclxuICBkaXJTOiB7XHJcbiAgICBlbjogJ1MnLFxyXG4gICAgZGU6ICdTJyxcclxuICAgIGZyOiAnUycsXHJcbiAgICBqYTogJ+WNlycsXHJcbiAgICBjbjogJ+S4iyjljZcpJyxcclxuICAgIGtvOiAn64KoJyxcclxuICB9LFxyXG4gIGRpckU6IHtcclxuICAgIGVuOiAnRScsXHJcbiAgICBkZTogJ08nLFxyXG4gICAgZnI6ICdFJyxcclxuICAgIGphOiAn5p2xJyxcclxuICAgIGNuOiAn5Y+zKOS4nCknLFxyXG4gICAga286ICfrj5knLFxyXG4gIH0sXHJcbiAgZGlyVzoge1xyXG4gICAgZW46ICdXJyxcclxuICAgIGRlOiAnVycsXHJcbiAgICBmcjogJ08nLFxyXG4gICAgamE6ICfopb8nLFxyXG4gICAgY246ICflt6Yo6KW/KScsXHJcbiAgICBrbzogJ+yEnCcsXHJcbiAgfSxcclxuICBkaXJOVzoge1xyXG4gICAgZW46ICdOVycsXHJcbiAgICBkZTogJ05XJyxcclxuICAgIGZyOiAnTk8nLFxyXG4gICAgamE6ICfljJfopb8nLFxyXG4gICAgY246ICflt6bkuIoo6KW/5YyXKScsXHJcbiAgICBrbzogJ+u2geyEnCcsXHJcbiAgfSxcclxuICBkaXJORToge1xyXG4gICAgZW46ICdORScsXHJcbiAgICBkZTogJ05PJyxcclxuICAgIGZyOiAnTkUnLFxyXG4gICAgamE6ICfljJfmnbEnLFxyXG4gICAgY246ICflj7PkuIoo5Lic5YyXKScsXHJcbiAgICBrbzogJ+u2geuPmScsXHJcbiAgfSxcclxuICBkaXJTVzoge1xyXG4gICAgZW46ICdTVycsXHJcbiAgICBkZTogJ1NXJyxcclxuICAgIGZyOiAnU08nLFxyXG4gICAgamE6ICfljZfopb8nLFxyXG4gICAgY246ICflt6bkuIso6KW/5Y2XKScsXHJcbiAgICBrbzogJ+uCqOyEnCcsXHJcbiAgfSxcclxuICBkaXJTRToge1xyXG4gICAgZW46ICdTRScsXHJcbiAgICBkZTogJ1NPJyxcclxuICAgIGZyOiAnU0UnLFxyXG4gICAgamE6ICfljZfmnbEnLFxyXG4gICAgY246ICflj7PkuIso5Lic5Y2XKScsXHJcbiAgICBrbzogJ+uCqOuPmScsXHJcbiAgfSxcclxuICAvLyBMaXRlcmFsIG51bWJlcnMuXHJcbiAgbnVtMDogbnVtYmVyVG9PdXRwdXRTdHJpbmcoMCksXHJcbiAgbnVtMTogbnVtYmVyVG9PdXRwdXRTdHJpbmcoMSksXHJcbiAgbnVtMjogbnVtYmVyVG9PdXRwdXRTdHJpbmcoMiksXHJcbiAgbnVtMzogbnVtYmVyVG9PdXRwdXRTdHJpbmcoMyksXHJcbiAgbnVtNDogbnVtYmVyVG9PdXRwdXRTdHJpbmcoNCksXHJcbiAgbnVtNTogbnVtYmVyVG9PdXRwdXRTdHJpbmcoNSksXHJcbiAgbnVtNjogbnVtYmVyVG9PdXRwdXRTdHJpbmcoNiksXHJcbiAgbnVtNzogbnVtYmVyVG9PdXRwdXRTdHJpbmcoNyksXHJcbiAgbnVtODogbnVtYmVyVG9PdXRwdXRTdHJpbmcoOCksXHJcbiAgbnVtOTogbnVtYmVyVG9PdXRwdXRTdHJpbmcoOSksXHJcbn0gYXMgY29uc3Q7XHJcbiIsIi8vIE92ZXJsYXlQbHVnaW4gQVBJIHNldHVwXHJcblxyXG5pbXBvcnQge1xyXG4gIEV2ZW50TWFwLFxyXG4gIEV2ZW50VHlwZSxcclxuICBJT3ZlcmxheUhhbmRsZXIsXHJcbiAgT3ZlcmxheUhhbmRsZXJGdW5jcyxcclxuICBPdmVybGF5SGFuZGxlclR5cGVzLFxyXG59IGZyb20gJy4uL3R5cGVzL2V2ZW50JztcclxuXHJcbnR5cGUgQmFzZVJlc3BvbnNlID0geyByc2VxPzogbnVtYmVyOyAnJGVycm9yJz86IGJvb2xlYW4gfTtcclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgIF9fT3ZlcmxheUNhbGxiYWNrOiBFdmVudE1hcFtFdmVudFR5cGVdO1xyXG4gICAgZGlzcGF0Y2hPdmVybGF5RXZlbnQ/OiB0eXBlb2YgcHJvY2Vzc0V2ZW50O1xyXG4gICAgT3ZlcmxheVBsdWdpbkFwaToge1xyXG4gICAgICByZWFkeTogYm9vbGVhbjtcclxuICAgICAgY2FsbEhhbmRsZXI6IChtc2c6IHN0cmluZywgY2I/OiAodmFsdWU6IHN0cmluZykgPT4gdW5rbm93bikgPT4gdm9pZDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIFRoaXMgaXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXHJcbiAgICAgKlxyXG4gICAgICogSXQgaXMgcmVjb21tZW5kZWQgdG8gaW1wb3J0IGZyb20gdGhpcyBmaWxlOlxyXG4gICAgICpcclxuICAgICAqIGBpbXBvcnQgeyBhZGRPdmVybGF5TGlzdGVuZXIgfSBmcm9tICcvcGF0aC90by9vdmVybGF5X3BsdWdpbl9hcGknO2BcclxuICAgICAqL1xyXG4gICAgYWRkT3ZlcmxheUxpc3RlbmVyOiBJQWRkT3ZlcmxheUxpc3RlbmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIGlzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxyXG4gICAgICpcclxuICAgICAqIEl0IGlzIHJlY29tbWVuZGVkIHRvIGltcG9ydCBmcm9tIHRoaXMgZmlsZTpcclxuICAgICAqXHJcbiAgICAgKiBgaW1wb3J0IHsgcmVtb3ZlT3ZlcmxheUxpc3RlbmVyIH0gZnJvbSAnL3BhdGgvdG8vb3ZlcmxheV9wbHVnaW5fYXBpJztgXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZU92ZXJsYXlMaXN0ZW5lcjogSVJlbW92ZU92ZXJsYXlMaXN0ZW5lcjtcclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgVGhpcyBpcyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cclxuICAgICAqXHJcbiAgICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0byBpbXBvcnQgZnJvbSB0aGlzIGZpbGU6XHJcbiAgICAgKlxyXG4gICAgICogYGltcG9ydCB7IGNhbGxPdmVybGF5SGFuZGxlciB9IGZyb20gJy9wYXRoL3RvL292ZXJsYXlfcGx1Z2luX2FwaSc7YFxyXG4gICAgICovXHJcbiAgICBjYWxsT3ZlcmxheUhhbmRsZXI6IElPdmVybGF5SGFuZGxlcjtcclxuICB9XHJcbn1cclxuXHJcbnR5cGUgSUFkZE92ZXJsYXlMaXN0ZW5lciA9IDxUIGV4dGVuZHMgRXZlbnRUeXBlPihldmVudDogVCwgY2I6IEV2ZW50TWFwW1RdKSA9PiB2b2lkO1xyXG50eXBlIElSZW1vdmVPdmVybGF5TGlzdGVuZXIgPSA8VCBleHRlbmRzIEV2ZW50VHlwZT4oZXZlbnQ6IFQsIGNiOiBFdmVudE1hcFtUXSkgPT4gdm9pZDtcclxuXHJcbnR5cGUgU3Vic2NyaWJlcjxUPiA9IHtcclxuICBba2V5IGluIEV2ZW50VHlwZV0/OiBUW107XHJcbn07XHJcbnR5cGUgRXZlbnRQYXJhbWV0ZXIgPSBQYXJhbWV0ZXJzPEV2ZW50TWFwW0V2ZW50VHlwZV0+WzBdO1xyXG50eXBlIFZvaWRGdW5jPFQ+ID0gKC4uLmFyZ3M6IFRbXSkgPT4gdm9pZDtcclxuXHJcbmxldCBpbml0ZWQgPSBmYWxzZTtcclxuXHJcbmxldCB3c1VybDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcbmxldCB3czogV2ViU29ja2V0IHwgbnVsbCA9IG51bGw7XHJcbmxldCBxdWV1ZTogKFxyXG4gIHwgeyBbczogc3RyaW5nXTogdW5rbm93biB9XHJcbiAgfCBbeyBbczogc3RyaW5nXTogdW5rbm93biB9LCAoKHZhbHVlOiBzdHJpbmcgfCBudWxsKSA9PiB1bmtub3duKSB8IHVuZGVmaW5lZF1cclxuKVtdIHwgbnVsbCA9IFtdO1xyXG5sZXQgcnNlcUNvdW50ZXIgPSAwO1xyXG50eXBlIFByb21pc2VGdW5jcyA9IHtcclxuICByZXNvbHZlOiAodmFsdWU6IHVua25vd24pID0+IHZvaWQ7XHJcbiAgcmVqZWN0OiAodmFsdWU6IHVua25vd24pID0+IHZvaWQ7XHJcbn07XHJcbmNvbnN0IHJlc3BvbnNlUHJvbWlzZXM6IHsgW3JzZXFJZHg6IG51bWJlcl06IFByb21pc2VGdW5jcyB9ID0ge307XHJcblxyXG5jb25zdCBzdWJzY3JpYmVyczogU3Vic2NyaWJlcjxWb2lkRnVuYzx1bmtub3duPj4gPSB7fTtcclxuXHJcbmNvbnN0IHNlbmRNZXNzYWdlID0gKFxyXG4gIG1zZzogeyBbczogc3RyaW5nXTogdW5rbm93biB9LFxyXG4gIGNiPzogKHZhbHVlOiBzdHJpbmcgfCBudWxsKSA9PiB1bmtub3duLFxyXG4pOiB2b2lkID0+IHtcclxuICBpZiAod3MpIHtcclxuICAgIGlmIChxdWV1ZSlcclxuICAgICAgcXVldWUucHVzaChtc2cpO1xyXG4gICAgZWxzZVxyXG4gICAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KG1zZykpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAocXVldWUpXHJcbiAgICAgIHF1ZXVlLnB1c2goW21zZywgY2JdKTtcclxuICAgIGVsc2VcclxuICAgICAgd2luZG93Lk92ZXJsYXlQbHVnaW5BcGkuY2FsbEhhbmRsZXIoSlNPTi5zdHJpbmdpZnkobXNnKSwgY2IpO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IHByb2Nlc3NFdmVudCA9IDxUIGV4dGVuZHMgRXZlbnRUeXBlPihtc2c6IFBhcmFtZXRlcnM8RXZlbnRNYXBbVF0+WzBdKTogdm9pZCA9PiB7XHJcbiAgaW5pdCgpO1xyXG5cclxuICBjb25zdCBzdWJzID0gc3Vic2NyaWJlcnNbbXNnLnR5cGVdO1xyXG4gIHN1YnM/LmZvckVhY2goKHN1YikgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgc3ViKG1zZyk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZGlzcGF0Y2hPdmVybGF5RXZlbnQgPSBwcm9jZXNzRXZlbnQ7XHJcblxyXG5leHBvcnQgY29uc3QgYWRkT3ZlcmxheUxpc3RlbmVyOiBJQWRkT3ZlcmxheUxpc3RlbmVyID0gKGV2ZW50LCBjYik6IHZvaWQgPT4ge1xyXG4gIGluaXQoKTtcclxuXHJcbiAgaWYgKCFzdWJzY3JpYmVyc1tldmVudF0pIHtcclxuICAgIHN1YnNjcmliZXJzW2V2ZW50XSA9IFtdO1xyXG5cclxuICAgIGlmICghcXVldWUpIHtcclxuICAgICAgc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgIGNhbGw6ICdzdWJzY3JpYmUnLFxyXG4gICAgICAgIGV2ZW50czogW2V2ZW50XSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmVyc1tldmVudF0/LnB1c2goY2IgYXMgVm9pZEZ1bmM8dW5rbm93bj4pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZU92ZXJsYXlMaXN0ZW5lcjogSVJlbW92ZU92ZXJsYXlMaXN0ZW5lciA9IChldmVudCwgY2IpOiB2b2lkID0+IHtcclxuICBpbml0KCk7XHJcblxyXG4gIGlmIChzdWJzY3JpYmVyc1tldmVudF0pIHtcclxuICAgIGNvbnN0IGxpc3QgPSBzdWJzY3JpYmVyc1tldmVudF07XHJcbiAgICBjb25zdCBwb3MgPSBsaXN0Py5pbmRleE9mKGNiIGFzIFZvaWRGdW5jPHVua25vd24+KTtcclxuXHJcbiAgICBpZiAocG9zICE9PSB1bmRlZmluZWQgJiYgcG9zID4gLTEpXHJcbiAgICAgIGxpc3Q/LnNwbGljZShwb3MsIDEpO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGNhbGxPdmVybGF5SGFuZGxlckludGVybmFsOiBJT3ZlcmxheUhhbmRsZXIgPSAoXHJcbiAgX21zZzogeyBbczogc3RyaW5nXTogdW5rbm93biB9LFxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbik6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgaW5pdCgpO1xyXG5cclxuICBjb25zdCBtc2cgPSB7XHJcbiAgICAuLi5fbXNnLFxyXG4gICAgcnNlcTogMCxcclxuICB9O1xyXG4gIGxldCBwOiBQcm9taXNlPHVua25vd24+O1xyXG5cclxuICBpZiAod3MpIHtcclxuICAgIG1zZy5yc2VxID0gcnNlcUNvdW50ZXIrKztcclxuICAgIHAgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHJlc3BvbnNlUHJvbWlzZXNbbXNnLnJzZXFdID0geyByZXNvbHZlOiByZXNvbHZlLCByZWplY3Q6IHJlamVjdCB9O1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2VuZE1lc3NhZ2UobXNnKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgc2VuZE1lc3NhZ2UobXNnLCAoZGF0YSkgPT4ge1xyXG4gICAgICAgIGlmIChkYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgICByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKGRhdGEpIGFzIEJhc2VSZXNwb25zZTtcclxuICAgICAgICBpZiAocGFyc2VkWyckZXJyb3InXSlcclxuICAgICAgICAgIHJlamVjdChwYXJzZWQpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIHJlc29sdmUocGFyc2VkKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBwO1xyXG59O1xyXG5cclxudHlwZSBPdmVycmlkZU1hcCA9IHsgW2NhbGwgaW4gT3ZlcmxheUhhbmRsZXJUeXBlc10/OiBPdmVybGF5SGFuZGxlckZ1bmNzW2NhbGxdIH07XHJcbmNvbnN0IGNhbGxPdmVybGF5SGFuZGxlck92ZXJyaWRlTWFwOiBPdmVycmlkZU1hcCA9IHt9O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNhbGxPdmVybGF5SGFuZGxlcjogSU92ZXJsYXlIYW5kbGVyID0gKFxyXG4gIF9tc2c6IHsgW3M6IHN0cmluZ106IHVua25vd24gfSxcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4pOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gIGluaXQoKTtcclxuXHJcbiAgLy8gSWYgdGhpcyBgYXNgIGlzIGluY29ycmVjdCwgdGhlbiBpdCB3aWxsIG5vdCBmaW5kIGFuIG92ZXJyaWRlLlxyXG4gIC8vIFRPRE86IHdlIGNvdWxkIGFsc28gcmVwbGFjZSB0aGlzIHdpdGggYSB0eXBlIGd1YXJkLlxyXG4gIGNvbnN0IHR5cGUgPSBfbXNnLmNhbGwgYXMga2V5b2YgT3ZlcnJpZGVNYXA7XHJcbiAgY29uc3QgY2FsbEZ1bmMgPSBjYWxsT3ZlcmxheUhhbmRsZXJPdmVycmlkZU1hcFt0eXBlXSA/PyBjYWxsT3ZlcmxheUhhbmRsZXJJbnRlcm5hbDtcclxuXHJcbiAgLy8gVGhlIGBJT3ZlcmxheUhhbmRsZXJgIHR5cGUgZ3VhcmFudGVlcyB0aGF0IHBhcmFtZXRlcnMvcmV0dXJuIHR5cGUgbWF0Y2hcclxuICAvLyBvbmUgb2YgdGhlIG92ZXJsYXkgaGFuZGxlcnMuICBUaGUgT3ZlcnJpZGVNYXAgYWxzbyBvbmx5IHN0b3JlcyBmdW5jdGlvbnNcclxuICAvLyB0aGF0IG1hdGNoIGJ5IHRoZSBkaXNjcmltaW5hdGluZyBgY2FsbGAgZmllbGQsIGFuZCBzbyBhbnkgb3ZlcnJpZGVzXHJcbiAgLy8gc2hvdWxkIGJlIGNvcnJlY3QgaGVyZS5cclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcclxuICByZXR1cm4gY2FsbEZ1bmMoX21zZyBhcyBhbnkpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHNldE92ZXJsYXlIYW5kbGVyT3ZlcnJpZGUgPSA8VCBleHRlbmRzIGtleW9mIE92ZXJsYXlIYW5kbGVyRnVuY3M+KFxyXG4gIHR5cGU6IFQsXHJcbiAgb3ZlcnJpZGU/OiBPdmVybGF5SGFuZGxlckZ1bmNzW1RdLFxyXG4pOiB2b2lkID0+IHtcclxuICBpZiAoIW92ZXJyaWRlKSB7XHJcbiAgICBkZWxldGUgY2FsbE92ZXJsYXlIYW5kbGVyT3ZlcnJpZGVNYXBbdHlwZV07XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNhbGxPdmVybGF5SGFuZGxlck92ZXJyaWRlTWFwW3R5cGVdID0gb3ZlcnJpZGU7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaW5pdCA9ICgpOiB2b2lkID0+IHtcclxuICBpZiAoaW5pdGVkKVxyXG4gICAgcmV0dXJuO1xyXG5cclxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHdzVXJsID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKS5nZXQoJ09WRVJMQVlfV1MnKTtcclxuICAgIGlmICh3c1VybCAhPT0gbnVsbCkge1xyXG4gICAgICBjb25zdCBjb25uZWN0V3MgPSBmdW5jdGlvbih3c1VybDogc3RyaW5nKSB7XHJcbiAgICAgICAgd3MgPSBuZXcgV2ViU29ja2V0KHdzVXJsKTtcclxuXHJcbiAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoZSkgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsICgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdDb25uZWN0ZWQhJyk7XHJcblxyXG4gICAgICAgICAgY29uc3QgcSA9IHF1ZXVlID8/IFtdO1xyXG4gICAgICAgICAgcXVldWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgIHNlbmRNZXNzYWdlKHtcclxuICAgICAgICAgICAgY2FsbDogJ3N1YnNjcmliZScsXHJcbiAgICAgICAgICAgIGV2ZW50czogT2JqZWN0LmtleXMoc3Vic2NyaWJlcnMpLFxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgZm9yIChjb25zdCBtc2cgb2YgcSkge1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobXNnKSlcclxuICAgICAgICAgICAgICBzZW5kTWVzc2FnZShtc2cpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB3cy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKF9tc2cpID0+IHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgX21zZy5kYXRhICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgbWVzc2FnZSBkYXRhIHJlY2VpdmVkOiAnLCBfbXNnKTtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbXNnID0gSlNPTi5wYXJzZShfbXNnLmRhdGEpIGFzIEV2ZW50UGFyYW1ldGVyICYgQmFzZVJlc3BvbnNlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcHJvbWlzZUZ1bmNzID0gbXNnPy5yc2VxICE9PSB1bmRlZmluZWQgPyByZXNwb25zZVByb21pc2VzW21zZy5yc2VxXSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgaWYgKG1zZy5yc2VxICE9PSB1bmRlZmluZWQgJiYgcHJvbWlzZUZ1bmNzKSB7XHJcbiAgICAgICAgICAgICAgaWYgKG1zZ1snJGVycm9yJ10pXHJcbiAgICAgICAgICAgICAgICBwcm9taXNlRnVuY3MucmVqZWN0KG1zZyk7XHJcbiAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcHJvbWlzZUZ1bmNzLnJlc29sdmUobXNnKTtcclxuICAgICAgICAgICAgICBkZWxldGUgcmVzcG9uc2VQcm9taXNlc1ttc2cucnNlcV07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcHJvY2Vzc0V2ZW50KG1zZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignSW52YWxpZCBtZXNzYWdlIHJlY2VpdmVkOiAnLCBfbXNnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB3cy5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHtcclxuICAgICAgICAgIHF1ZXVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnVHJ5aW5nIHRvIHJlY29ubmVjdC4uLicpO1xyXG4gICAgICAgICAgLy8gRG9uJ3Qgc3BhbSB0aGUgc2VydmVyIHdpdGggcmV0cmllcy5cclxuICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgY29ubmVjdFdzKHdzVXJsKTtcclxuICAgICAgICAgIH0sIDMwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25uZWN0V3Mod3NVcmwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3Qgd2FpdEZvckFwaSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghd2luZG93Lk92ZXJsYXlQbHVnaW5BcGk/LnJlYWR5KSB7XHJcbiAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCh3YWl0Rm9yQXBpLCAzMDApO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcSA9IHF1ZXVlID8/IFtdO1xyXG4gICAgICAgIHF1ZXVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgd2luZG93Ll9fT3ZlcmxheUNhbGxiYWNrID0gcHJvY2Vzc0V2ZW50O1xyXG5cclxuICAgICAgICBzZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgICBjYWxsOiAnc3Vic2NyaWJlJyxcclxuICAgICAgICAgIGV2ZW50czogT2JqZWN0LmtleXMoc3Vic2NyaWJlcnMpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgcSkge1xyXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpXHJcbiAgICAgICAgICAgIHNlbmRNZXNzYWdlKGl0ZW1bMF0sIGl0ZW1bMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHdhaXRGb3JBcGkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIZXJlIHRoZSBPdmVybGF5UGx1Z2luIEFQSSBpcyByZWdpc3RlcmVkIHRvIHRoZSB3aW5kb3cgb2JqZWN0LFxyXG4gICAgLy8gYnV0IHRoaXMgaXMgbWFpbmx5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5Gb3IgY2FjdGJvdCdzIGJ1aWx0LWluIGZpbGVzLFxyXG4gICAgLy8gaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSB2YXJpb3VzIGZ1bmN0aW9ucyBleHBvcnRlZCBpbiByZXNvdXJjZXMvb3ZlcmxheV9wbHVnaW5fYXBpLnRzLlxyXG4gICAgd2luZG93LmFkZE92ZXJsYXlMaXN0ZW5lciA9IGFkZE92ZXJsYXlMaXN0ZW5lcjtcclxuICAgIHdpbmRvdy5yZW1vdmVPdmVybGF5TGlzdGVuZXIgPSByZW1vdmVPdmVybGF5TGlzdGVuZXI7XHJcbiAgICB3aW5kb3cuY2FsbE92ZXJsYXlIYW5kbGVyID0gY2FsbE92ZXJsYXlIYW5kbGVyO1xyXG4gICAgd2luZG93LmRpc3BhdGNoT3ZlcmxheUV2ZW50ID0gZGlzcGF0Y2hPdmVybGF5RXZlbnQ7XHJcbiAgfVxyXG5cclxuICBpbml0ZWQgPSB0cnVlO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBOZXRGaWVsZHNSZXZlcnNlIH0gZnJvbSAnLi4vdHlwZXMvbmV0X2ZpZWxkcyc7XHJcbmltcG9ydCB7IE5ldFBhcmFtcyB9IGZyb20gJy4uL3R5cGVzL25ldF9wcm9wcyc7XHJcbmltcG9ydCB7IENhY3Rib3RCYXNlUmVnRXhwIH0gZnJvbSAnLi4vdHlwZXMvbmV0X3RyaWdnZXInO1xyXG5cclxuaW1wb3J0IGxvZ0RlZmluaXRpb25zLCB7XHJcbiAgbG9nRGVmaW5pdGlvbnNWZXJzaW9ucyxcclxuICBMb2dEZWZpbml0aW9uVHlwZXMsXHJcbiAgTG9nRGVmaW5pdGlvblZlcnNpb25zLFxyXG4gIFBhcnNlSGVscGVyRmllbGRzLFxyXG59IGZyb20gJy4vbmV0bG9nX2RlZnMnO1xyXG5cclxuY29uc3Qgc2VwYXJhdG9yID0gJzonO1xyXG5jb25zdCBtYXRjaERlZmF1bHQgPSAnW146XSonO1xyXG5jb25zdCBtYXRjaFdpdGhDb2xvbnNEZWZhdWx0ID0gJyg/OlteOl18OiApKj8nO1xyXG5jb25zdCBmaWVsZHNXaXRoUG90ZW50aWFsQ29sb25zID0gWydlZmZlY3QnLCAnYWJpbGl0eSddO1xyXG5cclxuY29uc3QgZGVmYXVsdFBhcmFtcyA9IDxcclxuICBUIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzLFxyXG4gIFYgZXh0ZW5kcyBMb2dEZWZpbml0aW9uVmVyc2lvbnMsXHJcbj4odHlwZTogVCwgdmVyc2lvbjogViwgaW5jbHVkZT86IHN0cmluZ1tdKTogUGFydGlhbDxQYXJzZUhlbHBlckZpZWxkczxUPj4gPT4ge1xyXG4gIGluY2x1ZGUgPz89IE9iamVjdC5rZXlzKGxvZ0RlZmluaXRpb25zVmVyc2lvbnNbdmVyc2lvbl1bdHlwZV0uZmllbGRzKTtcclxuICBjb25zdCBwYXJhbXM6IHsgW2luZGV4OiBudW1iZXJdOiB7IGZpZWxkOiBzdHJpbmc7IHZhbHVlPzogc3RyaW5nOyBvcHRpb25hbDogYm9vbGVhbiB9IH0gPSB7fTtcclxuICBjb25zdCBmaXJzdE9wdGlvbmFsRmllbGQgPSBsb2dEZWZpbml0aW9uc1ZlcnNpb25zW3ZlcnNpb25dW3R5cGVdLmZpcnN0T3B0aW9uYWxGaWVsZDtcclxuXHJcbiAgZm9yIChjb25zdCBbcHJvcCwgaW5kZXhdIG9mIE9iamVjdC5lbnRyaWVzKGxvZ0RlZmluaXRpb25zVmVyc2lvbnNbdmVyc2lvbl1bdHlwZV0uZmllbGRzKSkge1xyXG4gICAgaWYgKCFpbmNsdWRlLmluY2x1ZGVzKHByb3ApKVxyXG4gICAgICBjb250aW51ZTtcclxuICAgIGNvbnN0IHBhcmFtOiB7IGZpZWxkOiBzdHJpbmc7IHZhbHVlPzogc3RyaW5nOyBvcHRpb25hbDogYm9vbGVhbiB9ID0ge1xyXG4gICAgICBmaWVsZDogcHJvcCxcclxuICAgICAgb3B0aW9uYWw6IGZpcnN0T3B0aW9uYWxGaWVsZCAhPT0gdW5kZWZpbmVkICYmIGluZGV4ID49IGZpcnN0T3B0aW9uYWxGaWVsZCxcclxuICAgIH07XHJcbiAgICBpZiAocHJvcCA9PT0gJ3R5cGUnKVxyXG4gICAgICBwYXJhbS52YWx1ZSA9IGxvZ0RlZmluaXRpb25zVmVyc2lvbnNbdmVyc2lvbl1bdHlwZV0udHlwZTtcclxuXHJcbiAgICBwYXJhbXNbaW5kZXhdID0gcGFyYW07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcGFyYW1zIGFzIHVua25vd24gYXMgUGFydGlhbDxQYXJzZUhlbHBlckZpZWxkczxUPj47XHJcbn07XHJcblxyXG50eXBlIFBhcnNlSGVscGVyVHlwZTxUIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzPiA9XHJcbiAgJiB7XHJcbiAgICBbZmllbGQgaW4gRXh0cmFjdDxrZXlvZiBOZXRGaWVsZHNSZXZlcnNlW1RdLCBzdHJpbmc+XT86IHN0cmluZztcclxuICB9XHJcbiAgJiB7IGNhcHR1cmU/OiBib29sZWFuIH07XHJcblxyXG5jb25zdCBwYXJzZUhlbHBlciA9IDxUIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzPihcclxuICBwYXJhbXM6IFBhcnNlSGVscGVyVHlwZTxUPiB8IHVuZGVmaW5lZCxcclxuICBkZWZLZXk6IFQsXHJcbiAgZmllbGRzOiBQYXJ0aWFsPFBhcnNlSGVscGVyRmllbGRzPFQ+PixcclxuKTogQ2FjdGJvdEJhc2VSZWdFeHA8VD4gPT4ge1xyXG4gIHBhcmFtcyA9IHBhcmFtcyA/PyB7fTtcclxuICBjb25zdCB2YWxpZEZpZWxkczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgZm9yIChjb25zdCBpbmRleCBpbiBmaWVsZHMpIHtcclxuICAgIGNvbnN0IGZpZWxkID0gZmllbGRzW2luZGV4XTtcclxuICAgIGlmIChmaWVsZClcclxuICAgICAgdmFsaWRGaWVsZHMucHVzaChmaWVsZC5maWVsZCk7XHJcbiAgfVxyXG5cclxuICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKHBhcmFtcywgZGVmS2V5LCBbJ2NhcHR1cmUnLCAuLi52YWxpZEZpZWxkc10pO1xyXG5cclxuICAvLyBGaW5kIHRoZSBsYXN0IGtleSB3ZSBjYXJlIGFib3V0LCBzbyB3ZSBjYW4gc2hvcnRlbiB0aGUgcmVnZXggaWYgbmVlZGVkLlxyXG4gIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChwYXJhbXMuY2FwdHVyZSk7XHJcbiAgY29uc3QgZmllbGRLZXlzID0gT2JqZWN0LmtleXMoZmllbGRzKS5zb3J0KChhLCBiKSA9PiBwYXJzZUludChhKSAtIHBhcnNlSW50KGIpKTtcclxuICBsZXQgbWF4S2V5U3RyOiBzdHJpbmc7XHJcbiAgaWYgKGNhcHR1cmUpIHtcclxuICAgIGNvbnN0IGtleXM6IEV4dHJhY3Q8a2V5b2YgTmV0RmllbGRzUmV2ZXJzZVtUXSwgc3RyaW5nPltdID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWVsZHMpXHJcbiAgICAgIGtleXMucHVzaChrZXkpO1xyXG4gICAgbGV0IHRtcEtleSA9IGtleXMucG9wKCk7XHJcbiAgICBpZiAodG1wS2V5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgbWF4S2V5U3RyID0gZmllbGRLZXlzW2ZpZWxkS2V5cy5sZW5ndGggLSAxXSA/PyAnMCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3aGlsZSAoXHJcbiAgICAgICAgZmllbGRzW3RtcEtleV0/Lm9wdGlvbmFsICYmXHJcbiAgICAgICAgISgoZmllbGRzW3RtcEtleV0/LmZpZWxkID8/ICcnKSBpbiBwYXJhbXMpXHJcbiAgICAgIClcclxuICAgICAgICB0bXBLZXkgPSBrZXlzLnBvcCgpO1xyXG4gICAgICBtYXhLZXlTdHIgPSB0bXBLZXkgPz8gJzAnO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBtYXhLZXlTdHIgPSAnMCc7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWVsZHMpIHtcclxuICAgICAgY29uc3QgdmFsdWUgPSBmaWVsZHNba2V5XSA/PyB7fTtcclxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGZpZWxkc1trZXldPy5maWVsZDtcclxuICAgICAgaWYgKGZpZWxkTmFtZSAhPT0gdW5kZWZpbmVkICYmIGZpZWxkTmFtZSBpbiBwYXJhbXMpXHJcbiAgICAgICAgbWF4S2V5U3RyID0ga2V5O1xyXG4gICAgfVxyXG4gIH1cclxuICBjb25zdCBtYXhLZXkgPSBwYXJzZUludChtYXhLZXlTdHIpO1xyXG5cclxuICAvLyBTcGVjaWFsIGNhc2UgZm9yIEFiaWxpdHkgdG8gaGFuZGxlIGFvZSBhbmQgbm9uLWFvZS5cclxuICBjb25zdCBhYmlsaXR5TWVzc2FnZVR5cGUgPVxyXG4gICAgYCg/OiR7bG9nRGVmaW5pdGlvbnMuQWJpbGl0eS5tZXNzYWdlVHlwZX18JHtsb2dEZWZpbml0aW9ucy5OZXR3b3JrQU9FQWJpbGl0eS5tZXNzYWdlVHlwZX0pYDtcclxuICBjb25zdCBhYmlsaXR5SGV4Q29kZSA9ICcoPzoxNXwxNiknO1xyXG5cclxuICAvLyBCdWlsZCB0aGUgcmVnZXggZnJvbSB0aGUgZmllbGRzLlxyXG4gIGNvbnN0IHByZWZpeCA9IGRlZktleSAhPT0gJ0FiaWxpdHknID8gbG9nRGVmaW5pdGlvbnNbZGVmS2V5XS5tZXNzYWdlVHlwZSA6IGFiaWxpdHlNZXNzYWdlVHlwZTtcclxuICBjb25zdCBoZXhDb2RlID0gZGVmS2V5ICE9PSAnQWJpbGl0eSdcclxuICAgID8gYDAwJHtwYXJzZUludChsb2dEZWZpbml0aW9uc1tkZWZLZXldLnR5cGUpLnRvU3RyaW5nKDE2KX1gLnNsaWNlKC0yKS50b1VwcGVyQ2FzZSgpXHJcbiAgICA6IGFiaWxpdHlIZXhDb2RlO1xyXG5cclxuICBsZXQgc3RyID0gJyc7XHJcbiAgaWYgKGNhcHR1cmUpXHJcbiAgICBzdHIgKz0gYCg/PHRpbWVzdGFtcD5cXFxceXtUaW1lc3RhbXB9KSAke3ByZWZpeH0gKD88dHlwZT4ke2hleENvZGV9KWA7XHJcbiAgZWxzZVxyXG4gICAgc3RyICs9IGBcXFxceXtUaW1lc3RhbXB9ICR7cHJlZml4fSAke2hleENvZGV9YDtcclxuXHJcbiAgbGV0IGxhc3RLZXkgPSAxO1xyXG4gIGZvciAoY29uc3Qga2V5U3RyIGluIGZpZWxkcykge1xyXG4gICAgY29uc3QgZmllbGROYW1lID0gZmllbGRzW2tleVN0cl0/LmZpZWxkO1xyXG5cclxuICAgIC8vIFJlZ2V4IGhhbmRsZXMgdGhlc2UgbWFudWFsbHkgYWJvdmUgaW4gdGhlIGBzdHJgIGluaXRpYWxpemF0aW9uLlxyXG4gICAgaWYgKGZpZWxkTmFtZSA9PT0gJ3RpbWVzdGFtcCcgfHwgZmllbGROYW1lID09PSAndHlwZScpXHJcbiAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgIGNvbnN0IGtleSA9IHBhcnNlSW50KGtleVN0cik7XHJcbiAgICAvLyBGaWxsIGluIGJsYW5rcy5cclxuICAgIGNvbnN0IG1pc3NpbmdGaWVsZHMgPSBrZXkgLSBsYXN0S2V5IC0gMTtcclxuICAgIGlmIChtaXNzaW5nRmllbGRzID09PSAxKVxyXG4gICAgICBzdHIgKz0gYCR7c2VwYXJhdG9yfSR7bWF0Y2hEZWZhdWx0fWA7XHJcbiAgICBlbHNlIGlmIChtaXNzaW5nRmllbGRzID4gMSlcclxuICAgICAgc3RyICs9IGAoPzoke3NlcGFyYXRvcn0ke21hdGNoRGVmYXVsdH0peyR7bWlzc2luZ0ZpZWxkc319YDtcclxuICAgIGxhc3RLZXkgPSBrZXk7XHJcblxyXG4gICAgc3RyICs9IHNlcGFyYXRvcjtcclxuXHJcbiAgICBjb25zdCB2YWx1ZSA9IGZpZWxkc1trZXlTdHJdO1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtkZWZLZXl9OiBpbnZhbGlkIHZhbHVlOiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcclxuXHJcbiAgICBjb25zdCBmaWVsZERlZmF1bHQgPSBmaWVsZE5hbWUgIT09IHVuZGVmaW5lZCAmJiBmaWVsZHNXaXRoUG90ZW50aWFsQ29sb25zLmluY2x1ZGVzKGZpZWxkTmFtZSlcclxuICAgICAgPyBtYXRjaFdpdGhDb2xvbnNEZWZhdWx0XHJcbiAgICAgIDogbWF0Y2hEZWZhdWx0O1xyXG4gICAgY29uc3QgZmllbGRWYWx1ZSA9IGZpZWxkc1trZXlTdHJdPy52YWx1ZT8udG9TdHJpbmcoKSA/PyBmaWVsZERlZmF1bHQ7XHJcblxyXG4gICAgaWYgKGZpZWxkTmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHN0ciArPSBSZWdleGVzLm1heWJlQ2FwdHVyZShcclxuICAgICAgICAvLyBtb3JlIGFjY3VyYXRlIHR5cGUgaW5zdGVhZCBvZiBgYXNgIGNhc3RcclxuICAgICAgICAvLyBtYXliZSB0aGlzIGZ1bmN0aW9uIG5lZWRzIGEgcmVmYWN0b3JpbmdcclxuICAgICAgICBjYXB0dXJlLFxyXG4gICAgICAgIGZpZWxkTmFtZSxcclxuICAgICAgICBwYXJhbXNbZmllbGROYW1lXSxcclxuICAgICAgICBmaWVsZFZhbHVlLFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RyICs9IGZpZWxkVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RvcCBpZiB3ZSdyZSBub3QgY2FwdHVyaW5nIGFuZCBkb24ndCBjYXJlIGFib3V0IGZ1dHVyZSBmaWVsZHMuXHJcbiAgICBpZiAoa2V5ID49IG1heEtleSlcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG5cclxuICBzdHIgKz0gJyg/OiR8OiknO1xyXG5cclxuICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpIGFzIENhY3Rib3RCYXNlUmVnRXhwPFQ+O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVnZXhlcyB7XHJcbiAgc3RhdGljIGxvZ1ZlcnNpb246IExvZ0RlZmluaXRpb25WZXJzaW9ucyA9ICdsYXRlc3QnO1xyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yMC0weDE0LW5ldHdvcmtzdGFydHNjYXN0aW5nXHJcbiAgICovXHJcbiAgc3RhdGljIHN0YXJ0c1VzaW5nKHBhcmFtcz86IE5ldFBhcmFtc1snU3RhcnRzVXNpbmcnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdTdGFydHNVc2luZyc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdTdGFydHNVc2luZycsIGRlZmF1bHRQYXJhbXMoJ1N0YXJ0c1VzaW5nJywgUmVnZXhlcy5sb2dWZXJzaW9uKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yMS0weDE1LW5ldHdvcmthYmlsaXR5XHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjItMHgxNi1uZXR3b3JrYW9lYWJpbGl0eVxyXG4gICAqL1xyXG4gIHN0YXRpYyBhYmlsaXR5KHBhcmFtcz86IE5ldFBhcmFtc1snQWJpbGl0eSddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0FiaWxpdHknPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnQWJpbGl0eScsIGRlZmF1bHRQYXJhbXMoJ0FiaWxpdHknLCBSZWdleGVzLmxvZ1ZlcnNpb24pKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTIxLTB4MTUtbmV0d29ya2FiaWxpdHlcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yMi0weDE2LW5ldHdvcmthb2VhYmlsaXR5XHJcbiAgICpcclxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYGFiaWxpdHlgIGluc3RlYWRcclxuICAgKi9cclxuICBzdGF0aWMgYWJpbGl0eUZ1bGwocGFyYW1zPzogTmV0UGFyYW1zWydBYmlsaXR5J10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnQWJpbGl0eSc+IHtcclxuICAgIHJldHVybiB0aGlzLmFiaWxpdHkocGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTI3LTB4MWItbmV0d29ya3RhcmdldGljb24taGVhZC1tYXJrZXJcclxuICAgKi9cclxuICBzdGF0aWMgaGVhZE1hcmtlcihwYXJhbXM/OiBOZXRQYXJhbXNbJ0hlYWRNYXJrZXInXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdIZWFkTWFya2VyJz4ge1xyXG4gICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ0hlYWRNYXJrZXInLCBkZWZhdWx0UGFyYW1zKCdIZWFkTWFya2VyJywgUmVnZXhlcy5sb2dWZXJzaW9uKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0wMy0weDAzLWFkZGNvbWJhdGFudFxyXG4gICAqL1xyXG4gIHN0YXRpYyBhZGRlZENvbWJhdGFudChwYXJhbXM/OiBOZXRQYXJhbXNbJ0FkZGVkQ29tYmF0YW50J10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnQWRkZWRDb21iYXRhbnQnPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIoXHJcbiAgICAgIHBhcmFtcyxcclxuICAgICAgJ0FkZGVkQ29tYmF0YW50JyxcclxuICAgICAgZGVmYXVsdFBhcmFtcygnQWRkZWRDb21iYXRhbnQnLCBSZWdleGVzLmxvZ1ZlcnNpb24sIFtcclxuICAgICAgICAndHlwZScsXHJcbiAgICAgICAgJ3RpbWVzdGFtcCcsXHJcbiAgICAgICAgJ2lkJyxcclxuICAgICAgICAnbmFtZScsXHJcbiAgICAgIF0pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTAzLTB4MDMtYWRkY29tYmF0YW50XHJcbiAgICovXHJcbiAgc3RhdGljIGFkZGVkQ29tYmF0YW50RnVsbChcclxuICAgIHBhcmFtcz86IE5ldFBhcmFtc1snQWRkZWRDb21iYXRhbnQnXSxcclxuICApOiBDYWN0Ym90QmFzZVJlZ0V4cDwnQWRkZWRDb21iYXRhbnQnPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIoXHJcbiAgICAgIHBhcmFtcyxcclxuICAgICAgJ0FkZGVkQ29tYmF0YW50JyxcclxuICAgICAgZGVmYXVsdFBhcmFtcygnQWRkZWRDb21iYXRhbnQnLCBSZWdleGVzLmxvZ1ZlcnNpb24pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTA0LTB4MDQtcmVtb3ZlY29tYmF0YW50XHJcbiAgICovXHJcbiAgc3RhdGljIHJlbW92aW5nQ29tYmF0YW50KFxyXG4gICAgcGFyYW1zPzogTmV0UGFyYW1zWydSZW1vdmVkQ29tYmF0YW50J10sXHJcbiAgKTogQ2FjdGJvdEJhc2VSZWdFeHA8J1JlbW92ZWRDb21iYXRhbnQnPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIoXHJcbiAgICAgIHBhcmFtcyxcclxuICAgICAgJ1JlbW92ZWRDb21iYXRhbnQnLFxyXG4gICAgICBkZWZhdWx0UGFyYW1zKCdSZW1vdmVkQ29tYmF0YW50JywgUmVnZXhlcy5sb2dWZXJzaW9uKSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yNi0weDFhLW5ldHdvcmtidWZmXHJcbiAgICovXHJcbiAgc3RhdGljIGdhaW5zRWZmZWN0KHBhcmFtcz86IE5ldFBhcmFtc1snR2FpbnNFZmZlY3QnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdHYWluc0VmZmVjdCc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdHYWluc0VmZmVjdCcsIGRlZmF1bHRQYXJhbXMoJ0dhaW5zRWZmZWN0JywgUmVnZXhlcy5sb2dWZXJzaW9uKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQcmVmZXIgZ2FpbnNFZmZlY3Qgb3ZlciB0aGlzIGZ1bmN0aW9uIHVubGVzcyB5b3UgcmVhbGx5IG5lZWQgZXh0cmEgZGF0YS5cclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0zOC0weDI2LW5ldHdvcmtzdGF0dXNlZmZlY3RzXHJcbiAgICovXHJcbiAgc3RhdGljIHN0YXR1c0VmZmVjdEV4cGxpY2l0KFxyXG4gICAgcGFyYW1zPzogTmV0UGFyYW1zWydTdGF0dXNFZmZlY3QnXSxcclxuICApOiBDYWN0Ym90QmFzZVJlZ0V4cDwnU3RhdHVzRWZmZWN0Jz4ge1xyXG4gICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ1N0YXR1c0VmZmVjdCcsIGRlZmF1bHRQYXJhbXMoJ1N0YXR1c0VmZmVjdCcsIFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMzAtMHgxZS1uZXR3b3JrYnVmZnJlbW92ZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBsb3Nlc0VmZmVjdChwYXJhbXM/OiBOZXRQYXJhbXNbJ0xvc2VzRWZmZWN0J10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnTG9zZXNFZmZlY3QnPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnTG9zZXNFZmZlY3QnLCBkZWZhdWx0UGFyYW1zKCdMb3Nlc0VmZmVjdCcsIFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMzUtMHgyMy1uZXR3b3JrdGV0aGVyXHJcbiAgICovXHJcbiAgc3RhdGljIHRldGhlcihwYXJhbXM/OiBOZXRQYXJhbXNbJ1RldGhlciddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J1RldGhlcic+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdUZXRoZXInLCBkZWZhdWx0UGFyYW1zKCdUZXRoZXInLCBSZWdleGVzLmxvZ1ZlcnNpb24pKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqICd0YXJnZXQnIHdhcyBkZWZlYXRlZCBieSAnc291cmNlJ1xyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTI1LTB4MTktbmV0d29ya2RlYXRoXHJcbiAgICovXHJcbiAgc3RhdGljIHdhc0RlZmVhdGVkKHBhcmFtcz86IE5ldFBhcmFtc1snV2FzRGVmZWF0ZWQnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdXYXNEZWZlYXRlZCc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdXYXNEZWZlYXRlZCcsIGRlZmF1bHRQYXJhbXMoJ1dhc0RlZmVhdGVkJywgUmVnZXhlcy5sb2dWZXJzaW9uKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0wMC0weDAwLWxvZ2xpbmVcclxuICAgKi9cclxuICBzdGF0aWMgZWNobyhwYXJhbXM/OiBOZXRQYXJhbXNbJ0dhbWVMb2cnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdHYW1lTG9nJz4ge1xyXG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBwYXJhbXMgPSB7fTtcclxuICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoXHJcbiAgICAgIHBhcmFtcyxcclxuICAgICAgJ2VjaG8nLFxyXG4gICAgICBbJ3R5cGUnLCAndGltZXN0YW1wJywgJ2NvZGUnLCAnbmFtZScsICdsaW5lJywgJ2NhcHR1cmUnXSxcclxuICAgICk7XHJcbiAgICBwYXJhbXMuY29kZSA9ICcwMDM4JztcclxuICAgIHJldHVybiBSZWdleGVzLmdhbWVMb2cocGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTAwLTB4MDAtbG9nbGluZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBkaWFsb2cocGFyYW1zPzogTmV0UGFyYW1zWydHYW1lTG9nJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnR2FtZUxvZyc+IHtcclxuICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAndW5kZWZpbmVkJylcclxuICAgICAgcGFyYW1zID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKFxyXG4gICAgICBwYXJhbXMsXHJcbiAgICAgICdkaWFsb2cnLFxyXG4gICAgICBbJ3R5cGUnLCAndGltZXN0YW1wJywgJ2NvZGUnLCAnbmFtZScsICdsaW5lJywgJ2NhcHR1cmUnXSxcclxuICAgICk7XHJcbiAgICBwYXJhbXMuY29kZSA9ICcwMDQ0JztcclxuICAgIHJldHVybiBSZWdleGVzLmdhbWVMb2cocGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTAwLTB4MDAtbG9nbGluZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBtZXNzYWdlKHBhcmFtcz86IE5ldFBhcmFtc1snR2FtZUxvZyddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0dhbWVMb2cnPiB7XHJcbiAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgIHBhcmFtcyA9IHt9O1xyXG4gICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICAnbWVzc2FnZScsXHJcbiAgICAgIFsndHlwZScsICd0aW1lc3RhbXAnLCAnY29kZScsICduYW1lJywgJ2xpbmUnLCAnY2FwdHVyZSddLFxyXG4gICAgKTtcclxuICAgIHBhcmFtcy5jb2RlID0gJzA4MzknO1xyXG4gICAgcmV0dXJuIFJlZ2V4ZXMuZ2FtZUxvZyhwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZmllbGRzOiBjb2RlLCBuYW1lLCBsaW5lLCBjYXB0dXJlXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMDAtMHgwMC1sb2dsaW5lXHJcbiAgICovXHJcbiAgc3RhdGljIGdhbWVMb2cocGFyYW1zPzogTmV0UGFyYW1zWydHYW1lTG9nJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnR2FtZUxvZyc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdHYW1lTG9nJywgZGVmYXVsdFBhcmFtcygnR2FtZUxvZycsIFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMDAtMHgwMC1sb2dsaW5lXHJcbiAgICovXHJcbiAgc3RhdGljIGdhbWVOYW1lTG9nKHBhcmFtcz86IE5ldFBhcmFtc1snR2FtZUxvZyddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0dhbWVMb2cnPiB7XHJcbiAgICAvLyBCYWNrd2FyZHMgY29tcGF0YWJpbGl0eS5cclxuICAgIHJldHVybiBSZWdleGVzLmdhbWVMb2cocGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTEyLTB4MGMtcGxheWVyc3RhdHNcclxuICAgKi9cclxuICBzdGF0aWMgc3RhdENoYW5nZShwYXJhbXM/OiBOZXRQYXJhbXNbJ1BsYXllclN0YXRzJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnUGxheWVyU3RhdHMnPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnUGxheWVyU3RhdHMnLCBkZWZhdWx0UGFyYW1zKCdQbGF5ZXJTdGF0cycsIFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMDEtMHgwMS1jaGFuZ2V6b25lXHJcbiAgICovXHJcbiAgc3RhdGljIGNoYW5nZVpvbmUocGFyYW1zPzogTmV0UGFyYW1zWydDaGFuZ2Vab25lJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnQ2hhbmdlWm9uZSc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdDaGFuZ2Vab25lJywgZGVmYXVsdFBhcmFtcygnQ2hhbmdlWm9uZScsIFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMzMtMHgyMS1uZXR3b3JrNmQtYWN0b3ItY29udHJvbFxyXG4gICAqL1xyXG4gIHN0YXRpYyBuZXR3b3JrNmQocGFyYW1zPzogTmV0UGFyYW1zWydBY3RvckNvbnRyb2wnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdBY3RvckNvbnRyb2wnPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnQWN0b3JDb250cm9sJywgZGVmYXVsdFBhcmFtcygnQWN0b3JDb250cm9sJywgUmVnZXhlcy5sb2dWZXJzaW9uKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0zNC0weDIyLW5ldHdvcmtuYW1ldG9nZ2xlXHJcbiAgICovXHJcbiAgc3RhdGljIG5hbWVUb2dnbGUocGFyYW1zPzogTmV0UGFyYW1zWydOYW1lVG9nZ2xlJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnTmFtZVRvZ2dsZSc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdOYW1lVG9nZ2xlJywgZGVmYXVsdFBhcmFtcygnTmFtZVRvZ2dsZScsIFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtNDAtMHgyOC1tYXBcclxuICAgKi9cclxuICBzdGF0aWMgbWFwKHBhcmFtcz86IE5ldFBhcmFtc1snTWFwJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnTWFwJz4ge1xyXG4gICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ01hcCcsIGRlZmF1bHRQYXJhbXMoJ01hcCcsIFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtNDEtMHgyOS1zeXN0ZW1sb2dtZXNzYWdlXHJcbiAgICovXHJcbiAgc3RhdGljIHN5c3RlbUxvZ01lc3NhZ2UoXHJcbiAgICBwYXJhbXM/OiBOZXRQYXJhbXNbJ1N5c3RlbUxvZ01lc3NhZ2UnXSxcclxuICApOiBDYWN0Ym90QmFzZVJlZ0V4cDwnU3lzdGVtTG9nTWVzc2FnZSc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICAnU3lzdGVtTG9nTWVzc2FnZScsXHJcbiAgICAgIGRlZmF1bHRQYXJhbXMoJ1N5c3RlbUxvZ01lc3NhZ2UnLCBSZWdleGVzLmxvZ1ZlcnNpb24pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgYnVpbGRpbmcgbmFtZWQgY2FwdHVyZSBncm91cFxyXG4gICAqL1xyXG4gIHN0YXRpYyBtYXliZUNhcHR1cmUoXHJcbiAgICBjYXB0dXJlOiBib29sZWFuLFxyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgdmFsdWU6IHN0cmluZyB8IHN0cmluZ1tdIHwgdW5kZWZpbmVkLFxyXG4gICAgZGVmYXVsdFZhbHVlPzogc3RyaW5nLFxyXG4gICk6IHN0cmluZyB7XHJcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcclxuICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWUgPz8gbWF0Y2hEZWZhdWx0O1xyXG4gICAgdmFsdWUgPSBSZWdleGVzLmFueU9mKHZhbHVlKTtcclxuICAgIHJldHVybiBjYXB0dXJlID8gUmVnZXhlcy5uYW1lZENhcHR1cmUobmFtZSwgdmFsdWUpIDogdmFsdWU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgb3B0aW9uYWwoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAoPzoke3N0cn0pP2A7XHJcbiAgfVxyXG5cclxuICAvLyBDcmVhdGVzIGEgbmFtZWQgcmVnZXggY2FwdHVyZSBncm91cCBuYW1lZCB8bmFtZXwgZm9yIHRoZSBtYXRjaCB8dmFsdWV8LlxyXG4gIHN0YXRpYyBuYW1lZENhcHR1cmUobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmIChuYW1lLmluY2x1ZGVzKCc+JykpXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1wiJyArIG5hbWUgKyAnXCIgY29udGFpbnMgXCI+XCIuJyk7XHJcbiAgICBpZiAobmFtZS5pbmNsdWRlcygnPCcpKVxyXG4gICAgICBjb25zb2xlLmVycm9yKCdcIicgKyBuYW1lICsgJ1wiIGNvbnRhaW5zIFwiPlwiLicpO1xyXG5cclxuICAgIHJldHVybiAnKD88JyArIG5hbWUgKyAnPicgKyB2YWx1ZSArICcpJztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnZlbmllbmNlIGZvciB0dXJuaW5nIG11bHRpcGxlIGFyZ3MgaW50byBhIHVuaW9uZWQgcmVndWxhciBleHByZXNzaW9uLlxyXG4gICAqIGFueU9mKHgsIHksIHopIG9yIGFueU9mKFt4LCB5LCB6XSkgZG8gdGhlIHNhbWUgdGhpbmcsIGFuZCByZXR1cm4gKD86eHx5fHopLlxyXG4gICAqIGFueU9mKHgpIG9yIGFueU9mKHgpIG9uIGl0cyBvd24gc2ltcGxpZmllcyB0byBqdXN0IHguXHJcbiAgICogYXJncyBtYXkgYmUgc3RyaW5ncyBvciBSZWdFeHAsIGFsdGhvdWdoIGFueSBhZGRpdGlvbmFsIG1hcmtlcnMgdG8gUmVnRXhwXHJcbiAgICogbGlrZSAvaW5zZW5zaXRpdmUvaSBhcmUgZHJvcHBlZC5cclxuICAgKi9cclxuICBzdGF0aWMgYW55T2YoLi4uYXJnczogKHN0cmluZyB8IHN0cmluZ1tdIHwgUmVnRXhwKVtdKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGFueU9mQXJyYXkgPSAoYXJyYXk6IChzdHJpbmcgfCBSZWdFeHApW10pOiBzdHJpbmcgPT4ge1xyXG4gICAgICByZXR1cm4gYCg/OiR7YXJyYXkubWFwKChlbGVtKSA9PiBlbGVtIGluc3RhbmNlb2YgUmVnRXhwID8gZWxlbS5zb3VyY2UgOiBlbGVtKS5qb2luKCd8Jyl9KWA7XHJcbiAgICB9O1xyXG4gICAgbGV0IGFycmF5OiAoc3RyaW5nIHwgUmVnRXhwKVtdID0gW107XHJcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnc1swXSkpXHJcbiAgICAgICAgYXJyYXkgPSBhcmdzWzBdO1xyXG4gICAgICBlbHNlIGlmIChhcmdzWzBdICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgYXJyYXkgPSBbYXJnc1swXV07XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBhcnJheSA9IFtdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gVE9ETzogbW9yZSBhY2N1cmF0ZSB0eXBlIGluc3RlYWQgb2YgYGFzYCBjYXN0XHJcbiAgICAgIGFycmF5ID0gYXJncyBhcyBzdHJpbmdbXTtcclxuICAgIH1cclxuICAgIHJldHVybiBhbnlPZkFycmF5KGFycmF5KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwYXJzZShyZWdleHBTdHJpbmc6IFJlZ0V4cCB8IHN0cmluZyB8IENhY3Rib3RCYXNlUmVnRXhwPCdOb25lJz4pOiBSZWdFeHAge1xyXG4gICAgY29uc3Qga0NhY3Rib3RDYXRlZ29yaWVzID0ge1xyXG4gICAgICBUaW1lc3RhbXA6ICdeLnsxNH0nLFxyXG4gICAgICBOZXRUaW1lc3RhbXA6ICcuezMzfScsXHJcbiAgICAgIE5ldEZpZWxkOiAnKD86W158XSpcXFxcfCknLFxyXG4gICAgICBMb2dUeXBlOiAnWzAtOUEtRmEtZl17Mn0nLFxyXG4gICAgICBBYmlsaXR5Q29kZTogJ1swLTlBLUZhLWZdezEsOH0nLFxyXG4gICAgICBPYmplY3RJZDogJ1swLTlBLUZdezh9JyxcclxuICAgICAgLy8gTWF0Y2hlcyBhbnkgY2hhcmFjdGVyIG5hbWUgKGluY2x1ZGluZyBlbXB0eSBzdHJpbmdzIHdoaWNoIHRoZSBGRlhJVlxyXG4gICAgICAvLyBBQ1QgcGx1Z2luIGNhbiBnZW5lcmF0ZSB3aGVuIHVua25vd24pLlxyXG4gICAgICBOYW1lOiAnKD86W15cXFxcczp8XSsoPzogW15cXFxcczp8XSspP3wpJyxcclxuICAgICAgLy8gRmxvYXRzIGNhbiBoYXZlIGNvbW1hIGFzIHNlcGFyYXRvciBpbiBGRlhJViBwbHVnaW4gb3V0cHV0OiBodHRwczovL2dpdGh1Yi5jb20vcmF2YWhuL0ZGWElWX0FDVF9QbHVnaW4vaXNzdWVzLzEzN1xyXG4gICAgICBGbG9hdDogJy0/WzAtOV0rKD86Wy4sXVswLTldKyk/KD86RS0/WzAtOV0rKT8nLFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBBbGwgcmVnZXhlcyBpbiBjYWN0Ym90IGFyZSBjYXNlIGluc2Vuc2l0aXZlLlxyXG4gICAgLy8gVGhpcyBhdm9pZHMgaGVhZGFjaGVzIGFzIHRoaW5ncyBsaWtlIGBWaWNlIGFuZCBWYW5pdHlgIHR1cm5zIGludG9cclxuICAgIC8vIGBWaWNlIEFuZCBWYW5pdHlgLCBlc3BlY2lhbGx5IGZvciBGcmVuY2ggYW5kIEdlcm1hbi4gIEl0IGFwcGVhcnMgdG9cclxuICAgIC8vIGhhdmUgYSB+MjAlIHJlZ2V4IHBhcnNpbmcgb3ZlcmhlYWQsIGJ1dCBhdCBsZWFzdCB0aGV5IHdvcmsuXHJcbiAgICBsZXQgbW9kaWZpZXJzID0gJ2knO1xyXG4gICAgaWYgKHJlZ2V4cFN0cmluZyBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICBtb2RpZmllcnMgKz0gKHJlZ2V4cFN0cmluZy5nbG9iYWwgPyAnZycgOiAnJykgK1xyXG4gICAgICAgIChyZWdleHBTdHJpbmcubXVsdGlsaW5lID8gJ20nIDogJycpO1xyXG4gICAgICByZWdleHBTdHJpbmcgPSByZWdleHBTdHJpbmcuc291cmNlO1xyXG4gICAgfVxyXG4gICAgcmVnZXhwU3RyaW5nID0gcmVnZXhwU3RyaW5nLnJlcGxhY2UoL1xcXFx5XFx7KC4qPylcXH0vZywgKG1hdGNoLCBncm91cCkgPT4ge1xyXG4gICAgICByZXR1cm4ga0NhY3Rib3RDYXRlZ29yaWVzW2dyb3VwIGFzIGtleW9mIHR5cGVvZiBrQ2FjdGJvdENhdGVnb3JpZXNdIHx8IG1hdGNoO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleHBTdHJpbmcsIG1vZGlmaWVycyk7XHJcbiAgfVxyXG5cclxuICAvLyBMaWtlIFJlZ2V4LlJlZ2V4ZXMucGFyc2UsIGJ1dCBmb3JjZSBnbG9iYWwgZmxhZy5cclxuICBzdGF0aWMgcGFyc2VHbG9iYWwocmVnZXhwU3RyaW5nOiBSZWdFeHAgfCBzdHJpbmcpOiBSZWdFeHAge1xyXG4gICAgY29uc3QgcmVnZXggPSBSZWdleGVzLnBhcnNlKHJlZ2V4cFN0cmluZyk7XHJcbiAgICBsZXQgbW9kaWZpZXJzID0gJ2dpJztcclxuICAgIGlmIChyZWdleHBTdHJpbmcgaW5zdGFuY2VvZiBSZWdFeHApXHJcbiAgICAgIG1vZGlmaWVycyArPSAocmVnZXhwU3RyaW5nLm11bHRpbGluZSA/ICdtJyA6ICcnKTtcclxuICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4LnNvdXJjZSwgbW9kaWZpZXJzKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB0cnVlSWZVbmRlZmluZWQodmFsdWU/OiBib29sZWFuKTogYm9vbGVhbiB7XHJcbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiAhIXZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHZhbGlkYXRlUGFyYW1zKFxyXG4gICAgZjogUmVhZG9ubHk8eyBbczogc3RyaW5nXTogdW5rbm93biB9PixcclxuICAgIGZ1bmNOYW1lOiBzdHJpbmcsXHJcbiAgICBwYXJhbXM6IFJlYWRvbmx5PHN0cmluZ1tdPixcclxuICApOiB2b2lkIHtcclxuICAgIGlmIChmID09PSBudWxsKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBpZiAodHlwZW9mIGYgIT09ICdvYmplY3QnKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZik7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgIGlmICghcGFyYW1zLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICBgJHtmdW5jTmFtZX06IGludmFsaWQgcGFyYW1ldGVyICcke2tleX0nLiAgYCArXHJcbiAgICAgICAgICAgIGBWYWxpZCBwYXJhbXM6ICR7SlNPTi5zdHJpbmdpZnkocGFyYW1zKX1gLFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8gVGhpcyBpcyBtZWFudCB0byBiZSB1c2VkIGluIGEgdHJpZ2dlciBhcyBzdWNoOlxyXG4vLyB7XHJcbi8vICAgaWQ6ICdTb21lIHRhbmtidXN0ZXInLFxyXG4vLyAgIHJlZ2V4OiBSZWdleGVzLnN0YXJ0c1VzaW5nKHtzb3VyY2U6ICdZZSBPbGRlIEJvc3NlJywgaWQ6ICc2NjYnfSksXHJcbi8vICAgY29uZGl0aW9uOiBDb25kaXRpb25zLmNhcmVzQWJvdXRNYWdpY2FsKGRhdGEpLFxyXG4vLyAgIHJlc3BvbnNlOiBSZXNwb25zZXMudGFua2J1c3RlcigpLFxyXG4vLyB9LFxyXG4vL1xyXG4vLyBOb3RlOiBCcmVha2luZyBvdXQgdGhlIGNvbmRpdGlvbiBsaWtlIHRoaXMgbGV0cyBwZW9wbGUgb3ZlcnJpZGUgaXQgaWYgdGhleVxyXG4vLyBhbHdheXMgKG9yIG5ldmVyKSB3YW50IHRvIGtub3cgYWJvdXQgaXQsIHJhdGhlciB0aGFuIGhpZGluZyB0aGUgbG9naWMgaW5zaWRlXHJcbi8vIHRoZSB0YW5rYnVzdGVyIGNhbGxiYWNrIHdpdGggYSBcImlzIGhlYWxlclwiIGNoZWNrLlxyXG4vL1xyXG4vLyBJZiBkYXRhLnJvbGUgaXMgdXNlZCwgaXQgc2hvdWxkIGJlIG9ubHkgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGFsZXJ0IGxldmVscyxcclxuLy8gYW5kIG5vdCB3aGV0aGVyIGEgbWVzc2FnZSBpcyBzZW50IGF0IGFsbC5cclxuLy9cclxuLy8gQWx0aG91Z2ggdGhpcyBpcyBub3QgdHJ1ZSBvZiBgcmVzcG9uc2U6IGAgZmllbGRzIG9uIHRyaWdnZXJzIGluIGdlbmVyYWwsXHJcbi8vIGFsbCByZXNwb25zZXMgaW4gdGhpcyBmaWxlIHNob3VsZCBlaXRoZXIgcmV0dXJuIGFuIG9iamVjdCBvciBhIHNpbmdsZVxyXG4vLyBmdW5jdGlvbiB0aGF0IHNldHMgb3V0cHV0U3RyaW5ncyBhbmQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aG91dCBkb2luZ1xyXG4vLyBhbnl0aGluZyB3aXRoIGRhdGEgb3IgbWF0Y2hlcy4gIFNlZSBgcmVzcG9uc2VzX3Rlc3QuanNgLlxyXG5cclxuaW1wb3J0IHsgUmFpZGJvc3NEYXRhIGFzIERhdGEgfSBmcm9tICcuLi90eXBlcy9kYXRhJztcclxuaW1wb3J0IHsgTWF0Y2hlcyB9IGZyb20gJy4uL3R5cGVzL25ldF9tYXRjaGVzJztcclxuaW1wb3J0IHtcclxuICBMb2NhbGVUZXh0LFxyXG4gIExvb3NlVHJpZ2dlcixcclxuICBPdXRwdXQsXHJcbiAgUmVzcG9uc2VGdW5jLFxyXG4gIFJlc3BvbnNlT3V0cHV0LFxyXG4gIFRhcmdldGVkTWF0Y2hlcyxcclxuICBUcmlnZ2VyRnVuYyxcclxuICBUcmlnZ2VyT3V0cHV0LFxyXG59IGZyb20gJy4uL3R5cGVzL3RyaWdnZXInO1xyXG5cclxuaW1wb3J0IE91dHB1dHMgZnJvbSAnLi9vdXRwdXRzJztcclxuXHJcbnR5cGUgVGFyZ2V0ZWRSZXNwb25zZU91dHB1dCA9IFJlc3BvbnNlT3V0cHV0PERhdGEsIFRhcmdldGVkTWF0Y2hlcz47XHJcbnR5cGUgVGFyZ2V0ZWRSZXNwb25zZUZ1bmMgPSBSZXNwb25zZUZ1bmM8RGF0YSwgVGFyZ2V0ZWRNYXRjaGVzPjtcclxudHlwZSBUYXJnZXRlZEZ1bmMgPSBUcmlnZ2VyRnVuYzxEYXRhLCBUYXJnZXRlZE1hdGNoZXMsIFRyaWdnZXJPdXRwdXQ8RGF0YSwgVGFyZ2V0ZWRNYXRjaGVzPj47XHJcbnR5cGUgU3RhdGljUmVzcG9uc2VGdW5jID0gUmVzcG9uc2VGdW5jPERhdGEsIE1hdGNoZXM+O1xyXG5cclxuZXhwb3J0IGNvbnN0IHNldmVyaXR5TGlzdCA9IFsnaW5mbycsICdhbGVydCcsICdhbGFybSddIGFzIGNvbnN0O1xyXG5leHBvcnQgdHlwZSBTZXZlcml0eSA9IHR5cGVvZiBzZXZlcml0eUxpc3RbbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgU2V2VGV4dCA9ICdpbmZvVGV4dCcgfCAnYWxlcnRUZXh0JyB8ICdhbGFybVRleHQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGJ1aWx0SW5SZXNwb25zZVN0ciA9ICdjYWN0Ym90LWJ1aWx0aW4tcmVzcG9uc2UnO1xyXG5cclxuLy8gQWxsIHZhbGlkIHRyaWdnZXIgZmllbGRzLlxyXG5leHBvcnQgY29uc3QgdHJpZ2dlckZ1bmN0aW9uczogKGtleW9mIExvb3NlVHJpZ2dlcilbXSA9IFtcclxuICAnYWxhcm1UZXh0JyxcclxuICAnYWxlcnRUZXh0JyxcclxuICAnY29uZGl0aW9uJyxcclxuICAnZGVsYXlTZWNvbmRzJyxcclxuICAnZGlzYWJsZWQnLFxyXG4gICdkdXJhdGlvblNlY29uZHMnLFxyXG4gICdpZCcsXHJcbiAgJ3R5cGUnLFxyXG4gICdpbmZvVGV4dCcsXHJcbiAgJ3ByZVJ1bicsXHJcbiAgJ3Byb21pc2UnLFxyXG4gICdyZXNwb25zZScsXHJcbiAgJ3J1bicsXHJcbiAgJ3NvdW5kJyxcclxuICAnc291bmRWb2x1bWUnLFxyXG4gICdzdXBwcmVzc1NlY29uZHMnLFxyXG4gICd0dHMnLFxyXG4gICdvdXRwdXRTdHJpbmdzJyxcclxuXTtcclxuXHJcbi8vIFRyaWdnZXIgZmllbGRzIHRoYXQgY2FuIHByb2R1Y2UgdGV4dCBvdXRwdXQuXHJcbmV4cG9ydCBjb25zdCB0cmlnZ2VyVGV4dE91dHB1dEZ1bmN0aW9uczogKGtleW9mIExvb3NlVHJpZ2dlcilbXSA9IFtcclxuICAnYWxhcm1UZXh0JyxcclxuICAnYWxlcnRUZXh0JyxcclxuICAnaW5mb1RleHQnLFxyXG4gICdyZXNwb25zZScsXHJcbiAgJ3R0cycsXHJcbl07XHJcblxyXG4vLyBJZiBhIHRyaWdnZXIgaGFzIGFueSBvZiB0aGVzZSwgdGhlbiBpdCBoYXMgYSB2aXNpYmxlL2F1ZGlvIGVmZmVjdC5cclxuZXhwb3J0IGNvbnN0IHRyaWdnZXJPdXRwdXRGdW5jdGlvbnM6IChrZXlvZiBMb29zZVRyaWdnZXIpW10gPSBbXHJcbiAgLi4udHJpZ2dlclRleHRPdXRwdXRGdW5jdGlvbnMsXHJcbiAgJ3NvdW5kJyxcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZXZlcml0eU1hcDogeyBbc2V2IGluIFNldmVyaXR5XTogU2V2VGV4dCB9ID0ge1xyXG4gICdpbmZvJzogJ2luZm9UZXh0JyxcclxuICAnYWxlcnQnOiAnYWxlcnRUZXh0JyxcclxuICAnYWxhcm0nOiAnYWxhcm1UZXh0JyxcclxufTtcclxuXHJcbmNvbnN0IGdldFRleHQgPSAoc2V2OiBTZXZlcml0eSk6IFNldlRleHQgPT4ge1xyXG4gIGlmICghKHNldiBpbiBzZXZlcml0eU1hcCkpXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2V2ZXJpdHk6ICR7c2V2fS5gKTtcclxuICByZXR1cm4gc2V2ZXJpdHlNYXBbc2V2XTtcclxufTtcclxuXHJcbmNvbnN0IGRlZmF1bHRJbmZvVGV4dCA9IChzZXY/OiBTZXZlcml0eSk6IFNldlRleHQgPT4ge1xyXG4gIGlmICghc2V2KVxyXG4gICAgcmV0dXJuICdpbmZvVGV4dCc7XHJcbiAgcmV0dXJuIGdldFRleHQoc2V2KTtcclxufTtcclxuXHJcbmNvbnN0IGRlZmF1bHRBbGVydFRleHQgPSAoc2V2PzogU2V2ZXJpdHkpOiBTZXZUZXh0ID0+IHtcclxuICBpZiAoIXNldilcclxuICAgIHJldHVybiAnYWxlcnRUZXh0JztcclxuICByZXR1cm4gZ2V0VGV4dChzZXYpO1xyXG59O1xyXG5cclxuY29uc3QgZGVmYXVsdEFsYXJtVGV4dCA9IChzZXY/OiBTZXZlcml0eSk6IFNldlRleHQgPT4ge1xyXG4gIGlmICghc2V2KVxyXG4gICAgcmV0dXJuICdhbGFybVRleHQnO1xyXG4gIHJldHVybiBnZXRUZXh0KHNldik7XHJcbn07XHJcblxyXG5jb25zdCBnZXRUYXJnZXQgPSAobWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzKSA9PiB7XHJcbiAgLy8gT2Z0ZW4gdGFua2J1c3RlcnMgY2FuIGJlIGNhc3RlZCBieSB0aGUgYm9zcyBvbiB0aGUgYm9zcy5cclxuICAvLyBDb25zaWRlciB0aGlzIGFzIFwibm90IGhhdmluZyBhIHRhcmdldFwiLlxyXG4gIGlmIChtYXRjaGVzLnRhcmdldCA9PT0gbWF0Y2hlcy5zb3VyY2UpXHJcbiAgICByZXR1cm47XHJcbiAgcmV0dXJuIG1hdGNoZXMudGFyZ2V0O1xyXG59O1xyXG5cclxuY29uc3QgZ2V0U291cmNlID0gKG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcykgPT4ge1xyXG4gIHJldHVybiBtYXRjaGVzPy5zb3VyY2U7XHJcbn07XHJcblxyXG4vLyBGSVhNRTogbWFrZSB0aGlzIHdvcmsgZm9yIGFueSBudW1iZXIgb2YgcGFpcnMgb2YgcGFyYW1zXHJcbmNvbnN0IGNvbWJpbmVGdW5jcyA9IGZ1bmN0aW9uKFxyXG4gIHRleHQxOiBTZXZUZXh0LFxyXG4gIGZ1bmMxOiBUYXJnZXRlZEZ1bmMsXHJcbiAgdGV4dDI6IFNldlRleHQsXHJcbiAgZnVuYzI6IFRhcmdldGVkRnVuYyxcclxuKSB7XHJcbiAgY29uc3Qgb2JqOiBUYXJnZXRlZFJlc3BvbnNlT3V0cHV0ID0ge307XHJcblxyXG4gIGlmICh0ZXh0MSAhPT0gdGV4dDIpIHtcclxuICAgIG9ialt0ZXh0MV0gPSBmdW5jMTtcclxuICAgIG9ialt0ZXh0Ml0gPSBmdW5jMjtcclxuICB9IGVsc2Uge1xyXG4gICAgb2JqW3RleHQxXSA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIHJldHVybiBmdW5jMShkYXRhLCBtYXRjaGVzLCBvdXRwdXQpID8/IGZ1bmMyKGRhdGEsIG1hdGNoZXMsIG91dHB1dCk7XHJcbiAgICB9O1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG5cclxuY29uc3QgaXNQbGF5ZXJJZCA9IChpZD86IHN0cmluZykgPT4ge1xyXG4gIHJldHVybiBpZCAhPT0gdW5kZWZpbmVkICYmIGlkWzBdICE9PSAnNCc7XHJcbn07XHJcblxyXG4vLyBGb3IgcmVzcG9uc2VzIHRoYXQgdW5jb25kaXRpb25hbGx5IHJldHVybiBzdGF0aWMgdGV4dC5cclxuY29uc3Qgc3RhdGljUmVzcG9uc2UgPSAoZmllbGQ6IFNldlRleHQsIHRleHQ6IExvY2FsZVRleHQpOiBTdGF0aWNSZXNwb25zZUZ1bmMgPT4ge1xyXG4gIHJldHVybiAoX2RhdGE6IHVua25vd24sIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFtmaWVsZF06IChfZGF0YTogdW5rbm93biwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiBvdXRwdXQudGV4dD8uKCksXHJcbiAgICB9O1xyXG4gIH07XHJcbn07XHJcblxyXG50eXBlIFNpbmdsZVNldlRvUmVzcG9uc2VGdW5jID0gKHNldj86IFNldmVyaXR5KSA9PiBUYXJnZXRlZFJlc3BvbnNlRnVuYyB8IFN0YXRpY1Jlc3BvbnNlRnVuYztcclxudHlwZSBEb3VibGVTZXZUb1Jlc3BvbnNlRnVuYyA9ICh0YXJnZXRTZXY/OiBTZXZlcml0eSwgb3RoZXJTZXY/OiBTZXZlcml0eSkgPT4gVGFyZ2V0ZWRSZXNwb25zZUZ1bmM7XHJcbnR5cGUgUmVzcG9uc2VzTWFwID0ge1xyXG4gIFtyZXNwb25zZTogc3RyaW5nXTogU2luZ2xlU2V2VG9SZXNwb25zZUZ1bmMgfCBEb3VibGVTZXZUb1Jlc3BvbnNlRnVuYztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBSZXNwb25zZXMgPSB7XHJcbiAgdGFua0J1c3RlcjogKHRhcmdldFNldj86IFNldmVyaXR5LCBvdGhlclNldj86IFNldmVyaXR5KSA9PiB7XHJcbiAgICBjb25zdCBvdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBub1RhcmdldDogT3V0cHV0cy50YW5rQnVzdGVyLFxyXG4gICAgICBidXN0ZXJPbllvdTogT3V0cHV0cy50YW5rQnVzdGVyT25Zb3UsXHJcbiAgICAgIGJ1c3Rlck9uVGFyZ2V0OiBPdXRwdXRzLnRhbmtCdXN0ZXJPblBsYXllcixcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdGFyZ2V0RnVuYyA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKGRhdGEucm9sZSAhPT0gJ3RhbmsnICYmIGRhdGEucm9sZSAhPT0gJ2hlYWxlcicpXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5ub1RhcmdldD8uKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0YXJnZXQgPT09IGRhdGEubWUpXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5idXN0ZXJPbllvdT8uKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG90aGVyRnVuYyA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKGRhdGEucm9sZSA9PT0gJ3RhbmsnIHx8IGRhdGEucm9sZSA9PT0gJ2hlYWxlcicpXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5ub1RhcmdldD8uKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRhcmdldCA9PT0gZGF0YS5tZSlcclxuICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICByZXR1cm4gb3V0cHV0LmJ1c3Rlck9uVGFyZ2V0Py4oeyBwbGF5ZXI6IGRhdGEuU2hvcnROYW1lKHRhcmdldCkgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNvbWJpbmVkID0gY29tYmluZUZ1bmNzKFxyXG4gICAgICBkZWZhdWx0QWxlcnRUZXh0KHRhcmdldFNldiksXHJcbiAgICAgIHRhcmdldEZ1bmMsXHJcbiAgICAgIGRlZmF1bHRJbmZvVGV4dChvdGhlclNldiksXHJcbiAgICAgIG90aGVyRnVuYyxcclxuICAgICk7XHJcbiAgICByZXR1cm4gKF9kYXRhOiB1bmtub3duLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpOiBUYXJnZXRlZFJlc3BvbnNlT3V0cHV0ID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSBvdXRwdXRTdHJpbmdzO1xyXG4gICAgICByZXR1cm4gY29tYmluZWQ7XHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgdGFua0J1c3RlclN3YXA6IChidXN0ZXJTZXY/OiBTZXZlcml0eSwgc3dhcFNldj86IFNldmVyaXR5KSA9PiB7XHJcbiAgICBjb25zdCBvdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICB0YW5rU3dhcDogT3V0cHV0cy50YW5rU3dhcCxcclxuICAgICAgYnVzdGVyT25Zb3U6IE91dHB1dHMudGFua0J1c3Rlck9uWW91LFxyXG4gICAgICBidXN0ZXJPblRhcmdldDogT3V0cHV0cy50YW5rQnVzdGVyT25QbGF5ZXIsXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE5vdGU6IGJ1c3RlclNldiBhbmQgc3dhcFNldiBjYW4gYmUgdGhlIHNhbWUgcHJpb3JpdHkuXHJcbiAgICBjb25zdCB0YW5rU3dhcEZ1bmMgPSAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQobWF0Y2hlcyk7XHJcbiAgICAgIGlmIChkYXRhLnJvbGUgPT09ICd0YW5rJyAmJiB0YXJnZXQgIT09IGRhdGEubWUpXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC50YW5rU3dhcD8uKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgYnVzdGVyRnVuYyA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuXHJcbiAgICAgIGlmIChkYXRhLnJvbGUgPT09ICd0YW5rJyAmJiB0YXJnZXQgIT09IGRhdGEubWUpXHJcbiAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgaWYgKHRhcmdldCA9PT0gZGF0YS5tZSlcclxuICAgICAgICByZXR1cm4gb3V0cHV0LmJ1c3Rlck9uWW91Py4oKTtcclxuICAgICAgcmV0dXJuIG91dHB1dC5idXN0ZXJPblRhcmdldD8uKHsgcGxheWVyOiBkYXRhLlNob3J0TmFtZSh0YXJnZXQpIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBjb21iaW5lZCA9IGNvbWJpbmVGdW5jcyhcclxuICAgICAgZGVmYXVsdEFsYXJtVGV4dChzd2FwU2V2KSxcclxuICAgICAgdGFua1N3YXBGdW5jLFxyXG4gICAgICBkZWZhdWx0QWxlcnRUZXh0KGJ1c3RlclNldiksXHJcbiAgICAgIGJ1c3RlckZ1bmMsXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIChfZGF0YTogRGF0YSwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0gb3V0cHV0U3RyaW5ncztcclxuICAgICAgcmV0dXJuIGNvbWJpbmVkO1xyXG4gICAgfTtcclxuICB9LFxyXG4gIHRhbmtDbGVhdmU6IChzZXY/OiBTZXZlcml0eSkgPT5cclxuICAgIChfZGF0YTogRGF0YSwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICAgIGNsZWF2ZU9uWW91OiBPdXRwdXRzLnRhbmtDbGVhdmVPbllvdSxcclxuICAgICAgICBjbGVhdmVOb1RhcmdldDogT3V0cHV0cy50YW5rQ2xlYXZlLFxyXG4gICAgICAgIGF2b2lkQ2xlYXZlOiBPdXRwdXRzLmF2b2lkVGFua0NsZWF2ZSxcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBbZGVmYXVsdEluZm9UZXh0KHNldildOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG1hdGNoZXMpO1xyXG4gICAgICAgICAgaWYgKHRhcmdldCA9PT0gZGF0YS5tZSlcclxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dC5jbGVhdmVPbllvdT8uKCk7XHJcbiAgICAgICAgICBpZiAoZGF0YS5yb2xlID09PSAndGFuaycgfHwgZGF0YS5qb2IgPT09ICdCTFUnKSB7XHJcbiAgICAgICAgICAgIC8vIHRhcmdldGxlc3MgdGFuayBjbGVhdmVcclxuICAgICAgICAgICAgLy8gQkxVIHBsYXllcnMgc2hvdWxkIGFsd2F5cyBnZXQgdGhpcyBnZW5lcmljIGNsZWF2ZSBtZXNzYWdlLlxyXG4gICAgICAgICAgICAvLyBXZSBoYXZlIG5vIHJvYnVzdCB3YXkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhleSBoYXZlIHRhbmsgTWltaWNyeSBvbixcclxuICAgICAgICAgICAgLy8gYW5kIGl0J3MgcmVhbGx5IGFubm95aW5nIGZvciBhIEJMVSB0YW5rIHRvIGJlIHRvbGQgdG8gYXZvaWQgY2xlYXZlcyB3aGVuIHRoZXkgY2FuJ3QuXHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQuY2xlYXZlTm9UYXJnZXQ/LigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIG91dHB1dC5hdm9pZENsZWF2ZT8uKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgc2hhcmVkVGFua0J1c3RlcjogKHRhcmdldFNldj86IFNldmVyaXR5LCBvdGhlclNldj86IFNldmVyaXR5KSA9PiB7XHJcbiAgICBjb25zdCBvdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBzaGFyZWRUYW5rYnVzdGVyT25Zb3U6IE91dHB1dHMuc2hhcmVkVGFua2J1c3Rlck9uWW91LFxyXG4gICAgICBzaGFyZWRUYW5rYnVzdGVyT25UYXJnZXQ6IE91dHB1dHMuc2hhcmVkVGFua2J1c3Rlck9uUGxheWVyLFxyXG4gICAgICBzaGFyZWRUYW5rYnVzdGVyOiBPdXRwdXRzLnNoYXJlZFRhbmtidXN0ZXIsXHJcbiAgICAgIGF2b2lkQ2xlYXZlOiBPdXRwdXRzLmF2b2lkVGFua0NsZWF2ZSxcclxuICAgIH07XHJcbiAgICBjb25zdCB0YXJnZXRGdW5jID0gKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG1hdGNoZXMpO1xyXG4gICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoZGF0YS5yb2xlICE9PSAndGFuaycgJiYgZGF0YS5yb2xlICE9PSAnaGVhbGVyJylcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICByZXR1cm4gb3V0cHV0LnNoYXJlZFRhbmtidXN0ZXI/LigpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGFyZ2V0ID09PSBkYXRhLm1lKVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQuc2hhcmVkVGFua2J1c3Rlck9uWW91Py4oKTtcclxuICAgICAgaWYgKGRhdGEucm9sZSA9PT0gJ3RhbmsnIHx8IGRhdGEucm9sZSA9PT0gJ2hlYWxlcicpXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5zaGFyZWRUYW5rYnVzdGVyT25UYXJnZXQ/Lih7IHBsYXllcjogZGF0YS5TaG9ydE5hbWUodGFyZ2V0KSB9KTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgb3RoZXJGdW5jID0gKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG1hdGNoZXMpO1xyXG4gICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoZGF0YS5yb2xlID09PSAndGFuaycgfHwgZGF0YS5yb2xlID09PSAnaGVhbGVyJylcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICByZXR1cm4gb3V0cHV0LmF2b2lkQ2xlYXZlPy4oKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGFyZ2V0ID09PSBkYXRhLm1lIHx8IGRhdGEucm9sZSA9PT0gJ3RhbmsnIHx8IGRhdGEucm9sZSA9PT0gJ2hlYWxlcicpXHJcbiAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgcmV0dXJuIG91dHB1dC5hdm9pZENsZWF2ZT8uKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNvbWJpbmVkID0gY29tYmluZUZ1bmNzKFxyXG4gICAgICBkZWZhdWx0QWxlcnRUZXh0KHRhcmdldFNldiksXHJcbiAgICAgIHRhcmdldEZ1bmMsXHJcbiAgICAgIGRlZmF1bHRJbmZvVGV4dChvdGhlclNldiksXHJcbiAgICAgIG90aGVyRnVuYyxcclxuICAgICk7XHJcbiAgICByZXR1cm4gKF9kYXRhOiB1bmtub3duLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpOiBUYXJnZXRlZFJlc3BvbnNlT3V0cHV0ID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSBvdXRwdXRTdHJpbmdzO1xyXG4gICAgICByZXR1cm4gY29tYmluZWQ7XHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgbWluaUJ1c3RlcjogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5taW5pQnVzdGVyKSxcclxuICBhb2U6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuYW9lKSxcclxuICBiaWdBb2U6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuYmlnQW9lKSxcclxuICBzcHJlYWQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuc3ByZWFkKSxcclxuICAvLyBmb3Igc3RhY2sgbWFya2VyIHNpdHVhdGlvbnMuXHJcbiAgc3RhY2tNYXJrZXI6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLnN0YWNrTWFya2VyKSxcclxuICAvLyBmb3IgZ2V0dGluZyB0b2dldGhlciB3aXRob3V0IHN0YWNrIG1hcmtlclxyXG4gIGdldFRvZ2V0aGVyOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nZXRUb2dldGhlciksXHJcbiAgc3RhY2tNYXJrZXJPbjogKHNldj86IFNldmVyaXR5KSA9PlxyXG4gICAgKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgICAgc3RhY2tPbllvdTogT3V0cHV0cy5zdGFja09uWW91LFxyXG4gICAgICAgIHN0YWNrT25UYXJnZXQ6IE91dHB1dHMuc3RhY2tPblBsYXllcixcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgICAgIGlmICh0YXJnZXQgPT09IGRhdGEubWUpXHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQuc3RhY2tPbllvdT8uKCk7XHJcbiAgICAgICAgICByZXR1cm4gb3V0cHV0LnN0YWNrT25UYXJnZXQ/Lih7IHBsYXllcjogZGF0YS5TaG9ydE5hbWUodGFyZ2V0KSB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuICBzdGFja01pZGRsZTogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5zdGFja01pZGRsZSksXHJcbiAgZG9yaXRvU3RhY2s6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLmRvcml0b1N0YWNrKSxcclxuICBzcHJlYWRUaGVuU3RhY2s6IChzZXY/OiBTZXZlcml0eSkgPT4ge1xyXG4gICAgcmV0dXJuIHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5zcHJlYWRUaGVuU3RhY2spO1xyXG4gIH0sXHJcbiAgc3RhY2tUaGVuU3ByZWFkOiAoc2V2PzogU2V2ZXJpdHkpID0+IHtcclxuICAgIHJldHVybiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMuc3RhY2tUaGVuU3ByZWFkKTtcclxuICB9LFxyXG4gIGtub2NrYmFjazogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMua25vY2tiYWNrKSxcclxuICBrbm9ja2JhY2tPbjogKHRhcmdldFNldj86IFNldmVyaXR5LCBvdGhlclNldj86IFNldmVyaXR5KSA9PiB7XHJcbiAgICBjb25zdCBvdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBrbm9ja2JhY2tPbllvdTogT3V0cHV0cy5rbm9ja2JhY2tPbllvdSxcclxuICAgICAga25vY2tiYWNrT25UYXJnZXQ6IE91dHB1dHMua25vY2tiYWNrT25QbGF5ZXIsXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHRhcmdldEZ1bmMgPSAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQobWF0Y2hlcyk7XHJcbiAgICAgIGlmICh0YXJnZXQgPT09IGRhdGEubWUpXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5rbm9ja2JhY2tPbllvdT8uKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG90aGVyRnVuYyA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgaWYgKHRhcmdldCAhPT0gZGF0YS5tZSlcclxuICAgICAgICByZXR1cm4gb3V0cHV0Lmtub2NrYmFja09uVGFyZ2V0Py4oeyBwbGF5ZXI6IGRhdGEuU2hvcnROYW1lKHRhcmdldCkgfSk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgY29tYmluZWQgPSBjb21iaW5lRnVuY3MoXHJcbiAgICAgIGRlZmF1bHRJbmZvVGV4dCh0YXJnZXRTZXYpLFxyXG4gICAgICB0YXJnZXRGdW5jLFxyXG4gICAgICBkZWZhdWx0SW5mb1RleHQob3RoZXJTZXYpLFxyXG4gICAgICBvdGhlckZ1bmMsXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIChfZGF0YTogRGF0YSwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0gb3V0cHV0U3RyaW5ncztcclxuICAgICAgcmV0dXJuIGNvbWJpbmVkO1xyXG4gICAgfTtcclxuICB9LFxyXG4gIGRyYXdJbjogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5kcmF3SW4pLFxyXG4gIGxvb2tUb3dhcmRzOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLmxvb2tUb3dhcmRzQm9zcyksXHJcbiAgbG9va0F3YXk6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMubG9va0F3YXkpLFxyXG4gIGxvb2tBd2F5RnJvbVRhcmdldDogKHNldj86IFNldmVyaXR5KSA9PlxyXG4gICAgKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgICAgbG9va0F3YXlGcm9tOiBPdXRwdXRzLmxvb2tBd2F5RnJvbVRhcmdldCxcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgICAgIGlmICh0YXJnZXQgPT09IGRhdGEubWUpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIGNvbnN0IG5hbWUgPSBpc1BsYXllcklkKG1hdGNoZXM/LnRhcmdldElkKSA/IGRhdGEuU2hvcnROYW1lKHRhcmdldCkgOiB0YXJnZXQ7XHJcbiAgICAgICAgICByZXR1cm4gb3V0cHV0Lmxvb2tBd2F5RnJvbT8uKHsgbmFtZTogbmFtZSB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuICBsb29rQXdheUZyb21Tb3VyY2U6IChzZXY/OiBTZXZlcml0eSkgPT5cclxuICAgIChfZGF0YTogRGF0YSwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICAgIGxvb2tBd2F5RnJvbTogT3V0cHV0cy5sb29rQXdheUZyb21UYXJnZXQsXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgW2RlZmF1bHRBbGVydFRleHQoc2V2KV06IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBzb3VyY2UgPSBnZXRTb3VyY2UobWF0Y2hlcyk7XHJcbiAgICAgICAgICBpZiAoc291cmNlID09PSBkYXRhLm1lKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICBjb25zdCBuYW1lID0gaXNQbGF5ZXJJZChtYXRjaGVzPy5zb3VyY2VJZCkgPyBkYXRhLlNob3J0TmFtZShzb3VyY2UpIDogc291cmNlO1xyXG4gICAgICAgICAgcmV0dXJuIG91dHB1dC5sb29rQXdheUZyb20/Lih7IG5hbWU6IG5hbWUgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgZ2V0QmVoaW5kOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nZXRCZWhpbmQpLFxyXG4gIGdvRnJvbnRPclNpZGVzOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nb0Zyb250T3JTaWRlcyksXHJcbiAgLy8gLmdldFVuZGVyKCkgaXMgdXNlZCB3aGVuIHlvdSBoYXZlIHRvIGdldCBpbnRvIHRoZSBib3NzZXMgaGl0Ym94XHJcbiAgZ2V0VW5kZXI6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuZ2V0VW5kZXIpLFxyXG4gIC8vIC5nZXRJbigpIGlzIG1vcmUgbGlrZSBcImdldCBjbG9zZSBidXQgbWF5YmUgZXZlbiBtZWxlZSByYW5nZSBpcyBmaW5lXCJcclxuICBnZXRJbjogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMuaW4pLFxyXG4gIC8vIC5nZXRPdXQoKSBtZWFucyBnZXQgZmFyIGF3YXlcclxuICBnZXRPdXQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLm91dCksXHJcbiAgb3V0T2ZNZWxlZTogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5vdXRPZk1lbGVlKSxcclxuICBnZXRJblRoZW5PdXQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuaW5UaGVuT3V0KSxcclxuICBnZXRPdXRUaGVuSW46IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMub3V0VGhlbkluKSxcclxuICBnZXRCYWNrVGhlbkZyb250OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLmJhY2tUaGVuRnJvbnQpLFxyXG4gIGdldEZyb250VGhlbkJhY2s6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuZnJvbnRUaGVuQmFjayksXHJcbiAgZ29NaWRkbGU6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLmdvSW50b01pZGRsZSksXHJcbiAgZ29SaWdodDogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMucmlnaHQpLFxyXG4gIGdvTGVmdDogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMubGVmdCksXHJcbiAgZ29XZXN0OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nZXRMZWZ0QW5kV2VzdCksXHJcbiAgZ29FYXN0OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nZXRSaWdodEFuZEVhc3QpLFxyXG4gIGdvRnJvbnRCYWNrOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nb0Zyb250QmFjayksXHJcbiAgZ29TaWRlczogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMuc2lkZXMpLFxyXG4gIC8vIC5raWxsQWRkcygpIGlzIHVzZWQgZm9yIGFkZHMgdGhhdCB3aWxsIGFsd2F5cyBiZSBhdmFpbGFibGVcclxuICBraWxsQWRkczogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5raWxsQWRkcyksXHJcbiAgLy8gLmtpbGxFeHRyYUFkZCgpIGlzIHVzZWQgZm9yIGFkZHMgdGhhdCBhcHBlYXIgaWYgYSBtZWNoYW5pYyB3YXMgbm90IHBsYXllZCBjb3JyZWN0bHlcclxuICBraWxsRXh0cmFBZGQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMua2lsbEV4dHJhQWRkKSxcclxuICBhd2F5RnJvbUZyb250OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5hd2F5RnJvbUZyb250KSxcclxuICBzbGVlcDogKHNldj86IFNldmVyaXR5KSA9PlxyXG4gICAgKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgICAgc2xlZXA6IE91dHB1dHMuc2xlZXBUYXJnZXQsXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgW2RlZmF1bHRBbGVydFRleHQoc2V2KV06IChfZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAgICAgY29uc3Qgc291cmNlID0gZ2V0U291cmNlKG1hdGNoZXMpO1xyXG4gICAgICAgICAgcmV0dXJuIG91dHB1dC5zbGVlcD8uKHsgbmFtZTogc291cmNlIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG4gIHN0dW5PckludGVycnVwdElmUG9zc2libGU6IChzZXY/OiBTZXZlcml0eSkgPT4ge1xyXG4gICAgcmV0dXJuIChfZGF0YTogRGF0YSwgX21hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgICAgc3R1bjogT3V0cHV0cy5zdHVuVGFyZ2V0LFxyXG4gICAgICAgIGludGVycnVwdDogT3V0cHV0cy5pbnRlcnJ1cHRUYXJnZXQsXHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIFtkZWZhdWx0QWxlcnRUZXh0KHNldildOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAgICAgY29uc3Qgc291cmNlID0gZ2V0U291cmNlKG1hdGNoZXMpO1xyXG4gICAgICAgICAgaWYgKGRhdGEuQ2FuU2lsZW5jZSgpKVxyXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0LmludGVycnVwdD8uKHsgbmFtZTogc291cmNlIH0pO1xyXG4gICAgICAgICAgZWxzZSBpZiAoZGF0YS5DYW5TdHVuKCkpXHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQuc3R1bj8uKHsgbmFtZTogc291cmNlIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgc3R1bjogKHNldj86IFNldmVyaXR5KSA9PlxyXG4gICAgKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgICAgc3R1bjogT3V0cHV0cy5zdHVuVGFyZ2V0LFxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIFtkZWZhdWx0QWxlcnRUZXh0KHNldildOiAoX2RhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGdldFNvdXJjZShtYXRjaGVzKTtcclxuICAgICAgICAgIHJldHVybiBvdXRwdXQuc3R1bj8uKHsgbmFtZTogc291cmNlIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG4gIGludGVycnVwdDogKHNldj86IFNldmVyaXR5KSA9PlxyXG4gICAgKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgICAgaW50ZXJydXB0OiBPdXRwdXRzLmludGVycnVwdFRhcmdldCxcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKF9kYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBzb3VyY2UgPSBnZXRTb3VyY2UobWF0Y2hlcyk7XHJcbiAgICAgICAgICByZXR1cm4gb3V0cHV0LmludGVycnVwdD8uKHsgbmFtZTogc291cmNlIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG4gIHByZXlPbjogKHRhcmdldFNldj86IFNldmVyaXR5LCBvdGhlclNldj86IFNldmVyaXR5KSA9PiB7XHJcbiAgICBjb25zdCBvdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBwcmV5T25Zb3U6IE91dHB1dHMucHJleU9uWW91LFxyXG4gICAgICBwcmV5T25UYXJnZXQ6IE91dHB1dHMucHJleU9uUGxheWVyLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB0YXJnZXRGdW5jID0gKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG1hdGNoZXMpO1xyXG4gICAgICBpZiAoZGF0YS5tZSA9PT0gdGFyZ2V0KVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQucHJleU9uWW91Py4oKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgb3RoZXJGdW5jID0gKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG1hdGNoZXMpO1xyXG4gICAgICBpZiAodGFyZ2V0ICE9PSBkYXRhLm1lKVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQucHJleU9uVGFyZ2V0Py4oeyBwbGF5ZXI6IGRhdGEuU2hvcnROYW1lKHRhcmdldCkgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNvbWJpbmVkID0gY29tYmluZUZ1bmNzKFxyXG4gICAgICBkZWZhdWx0QWxlcnRUZXh0KHRhcmdldFNldiksXHJcbiAgICAgIHRhcmdldEZ1bmMsXHJcbiAgICAgIGRlZmF1bHRJbmZvVGV4dChvdGhlclNldiksXHJcbiAgICAgIG90aGVyRnVuYyxcclxuICAgICk7XHJcbiAgICByZXR1cm4gKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSBvdXRwdXRTdHJpbmdzO1xyXG4gICAgICByZXR1cm4gY29tYmluZWQ7XHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgYXdheUZyb206IChzZXY/OiBTZXZlcml0eSkgPT5cclxuICAgIChfZGF0YTogRGF0YSwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICAgIGF3YXlGcm9tR3JvdXA6IE91dHB1dHMuYXdheUZyb21Hcm91cCxcclxuICAgICAgICBhd2F5RnJvbVRhcmdldDogT3V0cHV0cy5hd2F5RnJvbVBsYXllcixcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgICAgIGlmIChkYXRhLm1lID09PSB0YXJnZXQpXHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQuYXdheUZyb21Hcm91cD8uKCk7XHJcbiAgICAgICAgICByZXR1cm4gb3V0cHV0LmF3YXlGcm9tVGFyZ2V0Py4oeyBwbGF5ZXI6IGRhdGEuU2hvcnROYW1lKHRhcmdldCkgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgbWV0ZW9yT25Zb3U6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsYXJtVGV4dChzZXYpLCBPdXRwdXRzLm1ldGVvck9uWW91KSxcclxuICBzdG9wTW92aW5nOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGFybVRleHQoc2V2KSwgT3V0cHV0cy5zdG9wTW92aW5nKSxcclxuICBzdG9wRXZlcnl0aGluZzogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxhcm1UZXh0KHNldiksIE91dHB1dHMuc3RvcEV2ZXJ5dGhpbmcpLFxyXG4gIC8vIG1vdmUgYXdheSB0byBkb2RnZSBhb2VzXHJcbiAgbW92ZUF3YXk6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMubW92ZUF3YXkpLFxyXG4gIC8vIG1vdmUgYXJvdW5kIChlLmcuIGp1bXBpbmcpIHRvIGF2b2lkIGJlaW5nIGZyb3plblxyXG4gIG1vdmVBcm91bmQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMubW92ZUFyb3VuZCksXHJcbiAgYnJlYWtDaGFpbnM6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuYnJlYWtDaGFpbnMpLFxyXG4gIG1vdmVDaGFpbnNUb2dldGhlcjogKHNldj86IFNldmVyaXR5KSA9PlxyXG4gICAgc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMubW92ZUNoYWluc1RvZ2V0aGVyKSxcclxuICBlYXJ0aHNoYWtlcjogKHNldj86IFNldmVyaXR5KSA9PlxyXG4gICAgKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgICAgZWFydGhzaGFrZXI6IE91dHB1dHMuZWFydGhzaGFrZXJPbllvdSxcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgICAgIGlmICh0YXJnZXQgIT09IGRhdGEubWUpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIHJldHVybiBvdXRwdXQuZWFydGhzaGFrZXI/LigpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG4gIHdha2VVcDogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxhcm1UZXh0KHNldiksIE91dHB1dHMud2FrZVVwKSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8vIERvbid0IGdpdmUgYFJlc3BvbnNlc2AgYSB0eXBlIGluIGl0cyBkZWNsYXJhdGlvbiBzbyB0aGF0IGl0IGNhbiBiZSB0cmVhdGVkIGFzIG1vcmUgc3RyaWN0XHJcbi8vIHRoYW4gYFJlc3BvbnNlc01hcGAsIGJ1dCBkbyBhc3NlcnQgdGhhdCBpdHMgdHlwZSBpcyBjb3JyZWN0LiAgVGhpcyBhbGxvd3MgY2FsbGVycyB0byBrbm93XHJcbi8vIHdoaWNoIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgaW4gUmVzcG9uc2VzIHdpdGhvdXQgaGF2aW5nIHRvIGNvbmRpdGlvbmFsbHkgY2hlY2sgZm9yIHVuZGVmaW5lZC5cclxuY29uc3QgcmVzcG9uc2VNYXBUeXBlQXNzZXJ0aW9uOiBSZXNwb25zZXNNYXAgPSBSZXNwb25zZXM7XHJcbi8vIFN1cHByZXNzIHVudXNlZCB2YXJpYWJsZSB3YXJuaW5nLlxyXG5jb25zb2xlLmFzc2VydChyZXNwb25zZU1hcFR5cGVBc3NlcnRpb24pO1xyXG4iLCIvLyBUT0RPOiBGaXggaW1wb3J0L29yZGVyXHJcbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9vcmRlciAqL1xyXG5pbXBvcnQgeyBDYWN0Ym90Q29uZmlndXJhdG9yIH0gZnJvbSAnLi4vdWkvY29uZmlnL2NvbmZpZyc7XHJcbmltcG9ydCB7IGlzTGFuZywgTGFuZywgbGFuZ1RvTG9jYWxlIH0gZnJvbSAnLi9sYW5ndWFnZXMnO1xyXG5pbXBvcnQgeyBCYXNlT3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzL2RhdGEnO1xyXG5pbXBvcnQgeyBDYWN0Ym90TG9hZFVzZXJSZXQsIFNhdmVkQ29uZmlnLCBTYXZlZENvbmZpZ0VudHJ5IH0gZnJvbSAnLi4vdHlwZXMvZXZlbnQnO1xyXG5pbXBvcnQgeyBMb2NhbGVPYmplY3QsIExvY2FsZVRleHQgfSBmcm9tICcuLi90eXBlcy90cmlnZ2VyJztcclxuaW1wb3J0IHsgYWRkT3ZlcmxheUxpc3RlbmVyLCBjYWxsT3ZlcmxheUhhbmRsZXIgfSBmcm9tICcuL292ZXJsYXlfcGx1Z2luX2FwaSc7XHJcbmltcG9ydCB7IFVucmVhY2hhYmxlQ29kZSB9IGZyb20gJy4vbm90X3JlYWNoZWQnO1xyXG5cclxuLy8gVE9ETzpcclxuLy8gVGhlIGNvbnZlbnRpb24gb2YgXCJpbXBvcnQgWCBhcyBfWDsgY29uc3QgWCA9IF9YO1wiIGlzIGN1cnJlbnRseVxyXG4vLyBiZWluZyB1c2VkIGFzIGEgbWV0aG9kIHRvIHdvcmthcm91bmQgZm9yIGRvd25zdHJlYW0gY29kZVxyXG4vLyB0aGF0IGlzIHJ1bm5pbmcgdmlhIGV2YWwoKS4gQmVjYXVzZSBpbXBvcnRpbmcgc3RhdGVtZW50cyBkbyBub3RcclxuLy8gY3JlYXRlIGEgdmFyaWFibGUgb2YgdGhlIHNhbWUgbmFtZSwgdGhlIGV2YWwoKSdkIGNvZGUgZG9lcyBub3Qga25vd1xyXG4vLyBhYm91dCB0aGUgaW1wb3J0LCBhbmQgdGh1cyB0aHJvd3MgUmVmZXJlbmNlRXJyb3JzLlxyXG4vLyBVc2VkIGJ5IGRvd25zdHJlYW0gZXZhbFxyXG5pbXBvcnQgX0NvbmRpdGlvbnMgZnJvbSAnLi9jb25kaXRpb25zJztcclxuY29uc3QgQ29uZGl0aW9ucyA9IF9Db25kaXRpb25zO1xyXG5pbXBvcnQgX0NvbnRlbnRUeXBlIGZyb20gJy4vY29udGVudF90eXBlJztcclxuY29uc3QgQ29udGVudFR5cGUgPSBfQ29udGVudFR5cGU7XHJcbmltcG9ydCBfTmV0UmVnZXhlcyBmcm9tICcuL25ldHJlZ2V4ZXMnO1xyXG5jb25zdCBOZXRSZWdleGVzID0gX05ldFJlZ2V4ZXM7XHJcbmltcG9ydCBfUmVnZXhlcyBmcm9tICcuL3JlZ2V4ZXMnO1xyXG5jb25zdCBSZWdleGVzID0gX1JlZ2V4ZXM7XHJcbmltcG9ydCB7IFJlc3BvbnNlcyBhcyBfUmVzcG9uc2VzIH0gZnJvbSAnLi9yZXNwb25zZXMnO1xyXG5jb25zdCBSZXNwb25zZXMgPSBfUmVzcG9uc2VzO1xyXG5pbXBvcnQgX091dHB1dHMgZnJvbSAnLi9vdXRwdXRzJztcclxuY29uc3QgT3V0cHV0cyA9IF9PdXRwdXRzO1xyXG5pbXBvcnQgX1V0aWwgZnJvbSAnLi91dGlsJztcclxuY29uc3QgVXRpbCA9IF9VdGlsO1xyXG5pbXBvcnQgX1pvbmVJZCBmcm9tICcuL3pvbmVfaWQnO1xyXG5jb25zdCBab25lSWQgPSBfWm9uZUlkO1xyXG5pbXBvcnQgX1pvbmVJbmZvIGZyb20gJy4vem9uZV9pbmZvJztcclxuY29uc3QgWm9uZUluZm8gPSBfWm9uZUluZm87XHJcblxyXG4vLyBDb252aW5jZSBUeXBlU2NyaXB0IGFuZCBlc2xpbnQgdGhhdCB0aGVzZSBhcmUgdXNlZC4gIFR5cGVTY3JpcHQgZG9lc24ndCBoYXZlIGEgZ3JlYXQgd2F5XHJcbi8vIHRvIGRpc2FibGUgaW5kaXZpZHVhbCBydWxlcywgc28gdGhpcyBpcyBzYWZlciB0aGFuIGRpc2FibGluZyBhbGwgcnVsZXMuXHJcbmNvbnNvbGUuYXNzZXJ0KENvbmRpdGlvbnMpO1xyXG5jb25zb2xlLmFzc2VydChDb250ZW50VHlwZSk7XHJcbmNvbnNvbGUuYXNzZXJ0KE5ldFJlZ2V4ZXMpO1xyXG5jb25zb2xlLmFzc2VydChSZWdleGVzKTtcclxuY29uc29sZS5hc3NlcnQoUmVzcG9uc2VzKTtcclxuY29uc29sZS5hc3NlcnQoT3V0cHV0cyk7XHJcbmNvbnNvbGUuYXNzZXJ0KFV0aWwpO1xyXG5jb25zb2xlLmFzc2VydChab25lSWQpO1xyXG5jb25zb2xlLmFzc2VydChab25lSW5mbyk7XHJcblxyXG4vLyBUT0RPOiBtb3ZlIGFsbCBvZiB0aGVzZSB0byBjb25maWcuanM/XHJcbmV4cG9ydCB0eXBlIFVzZXJGaWxlQ2FsbGJhY2sgPSAoXHJcbiAganNGaWxlOiBzdHJpbmcsXHJcbiAgbG9jYWxGaWxlczogeyBbZmlsZW5hbWU6IHN0cmluZ106IHN0cmluZyB9LFxyXG4gIG9wdGlvbnM6IEJhc2VPcHRpb25zLFxyXG4gIGJhc2VQYXRoOiBzdHJpbmcsXHJcbikgPT4gdm9pZDtcclxuZXhwb3J0IHR5cGUgQ29uZmlnVmFsdWUgPSBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuO1xyXG5leHBvcnQgdHlwZSBDb25maWdFbnRyeSA9IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIG5hbWU6IExvY2FsZVRleHQ7XHJcbiAgdHlwZTogJ2NoZWNrYm94JyB8ICdzZWxlY3QnIHwgJ2Zsb2F0JyB8ICdpbnRlZ2VyJyB8ICdkaXJlY3RvcnknIHwgJ2h0bWwnO1xyXG4gIGh0bWw/OiBMb2NhbGVUZXh0O1xyXG4gIGRlZmF1bHQ6IENvbmZpZ1ZhbHVlO1xyXG4gIGRlYnVnPzogYm9vbGVhbjtcclxuICBkZWJ1Z09ubHk/OiBib29sZWFuO1xyXG4gIC8vIEZvciBzZWxlY3QuXHJcbiAgb3B0aW9ucz86IExvY2FsZU9iamVjdDx7IFtzZWxlY3RUZXh0OiBzdHJpbmddOiBzdHJpbmcgfT47XHJcbiAgc2V0dGVyRnVuYz86IChvcHRpb25zOiBCYXNlT3B0aW9ucywgdmFsdWU6IFNhdmVkQ29uZmlnRW50cnkpID0+IHZvaWQ7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBPcHRpb25zVGVtcGxhdGUgPSB7XHJcbiAgYnVpbGRFeHRyYVVJPzogKGJhc2U6IENhY3Rib3RDb25maWd1cmF0b3IsIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpID0+IHZvaWQ7XHJcbiAgcHJvY2Vzc0V4dHJhT3B0aW9ucz86IChvcHRpb25zOiBCYXNlT3B0aW9ucywgc2F2ZWRDb25maWc6IFNhdmVkQ29uZmlnRW50cnkpID0+IHZvaWQ7XHJcbiAgb3B0aW9uczogQ29uZmlnRW50cnlbXTtcclxufTtcclxuXHJcbmNsYXNzIFVzZXJDb25maWcge1xyXG4gIHB1YmxpYyBvcHRpb25UZW1wbGF0ZXM6IHsgW292ZXJsYXlOYW1lOiBzdHJpbmddOiBPcHRpb25zVGVtcGxhdGUgfSA9IHt9O1xyXG4gIHB1YmxpYyB1c2VyRmlsZUNhbGxiYWNrczogeyBbb3ZlcmxheU5hbWU6IHN0cmluZ106IFVzZXJGaWxlQ2FsbGJhY2sgfSA9IHt9O1xyXG4gIHB1YmxpYyBzYXZlZENvbmZpZzogU2F2ZWRDb25maWcgPSB7fTtcclxuXHJcbiAgZ2V0RGVmYXVsdEJhc2VPcHRpb25zKCk6IEJhc2VPcHRpb25zIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFBhcnNlckxhbmd1YWdlOiAnZW4nLFxyXG4gICAgICBTaG9ydExvY2FsZTogJ2VuJyxcclxuICAgICAgRGlzcGxheUxhbmd1YWdlOiAnZW4nLFxyXG4gICAgICBUZXh0QWxlcnRzRW5hYmxlZDogdHJ1ZSxcclxuICAgICAgU291bmRBbGVydHNFbmFibGVkOiB0cnVlLFxyXG4gICAgICBTcG9rZW5BbGVydHNFbmFibGVkOiBmYWxzZSxcclxuICAgICAgR3JvdXBTcG9rZW5BbGVydHNFbmFibGVkOiBmYWxzZSxcclxuICAgICAgU3lzdGVtSW5mbzoge1xyXG4gICAgICAgIGNhY3Rib3RWZXJzaW9uOiAnMC4wLjAuMCcsXHJcbiAgICAgICAgb3ZlcmxheVBsdWdpblZlcnNpb246ICcwLjAuMC4wJyxcclxuICAgICAgICBmZnhpdlBsdWdpblZlcnNpb246ICcwLjAuMC4wJyxcclxuICAgICAgICBhY3RWZXJzaW9uOiAnMC4wLjAuMCcsXHJcbiAgICAgICAgZ2FtZVJlZ2lvbjogJ0ludGVybmF0aW9uYWwnLFxyXG4gICAgICB9LFxyXG4gICAgICBEZWJ1ZzogZmFsc2UsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZXZhbFVzZXJGaWxlKGNvbnRlbnQ6IHN0cmluZywgb3B0aW9uczogQmFzZU9wdGlvbnMpOiB2b2lkIHtcclxuICAgIGNvbnN0IE9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgY29uc29sZS5hc3NlcnQoT3B0aW9ucyk7IC8vIFVzZWQgYnkgZXZhbC5cclxuXHJcbiAgICAvLyBUaGlzIGlzIHRoZSBvbmUgZXZhbCBjYWN0Ym90IHNob3VsZCBldmVyIG5lZWQsIHdoaWNoIGlzIGZvciBoYW5kbGluZyB1c2VyIGZpbGVzLlxyXG4gICAgLy8gQmVjYXVzZSB1c2VyIGZpbGVzIGNhbiBiZSBsb2NhdGVkIGFueXdoZXJlIG9uIGRpc2sgYW5kIHRoZXJlJ3MgYmFja3dhcmRzIGNvbXBhdFxyXG4gICAgLy8gaXNzdWVzLCBpdCdzIHVubGlrZWx5IHRoYXQgdGhlc2Ugd2lsbCBiZSBhYmxlIHRvIGJlIGFueXRoaW5nIGJ1dCBldmFsIGZvcmV2ZXIuXHJcbiAgICAvL1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tZXZhbCAqL1xyXG4gICAgZXZhbChjb250ZW50KTtcclxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tZXZhbCAqL1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPcHRpb25zKFxyXG4gICAgb3ZlcmxheU5hbWU6IHN0cmluZyxcclxuICAgIG9wdGlvblRlbXBsYXRlOiBPcHRpb25zVGVtcGxhdGUsXHJcbiAgICB1c2VyRmlsZUNhbGxiYWNrPzogVXNlckZpbGVDYWxsYmFjayxcclxuICApIHtcclxuICAgIHRoaXMub3B0aW9uVGVtcGxhdGVzW292ZXJsYXlOYW1lXSA9IG9wdGlvblRlbXBsYXRlO1xyXG4gICAgaWYgKHVzZXJGaWxlQ2FsbGJhY2spXHJcbiAgICAgIHRoaXMudXNlckZpbGVDYWxsYmFja3Nbb3ZlcmxheU5hbWVdID0gdXNlckZpbGVDYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHNvcnRVc2VyRmlsZXMoa2V5czogc3RyaW5nW10pIHtcclxuICAgIC8vIEhlbHBlciBkYXRhIHN0cnVjdHVyZSBmb3Igc3ViZGlyZWN0b3JpZXMuXHJcbiAgICBjb25zdCBzcGxpdEtleU1hcDogeyBbazogc3RyaW5nXTogc3RyaW5nW10gfSA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cylcclxuICAgICAgc3BsaXRLZXlNYXBba2V5XSA9IGtleS50b1VwcGVyQ2FzZSgpLnNwbGl0KC9bL1xcXFxdLyk7XHJcblxyXG4gICAgLy8gU29ydCBwYXRocyBhcyBhIGRlcHRoLWZpcnN0IGNhc2UtaW5zZW5zaXRpdmUgYWxwaGFiZXRpY2FsIHN1YmRpcmVjdG9yeSB3YWxrLCBmb2xsb3dlZCBieVxyXG4gICAgLy8gYWxsIGZpbGVzIHNvcnRlZCBjYXNlLWluc2Vuc2l0aXZlIGFscGhhYmV0aWNhbGx5IG9uY2UgYSBzdWJkaXIgaGFzIGJlZW4gcHJvY2Vzc2VkLCBlLmcuXHJcbiAgICAvLyAgKiBhL3NvbWUuanNcclxuICAgIC8vICAqIGIvc3ViZGlyMS96L3ovei9uZXN0ZWRfZmlsZS5qc1xyXG4gICAgLy8gICogYi9zdWJkaXIxL2ZpbGUuanNcclxuICAgIC8vICAqIGIvc3ViZGlyMi9maXJzdC5qc1xyXG4gICAgLy8gICogYi9zdWJkaXIyL3NlY29uZC5qc1xyXG4gICAgLy8gICogYi9zb21lX2ZpbGUuanNcclxuICAgIC8vICAqIHJvb3RfZmlsZTEuanNcclxuICAgIC8vICAqIHJvb3RfZmlsZTIuanNcclxuICAgIHJldHVybiBrZXlzLnNvcnQoKGtleUEsIGtleUIpID0+IHtcclxuICAgICAgY29uc3QgbGlzdEEgPSBzcGxpdEtleU1hcFtrZXlBXTtcclxuICAgICAgY29uc3QgbGlzdEIgPSBzcGxpdEtleU1hcFtrZXlCXTtcclxuICAgICAgaWYgKGxpc3RBID09PSB1bmRlZmluZWQgfHwgbGlzdEIgPT09IHVuZGVmaW5lZClcclxuICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgICBjb25zdCBtYXhMZW4gPSBNYXRoLm1heChsaXN0QS5sZW5ndGgsIGxpc3RCLmxlbmd0aCk7XHJcbiAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG1heExlbjsgKytpZHgpIHtcclxuICAgICAgICBjb25zdCBlbnRyeUEgPSBsaXN0QVtpZHhdO1xyXG4gICAgICAgIGNvbnN0IGVudHJ5QiA9IGxpc3RCW2lkeF07XHJcbiAgICAgICAgLy8gSW4gcHJhY3RpY2UsIHRoZXJlJ3MgYWx3YXlzIGF0IGxlYXN0IG9uZSBlbnRyeS5cclxuICAgICAgICBpZiAoZW50cnlBID09PSB1bmRlZmluZWQgfHwgZW50cnlCID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgICAgIC8vIElmIGJvdGggc3ViZGlyZWN0b3JpZXMgb3IgYm90aCBmaWxlcywgdGhlbiBjb21wYXJlIG5hbWVzLlxyXG4gICAgICAgIGNvbnN0IGlzTGFzdEEgPSBsaXN0QS5sZW5ndGggLSAxID09PSBpZHg7XHJcbiAgICAgICAgY29uc3QgaXNMYXN0QiA9IGxpc3RCLmxlbmd0aCAtIDEgPT09IGlkeDtcclxuXHJcbiAgICAgICAgaWYgKGlzTGFzdEEgJiYgaXNMYXN0Qikge1xyXG4gICAgICAgICAgLy8gSWYgYm90aCBsYXN0LCB0aGVuIHRoaXMgaXMgYSBmaWxlbmFtZSBjb21wYXJpc29uLlxyXG5cclxuICAgICAgICAgIC8vIEZpcnN0LCBjb21wYXJlIGZpbGVuYW1lIHdpdGhvdXQgZXh0ZW5zaW9uLlxyXG4gICAgICAgICAgY29uc3QgZmlsZUEgPSBlbnRyeUEucmVwbGFjZSgvXFwuW15cXC5dKiQvLCAnJyk7XHJcbiAgICAgICAgICBjb25zdCBmaWxlQiA9IGVudHJ5Qi5yZXBsYWNlKC9cXC5bXlxcLl0qJC8sICcnKTtcclxuICAgICAgICAgIGNvbnN0IGZpbGVuYW1lT25seURpZmYgPSBmaWxlQS5sb2NhbGVDb21wYXJlKGZpbGVCKTtcclxuICAgICAgICAgIGlmIChmaWxlbmFtZU9ubHlEaWZmKVxyXG4gICAgICAgICAgICByZXR1cm4gZmlsZW5hbWVPbmx5RGlmZjtcclxuXHJcbiAgICAgICAgICAvLyBTZWNvbmQsIGNvbXBhcmUgaW5jbHVkaW5nIHRoZSBleHRlbnNpb24uXHJcbiAgICAgICAgICAvLyBBbHdheXMgcmV0dXJuIHNvbWV0aGluZyBoZXJlLCBzZWUgbm90ZSBiZWxvdy5cclxuICAgICAgICAgIHJldHVybiBlbnRyeUEubG9jYWxlQ29tcGFyZShlbnRyeUIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzTGFzdEEgJiYgIWlzTGFzdEIpIHtcclxuICAgICAgICAgIC8vIElmIGJvdGggbm90IGxhc3QsIHRoaXMgaXMgYSBzdWJkaXJlY3RvcnkgY29tcGFyaXNvbi5cclxuICAgICAgICAgIGNvbnN0IGRpZmYgPSBlbnRyeUEubG9jYWxlQ29tcGFyZShlbnRyeUIpO1xyXG4gICAgICAgICAgaWYgKGRpZmYpXHJcbiAgICAgICAgICAgIHJldHVybiBkaWZmO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgaWYgaWR4IGlzIHRoZSBmaW5hbCBmb3IgZWFjaCwgd2Ugd291bGQgaGF2ZSByZXR1cm5lZCBhYm92ZS5cclxuICAgICAgICAvLyBTbywgY2hlY2sgaWYgZWl0aGVyIGEgb3IgYiBpcyBhdCB0aGUgZmluYWwgZW50cnkgaW4gc3BsaXRLZXlNYXAuXHJcbiAgICAgICAgLy8gSWYgc28sIHRoZW4gdGhlcmUncyBhIG1pc21hdGNoIGluIG51bWJlciBvZiBkaXJlY3RvcmllcywgYW5kIHdlIGtub3cgb25lXHJcbiAgICAgICAgLy8gdGhlIG9uZSB3aXRoIGEgZmlsZW5hbWUgc2hvdWxkIGJlIHNvcnRlZCBsYXN0LlxyXG5cclxuICAgICAgICBpZiAobGlzdEEubGVuZ3RoIC0gMSA8PSBpZHgpIHtcclxuICAgICAgICAgIC8vIGEgaGFzIGZld2VyIHN1YmRpcmVjdG9yaWVzLCBzbyBzaG91bGQgYmUgc29ydGVkIGxhc3QuXHJcbiAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpc3RCLmxlbmd0aCAtIDEgPD0gaWR4KSB7XHJcbiAgICAgICAgICAvLyBhIGhhcyBtb3JlIHN1YmRpcmVjdG9yaWVzLCBzbyBzaG91bGQgYmUgc29ydGVkIGZpcnN0LlxyXG4gICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gR2l2ZW4gYSBzZXQgb2YgcGF0aHMsIGFuIG92ZXJsYXlOYW1lLCBhbmQgYW4gZXh0ZW5zaW9uLCByZXR1cm4gYWxsIHBhdGhzIHdpdGhcclxuICAvLyB0aGF0IGV4dGVuc2lvbiB0aGF0IGhhdmUgYG92ZXJsYXlOYW1lYCBlaXRoZXIgYXMgdGhlaXIgZW50aXJlIGZpbGVuYW1lIChubyBzdWJkaXIpXHJcbiAgLy8gb3IgYXJlIGluc2lkZSBhIHJvb3QtbGV2ZWwgc3ViZGlyZWN0b3J5IG5hbWVkIGBvdmVybGF5TmFtZWAvICBUaGUgZXh0ZW5zaW9uIHNob3VsZFxyXG4gIC8vIGluY2x1ZGUgdGhlIHBlcmlvZCBzZXBhcmF0b3IsIGUuZy4gXCIuanNcIi4gIEFsbCBjb21wYXJpc29ucyBhcmUgY2FzZSBpbnNlbnNpdGl2ZS5cclxuICBmaWx0ZXJVc2VyRmlsZXMocGF0aHM6IHN0cmluZ1tdLCBvcmlnT3ZlcmxheU5hbWU6IHN0cmluZywgb3JpZ0V4dGVuc2lvbjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBleHRlbnNpb24gPSBvcmlnRXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBjb25zdCBvdmVybGF5TmFtZSA9IG9yaWdPdmVybGF5TmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgcmV0dXJuIHBhdGhzLmZpbHRlcigob3JpZ1BhdGgpID0+IHtcclxuICAgICAgY29uc3QgcGF0aCA9IG9yaWdQYXRoLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIGlmICghcGF0aC5lbmRzV2l0aChleHRlbnNpb24pKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgaWYgKHBhdGggPT09IGAke292ZXJsYXlOYW1lfSR7ZXh0ZW5zaW9ufWApXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIGlmIChwYXRoLnN0YXJ0c1dpdGgoYCR7b3ZlcmxheU5hbWV9L2ApIHx8IHBhdGguc3RhcnRzV2l0aChgJHtvdmVybGF5TmFtZX1cXFxcYCkpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckNvbmZpZ0xvY2F0aW9uKG92ZXJsYXlOYW1lOiBzdHJpbmcsIG9wdGlvbnM6IEJhc2VPcHRpb25zLCBjYWxsYmFjazogKCkgPT4gdm9pZCkge1xyXG4gICAgbGV0IGN1cnJlbnRseVJlbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgY29uc3QgcmVsb2FkT25jZSA9ICgpID0+IHtcclxuICAgICAgaWYgKGN1cnJlbnRseVJlbG9hZGluZylcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIGN1cnJlbnRseVJlbG9hZGluZyA9IHRydWU7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgIH07XHJcblxyXG4gICAgYWRkT3ZlcmxheUxpc3RlbmVyKCdvblVzZXJGaWxlQ2hhbmdlZCcsICgpID0+IHtcclxuICAgICAgcmVsb2FkT25jZSgpO1xyXG4gICAgfSk7XHJcbiAgICBhZGRPdmVybGF5TGlzdGVuZXIoJ29uRm9yY2VSZWxvYWQnLCAoKSA9PiB7XHJcbiAgICAgIHJlbG9hZE9uY2UoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMubG9hZFVzZXJGaWxlcyhvdmVybGF5TmFtZSwgb3B0aW9ucywgY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgbG9hZFVzZXJGaWxlcyhvdmVybGF5TmFtZTogc3RyaW5nLCBvcHRpb25zOiBCYXNlT3B0aW9ucywgY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcclxuICAgIGNvbnN0IHJlYWRPcHRpb25zID0gY2FsbE92ZXJsYXlIYW5kbGVyKHtcclxuICAgICAgY2FsbDogJ2NhY3Rib3RMb2FkRGF0YScsXHJcbiAgICAgIG92ZXJsYXk6ICdvcHRpb25zJyxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGxvYWRVc2VyID0gYXN5bmMgKGU6IHsgZGV0YWlsOiBDYWN0Ym90TG9hZFVzZXJSZXQgfSkgPT4ge1xyXG4gICAgICAvLyBUaGUgYmFzZVBhdGggaXNuJ3QgdXNpbmcgZm9yIGFueXRoaW5nIG90aGVyIHRoYW4gY29zbWV0aWMgcHJpbnRpbmcgb2YgZnVsbCBwYXRocyxcclxuICAgICAgLy8gc28gcmVwbGFjZSBhbnkgc2xhc2hlcyBoZXJlIGZvciB1bmlmb3JtaXR5LiAgSW4gY2FzZSBhbnlib2R5IGlzIHVzaW5nIGNhY3Rib3Qgb25cclxuICAgICAgLy8gTGludXggKD8hPyksIHN1cHBvcnQgYW55IHN0eWxlIG9mIHNsYXNoZXMgZWxzZXdoZXJlLlxyXG4gICAgICBjb25zdCBiYXNlUGF0aCA9IGUuZGV0YWlsLnVzZXJMb2NhdGlvbi5yZXBsYWNlKC9bL1xcXFxdKiQvLCAnJykgKyAnXFxcXCc7XHJcbiAgICAgIGNvbnN0IGxvY2FsRmlsZXMgPSBlLmRldGFpbC5sb2NhbFVzZXJGaWxlcztcclxuXHJcbiAgICAgIG9wdGlvbnMuU3lzdGVtSW5mbyA9IHtcclxuICAgICAgICBjYWN0Ym90VmVyc2lvbjogZS5kZXRhaWwuY2FjdGJvdFZlcnNpb24sXHJcbiAgICAgICAgb3ZlcmxheVBsdWdpblZlcnNpb246IGUuZGV0YWlsLm92ZXJsYXlQbHVnaW5WZXJzaW9uLFxyXG4gICAgICAgIGZmeGl2UGx1Z2luVmVyc2lvbjogZS5kZXRhaWwuZmZ4aXZQbHVnaW5WZXJzaW9uLFxyXG4gICAgICAgIGFjdFZlcnNpb246IGUuZGV0YWlsLmFjdFZlcnNpb24sXHJcbiAgICAgICAgZ2FtZVJlZ2lvbjogZS5kZXRhaWwuZ2FtZVJlZ2lvbixcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIFRoZSBwbHVnaW4gYXV0by1kZXRlY3RzIHRoZSBsYW5ndWFnZSwgc28gc2V0IHRoaXMgZmlyc3QuXHJcbiAgICAgIC8vIElmIG9wdGlvbnMgZmlsZXMgd2FudCB0byBvdmVycmlkZSBpdCwgdGhleSBjYW4gZm9yIHRlc3RpbmcuXHJcblxyXG4gICAgICAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5IChsYW5ndWFnZSBpcyBub3cgc2VwYXJhdGVkIHRvIHRocmVlIHR5cGVzLilcclxuICAgICAgaWYgKGUuZGV0YWlsLmxhbmd1YWdlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5QYXJzZXJMYW5ndWFnZSA9IGUuZGV0YWlsLmxhbmd1YWdlO1xyXG4gICAgICAgIG9wdGlvbnMuU2hvcnRMb2NhbGUgPSBlLmRldGFpbC5sYW5ndWFnZTtcclxuICAgICAgICBvcHRpb25zLkRpc3BsYXlMYW5ndWFnZSA9IGUuZGV0YWlsLmxhbmd1YWdlO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIFBhcnNlciBMYW5ndWFnZVxyXG4gICAgICBpZiAoZS5kZXRhaWwucGFyc2VyTGFuZ3VhZ2UpIHtcclxuICAgICAgICBvcHRpb25zLlBhcnNlckxhbmd1YWdlID0gZS5kZXRhaWwucGFyc2VyTGFuZ3VhZ2U7XHJcbiAgICAgICAgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZXZlcnl0aGluZyBcIkxhbmd1YWdlXCIgc2hvdWxkIGJlIGNoYW5nZWQgdG8gXCJQYXJzZXJMYW5ndWFnZVwiXHJcbiAgICAgICAgb3B0aW9ucy5MYW5ndWFnZSA9IGUuZGV0YWlsLnBhcnNlckxhbmd1YWdlO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIFN5c3RlbSBMYW5ndWFnZVxyXG4gICAgICBpZiAoZS5kZXRhaWwuc3lzdGVtTG9jYWxlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5TeXN0ZW1Mb2NhbGUgPSBlLmRldGFpbC5zeXN0ZW1Mb2NhbGU7XHJcbiAgICAgICAgbGV0IHNob3J0TG9jYWxlID0gZS5kZXRhaWwuc3lzdGVtTG9jYWxlLnN1YnN0cmluZygwLCAyKTtcclxuICAgICAgICBpZiAoc2hvcnRMb2NhbGUgPT09ICd6aCcpXHJcbiAgICAgICAgICBzaG9ydExvY2FsZSA9ICdjbic7XHJcbiAgICAgICAgaWYgKGlzTGFuZyhzaG9ydExvY2FsZSkpXHJcbiAgICAgICAgICBvcHRpb25zLlNob3J0TG9jYWxlID0gc2hvcnRMb2NhbGU7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgb3B0aW9ucy5TaG9ydExvY2FsZSA9IG9wdGlvbnMuUGFyc2VyTGFuZ3VhZ2U7XHJcbiAgICAgIH1cclxuICAgICAgLy8gVXNlcidzIHNldHRpbmcgTGFuZ3VhZ2VcclxuICAgICAgY29uc3QgZGlzcGxheUxhbmcgPSBlLmRldGFpbC5kaXNwbGF5TGFuZ3VhZ2U7XHJcbiAgICAgIGlmIChpc0xhbmcoZGlzcGxheUxhbmcpKVxyXG4gICAgICAgIG9wdGlvbnMuRGlzcGxheUxhbmd1YWdlID0gZGlzcGxheUxhbmc7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBvcHRpb25zLkRpc3BsYXlMYW5ndWFnZSA9IG9wdGlvbnMuUGFyc2VyTGFuZ3VhZ2UgfHwgJ2VuJztcclxuXHJcbiAgICAgIC8vIFRPRE86IGxlZnQgZm9yIG5vdyBhcyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIHVzZXIgY3NzLiAgUmVtb3ZlIHRoaXMgbGF0ZXI/P1xyXG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChgbGFuZy0ke29wdGlvbnMuRGlzcGxheUxhbmd1YWdlfWApO1xyXG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZyA9IGxhbmdUb0xvY2FsZShvcHRpb25zLkRpc3BsYXlMYW5ndWFnZSk7XHJcbiAgICAgIHRoaXMuYWRkVW5sb2NrVGV4dChvcHRpb25zLkRpc3BsYXlMYW5ndWFnZSk7XHJcblxyXG4gICAgICAvLyBIYW5kbGUgcHJvY2Vzc09wdGlvbnMgYWZ0ZXIgZGVmYXVsdCBsYW5ndWFnZSBzZWxlY3Rpb24gYWJvdmUsXHJcbiAgICAgIC8vIGJ1dCBiZWZvcmUgY3NzIGJlbG93IHdoaWNoIG1heSBsb2FkIHNraW4gZmlsZXMuXHJcbiAgICAgIC8vIHByb2Nlc3NPcHRpb25zIG5lZWRzIHRvIGJlIGNhbGxlZCB3aGV0aGVyIG9yIG5vdCB0aGVyZSBhcmVcclxuICAgICAgLy8gYW55IHVzZXJPcHRpb25zIHNhdmVkLCBhcyBpdCBzZXRzIHVwIHRoZSBkZWZhdWx0cy5cclxuICAgICAgdGhpcy5zYXZlZENvbmZpZyA9IChhd2FpdCByZWFkT3B0aW9ucyk/LmRhdGEgPz8ge307XHJcbiAgICAgIHRoaXMucHJvY2Vzc09wdGlvbnMoXHJcbiAgICAgICAgb3B0aW9ucyxcclxuICAgICAgICB0aGlzLnNhdmVkQ29uZmlnW292ZXJsYXlOYW1lXSA/PyB7fSxcclxuICAgICAgICB0aGlzLm9wdGlvblRlbXBsYXRlc1tvdmVybGF5TmFtZV0sXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBJZiB0aGUgb3ZlcmxheSBoYXMgYSBcIkRlYnVnXCIgc2V0dGluZywgc2V0IHRvIHRydWUgdmlhIHRoZSBjb25maWcgdG9vbCxcclxuICAgICAgLy8gdGhlbiBhbHNvIHByaW50IG91dCB1c2VyIGZpbGVzIHRoYXQgaGF2ZSBiZWVuIGxvYWRlZC5cclxuICAgICAgY29uc3QgZGVidWcgPSBvcHRpb25zLkRlYnVnICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5EZWJ1ZyAhPT0gZmFsc2U7XHJcbiAgICAgIGNvbnN0IHByaW50VXNlckZpbGUgPSBkZWJ1ZyA/ICh4OiBzdHJpbmcpID0+IGNvbnNvbGUubG9nKHgpIDogKCkgPT4gey8qIG5vb3AgKi99O1xyXG5cclxuICAgICAgLy8gV2l0aCB1c2VyIGZpbGVzIGJlaW5nIGFyYml0cmFyeSBqYXZhc2NyaXB0LCBhbmQgaGF2aW5nIG11bHRpcGxlIGZpbGVzXHJcbiAgICAgIC8vIGluIHVzZXIgZm9sZGVycywgaXQncyBwb3NzaWJsZSBmb3IgbGF0ZXIgZmlsZXMgdG8gYWNjaWRlbnRhbGx5IHJlbW92ZVxyXG4gICAgICAvLyB0aGluZ3MgdGhhdCBwcmV2aW91cyBmaWxlcyBoYXZlIGFkZGVkLiAgV2FybiBhYm91dCB0aGlzLCBzaW5jZSBtb3N0XHJcbiAgICAgIC8vIHVzZXJzIGFyZSBub3QgcHJvZ3JhbW1lcnMuXHJcbiAgICAgIGNvbnN0IHdhcm5PblZhcmlhYmxlUmVzZXRNYXA6IHsgW292ZXJsYXlOYW1lOiBzdHJpbmddOiBzdHJpbmdbXSB9ID0ge1xyXG4gICAgICAgIHJhaWRib3NzOiBbXHJcbiAgICAgICAgICAnVHJpZ2dlcnMnLFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH07XHJcbiAgICAgIHdhcm5PblZhcmlhYmxlUmVzZXRNYXBbb3ZlcmxheU5hbWVdID0gd2Fybk9uVmFyaWFibGVSZXNldE1hcFtvdmVybGF5TmFtZV0gfHwgW107XHJcblxyXG4gICAgICAvLyBUaGUgdmFsdWVzIG9mIGVhY2ggYHdhcm5PblZhcmlhYmxlUmVzZXRNYXBgIGZpZWxkIGFyZSBpbml0aWFsbHkgc2V0XHJcbiAgICAgIC8vIGFmdGVyIHRoZSBmaXJzdCBmaWxlLCBzbyB0aGF0IGlmIHRoZXJlIGlzIG9ubHkgb25lIGZpbGUsIHRoZXJlIGFyZVxyXG4gICAgICAvLyBub3QgYW55IHdhcm5pbmdzLlxyXG5cclxuICAgICAgLy8gVGhlIGZpZWxkcyB0aGF0IGEgdXNlciBmaWxlIHNldHMgaW4gT3B0aW9ucyBjYW4gYmUgYW55dGhpbmcgKHB1biBub3QgaW50ZW5kZWQpXHJcbiAgICAgIC8vIGFuZCBzbyB3ZSB1c2UgYGFueWAgaGVyZS4gIFRoZSBvbmx5IG9wZXJhdGlvbiBkb25lIG9uIHRoaXMgZmllbGQgaXMgYSAhPT1cclxuICAgICAgLy8gZm9yIGNoYW5nZSBkZXRlY3Rpb24gdG8gc2VlIGlmIHRoZSB0aGUgdXNlciBmaWxlIGhhcyBtb2RpZmllZCBpdC5cclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgY29uc3QgdmFyaWFibGVUcmFja2VyOiB7IFtmaWVsZE5hbWU6IHN0cmluZ106IHVua25vd24gfSA9IHt9O1xyXG5cclxuICAgICAgaWYgKGxvY2FsRmlsZXMpIHtcclxuICAgICAgICAvLyBsb2NhbEZpbGVzIG1heSBiZSBudWxsIGlmIHRoZXJlIGlzIG5vIHZhbGlkIHVzZXIgZGlyZWN0b3J5LlxyXG4gICAgICAgIGNvbnN0IHNvcnRlZEZpbGVzID0gdGhpcy5zb3J0VXNlckZpbGVzKE9iamVjdC5rZXlzKGxvY2FsRmlsZXMpKTtcclxuICAgICAgICBjb25zdCBqc0ZpbGVzID0gdGhpcy5maWx0ZXJVc2VyRmlsZXMoc29ydGVkRmlsZXMsIG92ZXJsYXlOYW1lLCAnLmpzJyk7XHJcbiAgICAgICAgY29uc3QgY3NzRmlsZXMgPSB0aGlzLmZpbHRlclVzZXJGaWxlcyhzb3J0ZWRGaWxlcywgb3ZlcmxheU5hbWUsICcuY3NzJyk7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QganNGaWxlIG9mIGpzRmlsZXMpIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHByaW50VXNlckZpbGUoYGxvY2FsIHVzZXIgZmlsZTogJHtiYXNlUGF0aH0ke2pzRmlsZX1gKTtcclxuICAgICAgICAgICAgdGhpcy5ldmFsVXNlckZpbGUobG9jYWxGaWxlc1tqc0ZpbGVdID8/ICcnLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmllbGQgb2Ygd2Fybk9uVmFyaWFibGVSZXNldE1hcFtvdmVybGF5TmFtZV0gPz8gW10pIHtcclxuICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhcmlhYmxlVHJhY2tlcltmaWVsZF07XHJcbiAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG9wdGlvbnNbZmllbGRdKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZGVhbGx5IHVzZXJzIHNob3VsZCBkbyBzb21ldGhpbmcgbGlrZSBgT3B0aW9ucy5UcmlnZ2Vycy5wdXNoKFtldGNdKTtgXHJcbiAgICAgICAgICAgICAgICAvLyBpbnN0ZWFkIG9mIGBPcHRpb25zLlRyaWdnZXJzID0gW2V0Y107YFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgICAgICAgIGAqKiogV0FSTklORzogJHtiYXNlUGF0aH0ke2pzRmlsZX0gb3ZlcndyaXRlcyBPcHRpb25zLiR7ZmllbGR9IGZyb20gcHJldmlvdXMgZmlsZXMuYCxcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHZhcmlhYmxlVHJhY2tlcltmaWVsZF0gPSBvcHRpb25zW2ZpZWxkXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy51c2VyRmlsZUNhbGxiYWNrc1tvdmVybGF5TmFtZV0/Lihqc0ZpbGUsIGxvY2FsRmlsZXMsIG9wdGlvbnMsIGJhc2VQYXRoKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy8gQmUgdmVyeSB2aXNpYmxlIGZvciB1c2Vycy5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coJyoqKiBFUlJPUiBJTiBVU0VSIEZJTEUgKioqJyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVGhpcyBpcyBhIGJpdCBhd2t3YXJkIHRvIGhhbmRsZSBza2luIHNldHRpbmdzIGhlcmUsIGJ1dFxyXG4gICAgICAgIC8vIGRvaW5nIGl0IGFmdGVyIHVzZXIgY29uZmlnIGZpbGVzIGFuZCBiZWZvcmUgdXNlciBjc3MgZmlsZXNcclxuICAgICAgICAvLyBhbGxvd3MgdXNlciBjc3MgdG8gb3ZlcnJpZGUgc2tpbi1zcGVjaWZpYyBjc3MgYXMgd2VsbC5cclxuICAgICAgICBpZiAob3B0aW9ucy5Ta2luICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICB0aGlzLmhhbmRsZVNraW4ob3B0aW9ucy5Ta2luKTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBjc3NGaWxlIG9mIGNzc0ZpbGVzKSB7XHJcbiAgICAgICAgICBwcmludFVzZXJGaWxlKGBsb2NhbCB1c2VyIGZpbGU6ICR7YmFzZVBhdGh9JHtjc3NGaWxlfWApO1xyXG4gICAgICAgICAgY29uc3QgdXNlckNzc1RleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xyXG4gICAgICAgICAgY29uc3QgY29udGVudHMgPSBsb2NhbEZpbGVzW2Nzc0ZpbGVdO1xyXG4gICAgICAgICAgaWYgKGNvbnRlbnRzICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHVzZXJDc3NUZXh0LmlubmVyVGV4dCA9IGNvbnRlbnRzO1xyXG4gICAgICAgICAgY29uc3QgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XHJcbiAgICAgICAgICBpZiAoaGVhZClcclxuICAgICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZCh1c2VyQ3NzVGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBQb3N0IHRoaXMgY2FsbGJhY2sgc28gdGhhdCB0aGUganMgYW5kIGNzcyBjYW4gYmUgZXhlY3V0ZWQgZmlyc3QuXHJcbiAgICAgIGNhbGxiYWNrKCk7XHJcblxyXG4gICAgICB2b2lkIGNhbGxPdmVybGF5SGFuZGxlcih7IGNhbGw6ICdjYWN0Ym90UmVxdWVzdFN0YXRlJyB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm9pZCBjYWxsT3ZlcmxheUhhbmRsZXIoe1xyXG4gICAgICBjYWxsOiAnY2FjdGJvdExvYWRVc2VyJyxcclxuICAgICAgc291cmNlOiBsb2NhdGlvbi5ocmVmLFxyXG4gICAgICBvdmVybGF5TmFtZTogb3ZlcmxheU5hbWUsXHJcbiAgICB9KS50aGVuKChlOiB7IGRldGFpbDogQ2FjdGJvdExvYWRVc2VyUmV0IH0pID0+IHtcclxuICAgICAgLy8gV2FpdCBmb3IgRE9NQ29udGVudExvYWRlZCBpZiBuZWVkZWQuXHJcbiAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnbG9hZGluZycpIHtcclxuICAgICAgICB2b2lkIGxvYWRVc2VyKGUpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4gICAgICAgIHZvaWQgbG9hZFVzZXIoZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVTa2luKHNraW5OYW1lOiBzdHJpbmcpIHtcclxuICAgIGlmICghc2tpbk5hbWUgfHwgc2tpbk5hbWUgPT09ICdkZWZhdWx0JylcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGxldCBiYXNlUGF0aCA9IGRvY3VtZW50LmxvY2F0aW9uLnRvU3RyaW5nKCk7XHJcbiAgICBjb25zdCBzbGFzaElkeCA9IGJhc2VQYXRoLmxhc3RJbmRleE9mKCcvJyk7XHJcbiAgICBpZiAoc2xhc2hJZHggIT09IC0xKVxyXG4gICAgICBiYXNlUGF0aCA9IGJhc2VQYXRoLnN1YnN0cigwLCBzbGFzaElkeCk7XHJcbiAgICBpZiAoYmFzZVBhdGguc2xpY2UoLTEpICE9PSAnLycpXHJcbiAgICAgIGJhc2VQYXRoICs9ICcvJztcclxuICAgIGNvbnN0IHNraW5IcmVmID0gYmFzZVBhdGggKyAnc2tpbnMvJyArIHNraW5OYW1lICsgJy8nICsgc2tpbk5hbWUgKyAnLmNzcyc7XHJcbiAgICB0aGlzLmFwcGVuZENTU0xpbmsoc2tpbkhyZWYpO1xyXG4gIH1cclxuICBhcHBlbmRKU0xpbmsoc3JjOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHVzZXJKUyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgdXNlckpTLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2phdmFzY3JpcHQnKTtcclxuICAgIHVzZXJKUy5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYyk7XHJcbiAgICB1c2VySlMuc2V0QXR0cmlidXRlKCdhc3luYycsICdmYWxzZScpO1xyXG4gICAgY29uc3QgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XHJcbiAgICBpZiAoaGVhZClcclxuICAgICAgaGVhZC5hcHBlbmRDaGlsZCh1c2VySlMpO1xyXG4gIH1cclxuICBhcHBlbmRDU1NMaW5rKGhyZWY6IHN0cmluZykge1xyXG4gICAgY29uc3QgdXNlckNTUyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcclxuICAgIHVzZXJDU1Muc2V0QXR0cmlidXRlKCdyZWwnLCAnc3R5bGVzaGVldCcpO1xyXG4gICAgdXNlckNTUy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcclxuICAgIHVzZXJDU1Muc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XHJcbiAgICBjb25zdCBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcclxuICAgIGlmIChoZWFkKVxyXG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHVzZXJDU1MpO1xyXG4gIH1cclxuICBwcm9jZXNzT3B0aW9ucyhvcHRpb25zOiBCYXNlT3B0aW9ucywgc2F2ZWRDb25maWc6IFNhdmVkQ29uZmlnRW50cnksIHRlbXBsYXRlPzogT3B0aW9uc1RlbXBsYXRlKSB7XHJcbiAgICAvLyBUYWtlIG9wdGlvbnMgZnJvbSB0aGUgdGVtcGxhdGUsIGZpbmQgdGhlbSBpbiBzYXZlZENvbmZpZyxcclxuICAgIC8vIGFuZCBhcHBseSB0aGVtIHRvIG9wdGlvbnMuIFRoaXMgYWxzbyBoYW5kbGVzIHNldHRpbmdcclxuICAgIC8vIGRlZmF1bHRzIGZvciBhbnl0aGluZyBpbiB0aGUgdGVtcGxhdGUsIGV2ZW4gaWYgaXQgZG9lcyBub3RcclxuICAgIC8vIGV4aXN0IGluIHNhdmVkQ29uZmlnLlxyXG5cclxuICAgIC8vIE5vdCBhbGwgb3ZlcmxheXMgaGF2ZSBvcHRpb24gdGVtcGxhdGVzLlxyXG4gICAgaWYgKCF0ZW1wbGF0ZSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHRlbXBsYXRlT3B0aW9ucyA9IHRlbXBsYXRlLm9wdGlvbnM7XHJcbiAgICBmb3IgKGNvbnN0IG9wdCBvZiB0ZW1wbGF0ZU9wdGlvbnMpIHtcclxuICAgICAgLy8gR3JhYiB0aGUgc2F2ZWQgdmFsdWUgb3IgdGhlIGRlZmF1bHQgdG8gc2V0IGluIG9wdGlvbnMuXHJcblxyXG4gICAgICBsZXQgdmFsdWU6IFNhdmVkQ29uZmlnRW50cnkgPSBvcHQuZGVmYXVsdDtcclxuICAgICAgaWYgKHR5cGVvZiBzYXZlZENvbmZpZyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoc2F2ZWRDb25maWcpKSB7XHJcbiAgICAgICAgaWYgKG9wdC5pZCBpbiBzYXZlZENvbmZpZykge1xyXG4gICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBzYXZlZENvbmZpZ1tvcHQuaWRdO1xyXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBPcHRpb25zIGNhbiBwcm92aWRlIGN1c3RvbSBsb2dpYyB0byB0dXJuIGEgdmFsdWUgaW50byBvcHRpb25zIHNldHRpbmdzLlxyXG4gICAgICAvLyBJZiB0aGlzIGRvZXNuJ3QgZXhpc3QsIGp1c3Qgc2V0IHRoZSB2YWx1ZSBkaXJlY3RseS5cclxuICAgICAgLy8gT3B0aW9uIHRlbXBsYXRlIGlkcyBhcmUgaWRlbnRpY2FsIHRvIGZpZWxkIG5hbWVzIG9uIE9wdGlvbnMuXHJcbiAgICAgIGlmIChvcHQuc2V0dGVyRnVuYykge1xyXG4gICAgICAgIG9wdC5zZXR0ZXJGdW5jKG9wdGlvbnMsIHZhbHVlKTtcclxuICAgICAgfSBlbHNlIGlmIChvcHQudHlwZSA9PT0gJ2ludGVnZXInKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICBvcHRpb25zW29wdC5pZF0gPSBNYXRoLmZsb29yKHZhbHVlKTtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgb3B0aW9uc1tvcHQuaWRdID0gcGFyc2VJbnQodmFsdWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKG9wdC50eXBlID09PSAnZmxvYXQnKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICBvcHRpb25zW29wdC5pZF0gPSB2YWx1ZTtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgb3B0aW9uc1tvcHQuaWRdID0gcGFyc2VGbG9hdCh2YWx1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgb3B0aW9uc1tvcHQuaWRdID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBGb3IgdGhpbmdzIGxpa2UgcmFpZGJvc3MgdGhhdCBidWlsZCBleHRyYSBVSSwgYWxzbyBnaXZlIHRoZW0gYSBjaGFuY2VcclxuICAgIC8vIHRvIGhhbmRsZSBhbnl0aGluZyB0aGF0IGhhcyBiZWVuIHNldCBvbiB0aGF0IFVJLlxyXG4gICAgaWYgKHRlbXBsYXRlLnByb2Nlc3NFeHRyYU9wdGlvbnMpXHJcbiAgICAgIHRlbXBsYXRlLnByb2Nlc3NFeHRyYU9wdGlvbnMob3B0aW9ucywgc2F2ZWRDb25maWcpO1xyXG4gIH1cclxuICBhZGRVbmxvY2tUZXh0KGxhbmc6IExhbmcpIHtcclxuICAgIGNvbnN0IHVubG9ja1RleHQgPSB7XHJcbiAgICAgIGVuOiAn8J+UkyBVbmxvY2tlZCAobG9jayBvdmVybGF5IGJlZm9yZSB1c2luZyknLFxyXG4gICAgICBkZTogJ/CflJMgRW50c3BlcnJ0IChTcGVycmUgZGFzIE92ZXJsYXkgdm9yIGRlciBOdXR6dW5nKScsXHJcbiAgICAgIGZyOiAn8J+UkyBEw6libG9xdcOpIChCbG9xdWV6IGxcXCdvdmVybGF5IGF2YW50IHV0aWxpc2F0aW9uKScsXHJcbiAgICAgIGphOiAn8J+UkyDjg63jg4Pjgq/op6PpmaQgKOOCquODvOODkOODvOODrOOCpOOCkuS9v+eUqOOBmeOCi+WJjeOBq+ODreODg+OCr+OBl+OBpuOBj+OBoOOBleOBhCknLFxyXG4gICAgICBjbjogJ/CflJMg5bey6Kej6Zmk6ZSB5a6aICjkvaDpnIDopoHlsIbmraTmgqzmta7nqpfplIHlrprlkI7mlrnlj6/kvb/nlKgpJyxcclxuICAgICAga286ICfwn5STIOychOy5mCDsnqDquIgg7ZW07KCc65CoICjsgqzsmqntlZjquLAg7KCE7JeQIOychOy5mCDsnqDquIjsnYQg7ISk7KCV7ZWY7IS47JqUKScsXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGlkID0gJ2NhY3Rib3QtdW5sb2NrZWQtdGV4dCc7XHJcbiAgICBsZXQgdGV4dEVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICBpZiAoIXRleHRFbGVtKSB7XHJcbiAgICAgIHRleHRFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRleHRFbGVtLmlkID0gaWQ7XHJcbiAgICAgIHRleHRFbGVtLmNsYXNzTGlzdC5hZGQoJ3RleHQnKTtcclxuICAgICAgLy8gU2V0IGVsZW1lbnQgZGlzcGxheSB0byBub25lIGluIGNhc2UgdGhlIHBhZ2UgaGFzIG5vdCBpbmNsdWRlZCBkZWZhdWx0cy5jc3MuXHJcbiAgICAgIHRleHRFbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRleHRFbGVtKTtcclxuICAgIH1cclxuICAgIHRleHRFbGVtLmlubmVySFRNTCA9IHVubG9ja1RleHRbbGFuZ10gfHwgdW5sb2NrVGV4dFsnZW4nXTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBVc2VyQ29uZmlnKCk7XHJcblxyXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xyXG4gIC8vIFRoaXMgZXZlbnQgY29tZXMgZWFybHkgYW5kIGlzIG5vdCBjYWNoZWQsIHNvIHNldCB1cCBldmVudCBsaXN0ZW5lciBpbW1lZGlhdGVseS5cclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvbk92ZXJsYXlTdGF0ZVVwZGF0ZScsIChlKSA9PiB7XHJcbiAgICBjb25zdCBkb2NDbGFzc0xpc3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0O1xyXG4gICAgaWYgKGUuZGV0YWlsLmlzTG9ja2VkKVxyXG4gICAgICBkb2NDbGFzc0xpc3QucmVtb3ZlKCdyZXNpemUtaGFuZGxlJywgJ3VubG9ja2VkJyk7XHJcbiAgICBlbHNlXHJcbiAgICAgIGRvY0NsYXNzTGlzdC5hZGQoJ3Jlc2l6ZS1oYW5kbGUnLCAndW5sb2NrZWQnKTtcclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQgeyBPdmVybGF5SGFuZGxlclJlcXVlc3RzLCBPdmVybGF5SGFuZGxlclJlc3BvbnNlVHlwZXMgfSBmcm9tICcuLi90eXBlcy9ldmVudCc7XHJcbmltcG9ydCB7IEpvYiwgUm9sZSB9IGZyb20gJy4uL3R5cGVzL2pvYic7XHJcblxyXG5pbXBvcnQgeyBjYWxsT3ZlcmxheUhhbmRsZXIgfSBmcm9tICcuL292ZXJsYXlfcGx1Z2luX2FwaSc7XHJcblxyXG4vLyBUT0RPOiBpdCdkIGJlIG5pY2UgdG8gbm90IHJlcGVhdCBqb2IgbmFtZXMsIGJ1dCBhdCBsZWFzdCBSZWNvcmQgZW5mb3JjZXMgdGhhdCBhbGwgYXJlIHNldC5cclxuY29uc3QgbmFtZVRvSm9iRW51bTogUmVjb3JkPEpvYiwgbnVtYmVyPiA9IHtcclxuICBOT05FOiAwLFxyXG4gIEdMQTogMSxcclxuICBQR0w6IDIsXHJcbiAgTVJEOiAzLFxyXG4gIExOQzogNCxcclxuICBBUkM6IDUsXHJcbiAgQ05KOiA2LFxyXG4gIFRITTogNyxcclxuICBDUlA6IDgsXHJcbiAgQlNNOiA5LFxyXG4gIEFSTTogMTAsXHJcbiAgR1NNOiAxMSxcclxuICBMVFc6IDEyLFxyXG4gIFdWUjogMTMsXHJcbiAgQUxDOiAxNCxcclxuICBDVUw6IDE1LFxyXG4gIE1JTjogMTYsXHJcbiAgQlROOiAxNyxcclxuICBGU0g6IDE4LFxyXG4gIFBMRDogMTksXHJcbiAgTU5LOiAyMCxcclxuICBXQVI6IDIxLFxyXG4gIERSRzogMjIsXHJcbiAgQlJEOiAyMyxcclxuICBXSE06IDI0LFxyXG4gIEJMTTogMjUsXHJcbiAgQUNOOiAyNixcclxuICBTTU46IDI3LFxyXG4gIFNDSDogMjgsXHJcbiAgUk9HOiAyOSxcclxuICBOSU46IDMwLFxyXG4gIE1DSDogMzEsXHJcbiAgRFJLOiAzMixcclxuICBBU1Q6IDMzLFxyXG4gIFNBTTogMzQsXHJcbiAgUkRNOiAzNSxcclxuICBCTFU6IDM2LFxyXG4gIEdOQjogMzcsXHJcbiAgRE5DOiAzOCxcclxuICBSUFI6IDM5LFxyXG4gIFNHRTogNDAsXHJcbn07XHJcblxyXG5jb25zdCBhbGxKb2JzID0gT2JqZWN0LmtleXMobmFtZVRvSm9iRW51bSkgYXMgSm9iW107XHJcbmNvbnN0IGFsbFJvbGVzID0gWyd0YW5rJywgJ2hlYWxlcicsICdkcHMnLCAnY3JhZnRlcicsICdnYXRoZXJlcicsICdub25lJ10gYXMgUm9sZVtdO1xyXG5cclxuY29uc3QgdGFua0pvYnM6IEpvYltdID0gWydHTEEnLCAnUExEJywgJ01SRCcsICdXQVInLCAnRFJLJywgJ0dOQiddO1xyXG5jb25zdCBoZWFsZXJKb2JzOiBKb2JbXSA9IFsnQ05KJywgJ1dITScsICdTQ0gnLCAnQVNUJywgJ1NHRSddO1xyXG5jb25zdCBtZWxlZURwc0pvYnM6IEpvYltdID0gWydQR0wnLCAnTU5LJywgJ0xOQycsICdEUkcnLCAnUk9HJywgJ05JTicsICdTQU0nLCAnUlBSJ107XHJcbmNvbnN0IHJhbmdlZERwc0pvYnM6IEpvYltdID0gWydBUkMnLCAnQlJEJywgJ0ROQycsICdNQ0gnXTtcclxuY29uc3QgY2FzdGVyRHBzSm9iczogSm9iW10gPSBbJ0JMVScsICdSRE0nLCAnQkxNJywgJ1NNTicsICdBQ04nLCAnVEhNJ107XHJcbmNvbnN0IGRwc0pvYnM6IEpvYltdID0gWy4uLm1lbGVlRHBzSm9icywgLi4ucmFuZ2VkRHBzSm9icywgLi4uY2FzdGVyRHBzSm9ic107XHJcbmNvbnN0IGNyYWZ0aW5nSm9iczogSm9iW10gPSBbJ0NSUCcsICdCU00nLCAnQVJNJywgJ0dTTScsICdMVFcnLCAnV1ZSJywgJ0FMQycsICdDVUwnXTtcclxuY29uc3QgZ2F0aGVyaW5nSm9iczogSm9iW10gPSBbJ01JTicsICdCVE4nLCAnRlNIJ107XHJcblxyXG5jb25zdCBzdHVuSm9iczogSm9iW10gPSBbJ0JMVScsIC4uLnRhbmtKb2JzLCAuLi5tZWxlZURwc0pvYnNdO1xyXG5jb25zdCBzaWxlbmNlSm9iczogSm9iW10gPSBbJ0JMVScsIC4uLnRhbmtKb2JzLCAuLi5yYW5nZWREcHNKb2JzXTtcclxuY29uc3Qgc2xlZXBKb2JzOiBKb2JbXSA9IFsnQkxNJywgJ0JMVScsIC4uLmhlYWxlckpvYnNdO1xyXG5jb25zdCBmZWludEpvYnM6IEpvYltdID0gWy4uLm1lbGVlRHBzSm9ic107XHJcbmNvbnN0IGFkZGxlSm9iczogSm9iW10gPSBbLi4uY2FzdGVyRHBzSm9ic107XHJcbmNvbnN0IGNsZWFuc2VKb2JzOiBKb2JbXSA9IFsnQkxVJywgJ0JSRCcsIC4uLmhlYWxlckpvYnNdO1xyXG5cclxuY29uc3Qgam9iVG9Sb2xlTWFwOiBNYXA8Sm9iLCBSb2xlPiA9ICgoKSA9PiB7XHJcbiAgY29uc3QgYWRkVG9NYXAgPSAobWFwOiBNYXA8Sm9iLCBSb2xlPiwgam9iczogSm9iW10sIHJvbGU6IFJvbGUpID0+IHtcclxuICAgIGpvYnMuZm9yRWFjaCgoam9iKSA9PiBtYXAuc2V0KGpvYiwgcm9sZSkpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IG1hcDogTWFwPEpvYiwgUm9sZT4gPSBuZXcgTWFwKFtbJ05PTkUnLCAnbm9uZSddXSk7XHJcbiAgYWRkVG9NYXAobWFwLCB0YW5rSm9icywgJ3RhbmsnKTtcclxuICBhZGRUb01hcChtYXAsIGhlYWxlckpvYnMsICdoZWFsZXInKTtcclxuICBhZGRUb01hcChtYXAsIGRwc0pvYnMsICdkcHMnKTtcclxuICBhZGRUb01hcChtYXAsIGNyYWZ0aW5nSm9icywgJ2NyYWZ0ZXInKTtcclxuICBhZGRUb01hcChtYXAsIGdhdGhlcmluZ0pvYnMsICdnYXRoZXJlcicpO1xyXG5cclxuICByZXR1cm4gbWFwO1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IHR5cGUgV2F0Y2hDb21iYXRhbnRQYXJhbXMgPSB7XHJcbiAgaWRzPzogbnVtYmVyW107XHJcbiAgbmFtZXM/OiBzdHJpbmdbXTtcclxuICBwcm9wcz86IHN0cmluZ1tdO1xyXG4gIGRlbGF5PzogbnVtYmVyO1xyXG4gIG1heER1cmF0aW9uPzogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgV2F0Y2hDb21iYXRhbnRGdW5jID0gKFxyXG4gIHBhcmFtczogV2F0Y2hDb21iYXRhbnRQYXJhbXMsXHJcbiAgZnVuYzogKHJldDogT3ZlcmxheUhhbmRsZXJSZXNwb25zZVR5cGVzWydnZXRDb21iYXRhbnRzJ10pID0+IGJvb2xlYW4sXHJcbikgPT4gUHJvbWlzZTx2b2lkPjtcclxuXHJcbnR5cGUgV2F0Y2hDb21iYXRhbnRNYXBFbnRyeSA9IHtcclxuICBjYW5jZWw6IGJvb2xlYW47XHJcbiAgc3RhcnQ6IG51bWJlcjtcclxufTtcclxuXHJcbmNvbnN0IHdhdGNoQ29tYmF0YW50TWFwOiBXYXRjaENvbWJhdGFudE1hcEVudHJ5W10gPSBbXTtcclxuXHJcbmNvbnN0IHNob3VsZENhbmNlbFdhdGNoID0gKFxyXG4gIHBhcmFtczogV2F0Y2hDb21iYXRhbnRQYXJhbXMsXHJcbiAgZW50cnk6IFdhdGNoQ29tYmF0YW50TWFwRW50cnksXHJcbik6IGJvb2xlYW4gPT4ge1xyXG4gIGlmIChlbnRyeS5jYW5jZWwpXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICBpZiAocGFyYW1zLm1heER1cmF0aW9uICE9PSB1bmRlZmluZWQgJiYgRGF0ZS5ub3coKSAtIGVudHJ5LnN0YXJ0ID4gcGFyYW1zLm1heER1cmF0aW9uKVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuY29uc3QgZGVmYXVsdFdhdGNoQ29tYmF0YW50OiBXYXRjaENvbWJhdGFudEZ1bmMgPSAocGFyYW1zLCBmdW5jKSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXMsIHJlaikgPT4ge1xyXG4gICAgY29uc3QgZGVsYXkgPSBwYXJhbXMuZGVsYXkgPz8gMTAwMDtcclxuXHJcbiAgICBjb25zdCBjYWxsOiBPdmVybGF5SGFuZGxlclJlcXVlc3RzWydnZXRDb21iYXRhbnRzJ10gPSB7XHJcbiAgICAgIGNhbGw6ICdnZXRDb21iYXRhbnRzJyxcclxuICAgIH07XHJcblxyXG4gICAgaWYgKHBhcmFtcy5pZHMpXHJcbiAgICAgIGNhbGwuaWRzID0gcGFyYW1zLmlkcztcclxuXHJcbiAgICBpZiAocGFyYW1zLm5hbWVzKVxyXG4gICAgICBjYWxsLm5hbWVzID0gcGFyYW1zLm5hbWVzO1xyXG5cclxuICAgIGlmIChwYXJhbXMucHJvcHMpXHJcbiAgICAgIGNhbGwucHJvcHMgPSBwYXJhbXMucHJvcHM7XHJcblxyXG4gICAgY29uc3QgZW50cnk6IFdhdGNoQ29tYmF0YW50TWFwRW50cnkgPSB7XHJcbiAgICAgIGNhbmNlbDogZmFsc2UsXHJcbiAgICAgIHN0YXJ0OiBEYXRlLm5vdygpLFxyXG4gICAgfTtcclxuXHJcbiAgICB3YXRjaENvbWJhdGFudE1hcC5wdXNoKGVudHJ5KTtcclxuXHJcbiAgICBjb25zdCBjaGVja0Z1bmMgPSAoKSA9PiB7XHJcbiAgICAgIGlmIChzaG91bGRDYW5jZWxXYXRjaChwYXJhbXMsIGVudHJ5KSkge1xyXG4gICAgICAgIHJlaigpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB2b2lkIGNhbGxPdmVybGF5SGFuZGxlcihjYWxsKS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGlmIChlbnRyeS5jYW5jZWwpIHtcclxuICAgICAgICAgIHJlaigpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZnVuYyhyZXNwb25zZSkpXHJcbiAgICAgICAgICByZXMoKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChjaGVja0Z1bmMsIGRlbGF5KTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNoZWNrRnVuYywgZGVsYXkpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxubGV0IHdhdGNoQ29tYmF0YW50T3ZlcnJpZGU6IFdhdGNoQ29tYmF0YW50RnVuYyB8IHVuZGVmaW5lZDtcclxubGV0IGNsZWFyQ29tYmF0YW50c092ZXJyaWRlOiAoKSA9PiB2b2lkIHwgdW5kZWZpbmVkO1xyXG5cclxuY29uc3QgZGVmYXVsdENsZWFyQ29tYmF0YW50cyA9ICgpID0+IHtcclxuICB3aGlsZSAod2F0Y2hDb21iYXRhbnRNYXAubGVuZ3RoID4gMCkge1xyXG4gICAgY29uc3Qgd2F0Y2ggPSB3YXRjaENvbWJhdGFudE1hcC5wb3AoKTtcclxuICAgIGlmICh3YXRjaClcclxuICAgICAgd2F0Y2guY2FuY2VsID0gdHJ1ZTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCB3YXRjaENvbWJhdGFudDogV2F0Y2hDb21iYXRhbnRGdW5jID0gKHBhcmFtcywgZnVuYykgPT4ge1xyXG4gIGlmICh3YXRjaENvbWJhdGFudE92ZXJyaWRlKVxyXG4gICAgcmV0dXJuIHdhdGNoQ29tYmF0YW50T3ZlcnJpZGUocGFyYW1zLCBmdW5jKTtcclxuXHJcbiAgcmV0dXJuIGRlZmF1bHRXYXRjaENvbWJhdGFudChwYXJhbXMsIGZ1bmMpO1xyXG59O1xyXG5cclxuY29uc3QgVXRpbCA9IHtcclxuICBqb2JFbnVtVG9Kb2I6IChpZDogbnVtYmVyKSA9PiB7XHJcbiAgICBjb25zdCBqb2IgPSBhbGxKb2JzLmZpbmQoKGpvYjogSm9iKSA9PiBuYW1lVG9Kb2JFbnVtW2pvYl0gPT09IGlkKTtcclxuICAgIHJldHVybiBqb2IgPz8gJ05PTkUnO1xyXG4gIH0sXHJcbiAgam9iVG9Kb2JFbnVtOiAoam9iOiBKb2IpID0+IG5hbWVUb0pvYkVudW1bam9iXSxcclxuICBqb2JUb1JvbGU6IChqb2I6IEpvYikgPT4ge1xyXG4gICAgY29uc3Qgcm9sZSA9IGpvYlRvUm9sZU1hcC5nZXQoam9iKTtcclxuICAgIHJldHVybiByb2xlID8/ICdub25lJztcclxuICB9LFxyXG4gIGdldEFsbFJvbGVzOiAoKTogcmVhZG9ubHkgUm9sZVtdID0+IGFsbFJvbGVzLFxyXG4gIGlzVGFua0pvYjogKGpvYjogSm9iKSA9PiB0YW5rSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGlzSGVhbGVySm9iOiAoam9iOiBKb2IpID0+IGhlYWxlckpvYnMuaW5jbHVkZXMoam9iKSxcclxuICBpc01lbGVlRHBzSm9iOiAoam9iOiBKb2IpID0+IG1lbGVlRHBzSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGlzUmFuZ2VkRHBzSm9iOiAoam9iOiBKb2IpID0+IHJhbmdlZERwc0pvYnMuaW5jbHVkZXMoam9iKSxcclxuICBpc0Nhc3RlckRwc0pvYjogKGpvYjogSm9iKSA9PiBjYXN0ZXJEcHNKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgaXNEcHNKb2I6IChqb2I6IEpvYikgPT4gZHBzSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGlzQ3JhZnRpbmdKb2I6IChqb2I6IEpvYikgPT4gY3JhZnRpbmdKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgaXNHYXRoZXJpbmdKb2I6IChqb2I6IEpvYikgPT4gZ2F0aGVyaW5nSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGlzQ29tYmF0Sm9iOiAoam9iOiBKb2IpID0+IHtcclxuICAgIHJldHVybiAhY3JhZnRpbmdKb2JzLmluY2x1ZGVzKGpvYikgJiYgIWdhdGhlcmluZ0pvYnMuaW5jbHVkZXMoam9iKTtcclxuICB9LFxyXG4gIGNhblN0dW46IChqb2I6IEpvYikgPT4gc3R1bkpvYnMuaW5jbHVkZXMoam9iKSxcclxuICBjYW5TaWxlbmNlOiAoam9iOiBKb2IpID0+IHNpbGVuY2VKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgY2FuU2xlZXA6IChqb2I6IEpvYikgPT4gc2xlZXBKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgY2FuQ2xlYW5zZTogKGpvYjogSm9iKSA9PiBjbGVhbnNlSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGNhbkZlaW50OiAoam9iOiBKb2IpID0+IGZlaW50Sm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGNhbkFkZGxlOiAoam9iOiBKb2IpID0+IGFkZGxlSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIHdhdGNoQ29tYmF0YW50OiB3YXRjaENvbWJhdGFudCxcclxuICBjbGVhcldhdGNoQ29tYmF0YW50czogKCkgPT4ge1xyXG4gICAgaWYgKGNsZWFyQ29tYmF0YW50c092ZXJyaWRlICE9PSB1bmRlZmluZWQpXHJcbiAgICAgIGNsZWFyQ29tYmF0YW50c092ZXJyaWRlKCk7XHJcbiAgICBlbHNlXHJcbiAgICAgIGRlZmF1bHRDbGVhckNvbWJhdGFudHMoKTtcclxuICB9LFxyXG4gIHNldFdhdGNoQ29tYmF0YW50T3ZlcnJpZGU6ICh3YXRjaEZ1bmM6IFdhdGNoQ29tYmF0YW50RnVuYywgY2xlYXJGdW5jOiAoKSA9PiB2b2lkKSA9PiB7XHJcbiAgICB3YXRjaENvbWJhdGFudE92ZXJyaWRlID0gd2F0Y2hGdW5jO1xyXG4gICAgY2xlYXJDb21iYXRhbnRzT3ZlcnJpZGUgPSBjbGVhckZ1bmM7XHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFV0aWw7XHJcbiIsIi8vIEF1dG8tZ2VuZXJhdGVkIGZyb20gZ2VuX3pvbmVfaWRfYW5kX2luZm8ucHlcclxuLy8gRE8gTk9UIEVESVQgVEhJUyBGSUxFIERJUkVDVExZXHJcblxyXG5jb25zdCBkYXRhID0ge1xyXG4gICdBQmxvb2R5UmV1bmlvbic6IDU2MCxcclxuICAnQUZyb3N0eVJlY2VwdGlvbic6IDEwMTAsXHJcbiAgJ0FQYXRoVW52ZWlsZWQnOiAxMDE1LFxyXG4gICdBUmVsaWNSZWJvcm5UaGVDaGltZXJhJzogMzY4LFxyXG4gICdBUmVsaWNSZWJvcm5UaGVIeWRyYSc6IDM2OSxcclxuICAnQVJlcXVpZW1Gb3JIZXJvZXMnOiA4MzAsXHJcbiAgJ0FTbGVlcERpc3R1cmJlZCc6IDkxNCxcclxuICAnQVNwZWN0YWNsZUZvclRoZUFnZXMnOiA1MzMsXHJcbiAgJ0FjY3J1ZUVubWl0eUZyb21NdWx0aXBsZVRhcmdldHMnOiA1NDAsXHJcbiAgJ0FnbGFpYSc6IDEwNTQsXHJcbiAgJ0FpckZvcmNlT25lJzogODMyLFxyXG4gICdBa2FkYWVtaWFBbnlkZXInOiA4NDEsXHJcbiAgJ0FsYU1oaWdvJzogNjg5LFxyXG4gICdBbGV4YW5kZXJUaGVBcm1PZlRoZUZhdGhlcic6IDQ0NCxcclxuICAnQWxleGFuZGVyVGhlQXJtT2ZUaGVGYXRoZXJTYXZhZ2UnOiA0NTEsXHJcbiAgJ0FsZXhhbmRlclRoZUFybU9mVGhlU29uJzogNTIyLFxyXG4gICdBbGV4YW5kZXJUaGVBcm1PZlRoZVNvblNhdmFnZSc6IDUzMSxcclxuICAnQWxleGFuZGVyVGhlQnJlYXRoT2ZUaGVDcmVhdG9yJzogNTgxLFxyXG4gICdBbGV4YW5kZXJUaGVCcmVhdGhPZlRoZUNyZWF0b3JTYXZhZ2UnOiA1ODUsXHJcbiAgJ0FsZXhhbmRlclRoZUJ1cmRlbk9mVGhlRmF0aGVyJzogNDQ1LFxyXG4gICdBbGV4YW5kZXJUaGVCdXJkZW5PZlRoZUZhdGhlclNhdmFnZSc6IDQ1MixcclxuICAnQWxleGFuZGVyVGhlQnVyZGVuT2ZUaGVTb24nOiA1MjMsXHJcbiAgJ0FsZXhhbmRlclRoZUJ1cmRlbk9mVGhlU29uU2F2YWdlJzogNTMyLFxyXG4gICdBbGV4YW5kZXJUaGVDdWZmT2ZUaGVGYXRoZXInOiA0NDMsXHJcbiAgJ0FsZXhhbmRlclRoZUN1ZmZPZlRoZUZhdGhlclNhdmFnZSc6IDQ1MCxcclxuICAnQWxleGFuZGVyVGhlQ3VmZk9mVGhlU29uJzogNTIxLFxyXG4gICdBbGV4YW5kZXJUaGVDdWZmT2ZUaGVTb25TYXZhZ2UnOiA1MzAsXHJcbiAgJ0FsZXhhbmRlclRoZUV5ZXNPZlRoZUNyZWF0b3InOiA1ODAsXHJcbiAgJ0FsZXhhbmRlclRoZUV5ZXNPZlRoZUNyZWF0b3JTYXZhZ2UnOiA1ODQsXHJcbiAgJ0FsZXhhbmRlclRoZUZpc3RPZlRoZUZhdGhlcic6IDQ0MixcclxuICAnQWxleGFuZGVyVGhlRmlzdE9mVGhlRmF0aGVyU2F2YWdlJzogNDQ5LFxyXG4gICdBbGV4YW5kZXJUaGVGaXN0T2ZUaGVTb24nOiA1MjAsXHJcbiAgJ0FsZXhhbmRlclRoZUZpc3RPZlRoZVNvblNhdmFnZSc6IDUyOSxcclxuICAnQWxleGFuZGVyVGhlSGVhcnRPZlRoZUNyZWF0b3InOiA1ODIsXHJcbiAgJ0FsZXhhbmRlclRoZUhlYXJ0T2ZUaGVDcmVhdG9yU2F2YWdlJzogNTg2LFxyXG4gICdBbGV4YW5kZXJUaGVTb3VsT2ZUaGVDcmVhdG9yJzogNTgzLFxyXG4gICdBbGV4YW5kZXJUaGVTb3VsT2ZUaGVDcmVhdG9yU2F2YWdlJzogNTg3LFxyXG4gICdBbGxzV2VsbFRoYXRFbmRzSW5UaGVXZWxsJzogMjIwLFxyXG4gICdBbGxzV2VsbFRoYXRTdGFydHNXZWxsJzogNzk2LFxyXG4gICdBbHBoYXNjYXBlVjEwJzogNzk4LFxyXG4gICdBbHBoYXNjYXBlVjEwU2F2YWdlJzogODAyLFxyXG4gICdBbHBoYXNjYXBlVjIwJzogNzk5LFxyXG4gICdBbHBoYXNjYXBlVjIwU2F2YWdlJzogODAzLFxyXG4gICdBbHBoYXNjYXBlVjMwJzogODAwLFxyXG4gICdBbHBoYXNjYXBlVjMwU2F2YWdlJzogODA0LFxyXG4gICdBbHBoYXNjYXBlVjQwJzogODAxLFxyXG4gICdBbHBoYXNjYXBlVjQwU2F2YWdlJzogODA1LFxyXG4gICdBbHphZGFhbHNMZWdhY3knOiAxMDUwLFxyXG4gICdBbWF1cm90JzogODM4LFxyXG4gICdBbWRhcG9yS2VlcCc6IDE2NyxcclxuICAnQW1kYXBvcktlZXBIYXJkJzogMTg5LFxyXG4gICdBbWhBcmFlbmcnOiA4MTUsXHJcbiAgJ0FuYW1uZXNpc0FueWRlcic6IDg5OCxcclxuICAnQW5ub3lUaGVWb2lkJzogMjIyLFxyXG4gICdBc1RoZUhlYXJ0Qmlkcyc6IDg5NCxcclxuICAnQXNUaGVIZWF2ZW5zQnVybic6IDEwMTIsXHJcbiAgJ0FzcGhvZGVsb3NUaGVGaXJzdENpcmNsZSc6IDEwMDIsXHJcbiAgJ0FzcGhvZGVsb3NUaGVGaXJzdENpcmNsZVNhdmFnZSc6IDEwMDMsXHJcbiAgJ0FzcGhvZGVsb3NUaGVGb3VydGhDaXJjbGUnOiAxMDA4LFxyXG4gICdBc3Bob2RlbG9zVGhlRm91cnRoQ2lyY2xlU2F2YWdlJzogMTAwOSxcclxuICAnQXNwaG9kZWxvc1RoZVNlY29uZENpcmNsZSc6IDEwMDQsXHJcbiAgJ0FzcGhvZGVsb3NUaGVTZWNvbmRDaXJjbGVTYXZhZ2UnOiAxMDA1LFxyXG4gICdBc3Bob2RlbG9zVGhlVGhpcmRDaXJjbGUnOiAxMDA2LFxyXG4gICdBc3Bob2RlbG9zVGhlVGhpcmRDaXJjbGVTYXZhZ2UnOiAxMDA3LFxyXG4gICdBc3Npc3RBbGxpZXNJbkRlZmVhdGluZ0FUYXJnZXQnOiA1NDQsXHJcbiAgJ0FzdHJhZ2Fsb3MnOiA3MjksXHJcbiAgJ0F2b2lkQXJlYU9mRWZmZWN0QXR0YWNrcyc6IDUzNyxcclxuICAnQXp5c0xsYSc6IDQwMixcclxuICAnQmFlbHNhcnNXYWxsJzogNjE1LFxyXG4gICdCYXJkYW1zTWV0dGxlJzogNjIzLFxyXG4gICdCYXNpY1RyYWluaW5nRW5lbXlQYXJ0aWVzJzogMjE0LFxyXG4gICdCYXNpY1RyYWluaW5nRW5lbXlTdHJvbmdob2xkcyc6IDIxNSxcclxuICAnQmF0dGxlSW5UaGVCaWdLZWVwJzogMzk2LFxyXG4gICdCYXR0bGVPblRoZUJpZ0JyaWRnZSc6IDM2NixcclxuICAnQmxvb2RPblRoZURlY2snOiA3MDgsXHJcbiAgJ0JyYXlmbG94c0xvbmdzdG9wJzogMTA0MSxcclxuICAnQnJheWZsb3hzTG9uZ3N0b3BIYXJkJzogMzYyLFxyXG4gICdDYXBlV2VzdHdpbmQnOiAxMDQ5LFxyXG4gICdDYXN0cnVtQWJhbmlhJzogNjYxLFxyXG4gICdDYXN0cnVtRmx1bWluaXMnOiA3NzgsXHJcbiAgJ0Nhc3RydW1NYXJpbnVtJzogOTM0LFxyXG4gICdDYXN0cnVtTWFyaW51bURyeWRvY2tzJzogOTY3LFxyXG4gICdDYXN0cnVtTWFyaW51bUV4dHJlbWUnOiA5MzUsXHJcbiAgJ0Nhc3RydW1NZXJpZGlhbnVtJzogMTA0MyxcclxuICAnQ2VudHJhbFNocm91ZCc6IDE0OCxcclxuICAnQ2VudHJhbFRoYW5hbGFuJzogMTQxLFxyXG4gICdDaG9jb2JvUmFjZUNvc3RhRGVsU29sJzogMzg5LFxyXG4gICdDaG9jb2JvUmFjZVNhZ29saWlSb2FkJzogMzkwLFxyXG4gICdDaG9jb2JvUmFjZVRyYW5xdWlsUGF0aHMnOiAzOTEsXHJcbiAgJ0Nob2NvYm9SYWNlVHV0b3JpYWwnOiA0MTcsXHJcbiAgJ0NpbmRlckRyaWZ0JzogODk3LFxyXG4gICdDaW5kZXJEcmlmdEV4dHJlbWUnOiA5MTIsXHJcbiAgJ0Nsb3VkTmluZSc6IDEwMzQsXHJcbiAgJ0NvZXJ0aGFzQ2VudHJhbEhpZ2hsYW5kcyc6IDE1NSxcclxuICAnQ29lcnRoYXNXZXN0ZXJuSGlnaGxhbmRzJzogMzk3LFxyXG4gICdDb21pbmdDbGVhbic6IDg2MCxcclxuICAnQ29udGFpbm1lbnRCYXlQMVQ2JzogNTc2LFxyXG4gICdDb250YWlubWVudEJheVAxVDZFeHRyZW1lJzogNTc3LFxyXG4gICdDb250YWlubWVudEJheVMxVDcnOiA1MTcsXHJcbiAgJ0NvbnRhaW5tZW50QmF5UzFUN0V4dHJlbWUnOiA1MjQsXHJcbiAgJ0NvbnRhaW5tZW50QmF5WjFUOSc6IDYzNyxcclxuICAnQ29udGFpbm1lbnRCYXlaMVQ5RXh0cmVtZSc6IDYzOCxcclxuICAnQ29wcGVyYmVsbE1pbmVzJzogMTAzOCxcclxuICAnQ29wcGVyYmVsbE1pbmVzSGFyZCc6IDM0OSxcclxuICAnQ3J5c3RhbGxpbmVDb25mbGljdEN1c3RvbU1hdGNoQ2xvdWROaW5lJzogMTA2MCxcclxuICAnQ3J5c3RhbGxpbmVDb25mbGljdEN1c3RvbU1hdGNoVGhlUGFsYWlzdHJhJzogMTA1OCxcclxuICAnQ3J5c3RhbGxpbmVDb25mbGljdEN1c3RvbU1hdGNoVGhlVm9sY2FuaWNIZWFydCc6IDEwNTksXHJcbiAgJ0N1cmlvdXNHb3JnZU1lZXRzSGlzTWF0Y2gnOiA3MTcsXHJcbiAgJ0N1dHRlcnNDcnknOiAxNzAsXHJcbiAgJ0RhcmtBc1RoZU5pZ2h0U2t5JzogNzEzLFxyXG4gICdEZWF0aFVudG9EYXduJzogOTc3LFxyXG4gICdEZWZlYXRBbk9jY3VwaWVkVGFyZ2V0JzogNTQ1LFxyXG4gICdEZWx0YXNjYXBlVjEwJzogNjkxLFxyXG4gICdEZWx0YXNjYXBlVjEwU2F2YWdlJzogNjk1LFxyXG4gICdEZWx0YXNjYXBlVjIwJzogNjkyLFxyXG4gICdEZWx0YXNjYXBlVjIwU2F2YWdlJzogNjk2LFxyXG4gICdEZWx0YXNjYXBlVjMwJzogNjkzLFxyXG4gICdEZWx0YXNjYXBlVjMwU2F2YWdlJzogNjk3LFxyXG4gICdEZWx0YXNjYXBlVjQwJzogNjk0LFxyXG4gICdEZWx0YXNjYXBlVjQwU2F2YWdlJzogNjk4LFxyXG4gICdEZWx1YnJ1bVJlZ2luYWUnOiA5MzYsXHJcbiAgJ0RlbHVicnVtUmVnaW5hZVNhdmFnZSc6IDkzNyxcclxuICAnRGV2YXN0YXRpb24nOiAxMDUyLFxyXG4gICdEb2huTWhlZyc6IDgyMSxcclxuICAnRG9tYUNhc3RsZSc6IDY2MCxcclxuICAnRHJhZ29uU291bmQnOiA3MTQsXHJcbiAgJ0RyYWdvbnNvbmdzUmVwcmlzZVVsdGltYXRlJzogOTY4LFxyXG4gICdEdW5TY2FpdGgnOiA2MjcsXHJcbiAgJ0R6ZW1hZWxEYXJraG9sZCc6IDE3MSxcclxuICAnRWFzdFNocm91ZCc6IDE1MixcclxuICAnRWFzdGVybkxhTm9zY2VhJzogMTM3LFxyXG4gICdFYXN0ZXJuVGhhbmFsYW4nOiAxNDUsXHJcbiAgJ0VkZW5zR2F0ZURlc2NlbnQnOiA4NTAsXHJcbiAgJ0VkZW5zR2F0ZURlc2NlbnRTYXZhZ2UnOiA4NTQsXHJcbiAgJ0VkZW5zR2F0ZUludW5kYXRpb24nOiA4NTEsXHJcbiAgJ0VkZW5zR2F0ZUludW5kYXRpb25TYXZhZ2UnOiA4NTUsXHJcbiAgJ0VkZW5zR2F0ZVJlc3VycmVjdGlvbic6IDg0OSxcclxuICAnRWRlbnNHYXRlUmVzdXJyZWN0aW9uU2F2YWdlJzogODUzLFxyXG4gICdFZGVuc0dhdGVTZXB1bHR1cmUnOiA4NTIsXHJcbiAgJ0VkZW5zR2F0ZVNlcHVsdHVyZVNhdmFnZSc6IDg1NixcclxuICAnRWRlbnNQcm9taXNlQW5hbW9ycGhvc2lzJzogOTQ0LFxyXG4gICdFZGVuc1Byb21pc2VBbmFtb3JwaG9zaXNTYXZhZ2UnOiA5NDgsXHJcbiAgJ0VkZW5zUHJvbWlzZUV0ZXJuaXR5JzogOTQ1LFxyXG4gICdFZGVuc1Byb21pc2VFdGVybml0eVNhdmFnZSc6IDk0OSxcclxuICAnRWRlbnNQcm9taXNlTGl0YW55JzogOTQzLFxyXG4gICdFZGVuc1Byb21pc2VMaXRhbnlTYXZhZ2UnOiA5NDcsXHJcbiAgJ0VkZW5zUHJvbWlzZVVtYnJhJzogOTQyLFxyXG4gICdFZGVuc1Byb21pc2VVbWJyYVNhdmFnZSc6IDk0NixcclxuICAnRWRlbnNWZXJzZUZ1bG1pbmF0aW9uJzogOTAyLFxyXG4gICdFZGVuc1ZlcnNlRnVsbWluYXRpb25TYXZhZ2UnOiA5MDYsXHJcbiAgJ0VkZW5zVmVyc2VGdXJvcic6IDkwMyxcclxuICAnRWRlbnNWZXJzZUZ1cm9yU2F2YWdlJzogOTA3LFxyXG4gICdFZGVuc1ZlcnNlSWNvbm9jbGFzbSc6IDkwNCxcclxuICAnRWRlbnNWZXJzZUljb25vY2xhc21TYXZhZ2UnOiA5MDgsXHJcbiAgJ0VkZW5zVmVyc2VSZWZ1bGdlbmNlJzogOTA1LFxyXG4gICdFZGVuc1ZlcnNlUmVmdWxnZW5jZVNhdmFnZSc6IDkwOSxcclxuICAnRWxwaXMnOiA5NjEsXHJcbiAgJ0VtYW5hdGlvbic6IDcxOSxcclxuICAnRW1hbmF0aW9uRXh0cmVtZSc6IDcyMCxcclxuICAnRW1pc3NhcnlPZlRoZURhd24nOiA3NjksXHJcbiAgJ0VuZHdhbGtlcic6IDEwMTMsXHJcbiAgJ0VuZ2FnZU11bHRpcGxlVGFyZ2V0cyc6IDU0MSxcclxuICAnRXVsbW9yZSc6IDgyMCxcclxuICAnRXZlck1hcmNoSGVhdmVuc3dhcmQnOiAxMDE4LFxyXG4gICdFeGVjdXRlQUNvbWJvSW5CYXR0bGUnOiA1MzksXHJcbiAgJ0V4ZWN1dGVBQ29tYm9Ub0luY3JlYXNlRW5taXR5JzogNTM4LFxyXG4gICdFeGVjdXRlQVJhbmdlZEF0dGFja1RvSW5jcmVhc2VFbm1pdHknOiA1NDIsXHJcbiAgJ0ZhZGVkTWVtb3JpZXMnOiA5MzIsXHJcbiAgJ0ZpbmFsRXhlcmNpc2UnOiA1NTIsXHJcbiAgJ0ZpdEZvckFRdWVlbic6IDk1NSxcclxuICAnRmxpY2tpbmdTdGlja3NBbmRUYWtpbmdOYW1lcyc6IDIxOSxcclxuICAnRm9ybG9ybkdsb3J5JzogMTA1MSxcclxuICAnRm91bmRhdGlvbic6IDQxOCxcclxuICAnRm91clBsYXllck1haGpvbmdRdWlja01hdGNoS3VpdGFuRGlzYWJsZWQnOiA4MzEsXHJcbiAgJ0dhcmxlbWFsZCc6IDk1OCxcclxuICAnSGFsYXRhbGknOiAxNjIsXHJcbiAgJ0hhbGF0YWxpSGFyZCc6IDM2MCxcclxuICAnSGF1a2tlTWFub3InOiAxMDQwLFxyXG4gICdIYXVra2VNYW5vckhhcmQnOiAzNTAsXHJcbiAgJ0hlYWxBbkFsbHknOiA1NDksXHJcbiAgJ0hlYWxNdWx0aXBsZUFsbGllcyc6IDU1MCxcclxuICAnSGVhdmVuT25IaWdoRmxvb3JzMTFfMjAnOiA3NzEsXHJcbiAgJ0hlYXZlbk9uSGlnaEZsb29yczFfMTAnOiA3NzAsXHJcbiAgJ0hlYXZlbk9uSGlnaEZsb29yczIxXzMwJzogNzcyLFxyXG4gICdIZWF2ZW5PbkhpZ2hGbG9vcnMzMV80MCc6IDc4MixcclxuICAnSGVhdmVuT25IaWdoRmxvb3JzNDFfNTAnOiA3NzMsXHJcbiAgJ0hlYXZlbk9uSGlnaEZsb29yczUxXzYwJzogNzgzLFxyXG4gICdIZWF2ZW5PbkhpZ2hGbG9vcnM2MV83MCc6IDc3NCxcclxuICAnSGVhdmVuT25IaWdoRmxvb3JzNzFfODAnOiA3ODQsXHJcbiAgJ0hlYXZlbk9uSGlnaEZsb29yczgxXzkwJzogNzc1LFxyXG4gICdIZWF2ZW5PbkhpZ2hGbG9vcnM5MV8xMDAnOiA3ODUsXHJcbiAgJ0hlbGxzS2llcic6IDgxMCxcclxuICAnSGVsbHNLaWVyRXh0cmVtZSc6IDgxMSxcclxuICAnSGVsbHNMaWQnOiA3NDIsXHJcbiAgJ0hlcm9PblRoZUhhbGZTaGVsbCc6IDIxNixcclxuICAnSGlkZGVuR29yZ2UnOiA3OTEsXHJcbiAgJ0hvbG1pbnN0ZXJTd2l0Y2gnOiA4MzcsXHJcbiAgJ0h1bGxicmVha2VySXNsZSc6IDM2MSxcclxuICAnSHVsbGJyZWFrZXJJc2xlSGFyZCc6IDU1NyxcclxuICAnSWR5bGxzaGlyZSc6IDQ3OCxcclxuICAnSWxNaGVnJzogODE2LFxyXG4gICdJbkZyb21UaGVDb2xkJzogMTAxMSxcclxuICAnSW5UaGFsc05hbWUnOiA3MDUsXHJcbiAgJ0ludGVyYWN0V2l0aFRoZUJhdHRsZWZpZWxkJzogNTQ4LFxyXG4gICdJbnRlcmRpbWVuc2lvbmFsUmlmdCc6IDY5MCxcclxuICAnSXRzUHJvYmFibHlBVHJhcCc6IDY2NSxcclxuICAnS2hvbHVzaWEnOiA4MTQsXHJcbiAgJ0t0aXNpc0h5cGVyYm9yZWlhJzogOTc0LFxyXG4gICdLdWdhbmUnOiA2MjgsXHJcbiAgJ0t1Z2FuZUNhc3RsZSc6IDY2MixcclxuICAnS3VnYW5lT2hhc2hpJzogODA2LFxyXG4gICdMYWJ5cmludGhvcyc6IDk1NixcclxuICAnTGFpZFRvUmVzdCc6IDEwMTcsXHJcbiAgJ0xha2VsYW5kJzogODEzLFxyXG4gICdMZWdlbmRPZlRoZU5vdFNvSGlkZGVuVGVtcGxlJzogODU5LFxyXG4gICdMaWZlRXBoZW1lcmFsUGF0aEV0ZXJuYWwnOiAxMDIzLFxyXG4gICdMaW1zYUxvbWluc2FMb3dlckRlY2tzJzogMTI5LFxyXG4gICdMaW1zYUxvbWluc2FVcHBlckRlY2tzJzogMTI4LFxyXG4gICdMb25nTGl2ZVRoZVF1ZWVuJzogMjk4LFxyXG4gICdMb3ZtTWFzdGVyVG91cm5hbWVudCc6IDUwNixcclxuICAnTG92bVBsYXllckJhdHRsZU5vblJwJzogNTkxLFxyXG4gICdMb3ZtUGxheWVyQmF0dGxlUnAnOiA1ODksXHJcbiAgJ0xvdm1Ub3VybmFtZW50JzogNTkwLFxyXG4gICdMb3dlckxhTm9zY2VhJzogMTM1LFxyXG4gICdNYWxpa2Foc1dlbGwnOiA4MzYsXHJcbiAgJ01hcmVMYW1lbnRvcnVtJzogOTU5LFxyXG4gICdNYXRjaEFsbCc6IG51bGwsXHJcbiAgJ01hdG95YXNSZWxpY3QnOiA5MzMsXHJcbiAgJ01hdHN1YmFNYXloZW0nOiA3MTAsXHJcbiAgJ01lbW9yaWFNaXNlcmFFeHRyZW1lJzogOTEzLFxyXG4gICdNZXNzZW5nZXJPZlRoZVdpbmRzJzogODM0LFxyXG4gICdNaWRkbGVMYU5vc2NlYSc6IDEzNCxcclxuICAnTWlzdCc6IDEzNixcclxuICAnTW9yRGhvbmEnOiAxNTYsXHJcbiAgJ01vcmVUaGFuQUZlZWxlcic6IDIyMSxcclxuICAnTXRHdWxnJzogODIyLFxyXG4gICdOYWFkYW0nOiA2ODgsXHJcbiAgJ05ldmVycmVhcCc6IDQyMCxcclxuICAnTmV3R3JpZGFuaWEnOiAxMzIsXHJcbiAgJ05vcnRoU2hyb3VkJzogMTU0LFxyXG4gICdOb3J0aGVyblRoYW5hbGFuJzogMTQ3LFxyXG4gICdOeWVsYmVydHNMYW1lbnQnOiA4NzYsXHJcbiAgJ09jZWFuRmlzaGluZyc6IDkwMCxcclxuICAnT2xkR3JpZGFuaWEnOiAxMzMsXHJcbiAgJ09sZFNoYXJsYXlhbic6IDk2MixcclxuICAnT25lTGlmZUZvck9uZVdvcmxkJzogNTkyLFxyXG4gICdPbnNhbEhha2FpckRhbnNoaWdOYWFkYW0nOiA4ODgsXHJcbiAgJ091ckNvbXByb21pc2UnOiA3MTYsXHJcbiAgJ091clVuc3VuZ0hlcm9lcyc6IDcyMixcclxuICAnT3V0ZXJMYU5vc2NlYSc6IDE4MCxcclxuICAnUGFnbHRoYW4nOiA5MzgsXHJcbiAgJ1BoYXJvc1Npcml1cyc6IDE2MCxcclxuICAnUGhhcm9zU2lyaXVzSGFyZCc6IDUxMCxcclxuICAnUHVsbGluZ1BvaXNvblBvc2llcyc6IDE5MSxcclxuICAnUmFkekF0SGFuJzogOTYzLFxyXG4gICdSYWlzaW5nVGhlU3dvcmQnOiA3MDYsXHJcbiAgJ1JldHVybk9mVGhlQnVsbCc6IDQwMyxcclxuICAnUmhhbGdyc1JlYWNoJzogNjM1LFxyXG4gICdTYWdlc0ZvY3VzJzogMTAyMixcclxuICAnU2FpbnRNb2NpYW5uZXNBcmJvcmV0dW0nOiA1MTEsXHJcbiAgJ1NhaW50TW9jaWFubmVzQXJib3JldHVtSGFyZCc6IDc4OCxcclxuICAnU2FzdGFzaGEnOiAxMDM2LFxyXG4gICdTYXN0YXNoYUhhcmQnOiAzODcsXHJcbiAgJ1NlYWxSb2NrU2VpemUnOiA0MzEsXHJcbiAgJ1NoYWRvd0FuZENsYXcnOiAyMjMsXHJcbiAgJ1NoaXN1aU9mVGhlVmlvbGV0VGlkZXMnOiA2MTYsXHJcbiAgJ1NpZ21hc2NhcGVWMTAnOiA3NDgsXHJcbiAgJ1NpZ21hc2NhcGVWMTBTYXZhZ2UnOiA3NTIsXHJcbiAgJ1NpZ21hc2NhcGVWMjAnOiA3NDksXHJcbiAgJ1NpZ21hc2NhcGVWMjBTYXZhZ2UnOiA3NTMsXHJcbiAgJ1NpZ21hc2NhcGVWMzAnOiA3NTAsXHJcbiAgJ1NpZ21hc2NhcGVWMzBTYXZhZ2UnOiA3NTQsXHJcbiAgJ1NpZ21hc2NhcGVWNDAnOiA3NTEsXHJcbiAgJ1NpZ21hc2NhcGVWNDBTYXZhZ2UnOiA3NTUsXHJcbiAgJ1NtaWxldG9uJzogOTc2LFxyXG4gICdTbm93Y2xvYWsnOiAzNzEsXHJcbiAgJ1NvaG1BbCc6IDQ0MSxcclxuICAnU29obUFsSGFyZCc6IDYxNyxcclxuICAnU29ocktoYWknOiA1NTUsXHJcbiAgJ1NvbGVtblRyaW5pdHknOiAzMDAsXHJcbiAgJ1NvdXRoU2hyb3VkJzogMTUzLFxyXG4gICdTb3V0aGVyblRoYW5hbGFuJzogMTQ2LFxyXG4gICdTcGVjaWFsRXZlbnRJJzogMzUzLFxyXG4gICdTcGVjaWFsRXZlbnRJaSc6IDM1NCxcclxuICAnU3BlY2lhbEV2ZW50SWlpJzogNTA5LFxyXG4gICdTdGluZ2luZ0JhY2snOiAxOTIsXHJcbiAgJ1N5cmN1c1Rvd2VyJzogMzcyLFxyXG4gICdUaGF2bmFpcic6IDk1NyxcclxuICAnVGhlQWVyeSc6IDQzNSxcclxuICAnVGhlQWV0aGVyb2NoZW1pY2FsUmVzZWFyY2hGYWNpbGl0eSc6IDQzOCxcclxuICAnVGhlQWl0aWFzY29wZSc6IDk3OCxcclxuICAnVGhlQWtoQWZhaEFtcGhpdGhlYXRyZUV4dHJlbWUnOiAzNzgsXHJcbiAgJ1RoZUFraEFmYWhBbXBoaXRoZWF0cmVIYXJkJzogMzc3LFxyXG4gICdUaGVBa2hBZmFoQW1waGl0aGVhdHJlVW5yZWFsJzogOTMwLFxyXG4gICdUaGVBbnRpdG93ZXInOiA1MTYsXHJcbiAgJ1RoZUFxdWFwb2xpcyc6IDU1OCxcclxuICAnVGhlQXVydW1WYWxlJzogMTcyLFxyXG4gICdUaGVBemltU3RlcHBlJzogNjIyLFxyXG4gICdUaGVCYXR0bGVPbkJla2tvJzogNzExLFxyXG4gICdUaGVCaW5kaW5nQ29pbE9mQmFoYW11dFR1cm4xJzogMjQxLFxyXG4gICdUaGVCaW5kaW5nQ29pbE9mQmFoYW11dFR1cm4yJzogMjQyLFxyXG4gICdUaGVCaW5kaW5nQ29pbE9mQmFoYW11dFR1cm4zJzogMjQzLFxyXG4gICdUaGVCaW5kaW5nQ29pbE9mQmFoYW11dFR1cm40JzogMjQ0LFxyXG4gICdUaGVCaW5kaW5nQ29pbE9mQmFoYW11dFR1cm41JzogMjQ1LFxyXG4gICdUaGVCb3JkZXJsYW5kUnVpbnNTZWN1cmUnOiAzNzYsXHJcbiAgJ1RoZUJvd2xPZkVtYmVycyc6IDEwNDUsXHJcbiAgJ1RoZUJvd2xPZkVtYmVyc0V4dHJlbWUnOiAyOTUsXHJcbiAgJ1RoZUJvd2xPZkVtYmVyc0hhcmQnOiAyOTIsXHJcbiAgJ1RoZUJvemphSW5jaWRlbnQnOiA5MTEsXHJcbiAgJ1RoZUJvemphblNvdXRoZXJuRnJvbnQnOiA5MjAsXHJcbiAgJ1RoZUJ1cm4nOiA3ODksXHJcbiAgJ1RoZUNhbGFtaXR5UmV0b2xkJzogNzkwLFxyXG4gICdUaGVDYXJ0ZW5lYXVGbGF0c0hlbGlvZHJvbWUnOiA2MzMsXHJcbiAgJ1RoZUNocnlzYWxpcyc6IDQyNixcclxuICAnVGhlQ2h1cm5pbmdNaXN0cyc6IDQwMCxcclxuICAnVGhlQ2xvdWREZWNrJzogOTUwLFxyXG4gICdUaGVDbG91ZERlY2tFeHRyZW1lJzogOTUxLFxyXG4gICdUaGVDb3BpZWRGYWN0b3J5JzogODgyLFxyXG4gICdUaGVDcm93bk9mVGhlSW1tYWN1bGF0ZSc6IDg0NixcclxuICAnVGhlQ3Jvd25PZlRoZUltbWFjdWxhdGVFeHRyZW1lJzogODQ4LFxyXG4gICdUaGVDcnlzdGFyaXVtJzogODE5LFxyXG4gICdUaGVEYW5jaW5nUGxhZ3VlJzogODQ1LFxyXG4gICdUaGVEYW5jaW5nUGxhZ3VlRXh0cmVtZSc6IDg1OCxcclxuICAnVGhlRGFya0luc2lkZSc6IDk5MixcclxuICAnVGhlRGVhZEVuZHMnOiA5NzMsXHJcbiAgJ1RoZURpYWRlbSc6IDkyOSxcclxuICAnVGhlRGlhZGVtRWFzeSc6IDUxMixcclxuICAnVGhlRGlhZGVtSGFyZCc6IDUxNSxcclxuICAnVGhlRGlhZGVtSHVudGluZ0dyb3VuZHMnOiA2MjUsXHJcbiAgJ1RoZURpYWRlbUh1bnRpbmdHcm91bmRzRWFzeSc6IDYyNCxcclxuICAnVGhlRGlhZGVtVHJpYWxzT2ZUaGVGdXJ5JzogNjMwLFxyXG4gICdUaGVEaWFkZW1UcmlhbHNPZlRoZU1hdHJvbic6IDY1NixcclxuICAnVGhlRG9tYW5FbmNsYXZlJzogNzU5LFxyXG4gICdUaGVEcmFnb25zTmVjayc6IDE0MixcclxuICAnVGhlRHJhdmFuaWFuRm9yZWxhbmRzJzogMzk4LFxyXG4gICdUaGVEcmF2YW5pYW5IaW50ZXJsYW5kcyc6IDM5OSxcclxuICAnVGhlRHJvd25lZENpdHlPZlNrYWxsYSc6IDczMSxcclxuICAnVGhlRHVuZ2VvbnNPZkx5aGVHaGlhaCc6IDg3OSxcclxuICAnVGhlRHVza1ZpZ2lsJzogNDM0LFxyXG4gICdUaGVEeWluZ0dhc3AnOiA4NDcsXHJcbiAgJ1RoZUVwaWNPZkFsZXhhbmRlclVsdGltYXRlJzogODg3LFxyXG4gICdUaGVFeGNpdGF0cm9uNjAwMCc6IDEwMDAsXHJcbiAgJ1RoZUZhY2VPZlRydWVFdmlsJzogNzA5LFxyXG4gICdUaGVGaWVsZHNPZkdsb3J5U2hhdHRlcic6IDU1NCxcclxuICAnVGhlRmluYWxDb2lsT2ZCYWhhbXV0VHVybjEnOiAxOTMsXHJcbiAgJ1RoZUZpbmFsQ29pbE9mQmFoYW11dFR1cm4yJzogMTk0LFxyXG4gICdUaGVGaW5hbENvaWxPZkJhaGFtdXRUdXJuMyc6IDE5NSxcclxuICAnVGhlRmluYWxDb2lsT2ZCYWhhbXV0VHVybjQnOiAxOTYsXHJcbiAgJ1RoZUZpbmFsRGF5JzogOTk3LFxyXG4gICdUaGVGaW5hbFN0ZXBzT2ZGYWl0aCc6IDU1OSxcclxuICAnVGhlRm9yYmlkZGVuTGFuZEV1cmVrYUFuZW1vcyc6IDczMixcclxuICAnVGhlRm9yYmlkZGVuTGFuZEV1cmVrYUh5ZGF0b3MnOiA4MjcsXHJcbiAgJ1RoZUZvcmJpZGRlbkxhbmRFdXJla2FQYWdvcyc6IDc2MyxcclxuICAnVGhlRm9yYmlkZGVuTGFuZEV1cmVrYVB5cm9zJzogNzk1LFxyXG4gICdUaGVGcmFjdGFsQ29udGludXVtJzogNDMwLFxyXG4gICdUaGVGcmFjdGFsQ29udGludXVtSGFyZCc6IDc0MyxcclxuICAnVGhlRnJpbmdlcyc6IDYxMixcclxuICAnVGhlR2hpbWx5dERhcmsnOiA3OTMsXHJcbiAgJ1RoZUdpZnRPZk1lcmN5JzogMTAxOSxcclxuICAnVGhlR3JhbmRDb3Ntb3MnOiA4ODQsXHJcbiAgJ1RoZUdyZWF0R3ViYWxMaWJyYXJ5JzogNDE2LFxyXG4gICdUaGVHcmVhdEd1YmFsTGlicmFyeUhhcmQnOiA1NzgsXHJcbiAgJ1RoZUdyZWF0SHVudCc6IDc2MSxcclxuICAnVGhlR3JlYXRIdW50RXh0cmVtZSc6IDc2MixcclxuICAnVGhlR3JlYXRTaGlwVnlsYnJhbmQnOiA5NTQsXHJcbiAgJ1RoZUhhcmRlbmVkSGVhcnQnOiA4NzMsXHJcbiAgJ1RoZUhhcnZlc3RCZWdpbnMnOiAxMDIwLFxyXG4gICdUaGVIYXVudGVkTWFub3InOiA1NzEsXHJcbiAgJ1RoZUhlYXJ0T2ZUaGVQcm9ibGVtJzogNzE4LFxyXG4gICdUaGVIZXJvZXNHYXVudGxldCc6IDkxNixcclxuICAnVGhlSGlkZGVuQ2FuYWxzT2ZVem5haXInOiA3MjUsXHJcbiAgJ1RoZUhvd2xpbmdFeWUnOiAxMDQ3LFxyXG4gICdUaGVIb3dsaW5nRXllRXh0cmVtZSc6IDI5NyxcclxuICAnVGhlSG93bGluZ0V5ZUhhcmQnOiAyOTQsXHJcbiAgJ1RoZUh1bnRlcnNMZWdhY3knOiA4NzUsXHJcbiAgJ1RoZUphZGVTdG9hJzogNzQ2LFxyXG4gICdUaGVKYWRlU3RvYUV4dHJlbWUnOiA3NTgsXHJcbiAgJ1RoZUtlZXBlck9mVGhlTGFrZSc6IDE1MCxcclxuICAnVGhlS2lsbGluZ0FydCc6IDEwMjEsXHJcbiAgJ1RoZUxhYnlyaW50aE9mVGhlQW5jaWVudHMnOiAxNzQsXHJcbiAgJ1RoZUxpbWl0bGVzc0JsdWVFeHRyZW1lJzogNDQ3LFxyXG4gICdUaGVMaW1pdGxlc3NCbHVlSGFyZCc6IDQzNixcclxuICAnVGhlTG9jaHMnOiA2MjEsXHJcbiAgJ1RoZUxvc3RBbmRUaGVGb3VuZCc6IDg3NCxcclxuICAnVGhlTG9zdENhbmFsc09mVXpuYWlyJzogNzEyLFxyXG4gICdUaGVMb3N0Q2l0eU9mQW1kYXBvcic6IDM2MyxcclxuICAnVGhlTG9zdENpdHlPZkFtZGFwb3JIYXJkJzogNTE5LFxyXG4gICdUaGVNaW5zdHJlbHNCYWxsYWRFbmRzaW5nZXJzQXJpYSc6IDk5OCxcclxuICAnVGhlTWluc3RyZWxzQmFsbGFkSGFkZXNzRWxlZ3knOiA4ODUsXHJcbiAgJ1RoZU1pbnN0cmVsc0JhbGxhZEh5ZGFlbHluc0NhbGwnOiA5OTYsXHJcbiAgJ1RoZU1pbnN0cmVsc0JhbGxhZE5pZGhvZ2dzUmFnZSc6IDU2NixcclxuICAnVGhlTWluc3RyZWxzQmFsbGFkU2hpbnJ5dXNEb21haW4nOiA3MzAsXHJcbiAgJ1RoZU1pbnN0cmVsc0JhbGxhZFRob3JkYW5zUmVpZ24nOiA0NDgsXHJcbiAgJ1RoZU1pbnN0cmVsc0JhbGxhZFRzdWt1eW9taXNQYWluJzogNzc5LFxyXG4gICdUaGVNaW5zdHJlbHNCYWxsYWRVbHRpbWFzQmFuZSc6IDM0OCxcclxuICAnVGhlTWluc3RyZWxzQmFsbGFkWm9kaWFya3NGYWxsJzogOTkzLFxyXG4gICdUaGVNb3RoZXJjcnlzdGFsJzogOTk1LFxyXG4gICdUaGVOYXZlbCc6IDEwNDYsXHJcbiAgJ1RoZU5hdmVsRXh0cmVtZSc6IDI5NixcclxuICAnVGhlTmF2ZWxIYXJkJzogMjkzLFxyXG4gICdUaGVOYXZlbFVucmVhbCc6IDk1MyxcclxuICAnVGhlT3Jib25uZU1vbmFzdGVyeSc6IDgyNixcclxuICAnVGhlT3JwaGFuc0FuZFRoZUJyb2tlbkJsYWRlJzogNzE1LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxMDFfMTEwJzogNTk4LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxMTFfMTIwJzogNTk5LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxMV8yMCc6IDU2MixcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTIxXzEzMCc6IDYwMCxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTMxXzE0MCc6IDYwMSxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTQxXzE1MCc6IDYwMixcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTUxXzE2MCc6IDYwMyxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTYxXzE3MCc6IDYwNCxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTcxXzE4MCc6IDYwNSxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTgxXzE5MCc6IDYwNixcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTkxXzIwMCc6IDYwNyxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMV8xMCc6IDU2MSxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMjFfMzAnOiA1NjMsXHJcbiAgJ1RoZVBhbGFjZU9mVGhlRGVhZEZsb29yczMxXzQwJzogNTY0LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnM0MV81MCc6IDU2NSxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzNTFfNjAnOiA1OTMsXHJcbiAgJ1RoZVBhbGFjZU9mVGhlRGVhZEZsb29yczYxXzcwJzogNTk0LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnM3MV84MCc6IDU5NSxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzODFfOTAnOiA1OTYsXHJcbiAgJ1RoZVBhbGFjZU9mVGhlRGVhZEZsb29yczkxXzEwMCc6IDU5NyxcclxuICAnVGhlUGFsYWlzdHJhJzogMTAzMixcclxuICAnVGhlUGVha3MnOiA2MjAsXHJcbiAgJ1RoZVBoYW50b21zRmVhc3QnOiA5OTQsXHJcbiAgJ1RoZVBpbGxhcnMnOiA0MTksXHJcbiAgJ1RoZVBvb2xPZlRyaWJ1dGUnOiA2NzQsXHJcbiAgJ1RoZVBvb2xPZlRyaWJ1dGVFeHRyZW1lJzogNjc3LFxyXG4gICdUaGVQb3J0YURlY3VtYW5hJzogMTA0OCxcclxuICAnVGhlUHJhZXRvcml1bSc6IDEwNDQsXHJcbiAgJ1RoZVB1cHBldHNCdW5rZXInOiA5MTcsXHJcbiAgJ1RoZVFpdGFuYVJhdmVsJzogODIzLFxyXG4gICdUaGVSYWt0aWthR3JlYXR3b29kJzogODE3LFxyXG4gICdUaGVSZXNvbmFudCc6IDY4NCxcclxuICAnVGhlUmlkb3JhbmFMaWdodGhvdXNlJzogNzc2LFxyXG4gICdUaGVSb3lhbENpdHlPZlJhYmFuYXN0cmUnOiA3MzQsXHJcbiAgJ1RoZVJveWFsTWVuYWdlcmllJzogNjc5LFxyXG4gICdUaGVSdWJ5U2VhJzogNjEzLFxyXG4gICdUaGVTZWFPZkNsb3Vkcyc6IDQwMSxcclxuICAnVGhlU2VhdE9mU2FjcmlmaWNlJzogOTIyLFxyXG4gICdUaGVTZWF0T2ZTYWNyaWZpY2VFeHRyZW1lJzogOTIzLFxyXG4gICdUaGVTZWNvbmRDb2lsT2ZCYWhhbXV0U2F2YWdlVHVybjEnOiAzODAsXHJcbiAgJ1RoZVNlY29uZENvaWxPZkJhaGFtdXRTYXZhZ2VUdXJuMic6IDM4MSxcclxuICAnVGhlU2Vjb25kQ29pbE9mQmFoYW11dFNhdmFnZVR1cm4zJzogMzgyLFxyXG4gICdUaGVTZWNvbmRDb2lsT2ZCYWhhbXV0U2F2YWdlVHVybjQnOiAzODMsXHJcbiAgJ1RoZVNlY29uZENvaWxPZkJhaGFtdXRUdXJuMSc6IDM1NSxcclxuICAnVGhlU2Vjb25kQ29pbE9mQmFoYW11dFR1cm4yJzogMzU2LFxyXG4gICdUaGVTZWNvbmRDb2lsT2ZCYWhhbXV0VHVybjMnOiAzNTcsXHJcbiAgJ1RoZVNlY29uZENvaWxPZkJhaGFtdXRUdXJuNCc6IDM1OCxcclxuICAnVGhlU2hpZnRpbmdBbHRhcnNPZlV6bmFpcic6IDc5NCxcclxuICAnVGhlU2hpZnRpbmdPdWJsaWV0dGVzT2ZMeWhlR2hpYWgnOiA5MjQsXHJcbiAgJ1RoZVNpbmd1bGFyaXR5UmVhY3Rvcic6IDQzNyxcclxuICAnVGhlU2lyZW5zb25nU2VhJzogNjI2LFxyXG4gICdUaGVTdGVwc09mRmFpdGgnOiAxNDMsXHJcbiAgJ1RoZVN0aWdtYURyZWFtc2NhcGUnOiA5ODYsXHJcbiAgJ1RoZVN0b25lVmlnaWwnOiAxMDQyLFxyXG4gICdUaGVTdG9uZVZpZ2lsSGFyZCc6IDM2NSxcclxuICAnVGhlU3RyaWtpbmdUcmVlRXh0cmVtZSc6IDM3NSxcclxuICAnVGhlU3RyaWtpbmdUcmVlSGFyZCc6IDM3NCxcclxuICAnVGhlU3Vua2VuVGVtcGxlT2ZRYXJuJzogMTYzLFxyXG4gICdUaGVTdW5rZW5UZW1wbGVPZlFhcm5IYXJkJzogMzY3LFxyXG4gICdUaGVTd2FsbG93c0NvbXBhc3MnOiA3NjgsXHJcbiAgJ1RoZVRhbVRhcmFEZWVwY3JvZnQnOiAxMDM3LFxyXG4gICdUaGVUYW1UYXJhRGVlcGNyb2Z0SGFyZCc6IDM3MyxcclxuICAnVGhlVGVtcGVzdCc6IDgxOCxcclxuICAnVGhlVGVtcGxlT2ZUaGVGaXN0JzogNjYzLFxyXG4gICdUaGVUaG91c2FuZE1hd3NPZlRvdG9SYWsnOiAxMDM5LFxyXG4gICdUaGVUb3dlckF0UGFyYWRpZ21zQnJlYWNoJzogOTY2LFxyXG4gICdUaGVUb3dlck9mQmFiaWwnOiA5NjksXHJcbiAgJ1RoZVRvd2VyT2Zab3QnOiA5NTIsXHJcbiAgJ1RoZVRyaXBsZVRyaWFkQmF0dGxlaGFsbCc6IDU3OSxcclxuICAnVGhlVHdpbm5pbmcnOiA4NDAsXHJcbiAgJ1RoZVVuZW5kaW5nQ29pbE9mQmFoYW11dFVsdGltYXRlJzogNzMzLFxyXG4gICdUaGVWYWxlbnRpb25lc0NlcmVtb255JzogNzQxLFxyXG4gICdUaGVWYXVsdCc6IDQyMSxcclxuICAnVGhlVm9pZEFyayc6IDUwOCxcclxuICAnVGhlVm9sY2FuaWNIZWFydCc6IDEwMzMsXHJcbiAgJ1RoZVdhbmRlcmVyc1BhbGFjZSc6IDE1OSxcclxuICAnVGhlV2FuZGVyZXJzUGFsYWNlSGFyZCc6IDE4OCxcclxuICAnVGhlV2VhcG9uc1JlZnJhaW5VbHRpbWF0ZSc6IDc3NyxcclxuICAnVGhlV2VlcGluZ0NpdHlPZk1oYWNoJzogNTU2LFxyXG4gICdUaGVXaG9ybGVhdGVyRXh0cmVtZSc6IDM1OSxcclxuICAnVGhlV2hvcmxlYXRlckhhcmQnOiAyODEsXHJcbiAgJ1RoZVdob3JsZWF0ZXJVbnJlYWwnOiA5NzIsXHJcbiAgJ1RoZVdpbGxPZlRoZU1vb24nOiA3OTcsXHJcbiAgJ1RoZVdvcmxkT2ZEYXJrbmVzcyc6IDE1MSxcclxuICAnVGhlV3JlYXRoT2ZTbmFrZXMnOiA4MjQsXHJcbiAgJ1RoZVdyZWF0aE9mU25ha2VzRXh0cmVtZSc6IDgyNSxcclxuICAnVGhva0FzdFRob2tFeHRyZW1lJzogNDQ2LFxyXG4gICdUaG9rQXN0VGhva0hhcmQnOiA0MzIsXHJcbiAgJ1Rob3JubWFyY2hFeHRyZW1lJzogMzY0LFxyXG4gICdUaG9ybm1hcmNoSGFyZCc6IDIwNyxcclxuICAnVG9DYWxtZXJTZWFzJzogMTAxNixcclxuICAnVHJpcGxlVHJpYWRJbnZpdGF0aW9uYWxQYXJsb3InOiA5NDEsXHJcbiAgJ1RyaXBsZVRyaWFkT3BlblRvdXJuYW1lbnQnOiA5NDAsXHJcbiAgJ1VsZGFoU3RlcHNPZk5hbGQnOiAxMzAsXHJcbiAgJ1VsZGFoU3RlcHNPZlRoYWwnOiAxMzEsXHJcbiAgJ1VsdGltYVRodWxlJzogOTYwLFxyXG4gICdVbHRpbWFzQmFuZVVucmVhbCc6IDEwMzUsXHJcbiAgJ1VuZGVyVGhlQXJtb3InOiAxOTAsXHJcbiAgJ1VwcGVyTGFOb3NjZWEnOiAxMzksXHJcbiAgJ1VydGhzRm91bnQnOiAzOTQsXHJcbiAgJ1ZhbmFzcGF0aSc6IDk3MCxcclxuICAnVm93c09mVmlydHVlRGVlZHNPZkNydWVsdHknOiA4OTMsXHJcbiAgJ1dhcmRVcCc6IDI5OSxcclxuICAnV2VzdGVybkxhTm9zY2VhJzogMTM4LFxyXG4gICdXZXN0ZXJuVGhhbmFsYW4nOiAxNDAsXHJcbiAgJ1doZW5DbGFuc0NvbGxpZGUnOiA3MjMsXHJcbiAgJ1dpdGhIZWFydEFuZFN0ZWVsJzogNzA3LFxyXG4gICdXb2x2ZXNEZW5QaWVyJzogMjUwLFxyXG4gICdXb3J0aHlPZkhpc0JhY2snOiAxMDE0LFxyXG4gICdYZWxwaGF0b2wnOiA1NzIsXHJcbiAgJ1lhbnhpYSc6IDYxNCxcclxuICAnWmFkbm9yJzogOTc1LFxyXG59IGFzIGNvbnN0O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGF0YTtcclxuIiwiLy8gQXV0by1nZW5lcmF0ZWQgZnJvbSBnZW5fem9uZV9pZF9hbmRfaW5mby5weVxyXG4vLyBETyBOT1QgRURJVCBUSElTIEZJTEUgRElSRUNUTFlcclxuXHJcbmltcG9ydCB7IExvY2FsZVRleHQgfSBmcm9tICcuLi90eXBlcy90cmlnZ2VyJztcclxuXHJcbnR5cGUgWm9uZUluZm9UeXBlID0ge1xyXG4gIFt6b25lSWQ6IG51bWJlcl06IHtcclxuICAgIHJlYWRvbmx5IGV4VmVyc2lvbjogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgY29udGVudFR5cGU/OiBudW1iZXI7XHJcbiAgICByZWFkb25seSBuYW1lOiBMb2NhbGVUZXh0O1xyXG4gICAgcmVhZG9ubHkgb2Zmc2V0WDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgb2Zmc2V0WTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgc2l6ZUZhY3RvcjogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgd2VhdGhlclJhdGU6IG51bWJlcjtcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgZGF0YTogWm9uZUluZm9UeXBlID0ge1xyXG4gIDEwMDA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDksXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5oOK5aWH55m+5a6d5Z+OJyxcclxuICAgICAgJ2RlJzogJ0V1cGhvcmF0cm9uJyxcclxuICAgICAgJ2VuJzogJ1RoZSBFeGNpdGF0cm9uIDYwMDAnLFxyXG4gICAgICAnZnInOiAnTGUgTHVkb2Ryb21lJyxcclxuICAgICAgJ2phJzogJ+WuneeJqeW6qyDjgqjjgq3jgrXjgqTjg4jjg63jg7MnLFxyXG4gICAgICAna28nOiAn67O066y86rOgIOydteyCrOydtO2KuOuhoCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTAwMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuIfprZTmrr8g6L655aKD5LmL54uxMScsXHJcbiAgICAgICdkZSc6ICdBc3Bob2RlbG9zIC0gRXJzdGVyIEtyZWlzJyxcclxuICAgICAgJ2VuJzogJ0FzcGhvZGVsb3M6IFRoZSBGaXJzdCBDaXJjbGUnLFxyXG4gICAgICAnZnInOiAnTGVzIExpbWJlcyBkdSBQYW5kw6Ztb25pdW0gLSBQYXJ2aXMnLFxyXG4gICAgICAnamEnOiAn5LiH6a2U5q6/44OR44Oz44OH44Oi44OL44Km44Og77ya6L66542E57eoMScsXHJcbiAgICAgICdrbyc6ICfrp4jsnZgg7KCE64u5IO2MkOuNsOuqqOuLiOybgDog67OA7Jil7Y64IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ1LFxyXG4gIH0sXHJcbiAgMTAwMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpm7blvI/kuIfprZTmrr8g6L655aKD5LmL54uxMScsXHJcbiAgICAgICdkZSc6ICdBc3Bob2RlbG9zIC0gRXJzdGVyIEtyZWlzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FzcGhvZGVsb3M6IFRoZSBGaXJzdCBDaXJjbGUgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGVzIExpbWJlcyBkdSBQYW5kw6Ztb25pdW0gLSBQYXJ2aXMgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+S4h+mtlOauv+ODkeODs+ODh+ODouODi+OCpuODoOmbtuW8j++8mui+uueNhOe3qDEnLFxyXG4gICAgICAna28nOiAn66eI7J2YIOyghOuLuSDtjJDrjbDrqqjri4jsm4A6IOuzgOyYpe2OuCjsmIHsm4UpIDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ1LFxyXG4gIH0sXHJcbiAgMTAwNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuIfprZTmrr8g6L655aKD5LmL54uxMicsXHJcbiAgICAgICdkZSc6ICdBc3Bob2RlbG9zIC0gWndlaXRlciBLcmVpcycsXHJcbiAgICAgICdlbic6ICdBc3Bob2RlbG9zOiBUaGUgU2Vjb25kIENpcmNsZScsXHJcbiAgICAgICdmcic6ICdMZXMgTGltYmVzIGR1IFBhbmTDpm1vbml1bSAtIENsb2FxdWUnLFxyXG4gICAgICAnamEnOiAn5LiH6a2U5q6/44OR44Oz44OH44Oi44OL44Km44Og77ya6L66542E57eoMicsXHJcbiAgICAgICdrbyc6ICfrp4jsnZgg7KCE64u5IO2MkOuNsOuqqOuLiOybgDog67OA7Jil7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ1LFxyXG4gIH0sXHJcbiAgMTAwNToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpm7blvI/kuIfprZTmrr8g6L655aKD5LmL54uxMicsXHJcbiAgICAgICdkZSc6ICdBc3Bob2RlbG9zIC0gWndlaXRlciBLcmVpcyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBc3Bob2RlbG9zOiBUaGUgU2Vjb25kIENpcmNsZSAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMZXMgTGltYmVzIGR1IFBhbmTDpm1vbml1bSAtIENsb2FxdWUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+S4h+mtlOauv+ODkeODs+ODh+ODouODi+OCpuODoOmbtuW8j++8mui+uueNhOe3qDInLFxyXG4gICAgICAna28nOiAn66eI7J2YIOyghOuLuSDtjJDrjbDrqqjri4jsm4A6IOuzgOyYpe2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ1LFxyXG4gIH0sXHJcbiAgMTAwNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuIfprZTmrr8g6L655aKD5LmL54uxMycsXHJcbiAgICAgICdkZSc6ICdBc3Bob2RlbG9zIC0gRHJpdHRlciBLcmVpcycsXHJcbiAgICAgICdlbic6ICdBc3Bob2RlbG9zOiBUaGUgVGhpcmQgQ2lyY2xlJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBMaW1iZXMgZHUgUGFuZMOmbW9uaXVtIC0gRm91cm5haXNlJyxcclxuICAgICAgJ2phJzogJ+S4h+mtlOauv+ODkeODs+ODh+ODouODi+OCpuODoO+8mui+uueNhOe3qDMnLFxyXG4gICAgICAna28nOiAn66eI7J2YIOyghOuLuSDtjJDrjbDrqqjri4jsm4A6IOuzgOyYpe2OuCAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NSxcclxuICB9LFxyXG4gIDEwMDc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Zu25byP5LiH6a2U5q6/IOi+ueWig+S5i+eLsTMnLFxyXG4gICAgICAnZGUnOiAnQXNwaG9kZWxvcyAtIERyaXR0ZXIgS3JlaXMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQXNwaG9kZWxvczogVGhlIFRoaXJkIENpcmNsZSAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMZXMgTGltYmVzIGR1IFBhbmTDpm1vbml1bSAtIEZvdXJuYWlzZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5LiH6a2U5q6/44OR44Oz44OH44Oi44OL44Km44Og6Zu25byP77ya6L66542E57eoMycsXHJcbiAgICAgICdrbyc6ICfrp4jsnZgg7KCE64u5IO2MkOuNsOuqqOuLiOybgDog67OA7Jil7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDUsXHJcbiAgfSxcclxuICAxMDA4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S4h+mtlOauvyDovrnlooPkuYvni7E0JyxcclxuICAgICAgJ2RlJzogJ0FzcGhvZGVsb3MgLSBWaWVydGVyIEtyZWlzJyxcclxuICAgICAgJ2VuJzogJ0FzcGhvZGVsb3M6IFRoZSBGb3VydGggQ2lyY2xlJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBMaW1iZXMgZHUgUGFuZMOmbW9uaXVtIC0gQWLDrm1lJyxcclxuICAgICAgJ2phJzogJ+S4h+mtlOauv+ODkeODs+ODh+ODouODi+OCpuODoO+8mui+uueNhOe3qDQnLFxyXG4gICAgICAna28nOiAn66eI7J2YIOyghOuLuSDtjJDrjbDrqqjri4jsm4A6IOuzgOyYpe2OuCA0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NSxcclxuICB9LFxyXG4gIDEwMDk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Zu25byP5LiH6a2U5q6/IOi+ueWig+S5i+eLsTQnLFxyXG4gICAgICAnZGUnOiAnQXNwaG9kZWxvcyAtIFZpZXJ0ZXIgS3JlaXMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQXNwaG9kZWxvczogVGhlIEZvdXJ0aCBDaXJjbGUgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGVzIExpbWJlcyBkdSBQYW5kw6Ztb25pdW0gLSBBYsOubWUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+S4h+mtlOauv+ODkeODs+ODh+ODouODi+OCpuODoOmbtuW8j++8mui+uueNhOe3qDQnLFxyXG4gICAgICAna28nOiAn66eI7J2YIOyghOuLuSDtjJDrjbDrqqjri4jsm4A6IOuzgOyYpe2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ1LFxyXG4gIH0sXHJcbiAgMTAxMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfouI/noLTpo47pm6onLFxyXG4gICAgICAnZGUnOiAnRWluIGZyb3N0aWdlciBFbXBmYW5nJyxcclxuICAgICAgJ2VuJzogJ0EgRnJvc3R5IFJlY2VwdGlvbicsXHJcbiAgICAgICdmcic6ICdVbiBhY2N1ZWlsIGdsYWNpYWwnLFxyXG4gICAgICAnamEnOiAn6Zyc6Zuq44KS6LiP44G/44GX44KB44GmJyxcclxuICAgICAgJ2tvJzogJ+uIiOyEnOumrOulvCDrsJ/qs6AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwMTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5peg5bC95a+S5aScJyxcclxuICAgICAgJ2RlJzogJ0luIGZyZW1kZXIgSGF1dCcsXHJcbiAgICAgICdlbic6ICdJbiBmcm9tIHRoZSBDb2xkJyxcclxuICAgICAgJ2ZyJzogJ0xlIHZvbGV1ciBkZSBjb3JwcycsXHJcbiAgICAgICdqYSc6ICflr5LlpJzjga7jgZPjgagnLFxyXG4gICAgICAna28nOiAn7Ja064qQIOy2lOyatCDrsKTsl5AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjcsXHJcbiAgfSxcclxuICAxMDEyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aJqeaVo+eahOacq+aXpScsXHJcbiAgICAgICdkZSc6ICdSb3RlIEhpbW1lbCwgcm90ZXIgU2NobmVlJyxcclxuICAgICAgJ2VuJzogJ0FzIHRoZSBIZWF2ZW5zIEJ1cm4nLFxyXG4gICAgICAnZnInOiAnTFxcJ2Fyw6huZSBkZXMgbmVpZ2VzJyxcclxuICAgICAgJ2phJzogJ+aLoeOBjOOCi+e1guacqycsXHJcbiAgICAgICdrbyc6ICftjbzsoLjqsIDripQg7KKF66eQJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0MSxcclxuICB9LFxyXG4gIDEwMTM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pmT5pyI5LmL57uI6YCUJyxcclxuICAgICAgJ2RlJzogJ0VuZHNjaHJlaXRlcicsXHJcbiAgICAgICdlbic6ICdFbmR3YWxrZXInLFxyXG4gICAgICAnZnInOiAnQXJwZW50ZXVyIGRlcyBmaW5pdHVkZXMnLFxyXG4gICAgICAnamEnOiAn5pqB5pyI44Gu44OV44Kj44OK44O844OsJyxcclxuICAgICAgJ2tvJzogJ+2aqOyblOydmCDsooXslrgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQzLFxyXG4gIH0sXHJcbiAgMTAxNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuIrkuIDku7vpmL/osKLlp4bnmoTmlZnlr7wnLFxyXG4gICAgICAnZGUnOiAnIEVzIHJlaW10IHNpY2ggYXVmIEdlYmVsbCcsXHJcbiAgICAgICdlbic6ICdXb3J0aHkgb2YgSGlzIEJhY2snLFxyXG4gICAgICAnZnInOiAnTGUgZMOpZmkgZGUgbFxcJ2FuY2llbm5lIEF6ZW0nLFxyXG4gICAgICAnamEnOiAn5YmN5Luj44Ki44K844Og44Gu5omL44G744Gp44GNJyxcclxuICAgICAgJ2tvJzogJ+yEoOuMgCDslYTsoKzqs7zsnZgg64yA66CoJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzNCxcclxuICB9LFxyXG4gIDEwMTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pyq5p2l5LmL6LevJyxcclxuICAgICAgJ2RlJzogJ09mZmVuIGbDvHIgbmV1ZSBXZWdlJyxcclxuICAgICAgJ2VuJzogJ0EgUGF0aCBVbnZlaWxlZCcsXHJcbiAgICAgICdmcic6ICdEZXMgZXNwcml0cyBldCBkZXMgaG9tbWVzJyxcclxuICAgICAgJ2phJzogJ+mWi+OBi+OCjOOBn+mBk+OBruWFiOOBuCcsXHJcbiAgICAgICdrbyc6ICfsl7TrprAg6ri4IOyggO2OuOycvOuhnCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzLFxyXG4gIH0sXHJcbiAgMTAxNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpqbblkJHono3lkIjnmoTlt6jova4nLFxyXG4gICAgICAnZGUnOiAnSW0gSGFmZW4gZGVzIEZyaWVkZW5zJyxcclxuICAgICAgJ2VuJzogJ1RvIENhbG1lciBTZWFzJyxcclxuICAgICAgJ2ZyJzogJ0NhcCBzdXIgbGEgcGFpeCcsXHJcbiAgICAgICdqYSc6ICfono3lkozjgbjjga7oiLnlh7onLFxyXG4gICAgICAna28nOiAn7ZmU7ZWp7J2EIO2Wpe2VnCDstpztla0nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwMTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Iux6a2C5a6J5oGvJyxcclxuICAgICAgJ2RlJzogJ0RvbWFuaXNjaGVzIEJlZ3LDpGJuaXMnLFxyXG4gICAgICAnZW4nOiAnTGFpZCB0byBSZXN0JyxcclxuICAgICAgJ2ZyJzogJ0RlcyBhZGlldXggZG9taWVucycsXHJcbiAgICAgICdqYSc6ICfjg4njg57jga7lvJTjgYQnLFxyXG4gICAgICAna28nOiAn64+E66eI7J2YIOy2lOuPhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAyNDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDE4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S7sOacm+iLjeepue+8jOS4jeaWrei/iOi/mycsXHJcbiAgICAgICdkZSc6ICdEZXIgV2VnIHp1ciBFcm5ldWVydW5nJyxcclxuICAgICAgJ2VuJzogJ0V2ZXIgTWFyY2ggSGVhdmVuc3dhcmQnLFxyXG4gICAgICAnZnInOiAnTGEgdm9pZSBkdSByZW5vdXZlYXUnLFxyXG4gICAgICAnamEnOiAn6JK85aSp44KS5Luw44GO44CB5q2p44G/57aa44GR44KLJyxcclxuICAgICAgJ2tvJzogJ+ywveyynOydhCDrs7TrqbAg64KY7JWE6rCA7J6QJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDExNCxcclxuICB9LFxyXG4gIDEwMTk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn55uu6YCB55Sf6ICF5YmN6KGMJyxcclxuICAgICAgJ2RlJzogJ1RyYXVlciB1bmQgSG9mZm51bmcnLFxyXG4gICAgICAnZW4nOiAnVGhlIEdpZnQgb2YgTWVyY3knLFxyXG4gICAgICAnZnInOiAnQWNjZXB0YXRpb24nLFxyXG4gICAgICAnamEnOiAn5YOV44Gf44Gh44Gv6YKE44KK44CB5ZCb44KS6KaL6YCB44KN44GGJyxcclxuICAgICAgJ2tvJzogJ+yasOumrOuKlCDrj4zslYTqsIAg6re464yA66W8IOuztOuCtOumrCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTAyMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKfplbDnmoTmhI/kuYknLFxyXG4gICAgICAnZGUnOiAnRGllIEJlZGV1dHVuZyBkZXIgU2Vuc2UnLFxyXG4gICAgICAnZW4nOiAnVGhlIEhhcnZlc3QgQmVnaW5zJyxcclxuICAgICAgJ2ZyJzogJ0xhIHZyYWllIHB1aXNzYW5jZSBkZSBsYSBmYXV4JyxcclxuICAgICAgJ2phJzogJ+Wkp+mOjOOBruaEj+WRsycsXHJcbiAgICAgICdrbyc6ICftgbDrgqvsnZgg7J2Y66+4JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDIxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aal+adgOmBkycsXHJcbiAgICAgICdkZSc6ICdEaWUgS3Vuc3QgZGVzIFTDtnRlbnMnLFxyXG4gICAgICAnZW4nOiAnVGhlIEtpbGxpbmcgQXJ0JyxcclxuICAgICAgJ2ZyJzogJ0xhIHZvaWUgZHUgbsOpYW50JyxcclxuICAgICAgJ2phJzogJ+aal+auuumBkycsXHJcbiAgICAgICdrbyc6ICfslZTsgrTsnZgg6ri4JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQyLFxyXG4gIH0sXHJcbiAgMTAyMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfotKTogIXnmoTnn63mnZYnLFxyXG4gICAgICAnZGUnOiAnRGVzIFdlaXNlbiB3dW5kZXJzYW1lcyBXZXJremV1ZycsXHJcbiAgICAgICdlbic6ICdTYWdlXFwncyBGb2N1cycsXHJcbiAgICAgICdmcic6ICdMZXMgYXJtZXMgZHUgc2FnZScsXHJcbiAgICAgICdqYSc6ICfos6LogIXjga7nn63mnZYnLFxyXG4gICAgICAna28nOiAn7ZiE7J6Q7J2YIOynp+ydgCDsp4DtjKHsnbQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogNDAsXHJcbiAgICAnb2Zmc2V0WSc6IDYsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDIzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eUn+WRveeerOmAne+8jOacr+mBk+aBkuS5hScsXHJcbiAgICAgICdkZSc6ICdEYXMgTGViZW4gaXN0IGt1cnosIGRpZSBLdW5zdCBpc3QgbGFuZycsXHJcbiAgICAgICdlbic6ICdMaWZlIEVwaGVtZXJhbCwgUGF0aCBFdGVybmFsJyxcclxuICAgICAgJ2ZyJzogJ0V4aXN0ZW5jZXMgw6lwaMOpbcOocmVzIGV0IHNhdm9pciDDqXRlcm5lbCcsXHJcbiAgICAgICdqYSc6ICfkurrlkb3jga/lhJrjgY/jgIHooZPjga7jgb/jgaHjga/msLjkuYXjgasnLFxyXG4gICAgICAna28nOiAn7IOd66qF7J2AIOuNp+yXhuycvOuCmCDquLDsiKDsnYAg7JiB7JuQ7ZWY66asJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDk1LFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTAsXHJcbiAgfSxcclxuICAxMDMyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ0RpZSBQYWzDpHN0cmEnLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFpc3RyYScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxlc3RyZScsXHJcbiAgICAgICdqYSc6ICfjg5Hjg6njgqTjgrnjg4jjg6knLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwMzM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDYsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnZGUnOiAnRGFzIEhlcnogZGVzIFZ1bGthbnMnLFxyXG4gICAgICAnZW4nOiAnVGhlIFZvbGNhbmljIEhlYXJ0JyxcclxuICAgICAgJ2ZyJzogJ0xlIEPFk3VyIHZvbGNhbmlxdWUnLFxyXG4gICAgICAnamEnOiAn44O044Kp44Or44Kr44OL44OD44Kv44O744OP44O844OIJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDM0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ1dvbGtlIFNpZWJlbicsXHJcbiAgICAgICdlbic6ICdDbG91ZCBOaW5lJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBldGl0IE51YWdlJyxcclxuICAgICAgJ2phJzogJ+OCr+ODqeOCpuODieODiuOCpOODsycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTAzNToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdkZSc6ICdUcmF1bXByw7xmdW5nIC0gVWx0aW1hJyxcclxuICAgICAgJ2VuJzogJ1VsdGltYVxcJ3MgQmFuZSAoVW5yZWFsKScsXHJcbiAgICAgICdmcic6ICdMZSBmbMOpYXUgZFxcJ1VsdGltYSAoaXJyw6llbCknLFxyXG4gICAgICAnamEnOiAn5bm744Ki44Or44OG44Oe44Km44Kn44Od44Oz56C05aOK5L2c5oimJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDMxLFxyXG4gIH0sXHJcbiAgMTAzNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnnhLbopoHlrrPmspnmlq/loZTlpI/murbmtJ4nLFxyXG4gICAgICAnZGUnOiAnU2FzdGFzaGEnLFxyXG4gICAgICAnZW4nOiAnU2FzdGFzaGEnLFxyXG4gICAgICAnZnInOiAnU2FzdGFzaGEnLFxyXG4gICAgICAnamEnOiAn5aSp54S26KaB5a6zIOOCteOCueOCv+OCt+ODo+a1uOmjn+a0nicsXHJcbiAgICAgICdrbyc6ICfsgqzsiqTtg4Dsg6Qg7Lmo7IudIOuPmeq1tCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTAzNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflnLDkuIvngbXmrr/loZTlp4bCt+WhlOaLieWik+WbrScsXHJcbiAgICAgICdkZSc6ICdUb3RlbmFja2VyIFRhbS1UYXJhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBUYW3igJNUYXJhIERlZXBjcm9mdCcsXHJcbiAgICAgICdmcic6ICdMXFwnSHlwb2fDqWUgZGUgVGFtLVRhcmEnLFxyXG4gICAgICAnamEnOiAn5Zyw5LiL6ZyK5q6/IOOCv+ODoOOCv+ODqeOBruWik+aJgCcsXHJcbiAgICAgICdrbyc6ICftg5Dtg4Drnbwg66yY7IaMJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDMwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDM4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WwgemUgeWdkemBk+mTnOmTg+mTnOWxsScsXHJcbiAgICAgICdkZSc6ICdLdXBmZXJnbG9ja2VuLU1pbmUnLFxyXG4gICAgICAnZW4nOiAnQ29wcGVyYmVsbCBNaW5lcycsXHJcbiAgICAgICdmcic6ICdMZXMgTWluZXMgZGUgQ2xvY2hlY3VpdnJlJyxcclxuICAgICAgJ2phJzogJ+WwgemOluWdkemBkyDjgqvjg4Pjg5Hjg7zjg5njg6vpioXlsbEnLFxyXG4gICAgICAna28nOiAn6rWs66as7KKFIOq0keyCsCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTAzOToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnm5Hni7Hlup/lop/miZjmiZjCt+aLieWFi+WNg+eLsScsXHJcbiAgICAgICdkZSc6ICdUYXVzZW5kIEzDtmNoZXIgdm9uIFRvdG8tUmFrJyxcclxuICAgICAgJ2VuJzogJ1RoZSBUaG91c2FuZCBNYXdzIG9mIFRvdG/igJNSYWsnLFxyXG4gICAgICAnZnInOiAnTGVzIE1pbGxlIEd1ZXVsZXMgZGUgVG90by1SYWsnLFxyXG4gICAgICAnamEnOiAn55uj542E5buD5aKfIOODiOODiOODqeOCr+OBruWNg+eNhCcsXHJcbiAgICAgICdrbyc6ICfthqDthqDrnbztgawg6rCQ7JilJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDQwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WQjemXqOW6nOmCuOmdmeivreW6hOWbrScsXHJcbiAgICAgICdkZSc6ICdIYXVra2UtSGVycmVuaGF1cycsXHJcbiAgICAgICdlbic6ICdIYXVra2UgTWFub3InLFxyXG4gICAgICAnZnInOiAnTGUgTWFub2lyIGRlcyBIYXVra2UnLFxyXG4gICAgICAnamEnOiAn5ZCN6ZaA5bGL5pW3IOODj+OCpuOCseOCv+W+oeeUqOmCuCcsXHJcbiAgICAgICdrbyc6ICftlZjsmrDsvIDtg4Ag67OE6raBJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDQxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8keWFu+iDnOWcsOW4g+mbt+emj+a0m+WFi+aWr+mHjuiQpeWcsCcsXHJcbiAgICAgICdkZSc6ICdCcsO8bGx2b2x4XFwnIExhbmdyYXN0JyxcclxuICAgICAgJ2VuJzogJ0JyYXlmbG94XFwncyBMb25nc3RvcCcsXHJcbiAgICAgICdmcic6ICdMZSBCaXZvdWFjIGRlIEJyYXlmbG94JyxcclxuICAgICAgJ2phJzogJ+WlqumChOaUr+aPtCDjg5bjg6zjgqTjg5Xjg63jgq/jgrnjga7ph47llrblnLAnLFxyXG4gICAgICAna28nOiAn67iM66CI7J207ZSM66Gd7Iqk7J2YIOyVvOyYgeyngCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTA0Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflr7npvpnln47loZ7nn7PljavloZQnLFxyXG4gICAgICAnZGUnOiAnU3RlaW5lcm5lIFdhY2h0JyxcclxuICAgICAgJ2VuJzogJ1RoZSBTdG9uZSBWaWdpbCcsXHJcbiAgICAgICdmcic6ICdMZSBWaWdpbGUgZGUgUGllcnJlJyxcclxuICAgICAgJ2phJzogJ+WfjuWhnuaUu+eVpSDjgrnjg4jjg7zjg7Pjg7TjgqPjgrjjg6snLFxyXG4gICAgICAna28nOiAn64+M67Cp7YyoIOqyveqzhOy0iOyGjCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyNyxcclxuICB9LFxyXG4gIDEwNDM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5bid5Zu95Y2X5pa55aCh5aSW5Zu05r+A5oiYJyxcclxuICAgICAgJ2RlJzogJ0Nhc3RydW0gTWVyaWRpYW51bSAtIEF1w59lbmJlcmVpY2gnLFxyXG4gICAgICAnZW4nOiAnQ2FzdHJ1bSBNZXJpZGlhbnVtJyxcclxuICAgICAgJ2ZyJzogJ0Nhc3RydW0gTWVyaWRpYW51bScsXHJcbiAgICAgICdqYSc6ICflpJbpg63mlLvnlaUg44Kr44K544OI44Or44Og44O744Oh44Oq44OH44Kj44Ki44OM44OgJyxcclxuICAgICAgJ2tvJzogJ+y5tOyKpO2KuOujuCDrqZTrpqzrlJTslYTriJQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwNDQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5bmV6a2U5a+85Z+O5pyA57uI5Yaz5oiYJyxcclxuICAgICAgJ2RlJzogJ0Nhc3RydW0gTWVyaWRpYW51bSAtIFByYWV0b3JpdW0nLFxyXG4gICAgICAnZW4nOiAnVGhlIFByYWV0b3JpdW0nLFxyXG4gICAgICAnZnInOiAnTGUgUHJhZXRvcml1bScsXHJcbiAgICAgICdqYSc6ICfmnIDntYLmsbrmiKYg6a2U5bCO5Z+O44OX44Op44Ko44OI44Oq44Km44OgJyxcclxuICAgICAgJ2tvJzogJ+uniOuPhOyEsSDtlITrnbzsnbTthqDrpqzsm4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwNDU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK5byX5Yip54m56K6o5LyQ5oiYJyxcclxuICAgICAgJ2RlJzogJ0RhcyBHcmFiIGRlciBMb2hlJyxcclxuICAgICAgJ2VuJzogJ1RoZSBCb3dsIG9mIEVtYmVycycsXHJcbiAgICAgICdmcic6ICdMZSBDcmF0w6hyZSBkZXMgdGlzb25zJyxcclxuICAgICAgJ2phJzogJ+OCpOODleODquODvOODiOiojuS8kOaIpicsXHJcbiAgICAgICdrbyc6ICfsnbTtlITrpqztirgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI1LFxyXG4gIH0sXHJcbiAgMTA0Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfms7DlnaborqjkvJDmiJgnLFxyXG4gICAgICAnZGUnOiAnRGVyIE5hYmVsJyxcclxuICAgICAgJ2VuJzogJ1RoZSBOYXZlbCcsXHJcbiAgICAgICdmcic6ICdMZSBOb21icmlsJyxcclxuICAgICAgJ2phJzogJ+OCv+OCpOOCv+ODs+iojuS8kOaIpicsXHJcbiAgICAgICdrbyc6ICftg4DsnbTtg4Qg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIzLFxyXG4gIH0sXHJcbiAgMTA0Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfov6bmpbznvZforqjkvJDmiJgnLFxyXG4gICAgICAnZGUnOiAnRGFzIFRvc2VuZGUgQXVnZScsXHJcbiAgICAgICdlbic6ICdUaGUgSG93bGluZyBFeWUnLFxyXG4gICAgICAnZnInOiAnSHVybMWTaWwnLFxyXG4gICAgICAnamEnOiAn44Ks44Or44O844OA6KiO5LyQ5oimJyxcclxuICAgICAgJ2tvJzogJ+qwgOujqOuLpCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjYsXHJcbiAgfSxcclxuICAxMDQ4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ1BvcnRhIERlY3VtYW5hJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQb3J0YSBEZWN1bWFuYScsXHJcbiAgICAgICdmcic6ICdQb3J0YSBEZWN1bWFuYScsXHJcbiAgICAgICdqYSc6ICfjgqLjg6vjg4bjg57jgqbjgqfjg53jg7PnoLTlo4rkvZzmiKYnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogNzcyLFxyXG4gICAgJ29mZnNldFknOiA2MDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDQ5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ0thcCBXZXN0d2luZCcsXHJcbiAgICAgICdlbic6ICdDYXBlIFdlc3R3aW5kJyxcclxuICAgICAgJ2ZyJzogJ0xlIENhcCBWZW5kb3Vlc3QnLFxyXG4gICAgICAnamEnOiAn44Oq44OD44OI44Ki44OG44Kj44Oz5by36KWy5oimJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDUwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ0FsemFkYWFscyBWZXJtw6RjaHRuaXMnLFxyXG4gICAgICAnZW4nOiAnQWx6YWRhYWxcXCdzIExlZ2FjeScsXHJcbiAgICAgICdmcic6ICdMZSBsZWdzIGRcXCdBbHphZGFhbCcsXHJcbiAgICAgICdqYSc6ICfov5HmnbHnp5jlrp0g44Ki44Or44K244OA44O844Or5rW35bqV6YG66Leh576kJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDE1LFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTA1MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdkZSc6ICdOZXJ2YXMgUmVpY2gnLFxyXG4gICAgICAnZW4nOiAnRm9ybG9ybiBHbG9yeScsXHJcbiAgICAgICdmcic6ICdOZXJ2YSwgbGUgcGF0cmlvdGUnLFxyXG4gICAgICAnamEnOiAn44ON44Or44Km44Kh44Gu5bid5Zu9JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0yMzAsXHJcbiAgICAnb2Zmc2V0WSc6IC0yNTAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMTA1Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdkZSc6ICdEYXMgQW50bGl0eiBkZXIgS2FsdGJsw7x0aWdrZWl0JyxcclxuICAgICAgJ2VuJzogJ0RldmFzdGF0aW9uJyxcclxuICAgICAgJ2ZyJzogJ0xlIFByYWV0b3JpdW0gZW4gZmxhbW1lcycsXHJcbiAgICAgICdqYSc6ICfjgqLjgrfjgqjjg7Pjg7vjg6njg4/jg5bjg6zjgqLoqI7kvJDmiKYnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogNzA0LFxyXG4gICAgJ29mZnNldFknOiAtNDgwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTA1NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdkZSc6ICdBZ2xhaWEnLFxyXG4gICAgICAnZW4nOiAnQWdsYWlhJyxcclxuICAgICAgJ2ZyJzogJ0RvbWFpbmUgZGl2aW4gLSBBZ2xhw6knLFxyXG4gICAgICAnamEnOiAn6Lyd44GR44KL56We5Z+fIOOCouOCsOODqeOCpOOCoicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtODAsXHJcbiAgICAnb2Zmc2V0WSc6IC01NTAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NyxcclxuICB9LFxyXG4gIDEwNTg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDYsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnZGUnOiAnQ3J5c3RhbGxpbmUgQ29uZmxpY3Q6IERpZSBQYWzDpHN0cmEgKFNjaGF1a2FtcGYpJyxcclxuICAgICAgJ2VuJzogJ0NyeXN0YWxsaW5lIENvbmZsaWN0IChDdXN0b20gTWF0Y2ggLSBUaGUgUGFsYWlzdHJhKScsXHJcbiAgICAgICdmcic6ICdDcnlzdGFsbGluZSBDb25mbGljdCAocGFydGllIHBlcnNvbm5hbGlzw6llIC0gTGUgUGFsZXN0cmUpJyxcclxuICAgICAgJ2phJzogJ+OCr+ODquOCueOCv+ODq+OCs+ODs+ODleODquOCr+ODiCjjg5Hjg6njgqTjgrnjg4jjg6nvvJrjgqvjgrnjgr/jg6Djg57jg4Pjg4EpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDU5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ0NyeXN0YWxsaW5lIENvbmZsaWN0OiBEYXMgSGVyeiBkZXMgVnVsa2FucyAoU2NoYXVrYW1wZiknLFxyXG4gICAgICAnZW4nOiAnQ3J5c3RhbGxpbmUgQ29uZmxpY3QgKEN1c3RvbSBNYXRjaCAtIFRoZSBWb2xjYW5pYyBIZWFydCknLFxyXG4gICAgICAnZnInOiAnQ3J5c3RhbGxpbmUgQ29uZmxpY3QgKHBhcnRpZSBwZXJzb25uYWxpc8OpZSAtIExlIEPFk3VyIHZvbGNhbmlxdWUpJyxcclxuICAgICAgJ2phJzogJ+OCr+ODquOCueOCv+ODq+OCs+ODs+ODleODquOCr+ODiCjjg7Tjgqnjg6vjgqvjg4vjg4Pjgq/jg7vjg4/jg7zjg4jvvJrjgqvjgrnjgr/jg6Djg57jg4Pjg4EpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDYwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ0NyeXN0YWxsaW5lIENvbmZsaWN0OiBXb2xrZSBTaWViZW4gKFNjaGF1a2FtcGYpJyxcclxuICAgICAgJ2VuJzogJ0NyeXN0YWxsaW5lIENvbmZsaWN0IChDdXN0b20gTWF0Y2ggLSBDbG91ZCBOaW5lKScsXHJcbiAgICAgICdmcic6ICdDcnlzdGFsbGluZSBDb25mbGljdCAocGFydGllIHBlcnNvbm5hbGlzw6llIC0gTGUgUGV0aXQgTnVhZ2UpJyxcclxuICAgICAgJ2phJzogJ+OCr+ODquOCueOCv+ODq+OCs+ODs+ODleODquOCr+ODiCjjgq/jg6njgqbjg4njg4rjgqTjg7PvvJrjgqvjgrnjgr/jg6Djg57jg4Pjg4EpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMjg6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliKnlp4bokKjCt+e9l+aVj+iQqOS4iuWxgueUsuadvycsXHJcbiAgICAgICdkZSc6ICdPYmVyZSBEZWNrcycsXHJcbiAgICAgICdlbic6ICdMaW1zYSBMb21pbnNhIFVwcGVyIERlY2tzJyxcclxuICAgICAgJ2ZyJzogJ0xpbXNhIExvbWluc2EgLSBMZSBUaWxsYWMnLFxyXG4gICAgICAnamEnOiAn44Oq44Og44K144O744Ot44Of44Oz44K177ya5LiK55Sy5p2/5bGkJyxcclxuICAgICAgJ2tvJzogJ+umvOyCrCDroZzrr7zsgqwg7IOB7Li1IOqwke2MkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNCxcclxuICB9LFxyXG4gIDEyOToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WIqeWnhuiQqMK3572X5pWP6JCo5LiL5bGC55Sy5p2/JyxcclxuICAgICAgJ2RlJzogJ1VudGVyZSBEZWNrcycsXHJcbiAgICAgICdlbic6ICdMaW1zYSBMb21pbnNhIExvd2VyIERlY2tzJyxcclxuICAgICAgJ2ZyJzogJ0xpbXNhIExvbWluc2EgLSBMXFwnRW50cmVwb250JyxcclxuICAgICAgJ2phJzogJ+ODquODoOOCteODu+ODreODn+ODs+OCte+8muS4i+eUsuadv+WxpCcsXHJcbiAgICAgICdrbyc6ICfrprzsgqwg66Gc66+87IKsIO2VmOy4tSDqsJHtjJAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTUsXHJcbiAgfSxcclxuICAxMzA6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuYzlsJTovr7lk4jnjrDkuJblm57lu4onLFxyXG4gICAgICAnZGUnOiAnTmFsZC1LcmV1emdhbmcnLFxyXG4gICAgICAnZW4nOiAnVWxcXCdkYWggLSBTdGVwcyBvZiBOYWxkJyxcclxuICAgICAgJ2ZyJzogJ1VsXFwnZGFoIC0gRmF1Ym91cmcgZGUgTmFsZCcsXHJcbiAgICAgICdqYSc6ICfjgqbjg6vjg4Djg4/vvJrjg4rjg6vlm57lu4onLFxyXG4gICAgICAna28nOiAn7Jq464uk7ZWYIOuCoCDtmozrnpEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNyxcclxuICB9LFxyXG4gIDEzMToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S5jOWwlOi+vuWTiOadpeeUn+WbnuW7iicsXHJcbiAgICAgICdkZSc6ICdUaGFsLUtyZXV6Z2FuZycsXHJcbiAgICAgICdlbic6ICdVbFxcJ2RhaCAtIFN0ZXBzIG9mIFRoYWwnLFxyXG4gICAgICAnZnInOiAnVWxcXCdkYWggLSBGYXVib3VyZyBkZSBUaGFsJyxcclxuICAgICAgJ2phJzogJ+OCpuODq+ODgOODj++8muOCtuODq+WbnuW7iicsXHJcbiAgICAgICdrbyc6ICfsmrjri6TtlZgg64usIO2ajOuekScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4LFxyXG4gIH0sXHJcbiAgMTMyOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qC86YeM6L6+5bC85Lqa5paw6KGXJyxcclxuICAgICAgJ2RlJzogJ05ldS1HcmlkYW5pYScsXHJcbiAgICAgICdlbic6ICdOZXcgR3JpZGFuaWEnLFxyXG4gICAgICAnZnInOiAnTm91dmVsbGUgR3JpZGFuaWEnLFxyXG4gICAgICAnamEnOiAn44Kw44Oq44OA44OL44Ki77ya5paw5biC6KGXJyxcclxuICAgICAgJ2tvJzogJ+q3uOumrOuLpOuLiOyVhCDsi6Dsi5zqsIDsp4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMSxcclxuICB9LFxyXG4gIDEzMzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+agvOmHjOi+vuWwvOS6muaXp+ihlycsXHJcbiAgICAgICdkZSc6ICdBbHQtR3JpZGFuaWEnLFxyXG4gICAgICAnZW4nOiAnT2xkIEdyaWRhbmlhJyxcclxuICAgICAgJ2ZyJzogJ1ZpZWlsbGUgR3JpZGFuaWEnLFxyXG4gICAgICAnamEnOiAn44Kw44Oq44OA44OL44Ki77ya5pen5biC6KGXJyxcclxuICAgICAgJ2tvJzogJ+q3uOumrOuLpOuLiOyVhCDqtazsi5zqsIDsp4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMixcclxuICB9LFxyXG4gIDEzNDoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S4reaLieivuuilv+S6micsXHJcbiAgICAgICdkZSc6ICdaZW50cmFsZXMgTGEgTm9zY2VhJyxcclxuICAgICAgJ2VuJzogJ01pZGRsZSBMYSBOb3NjZWEnLFxyXG4gICAgICAnZnInOiAnTm9zY2VhIGNlbnRyYWxlJyxcclxuICAgICAgJ2phJzogJ+S4reWkruODqeODjuOCt+OCoicsXHJcbiAgICAgICdrbyc6ICfspJHrtoAg652864W47Iuc7JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE2LFxyXG4gIH0sXHJcbiAgMTM1OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ouJ6K+66KW/5Lqa5L2O5ZywJyxcclxuICAgICAgJ2RlJzogJ1VudGVyZXMgTGEgTm9zY2VhJyxcclxuICAgICAgJ2VuJzogJ0xvd2VyIExhIE5vc2NlYScsXHJcbiAgICAgICdmcic6ICdCYXNzZS1Ob3NjZWEnLFxyXG4gICAgICAnamEnOiAn5L2O5Zyw44Op44OO44K344KiJyxcclxuICAgICAgJ2tvJzogJ+yggOyngCDrnbzrhbjsi5zslYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTcsXHJcbiAgfSxcclxuICAxMzY6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmtbfpm77mnZEnLFxyXG4gICAgICAnZGUnOiAnRG9yZiBkZXMgTmViZWxzJyxcclxuICAgICAgJ2VuJzogJ01pc3QnLFxyXG4gICAgICAnZnInOiAnQnJ1bcOpZScsXHJcbiAgICAgICdqYSc6ICfjg5/jgrnjg4jjg7vjg7TjgqPjg6zjg4PjgrgnLFxyXG4gICAgICAna28nOiAn7JWI6rCv67mbIOuniOydhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNCxcclxuICB9LFxyXG4gIDEzNzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S4nOaLieivuuilv+S6micsXHJcbiAgICAgICdkZSc6ICfDlnN0bGljaGVzIExhIE5vc2NlYScsXHJcbiAgICAgICdlbic6ICdFYXN0ZXJuIExhIE5vc2NlYScsXHJcbiAgICAgICdmcic6ICdOb3NjZWEgb3JpZW50YWxlJyxcclxuICAgICAgJ2phJzogJ+adseODqeODjuOCt+OCoicsXHJcbiAgICAgICdrbyc6ICfrj5nrtoAg652864W47Iuc7JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE4LFxyXG4gIH0sXHJcbiAgMTM4OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6KW/5ouJ6K+66KW/5LqaJyxcclxuICAgICAgJ2RlJzogJ1dlc3RsaWNoZXMgTGEgTm9zY2VhJyxcclxuICAgICAgJ2VuJzogJ1dlc3Rlcm4gTGEgTm9zY2VhJyxcclxuICAgICAgJ2ZyJzogJ05vc2NlYSBvY2NpZGVudGFsZScsXHJcbiAgICAgICdqYSc6ICfopb/jg6njg47jgrfjgqInLFxyXG4gICAgICAna28nOiAn7ISc67aAIOudvOuFuOyLnOyVhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxOSxcclxuICB9LFxyXG4gIDEzOToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aLieivuuilv+S6mumrmOWcsCcsXHJcbiAgICAgICdkZSc6ICdPYmVyZXMgTGEgTm9zY2VhJyxcclxuICAgICAgJ2VuJzogJ1VwcGVyIExhIE5vc2NlYScsXHJcbiAgICAgICdmcic6ICdIYXV0ZS1Ob3NjZWEnLFxyXG4gICAgICAnamEnOiAn6auY5Zyw44Op44OO44K344KiJyxcclxuICAgICAgJ2tvJzogJ+qzoOyngCDrnbzrhbjsi5zslYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjAsXHJcbiAgfSxcclxuICAxNDA6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfopb/okKjnurPlhbAnLFxyXG4gICAgICAnZGUnOiAnV2VzdGxpY2hlcyBUaGFuYWxhbicsXHJcbiAgICAgICdlbic6ICdXZXN0ZXJuIFRoYW5hbGFuJyxcclxuICAgICAgJ2ZyJzogJ1RoYW5hbGFuIG9jY2lkZW50YWwnLFxyXG4gICAgICAnamEnOiAn6KW/44K244OK44Op44O844OzJyxcclxuICAgICAgJ2tvJzogJ+yEnOu2gCDri6TrgqDrnoAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOSxcclxuICB9LFxyXG4gIDE0MToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S4reiQqOe6s+WFsCcsXHJcbiAgICAgICdkZSc6ICdaZW50cmFsZXMgVGhhbmFsYW4nLFxyXG4gICAgICAnZW4nOiAnQ2VudHJhbCBUaGFuYWxhbicsXHJcbiAgICAgICdmcic6ICdUaGFuYWxhbiBjZW50cmFsJyxcclxuICAgICAgJ2phJzogJ+S4reWkruOCtuODiuODqeODvOODsycsXHJcbiAgICAgICdrbyc6ICfspJHrtoAg64uk64Kg656AJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwLFxyXG4gIH0sXHJcbiAgMTQyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iJvueOm+WQieWonOadr+aWl+aKgOWkp+S8muWGs+i1mycsXHJcbiAgICAgICdkZSc6ICdEYXMgRHJhY2hlbmhhbHMtS29sb3NzZXVtJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEcmFnb25cXCdzIE5lY2snLFxyXG4gICAgICAnZnInOiAnTGUgQ29sIGR1IGRyYWdvbicsXHJcbiAgICAgICdqYSc6ICfjgqLjg57jgrjjg4rmna/pl5jmioDkvJrmsbrli53miKYnLFxyXG4gICAgICAna28nOiAn7JWE66eI7KeA64KY67CwIO2IrOq4sOuMgO2ajCDqsrDsirnsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE0Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnmofpg73kvIrkv67liqDlvrfkv53ljavmiJgnLFxyXG4gICAgICAnZGUnOiAnRGVyIFNjaGlja3NhbHN3ZWcnLFxyXG4gICAgICAnZW4nOiAnVGhlIFN0ZXBzIG9mIEZhaXRoJyxcclxuICAgICAgJ2ZyJzogJ0xlIFNpw6hnZSBkZSBsYSBzYWludGUgQ2l0w6kgZFxcJ0lzaGdhcmQnLFxyXG4gICAgICAnamEnOiAn55qH6YO944Kk44K344Ol44Ks44Or44OJ6Ziy6KGb5oimJyxcclxuICAgICAgJ2tvJzogJ+yEseuPhCDsnbTsiojqsIDrpbTrk5wg67Cp7Ja07KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMTQ1OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lic6JCo57qz5YWwJyxcclxuICAgICAgJ2RlJzogJ8OWc3RsaWNoZXMgVGhhbmFsYW4nLFxyXG4gICAgICAnZW4nOiAnRWFzdGVybiBUaGFuYWxhbicsXHJcbiAgICAgICdmcic6ICdUaGFuYWxhbiBvcmllbnRhbCcsXHJcbiAgICAgICdqYSc6ICfmnbHjgrbjg4rjg6njg7zjg7MnLFxyXG4gICAgICAna28nOiAn64+Z67aAIOuLpOuCoOuegCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMSxcclxuICB9LFxyXG4gIDE0Njoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WNl+iQqOe6s+WFsCcsXHJcbiAgICAgICdkZSc6ICdTw7xkbGljaGVzIFRoYW5hbGFuJyxcclxuICAgICAgJ2VuJzogJ1NvdXRoZXJuIFRoYW5hbGFuJyxcclxuICAgICAgJ2ZyJzogJ1RoYW5hbGFuIG3DqXJpZGlvbmFsJyxcclxuICAgICAgJ2phJzogJ+WNl+OCtuODiuODqeODvOODsycsXHJcbiAgICAgICdrbyc6ICfrgqjrtoAg64uk64Kg656AJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEyLFxyXG4gIH0sXHJcbiAgMTQ3OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5YyX6JCo57qz5YWwJyxcclxuICAgICAgJ2RlJzogJ07DtnJkbGljaGVzIFRoYW5hbGFuJyxcclxuICAgICAgJ2VuJzogJ05vcnRoZXJuIFRoYW5hbGFuJyxcclxuICAgICAgJ2ZyJzogJ1RoYW5hbGFuIHNlcHRlbnRyaW9uYWwnLFxyXG4gICAgICAnamEnOiAn5YyX44K244OK44Op44O844OzJyxcclxuICAgICAgJ2tvJzogJ+u2geu2gCDri6TrgqDrnoAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTMsXHJcbiAgfSxcclxuICAxNDg6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpu5HooaPmo67mnpfkuK3lpK7mnpfljLonLFxyXG4gICAgICAnZGUnOiAnVGllZmVyIFdhbGQnLFxyXG4gICAgICAnZW4nOiAnQ2VudHJhbCBTaHJvdWQnLFxyXG4gICAgICAnZnInOiAnRm9yw6p0IGNlbnRyYWxlJyxcclxuICAgICAgJ2phJzogJ+m7kuiho+ajru+8muS4reWkruajruaelycsXHJcbiAgICAgICdrbyc6ICfqsoDsnYDsnqXrp4kg7IiyIOykkeu2gOyCvOumvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzLFxyXG4gIH0sXHJcbiAgMTUwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W5u+m+meaui+mquOWvhue6puS5i+WhlCcsXHJcbiAgICAgICdkZSc6ICdIw7x0ZXIgZGVzIFNlZXMnLFxyXG4gICAgICAnZW4nOiAnVGhlIEtlZXBlciBvZiB0aGUgTGFrZScsXHJcbiAgICAgICdmcic6ICdMZSBHYXJkaWVuIGR1IGxhYycsXHJcbiAgICAgICdqYSc6ICflubvpvo3mrovpqrgg6buZ57SE44Gu5aGUJyxcclxuICAgICAgJ2tvJzogJ+usteyVveydmCDtg5EnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzQsXHJcbiAgfSxcclxuICAxNTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rC05pm25aGUIOaal+S5i+S4lueVjCcsXHJcbiAgICAgICdkZSc6ICdEaWUgV2VsdCBkZXIgRHVua2VsaGVpdCcsXHJcbiAgICAgICdlbic6ICdUaGUgV29ybGQgb2YgRGFya25lc3MnLFxyXG4gICAgICAnZnInOiAnTGEgVG91ciBkZSBDcmlzdGFsIC0gTW9uZGUgZGVzIFTDqW7DqGJyZXMnLFxyXG4gICAgICAnamEnOiAn44Kv44Oq44K544K/44Or44K/44Ov44O877ya6ZeH44Gu5LiW55WMJyxcclxuICAgICAgJ2tvJzogJ+2BrOumrOyKpO2DiCDtg4Dsm4w6IOyWtOuRoOydmCDshLjqs4QnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE1Mjoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+m7keiho+ajruael+S4nOmDqOael+WMuicsXHJcbiAgICAgICdkZSc6ICdPc3R3YWxkJyxcclxuICAgICAgJ2VuJzogJ0Vhc3QgU2hyb3VkJyxcclxuICAgICAgJ2ZyJzogJ0ZvcsOqdCBkZSBsXFwnZXN0JyxcclxuICAgICAgJ2phJzogJ+m7kuiho+ajru+8muadsemDqOajruaelycsXHJcbiAgICAgICdrbyc6ICfqsoDsnYDsnqXrp4kg7IiyIOuPmeu2gOyCvOumvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0LFxyXG4gIH0sXHJcbiAgMTUzOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6buR6KGj5qOu5p6X5Y2X6YOo5p6X5Yy6JyxcclxuICAgICAgJ2RlJzogJ1PDvGR3YWxkJyxcclxuICAgICAgJ2VuJzogJ1NvdXRoIFNocm91ZCcsXHJcbiAgICAgICdmcic6ICdGb3LDqnQgZHUgc3VkJyxcclxuICAgICAgJ2phJzogJ+m7kuiho+ajru+8muWNl+mDqOajruaelycsXHJcbiAgICAgICdrbyc6ICfqsoDsnYDsnqXrp4kg7IiyIOuCqOu2gOyCvOumvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1LFxyXG4gIH0sXHJcbiAgMTU0OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6buR6KGj5qOu5p6X5YyX6YOo5p6X5Yy6JyxcclxuICAgICAgJ2RlJzogJ05vcmR3YWxkJyxcclxuICAgICAgJ2VuJzogJ05vcnRoIFNocm91ZCcsXHJcbiAgICAgICdmcic6ICdGb3LDqnQgZHUgbm9yZCcsXHJcbiAgICAgICdqYSc6ICfpu5LooaPmo67vvJrljJfpg6jmo67mnpcnLFxyXG4gICAgICAna28nOiAn6rKA7J2A7J6l66eJIOyIsiDrtoHrtoDsgrzrprwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNixcclxuICB9LFxyXG4gIDE1NToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W6k+WwlOacreaWr+S4reWkrumrmOWcsCcsXHJcbiAgICAgICdkZSc6ICdaZW50cmFsZXMgSG9jaGxhbmQgdm9uIENvZXJ0aGFzJyxcclxuICAgICAgJ2VuJzogJ0NvZXJ0aGFzIENlbnRyYWwgSGlnaGxhbmRzJyxcclxuICAgICAgJ2ZyJzogJ0hhdXRlcyB0ZXJyZXMgZHUgQ29lcnRoYXMgY2VudHJhbCcsXHJcbiAgICAgICdqYSc6ICfjgq/jg6vjgrbjgrnkuK3lpK7pq5jlnLAnLFxyXG4gICAgICAna28nOiAn7Luk66W064uk7IqkIOykkeyVmeqzoOyngCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMSxcclxuICB9LFxyXG4gIDE1Njoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aRqeadnOe6sycsXHJcbiAgICAgICdkZSc6ICdNb3IgRGhvbmEnLFxyXG4gICAgICAnZW4nOiAnTW9yIERob25hJyxcclxuICAgICAgJ2ZyJzogJ01vciBEaG9uYScsXHJcbiAgICAgICdqYSc6ICfjg6Ljg7zjg4njgqXjg4onLFxyXG4gICAgICAna28nOiAn66qo66W064+E64KYJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIyLFxyXG4gIH0sXHJcbiAgMTU5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elnueBteWco+Wfn+aUvua1quelnuWPpOelnuauvycsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVzIFdhbmRlcmVycycsXHJcbiAgICAgICdlbic6ICdUaGUgV2FuZGVyZXJcXCdzIFBhbGFjZScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZHUgVmFnYWJvbmQnLFxyXG4gICAgICAnamEnOiAn5peF56We6IGW5Z+fIOODr+ODs+ODgOODqeODvOODkeODrOOCuScsXHJcbiAgICAgICdrbyc6ICfrsKnrnpHsnpDsnZgg6raB7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxNjA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6aKG6Iiq5piO54Gv5aSp54u85pif54Gv5aGUJyxcclxuICAgICAgJ2RlJzogJ1BoYXJvcyBTaXJpdXMnLFxyXG4gICAgICAnZW4nOiAnUGhhcm9zIFNpcml1cycsXHJcbiAgICAgICdmcic6ICdMZSBQaGFyZSBkZSBTaXJpdXMnLFxyXG4gICAgICAnamEnOiAn5oCq6bOl5beo5aGUIOOCt+ODquOCpuOCueWkp+eBr+WPsCcsXHJcbiAgICAgICdrbyc6ICfsi5zrpqzsmrDsiqQg64yA65Ox64yAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMTYyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mtlOWFvemihuWfn+aXpeW9seWcsOS/rueCvOaJgCcsXHJcbiAgICAgICdkZSc6ICdIYWxhdGFsaScsXHJcbiAgICAgICdlbic6ICdIYWxhdGFsaScsXHJcbiAgICAgICdmcic6ICdIYWxhdGFsaScsXHJcbiAgICAgICdqYSc6ICfprZTnjaPpoJjln58g44OP44Op44K/44Oq5L+u57e05omAJyxcclxuICAgICAgJ2tvJzogJ+2VoOudvO2DiOumrCDsiJjroKjsnqUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE2Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflj6Tku6PpgZfov7nlloDmganln4vmsqHlnKPloIInLFxyXG4gICAgICAnZGUnOiAnVmVyc3Vua2VuZXIgVGVtcGVsIHZvbiBRYXJuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTdW5rZW4gVGVtcGxlIG9mIFFhcm4nLFxyXG4gICAgICAnZnInOiAnTGUgVGVtcGxlIGVuc2V2ZWxpIGRlIFFhcm4nLFxyXG4gICAgICAnamEnOiAn6YG66Leh5o6i57SiIOOCq+ODq+ODs+Wfi+ayoeWvuumZoicsXHJcbiAgICAgICdrbyc6ICfsubTrpbjsnZgg66y064SI7KeEIOyCrOybkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTY3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mCquaVmempu+WcsOaXoOmZkOWfjuWPpOWgoScsXHJcbiAgICAgICdkZSc6ICdEaWUgUnVpbmVuIHZvbiBBbWRhcG9yJyxcclxuICAgICAgJ2VuJzogJ0FtZGFwb3IgS2VlcCcsXHJcbiAgICAgICdmcic6ICdMZSBDaMOidGVhdSBkXFwnQW1kYXBvcicsXHJcbiAgICAgICdqYSc6ICfpgqrmlZnmjpLmkoMg5Y+k5Z+O44Ki44Og44OA44OX44O844OrJyxcclxuICAgICAgJ2tvJzogJ+yYmyDslZTri6Ttj6zrpbQg7ISxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMTcwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a1geaymei/t+Wuq+aotem4o+a0nicsXHJcbiAgICAgICdkZSc6ICdTw6RnZXJzY2hyZWknLFxyXG4gICAgICAnZW4nOiAnQ3V0dGVyXFwncyBDcnknLFxyXG4gICAgICAnZnInOiAnTGUgR291ZmZyZSBodXJsYW50JyxcclxuICAgICAgJ2phJzogJ+a1geeggui/t+WuriDjgqvjg4Pjgr/jg7zjgrrjgq/jg6njgqQnLFxyXG4gICAgICAna28nOiAn64KY66y06r687J2YIOu5hOuqhScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTcxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WxseS4reaImOe6v+azveaiheWwlOimgeWhnicsXHJcbiAgICAgICdkZSc6ICdEaWUgRmVzdGUgRHplbWFlbCcsXHJcbiAgICAgICdlbic6ICdEemVtYWVsIERhcmtob2xkJyxcclxuICAgICAgJ2ZyJzogJ0xhIEZvcnRlcmVzc2UgZGUgRHplbWFlbCcsXHJcbiAgICAgICdqYSc6ICfmjoPoqI7kvZzmiKYg44K844O844Oh44Or6KaB5aGeJyxcclxuICAgICAgJ2tvJzogJ+ygnOupnCDsmpTsg4gnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE3Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmr5Lpm77mtJ7nqp/pu4Tph5HosLcnLFxyXG4gICAgICAnZGUnOiAnR29sZGtsYW1tJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBdXJ1bSBWYWxlJyxcclxuICAgICAgJ2ZyJzogJ0xlIFZhbCBkXFwnQXVydW0nLFxyXG4gICAgICAnamEnOiAn6Zyn5Lit6KGM6LuNIOOCquODvOODqeODoOODtOOCp+OCpOODqycsXHJcbiAgICAgICdrbyc6ICfquIjruZsg6rOo7Kec6riwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxNzQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rC05pm25aGUIOWPpOS7o+S6uui/t+WuqycsXHJcbiAgICAgICdkZSc6ICdLcmlzdGFsbHR1cm0gLSBEYXMgTGFieXJpbnRoIGRlciBBbHRlbicsXHJcbiAgICAgICdlbic6ICdUaGUgTGFieXJpbnRoIG9mIHRoZSBBbmNpZW50cycsXHJcbiAgICAgICdmcic6ICdMYSBUb3VyIGRlIENyaXN0YWwgLSBEw6lkYWxlIGFudGlxdWUnLFxyXG4gICAgICAnamEnOiAn44Kv44Oq44K544K/44Or44K/44Ov44O877ya5Y+k5Luj44Gu5rCR44Gu6L+35a6uJyxcclxuICAgICAgJ2tvJzogJ+2BrOumrOyKpO2DiCDtg4Dsm4w6IOqzoOuMgOyduOydmCDrr7jqtoEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE4MDoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aLieivuuilv+S6muWkluWcsCcsXHJcbiAgICAgICdkZSc6ICfDhHXDn2VyZXMgTGEgTm9zY2VhJyxcclxuICAgICAgJ2VuJzogJ091dGVyIExhIE5vc2NlYScsXHJcbiAgICAgICdmcic6ICdOb3NjZWEgZXh0w6lyaWV1cmUnLFxyXG4gICAgICAnamEnOiAn5aSW5Zyw44Op44OO44K344KiJyxcclxuICAgICAgJ2tvJzogJ+yZuOyngCDrnbzrhbjsi5zslYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjQsXHJcbiAgfSxcclxuICAxODg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q2m6KOF5Zyj5Z+f5pS+5rWq56We5Y+k56We5q6/JyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXMgV2FuZGVyZXJzIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBXYW5kZXJlclxcJ3MgUGFsYWNlIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZHUgVmFnYWJvbmQgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn5q2m6KOF6IGW5Z+fIOODr+ODs+ODgOODqeODvOODkeODrOOCuSAoSGFyZCknLFxyXG4gICAgICAna28nOiAn67Cp656R7J6Q7J2YIOq2geyghCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQwLFxyXG4gIH0sXHJcbiAgMTg5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mCquW/teWmluWcsOaXoOmZkOWfjuWPpOWgoScsXHJcbiAgICAgICdkZSc6ICdEaWUgUnVpbmVuIHZvbiBBbWRhcG9yIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ0FtZGFwb3IgS2VlcCAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgQ2jDonRlYXUgZFxcJ0FtZGFwb3IgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn6YKq5b+15o6S5pKDIOWPpOWfjuOCouODoOODgOODl+ODvOODqyAoSGFyZCknLFxyXG4gICAgICAna28nOiAn7JibIOyVlOuLpO2PrOultCDshLEo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0MCxcclxuICB9LFxyXG4gIDE5MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICforqjkvJDlvbflvqjmrbvngbXvvIEnLFxyXG4gICAgICAnZGUnOiAnQm9ja21hbm5zIEdlZm9sZ2UnLFxyXG4gICAgICAnZW4nOiAnVW5kZXIgdGhlIEFybW9yJyxcclxuICAgICAgJ2ZyJzogJ0NoYXNzZSBhdSBmYW50w7RtZSBmYW50b2NoZScsXHJcbiAgICAgICdqYSc6ICflvbflvqjjgYbmrbvpnIrjgpLoqI7jgabvvIEnLFxyXG4gICAgICAna28nOiAn67Cp7Zmp7ZWY64qUIOyCrOugueydhCDsk7Drn6zrnKjroKTrnbwhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDMsXHJcbiAgfSxcclxuICAxOTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6amx6Zmk5Ymn5q+S5aaW6Iqx77yBJyxcclxuICAgICAgJ2RlJzogJ1Vua3JhdXQgasOkdGVuJyxcclxuICAgICAgJ2VuJzogJ1B1bGxpbmcgUG9pc29uIFBvc2llcycsXHJcbiAgICAgICdmcic6ICdPcMOpcmF0aW9uIGZsZXVycyBkdSBtYWwnLFxyXG4gICAgICAnamEnOiAn5pyJ5q+S5aaW6Iqx44KS6aeG6Zmk44Gb44KI77yBJyxcclxuICAgICAgJ2tvJzogJ+uPheyEsSDsmpTqtLTqvYPsnYQg7KCc6rGw7ZWY6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0LFxyXG4gIH0sXHJcbiAgMTkyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a2iOeBreaBtuW+kuWbouS8meWvhOeUn+icguWbou+8gScsXHJcbiAgICAgICdkZSc6ICdJbnMgV2VzcGVubmVzdCBzdGVjaGVuJyxcclxuICAgICAgJ2VuJzogJ1N0aW5naW5nIEJhY2snLFxyXG4gICAgICAnZnInOiAnRXhww6lkaXRpb24gcHVuaXRpdmUgY29udHJlIGxlcyBWZW50cmVyb3VnZScsXHJcbiAgICAgICdqYSc6ICfnhKHms5XogIXjgIzkvLzmiJHonILlm6PjgI3jgpLmkoPmu4XjgZvjgojvvIEnLFxyXG4gICAgICAna28nOiAn66y067KV7J6QIOynkeuLqCBcXCfrgpjrgpjri4jri6hcXCfsnYQg7ISs66m47ZWY6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1LFxyXG4gIH0sXHJcbiAgMTkzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDnnJ/mupDkuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMyAtIDEnLFxyXG4gICAgICAnZW4nOiAnVGhlIEZpbmFsIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gMScsXHJcbiAgICAgICdmcic6ICdMXFwnQWLDrm1lIGRlIEJhaGFtdXQgSScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jvvJrnnJ/miJDnt6gxJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IOynhOyEse2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxOTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOecn+a6kOS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAzIC0gMicsXHJcbiAgICAgICdlbic6ICdUaGUgRmluYWwgQ29pbCBvZiBCYWhhbXV0IC0gVHVybiAyJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBYsOubWUgZGUgQmFoYW11dCBJSScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jvvJrnnJ/miJDnt6gyJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IOynhOyEse2OuCAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxOTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOecn+a6kOS5i+eroDMnLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAzIC0gMycsXHJcbiAgICAgICdlbic6ICdUaGUgRmluYWwgQ29pbCBvZiBCYWhhbXV0IC0gVHVybiAzJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBYsOubWUgZGUgQmFoYW11dCBJSUknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya55yf5oiQ57eoMycsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsp4TshLHtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTk2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDnnJ/mupDkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMyAtIDQnLFxyXG4gICAgICAnZW4nOiAnVGhlIEZpbmFsIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gNCcsXHJcbiAgICAgICdmcic6ICdMXFwnQWLDrm1lIGRlIEJhaGFtdXQgSVYnLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya55yf5oiQ57eoNCcsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsp4TshLHtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtNDQ4LFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0NCxcclxuICB9LFxyXG4gIDIwNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfojqvlj6TlipvotKTnjovmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnS8O2bmlnbGljaGUgS29uZnJvbnRhdGlvbiAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaG9ybm1hcmNoIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMYSBMaXNpw6hyZSBkZSByb25jZXMgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn5ZaE546L44Oi44Kw44Or44O744Oi44KwWElJ5LiW6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+yEoOyZlSDrqqjqt7jro6gg66qo6re4IFhJSeyEuCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzAsXHJcbiAgfSxcclxuICAyMTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5a6M5oiQ6ZuG5Zui5oiY6K6t57uD77yBJyxcclxuICAgICAgJ2RlJzogJ0VpbmVyIGbDvHIgYWxsZSwgYWxsZSBmw7xyIGVpbmVuJyxcclxuICAgICAgJ2VuJzogJ0Jhc2ljIFRyYWluaW5nOiBFbmVteSBQYXJ0aWVzJyxcclxuICAgICAgJ2ZyJzogJ0VudHJhw65uZW1lbnQ8SW5kZW50Lz46IGdyb3VwZXMgZFxcJ2VubmVtaXMnLFxyXG4gICAgICAnamEnOiAn6ZuG5Zuj5oim6KiT57e044KS44GP44GQ44KK5oqc44GR44KN77yBJyxcclxuICAgICAgJ2tvJzogJ+ynkeuLqOyghCDtm4jroKjsnYQg7JmE7IiY7ZWY6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNixcclxuICB9LFxyXG4gIDIxNToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnqoHnoLTmiYDmnInlhbPpl6jvvIzorqjkvJDmnIDmt7HlpITnmoTmlYzkurrvvIEnLFxyXG4gICAgICAnZGUnOiAnU3R1cm1rb21tYW5kbycsXHJcbiAgICAgICdlbic6ICdCYXNpYyBUcmFpbmluZzogRW5lbXkgU3Ryb25naG9sZHMnLFxyXG4gICAgICAnZnInOlxyXG4gICAgICAgICdFbnRyYcOubmVtZW50PEluZGVudC8+OiBpbjxTb2Z0SHlwaGVuLz5maWw8U29mdEh5cGhlbi8+dHJhPFNvZnRIeXBoZW4vPnRpb24gZW4gYmFzZSBlbm5lbWllJyxcclxuICAgICAgJ2phJzogJ+WFqOmWoumWgOOCkueqgeegtOOBl+OAgeacgOa3semDqOOBruaVteOCkuiojuOBpu+8gScsXHJcbiAgICAgICdrbyc6ICfqtIDrrLjsnYQg64+M7YyM7ZWY6rOgIOy1nOyLrOu2gOydmCDsoIHsnYQg7JOw65+s65yo66Ck6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5LFxyXG4gIH0sXHJcbiAgMjE2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aNleiOt+mHkeW4gem+n++8gScsXHJcbiAgICAgICdkZSc6ICdHaWwgb2RlciBMZWJlbicsXHJcbiAgICAgICdlbic6ICdIZXJvIG9uIHRoZSBIYWxmIFNoZWxsJyxcclxuICAgICAgJ2ZyJzogJ1JlY29ucXXDqnRlIGRcXCd1bmUgY2FyYXBhY2UgZXNjYW1vdMOpZScsXHJcbiAgICAgICdqYSc6ICfjgq7jg6vjgqzjg6HjgpLmjZXnjbLjgZvjgojvvIEnLFxyXG4gICAgICAna28nOiAn6ri46rGw67aB7J2EIOyCrOuhnOyeoeyVhOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTAsXHJcbiAgfSxcclxuICAyMTk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Ye75rqD5ZOl5biD5p6X54K45by55Yab5Zui77yBJyxcclxuICAgICAgJ2RlJzogJ0JvbWJpZ2UgR29ibGlucycsXHJcbiAgICAgICdlbic6ICdGbGlja2luZyBTdGlja3MgYW5kIFRha2luZyBOYW1lcycsXHJcbiAgICAgICdmcic6ICdMZXMgR29iZWxpbnMgYm9tYmFyZGllcnMnLFxyXG4gICAgICAnamEnOiAn54iG5by+6a2U44K044OW44Oq44Oz6LuN5Zuj44KS5pKD5ruF44Gb44KI77yBJyxcclxuICAgICAgJ2tvJzogJ+2Pre2DhOq0kSDqs6DruJTrprAg6rWw64uo7J2EIOyErOupuO2VmOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMyxcclxuICB9LFxyXG4gIDIyMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICforqjkvJDmoqblubvkuYvluIPmi4nlpYfluIzlpaXvvIEnLFxyXG4gICAgICAnZGUnOiAnQnJpYXhpbyBhdXNzY2hhbHRlbicsXHJcbiAgICAgICdlbic6ICdBbGxcXCdzIFdlbGwgdGhhdCBFbmRzIGluIHRoZSBXZWxsJyxcclxuICAgICAgJ2ZyJzogJ0JyaWF4aW8gw6AgYnJhcyByYWNjb3VyY2lzJyxcclxuICAgICAgJ2phJzogJ+WkouW5u+OBruODluODqeOCreOCt+OCquOCkuiojuOBpu+8gScsXHJcbiAgICAgICdrbyc6ICfrqr3tmZjsnZgg67iM65287YGs7Iuc7Jik66W8IOyTsOufrOucqOugpOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNSxcclxuICB9LFxyXG4gIDIyMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICforqjkvJDmsaHmn5PmupDlpLTprZTnlYzoirHvvIEnLFxyXG4gICAgICAnZGUnOiAnVMO2ZGxpY2hlcyBSYW5rZW5zcGllbCcsXHJcbiAgICAgICdlbic6ICdNb3JlIHRoYW4gYSBGZWVsZXInLFxyXG4gICAgICAnZnInOiAnU3VzIGF1IG1vcmJvbCBwb2xsdWV1cicsXHJcbiAgICAgICdqYSc6ICfmsZrmn5PmupDjg6Ljg6vjg5zjg6vjgpLoqI7jgabvvIEnLFxyXG4gICAgICAna28nOiAn7Jik7Je87JuQIOuqsOuzvOydhCDsk7Drn6zrnKjroKTrnbwhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIwLFxyXG4gIH0sXHJcbiAgMjIyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iuqOS8kOWdkemBk+S4reWHuueOsOeahOWmluW8gu+8gScsXHJcbiAgICAgICdkZSc6ICdHZWZhaHIgYXVzIGRlbSBOaWNodHMnLFxyXG4gICAgICAnZW4nOiAnQW5ub3kgdGhlIFZvaWQnLFxyXG4gICAgICAnZnInOiAnQnVzbyBsXFwnaW1tb2xhdGV1cicsXHJcbiAgICAgICdqYSc6ICflnZHpgZPjgavnj77jgozjgZ/lppbnlbDjg5bjgr3jgpLoqI7jgabvvIEnLFxyXG4gICAgICAna28nOiAn6rCx64+E7JeQIOuCmO2DgOuCnCDsmpTrp4gg67aA7IaM66W8IOyTsOufrOucqOugpOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTcsXHJcbiAgfSxcclxuICAyMjM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rOo5oSP5peg5pWM55qE55y35bGe77yM6K6o5LyQ5aSn5Z6L5aaW5byC77yBJyxcclxuICAgICAgJ2RlJzogJ0thbXBmIGdlZ2VuIFNjaGF0dGVuJyxcclxuICAgICAgJ2VuJzogJ1NoYWRvdyBhbmQgQ2xhdycsXHJcbiAgICAgICdmcic6ICdPbWJyZXMgZXQgZ3JpZmZlcycsXHJcbiAgICAgICdqYSc6ICfnhKHmlbXjga7nnLflsZ7jgpLlvpPjgYjjgZfjgIHlpKflnovlppbnlbDjgpLoqI7jgabvvIEnLFxyXG4gICAgICAna28nOiAn66y07KCB7J2YIOu2gO2VmOulvCDsobDsooXtlZjripQg7JqU66eI66W8IOyTsOufrOucqOugpOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjEsXHJcbiAgfSxcclxuICAyNDE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOmCgumAheS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAxJyxcclxuICAgICAgJ2VuJzogJ1RoZSBCaW5kaW5nIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gMScsXHJcbiAgICAgICdmcic6ICdMZSBMYWJ5cmludGhlIGRlIEJhaGFtdXQgSScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jvvJrpgoLpgIXnt6gxJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IO2VtO2bhO2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAyNDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOmCgumAheS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAyJyxcclxuICAgICAgJ2VuJzogJ1RoZSBCaW5kaW5nIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gMicsXHJcbiAgICAgICdmcic6ICdMZSBMYWJ5cmludGhlIGRlIEJhaGFtdXQgSUknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya6YKC6YCF57eoMicsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDtlbTtm4TtjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMjQzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDpgoLpgIXkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMycsXHJcbiAgICAgICdlbic6ICdUaGUgQmluZGluZyBDb2lsIG9mIEJhaGFtdXQgLSBUdXJuIDMnLFxyXG4gICAgICAnZnInOiAnTGUgTGFieXJpbnRoZSBkZSBCYWhhbXV0IElJSScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jvvJrpgoLpgIXnt6gzJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IO2VtO2bhO2OuCAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAyNDQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOmCgumAheS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiA0JyxcclxuICAgICAgJ2VuJzogJ1RoZSBCaW5kaW5nIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gNCcsXHJcbiAgICAgICdmcic6ICdMZSBMYWJ5cmludGhlIGRlIEJhaGFtdXQgSVYnLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya6YKC6YCF57eoNCcsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDtlbTtm4TtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMjQ1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDpgoLpgIXkuYvnq6A1JyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gNScsXHJcbiAgICAgICdlbic6ICdUaGUgQmluZGluZyBDb2lsIG9mIEJhaGFtdXQgLSBUdXJuIDUnLFxyXG4gICAgICAnZnInOiAnTGUgTGFieXJpbnRoZSBkZSBCYWhhbXV0IFYnLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya6YKC6YCF57eoNScsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDtlbTtm4TtjrggNScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMjUwOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn54u854ux5YGc6Ii55Zy6JyxcclxuICAgICAgJ2RlJzogJ1dvbGZzaMO2aGxlbi1QaWVyJyxcclxuICAgICAgJ2VuJzogJ1dvbHZlc1xcJyBEZW4gUGllcicsXHJcbiAgICAgICdmcic6ICdKZXTDqWUgZGUgbFxcJ0FudHJlIGRlcyBsb3VwcycsXHJcbiAgICAgICdqYSc6ICfjgqbjg6vjg7TjgrrjgrjjgqfjgqTjg6vkv4LoiLnloLQnLFxyXG4gICAgICAna28nOiAn64qR64yA7Jqw66asIOu2gOuRkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtNzcsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI5LFxyXG4gIH0sXHJcbiAgMjgxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WIqee7tOS6muahkeatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdHw7Z0dGVyZMOkbW1lcnVuZyAtIExldmlhdGhhbicsXHJcbiAgICAgICdlbic6ICdUaGUgPEVtcGhhc2lzPldob3JsZWF0ZXI8L0VtcGhhc2lzPiAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgQnJpc2V1ciBkZSBtYXLDqWVzIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+ecn+ODquODtOOCoeOCpOOCouOCteODs+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsp4Qg66as67CU7J207Ja07ISgIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzOCxcclxuICB9LFxyXG4gIDI5Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrlvJfliKnnibnmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBJZnJpdCcsXHJcbiAgICAgICdlbic6ICdUaGUgQm93bCBvZiBFbWJlcnMgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIENyYXTDqHJlIGRlcyB0aXNvbnMgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55yf44Kk44OV44Oq44O844OI6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ynhCDsnbTtlITrpqztirgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI1LFxyXG4gIH0sXHJcbiAgMjkzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+azsOWdpuatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdHw7Z0dGVyZMOkbW1lcnVuZyAtIFRpdGFuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBOYXZlbCAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgTm9tYnJpbCAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfnnJ/jgr/jgqTjgr/jg7PoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KeEIO2DgOydtO2DhCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjMsXHJcbiAgfSxcclxuICAyOTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6L+m5qW8572X5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gR2FydWRhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBIb3dsaW5nIEV5ZSAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnSHVybMWTaWwgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55yf44Ks44Or44O844OA6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ynhCDqsIDro6jri6Qg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI2LFxyXG4gIH0sXHJcbiAgMjk1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iuW8l+WIqeeJueatvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIElmcml0JyxcclxuICAgICAgJ2VuJzogJ1RoZSBCb3dsIG9mIEVtYmVycyAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGUgQ3JhdMOocmUgZGVzIHRpc29ucyAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteOCpOODleODquODvOODiOiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7J207ZSE66as7Yq4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyNSxcclxuICB9LFxyXG4gIDI5Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfms7DlnabmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBUaXRhbicsXHJcbiAgICAgICdlbic6ICdUaGUgTmF2ZWwgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xlIE5vbWJyaWwgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgr/jgqTjgr/jg7PoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IO2DgOydtO2DhCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjMsXHJcbiAgfSxcclxuICAyOTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6L+m5qW8572X5q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ1plbml0IGRlciBHw7Z0dGVyIC0gR2FydWRhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBIb3dsaW5nIEV5ZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnSHVybMWTaWwgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgqzjg6vjg7zjg4DoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOqwgOujqOuLpCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjYsXHJcbiAgfSxcclxuICAyOTg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6K6o5LyQ54iG5by55oCq55qE5aWz546L77yBJyxcclxuICAgICAgJ2RlJzogJ01pc3MgQm9tYmFzdGljJyxcclxuICAgICAgJ2VuJzogJ0xvbmcgTGl2ZSB0aGUgUXVlZW4nLFxyXG4gICAgICAnZnInOiAnTG9uZ3VlIHZpZSDDoCBsYSBSZWluZScsXHJcbiAgICAgICdqYSc6ICfjg5zjg6DjgpLnjofjgYTjgovjgIzjg5zjg6Djgq/jgqTjg7zjg7PjgI3jgpLoqI7jgabvvIEnLFxyXG4gICAgICAna28nOiAn67SE7J2EIOqxsOuKkOumsCBcXCfrtIQg7Jes7JmVXFwn7J2EIOyTsOufrOucqOugpOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjEsXHJcbiAgfSxcclxuICAyOTk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q2854Gt54m55q6K6Zi15Z6L55qE5aaW5byC77yBJyxcclxuICAgICAgJ2RlJzogJ1VuemVydHJlbm5saWNoJyxcclxuICAgICAgJ2VuJzogJ1dhcmQgVXAnLFxyXG4gICAgICAnZnInOiAnUXVpbnRldHRlcyBpbmZlcm5hdXgnLFxyXG4gICAgICAnamEnOiAn5LiN5rCX5ZGz44Gq6Zmj5b2i44KS57WE44KA5aaW55Ww44KS44Gb44KT5ruF44Gb44KI77yBJyxcclxuICAgICAgJ2tvJzogJ+u2iOq4uO2VnCDsp4TtmJXsnYQg7Kec64qUIOyalOuniOulvCDshKzrqbjtlZjrnbwhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIyLFxyXG4gIH0sXHJcbiAgMzAwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WItuatouS4ieaWuea3t+aImOeahOW3qOS6uuaXj++8jOWuiOS9j+mBl+eJqe+8gScsXHJcbiAgICAgICdkZSc6ICdXdWNodGlnZSBEcmVpZmFsdGlna2VpdCcsXHJcbiAgICAgICdlbic6ICdTb2xlbW4gVHJpbml0eScsXHJcbiAgICAgICdmcic6ICdUcmluaXTDqSBzaW5pc3RyZScsXHJcbiAgICAgICdqYSc6ICfkuInjgaTlt7Tjga7lt6jkurrml4/jgpLliLbjgZfjgIHpgbrnianjgpLlrojjgozvvIEnLFxyXG4gICAgICAna28nOiAn7IS4IOqxsOyduOyhseydhCDsoJzslZXtlZjsl6wg7Jyg66y87J2EIOyngOy8nOuCtOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjIsXHJcbiAgfSxcclxuICAzNDg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56m25p6B56We5YW156C05Z2P5L2c5oiYJyxcclxuICAgICAgJ2RlJzogJ0hlbGRlbmxpZWQgdm9uIFVsdGltYScsXHJcbiAgICAgICdlbic6ICdUaGUgTWluc3RyZWxcXCdzIEJhbGxhZDogVWx0aW1hXFwncyBCYW5lJyxcclxuICAgICAgJ2ZyJzogJ0xlIGZsw6lhdSBkXFwnVWx0aW1hJyxcclxuICAgICAgJ2phJzogJ+eptualteW5u+aDsyDjgqLjg6vjg4bjg57jgqbjgqfjg53jg7PnoLTlo4rkvZzmiKYnLFxyXG4gICAgICAna28nOiAn7JWM7YWM66eIIOybqO2PsCDtjIzqtLTsnpHsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzEsXHJcbiAgfSxcclxuICAzNDk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6aqa5Lmx5Z2R6YGT6ZOc6ZOD6ZOc5bGxJyxcclxuICAgICAgJ2RlJzogJ0t1cGZlcmdsb2NrZW4tTWluZSAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdDb3BwZXJiZWxsIE1pbmVzIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZXMgTWluZXMgZGUgQ2xvY2hlY3VpdnJlIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+mokuS5seWdkemBkyDjgqvjg4Pjg5Hjg7zjg5njg6vpioXlsbEgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+q1rOumrOyihSDqtJHsgrAo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzUwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aBtueBteW6nOmCuOmdmeivreW6hOWbrScsXHJcbiAgICAgICdkZSc6ICdIYXVra2UtSGVycmVuaGF1cyAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdIYXVra2UgTWFub3IgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIE1hbm9pciBkZXMgSGF1a2tlIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+WmlueVsOWxi+aVtyDjg4/jgqbjgrHjgr/lvqHnlKjpgrggKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+2VmOyasOy8gO2DgCDrs4TqtoEo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzUzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a0u+WKqOaMkeaImDInLFxyXG4gICAgICAnZGUnOiAnRXZlbnQtSW5oYWx0IDEnLFxyXG4gICAgICAnZW4nOiAnU3BlY2lhbCBFdmVudCBJJyxcclxuICAgICAgJ2ZyJzogJ0TDqWZpIHNww6ljaWFsIEknLFxyXG4gICAgICAnamEnOiAn44Kk44OZ44Oz44OI55So44Kz44Oz44OG44Oz44OE77yaMScsXHJcbiAgICAgICdrbyc6ICfsnbTrsqTtirjsmqkg7J6E66y0OiAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rS75Yqo5oyR5oiYMycsXHJcbiAgICAgICdkZSc6ICdFdmVudC1JbmhhbHQgMicsXHJcbiAgICAgICdlbic6ICdTcGVjaWFsIEV2ZW50IElJJyxcclxuICAgICAgJ2ZyJzogJ0TDqWZpIHNww6ljaWFsIElJJyxcclxuICAgICAgJ2phJzogJ+OCpOODmeODs+ODiOeUqOOCs+ODs+ODhuODs+ODhO+8mjInLFxyXG4gICAgICAna28nOiAn7J2067Kk7Yq47JqpIOyehOustDogMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDMsXHJcbiAgfSxcclxuICAzNTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOWFpeS+teS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAyIC0gMScsXHJcbiAgICAgICdlbic6ICdUaGUgU2Vjb25kIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gMScsXHJcbiAgICAgICdmcic6ICdMZXMgTcOpYW5kcmVzIGRlIEJhaGFtdXQgSScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jvvJrkvrXmlLvnt6gxJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IOy5qOqzte2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOWFpeS+teS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAyIC0gMicsXHJcbiAgICAgICdlbic6ICdUaGUgU2Vjb25kIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gMicsXHJcbiAgICAgICdmcic6ICdMZXMgTcOpYW5kcmVzIGRlIEJhaGFtdXQgSUknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya5L615pS757eoMicsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsuajqs7XtjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDM1Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7Tlk4jlp4bnibnlpKfov7flrqsg5YWl5L615LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdWZXJzY2hsdW5nZW5lIFNjaGF0dGVuIDIgLSAzJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTZWNvbmQgQ29pbCBvZiBCYWhhbXV0IC0gVHVybiAzJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBNw6lhbmRyZXMgZGUgQmFoYW11dCBJSUknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya5L615pS757eoMycsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsuajqs7XtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzU4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDlhaXkvrXkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMiAtIDQnLFxyXG4gICAgICAnZW4nOiAnVGhlIFNlY29uZCBDb2lsIG9mIEJhaGFtdXQgLSBUdXJuIDQnLFxyXG4gICAgICAnZnInOiAnTGVzIE3DqWFuZHJlcyBkZSBCYWhhbXV0IElWJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiO+8muS+teaUu+e3qDQnLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7Lmo6rO17Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM1OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliKnnu7TkuprmoZHmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBMZXZpYXRoYW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIDxFbXBoYXNpcz5XaG9ybGVhdGVyPC9FbXBoYXNpcz4gKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xlIEJyaXNldXIgZGUgbWFyw6llcyAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteODquODtOOCoeOCpOOCouOCteODs+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg66as67CU7J207Ja07ISgIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzOCxcclxuICB9LFxyXG4gIDM2MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliZHmlpfpoobln5/ml6XlvbHlnLDkv67ngrzmiYAnLFxyXG4gICAgICAnZGUnOiAnSGFsYXRhbGkgKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnSGFsYXRhbGkgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0hhbGF0YWxpIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+WJo+mXmOmgmOWfnyDjg4/jg6njgr/jg6rkv67nt7TmiYAgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+2VoOudvO2DiOumrCDsiJjroKjsnqUo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzYxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i0ouWuneS8oOivtOegtOiIsOWymycsXHJcbiAgICAgICdkZSc6ICdTY2hpZmZicmVjaGVyLUluc2VsJyxcclxuICAgICAgJ2VuJzogJ0h1bGxicmVha2VyIElzbGUnLFxyXG4gICAgICAnZnInOiAnTFxcJ8OObGUgZGUgQ3LDqHZlY2Fyw6huZScsXHJcbiAgICAgICdqYSc6ICfosqHlrp3kvJ3oqqwg44OP44Or44OW44Os44O844Kr44O844O744Ki44Kk44OrJyxcclxuICAgICAgJ2tvJzogJ+uCnO2MjOyEoOydmCDshKwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM2Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnurfkuonopoHlnLDluIPpm7fnpo/mtJvlhYvmlq/ph47okKXlnLAnLFxyXG4gICAgICAnZGUnOiAnQnLDvGxsdm9seFxcJyBMYW5ncmFzdCAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdCcmF5ZmxveFxcJ3MgTG9uZ3N0b3AgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIEJpdm91YWMgZGUgQnJheWZsb3ggKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55uf5Y+L5pSv5o+0IOODluODrOOCpOODleODreOCr+OCueOBrumHjuWWtuWcsCAoSGFyZCknLFxyXG4gICAgICAna28nOiAn67iM66CI7J207ZSM66Gd7Iqk7J2YIOyVvOyYgeyngCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDM3LFxyXG4gIH0sXHJcbiAgMzYzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iFkOWdj+mBl+i/ueaXoOmZkOWfjuW4guihl+WPpOi/uScsXHJcbiAgICAgICdkZSc6ICdIaXN0b3Jpc2NoZXMgQW1kYXBvcicsXHJcbiAgICAgICdlbic6ICdUaGUgTG9zdCBDaXR5IG9mIEFtZGFwb3InLFxyXG4gICAgICAnZnInOiAnTGVzIFZlc3RpZ2VzIGRlIGxhIGNpdMOpIGRcXCdBbWRhcG9yJyxcclxuICAgICAgJ2phJzogJ+iFkOaVl+mBuui3oSDlj6TjgqLjg6Djg4Djg5fjg7zjg6vluILooZcnLFxyXG4gICAgICAna28nOiAn7JibIOyVlOuLpO2PrOultCDsi5zqsIDsp4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDAsXHJcbiAgfSxcclxuICAzNjQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6I6r5Y+k5Yqb6LSk546L5q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ0vDtm5pZ2xpY2hlIEtvbmZyb250YXRpb24gKGV4dHJlbSknLFxyXG4gICAgICAnZW4nOiAnVGhvcm5tYXJjaCAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGEgTGlzacOocmUgZGUgcm9uY2VzIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW1546L44Oi44Kw44Or44O744Oi44KwWElJ5LiW6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3ueyZlSDrqqjqt7jro6gg66qo6re4IFhJSeyEuCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzAsXHJcbiAgfSxcclxuICAzNjU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5r+A5oiY5Z+O5aGe55+z5Y2r5aGUJyxcclxuICAgICAgJ2RlJzogJ1N0ZWluZXJuZSBXYWNodCAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaGUgU3RvbmUgVmlnaWwgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIFZpZ2lsZSBkZSBQaWVycmUgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn5Z+O5aGe5aWq5ZueIOOCueODiOODvOODs+ODtOOCo+OCuOODqyAoSGFyZCknLFxyXG4gICAgICAna28nOiAn64+M67Cp7YyoIOqyveqzhOy0iOyGjCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQyLFxyXG4gIH0sXHJcbiAgMzY2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+Wkp+ahpeS4iueahOWGs+aWlycsXHJcbiAgICAgICdkZSc6ICdEdWVsbCBhdWYgZGVyIGdyb8OfZW4gQnLDvGNrZScsXHJcbiAgICAgICdlbic6ICdCYXR0bGUgb24gdGhlIEJpZyBCcmlkZ2UnLFxyXG4gICAgICAnZnInOiAnQWZmcm9udGVtZW50IHN1ciBsZSBncmFuZCBwb250JyxcclxuICAgICAgJ2phJzogJ+OCruODq+OCrOODoeODg+OCt+ODpeiojuS8kOaIpicsXHJcbiAgICAgICdrbyc6ICfquLjqsIDrqZTsi5wg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNjc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6IuP6YaS6YGX6L+55ZaA5oGp5Z+L5rKh5Zyj5aCCJyxcclxuICAgICAgJ2RlJzogJ1ZlcnN1bmtlbmVyIFRlbXBlbCB2b24gUWFybiAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaGUgU3Vua2VuIFRlbXBsZSBvZiBRYXJuIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZSBUZW1wbGUgZW5zZXZlbGkgZGUgUWFybiAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfpgbrot6HmlZHmj7Qg44Kr44Or44Oz5Z+L5rKh5a+66ZmiIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfsubTrpbjsnZgg66y064SI7KeEIOyCrOybkCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQxLFxyXG4gIH0sXHJcbiAgMzY4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+WMluWlh+e+juaLieiuqOS8kOaImCcsXHJcbiAgICAgICdkZSc6ICdLYW1wZiBnZWdlbiBkaWUgRGhvcm1lLUNoaW3DpHJhJyxcclxuICAgICAgJ2VuJzogJ0EgUmVsaWMgUmVib3JuOiB0aGUgQ2hpbWVyYScsXHJcbiAgICAgICdmcic6ICdMYSBjaGltw6hyZSBkaG9ybWUgZHUgQ29lcnRoYXMnLFxyXG4gICAgICAnamEnOiAn44OJ44Or44Og44Kt44Oe44Kk44Op6KiO5LyQ5oimJyxcclxuICAgICAgJ2tvJzogJ+uPhOumhCDtgqTrp4jsnbTrnbwg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIxLFxyXG4gIH0sXHJcbiAgMzY5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a1t+W+t+aLieiuqOS8kOaImCcsXHJcbiAgICAgICdkZSc6ICdLYW1wZiBnZWdlbiBkaWUgSHlkcmEnLFxyXG4gICAgICAnZW4nOiAnQSBSZWxpYyBSZWJvcm46IHRoZSBIeWRyYScsXHJcbiAgICAgICdmcic6ICdMXFwnaHlkcmUgZFxcJ0hhbGF0YWxpJyxcclxuICAgICAgJ2phJzogJ+ODj+OCpOODieODqeiojuS8kOaIpicsXHJcbiAgICAgICdrbyc6ICftlZjsnbTrk5zrnbwg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNzE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Yeb5Ya95rSe5aSp5oqr6Zuq5aSn5Yaw5aOBJyxcclxuICAgICAgJ2RlJzogJ0RhcyBTY2huZWVrbGVpZCcsXHJcbiAgICAgICdlbic6ICdTbm93Y2xvYWsnLFxyXG4gICAgICAnZnInOiAnTWFudGVuZWlnZScsXHJcbiAgICAgICdqYSc6ICfmsLfntZDmvZznqp8g44K544OO44O844Kv44Ot44O844Kv5aSn5rC35aOBJyxcclxuICAgICAgJ2tvJzogJ+yWvOydjOyZuO2IrCDrjIDruZnrsr0nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDIsXHJcbiAgfSxcclxuICAzNzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rC05pm25aGUIOW4jOWwlOenkeaWr+WhlCcsXHJcbiAgICAgICdkZSc6ICdLcmlzdGFsbHR1cm0gLSBEZXIgU3lyY3VzLVR1cm0nLFxyXG4gICAgICAnZW4nOiAnU3lyY3VzIFRvd2VyJyxcclxuICAgICAgJ2ZyJzogJ0xhIFRvdXIgZGUgQ3Jpc3RhbCAtIFRvdXIgZGUgU3lyY3VzJyxcclxuICAgICAgJ2phJzogJ+OCr+ODquOCueOCv+ODq+OCv+ODr+ODvO+8muOCt+ODq+OCr+OCueOBruWhlCcsXHJcbiAgICAgICdrbyc6ICftgazrpqzsiqTtg4gg7YOA7JuMOiDsi5zrpbTsv6DsiqQg7YORJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNzM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5oOo5Ymn54G15q6/5aGU5aeGwrfloZTmi4nlopPlm60nLFxyXG4gICAgICAnZGUnOiAnVG90ZW5hY2tlciBUYW0tVGFyYSAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaGUgVGFt4oCTVGFyYSBEZWVwY3JvZnQgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdIeXBvZ8OpZSBkZSBUYW0tVGFyYSAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfmg6jliofpnIrmrr8g44K/44Og44K/44Op44Gu5aKT5omAIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICftg5Dtg4Drnbwg66yY7IaMKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMzAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM3NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmi4nlp4bmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBSYW11aCcsXHJcbiAgICAgICdlbic6ICdUaGUgU3RyaWtpbmcgVHJlZSAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTFxcJ0FyYnJlIGR1IGp1Z2VtZW50IChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+ecn+ODqeODoOOCpuiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsp4Qg652866y0IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0MyxcclxuICB9LFxyXG4gIDM3NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmi4nlp4bmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBSYW11aCcsXHJcbiAgICAgICdlbic6ICdUaGUgU3RyaWtpbmcgVHJlZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTFxcJ0FyYnJlIGR1IGp1Z2VtZW50IChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Op44Og44Km6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrnbzrrLQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQzLFxyXG4gIH0sXHJcbiAgMzc2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WRqOi+uemBl+i/uee+pCAo6Zi15Zyw5oiYKScsXHJcbiAgICAgICdkZSc6ICfDhHXDn2VyZSBSdWluZW4gKFNpY2hlcnVuZyknLFxyXG4gICAgICAnZW4nOiAnVGhlIEJvcmRlcmxhbmQgUnVpbnMgKFNlY3VyZSknLFxyXG4gICAgICAnZnInOiAnTGVzIFJ1aW5lcyBmcm9udGFsacOocmVzIChhbm5leGlvbiknLFxyXG4gICAgICAnamEnOiAn5aSW57iB6YG66Leh576kICjliLblnKfmiKYpJyxcclxuICAgICAgJ2tvJzogJ+yZuOqzvSDsnKDsoIHsp4DrjIAo7KCc7JWV7KCEKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzc3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W4jOeTpuatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdHw7Z0dGVyZMOkbW1lcnVuZyAtIFNoaXZhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBa2ggQWZhaCBBbXBoaXRoZWF0cmUgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBbXBoaXRow6nDonRyZSBkXFwnQWtoIEFmYWggKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55yf44K344O044Kh6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ynhCDsi5zrsJQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQ2LFxyXG4gIH0sXHJcbiAgMzc4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W4jOeTpuatvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIFNoaXZhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBa2ggQWZhaCBBbXBoaXRoZWF0cmUgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBbXBoaXRow6nDonRyZSBkXFwnQWtoIEFmYWggKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgrfjg7TjgqHoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOyLnOuwlCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDYsXHJcbiAgfSxcclxuICAzODA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m56Zu25byP5aSn6L+35a6rIOWFpeS+teS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAyIC0gMSAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdUaGUgU2Vjb25kIENvaWwgb2YgQmFoYW11dCAoU2F2YWdlKSAtIFR1cm4gMScsXHJcbiAgICAgICdmcic6ICdMZXMgTcOpYW5kcmVzIGRlIEJhaGFtdXQgSSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI6Zu25byP77ya5L615pS757eoMScsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsuajqs7Xtjrgo7JiB7JuFKSAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzODE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m56Zu25byP5aSn6L+35a6rIOWFpeS+teS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAyIC0gMiAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdUaGUgU2Vjb25kIENvaWwgb2YgQmFoYW11dCAoU2F2YWdlKSAtIFR1cm4gMicsXHJcbiAgICAgICdmcic6ICdMZXMgTcOpYW5kcmVzIGRlIEJhaGFtdXQgSUkgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiOmbtuW8j++8muS+teaUu+e3qDInLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7Lmo6rO17Y64KOyYgeybhSkgMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDM4Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7Tlk4jlp4bnibnpm7blvI/lpKfov7flrqsg5YWl5L615LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdWZXJzY2hsdW5nZW5lIFNjaGF0dGVuIDIgLSAzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTZWNvbmQgQ29pbCBvZiBCYWhhbXV0IChTYXZhZ2UpIC0gVHVybiAzJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBNw6lhbmRyZXMgZGUgQmFoYW11dCBJSUkgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiOmbtuW8j++8muS+teaUu+e3qDMnLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7Lmo6rO17Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzgzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJuembtuW8j+Wkp+i/t+WuqyDlhaXkvrXkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMiAtIDQgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFNlY29uZCBDb2lsIG9mIEJhaGFtdXQgKFNhdmFnZSkgLSBUdXJuIDQnLFxyXG4gICAgICAnZnInOiAnTGVzIE3DqWFuZHJlcyBkZSBCYWhhbXV0IElWIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jpm7blvI/vvJrkvrXmlLvnt6g0JyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IOy5qOqzte2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM4Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpgIbovazopoHlrrPmspnmlq/loZTlpI/murbmtJ4nLFxyXG4gICAgICAnZGUnOiAnU2FzdGFzaGEgKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnU2FzdGFzaGEgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ1Nhc3Rhc2hhIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+mAhuilsuimgeWusyDjgrXjgrnjgr/jgrfjg6Pmtbjpo5/mtJ4gKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+yCrOyKpO2DgOyDpCDsuajsi50g64+Z6rW0KOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM4OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6ZmG6KGM6bif56ue6LWb77ya5aSq6Ziz5rW35bK4JyxcclxuICAgICAgJ2RlJzogJ0Nob2NvYm8tUmVubmVuOiBTb25uZW5rw7xzdGUnLFxyXG4gICAgICAnZW4nOiAnQ2hvY29ibyBSYWNlOiBDb3N0YSBkZWwgU29sJyxcclxuICAgICAgJ2ZyJzogJ0NvdXJzZSBkZSBjaG9jb2JvczxJbmRlbnQvPjogQ29zdGEgZGVsIFNvbCcsXHJcbiAgICAgICdqYSc6ICfjg4Hjg6fjgrPjg5zjg6zjg7zjgrnvvJrjgrPjgrnjgr/jg7vjg4fjg6vjg7vjgr3jg6snLFxyXG4gICAgICAna28nOiAn7LSI7L2U67O0IOqyveyjvDog7L2U7Iqk7YOAIOuNuCDshpQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTQ3MixcclxuICAgICdvZmZzZXRZJzogLTQyNCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM5MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6ZmG6KGM6bif56ue6LWb77ya6I2S6YeO5aSn6YGTJyxcclxuICAgICAgJ2RlJzogJ0Nob2NvYm8tUmVubmVuOiBTYWdvbGlpLVN0cmHDn2UnLFxyXG4gICAgICAnZW4nOiAnQ2hvY29ibyBSYWNlOiBTYWdvbGlpIFJvYWQnLFxyXG4gICAgICAnZnInOiAnQ291cnNlIGRlIGNob2NvYm9zPEluZGVudC8+OiBSb3V0ZSBkZSBTYWdvbGlpJyxcclxuICAgICAgJ2phJzogJ+ODgeODp+OCs+ODnOODrOODvOOCue+8muOCteOCtOODquODvOODreODvOODiScsXHJcbiAgICAgICdrbyc6ICfstIjsvZTrs7Qg6rK97KO8OiDsgqzqs6jrpqwg7IKs66eJJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzOTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mZhuihjOm4n+ernui1m++8muaBrOmdmeWwj+i3rycsXHJcbiAgICAgICdkZSc6ICdDaG9jb2JvLVJlbm5lbjogUGZhZCBkZXIgU2VlbGVucnVoZScsXHJcbiAgICAgICdlbic6ICdDaG9jb2JvIFJhY2U6IFRyYW5xdWlsIFBhdGhzJyxcclxuICAgICAgJ2ZyJzogJ0NvdXJzZSBkZSBjaG9jb2JvczxJbmRlbnQvPjogU2VudGVzIHRyYW5xdWlsbGVzJyxcclxuICAgICAgJ2phJzogJ+ODgeODp+OCs+ODnOODrOODvOOCue+8muODiOODqeODs+OCreODq+ODkeOCuScsXHJcbiAgICAgICdrbyc6ICfstIjsvZTrs7Qg6rK97KO8OiDqs6DsmpTtlZwg7JW87JiB7KeAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzOTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aWl5LiB5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0plbnNlaXRzIFVydGhzIFF1ZWxsZScsXHJcbiAgICAgICdlbic6ICdVcnRoXFwncyBGb3VudCcsXHJcbiAgICAgICdmcic6ICdMYSBGb250YWluZSBkXFwnVXJ0aCcsXHJcbiAgICAgICdqYSc6ICfpl5jnpZ7jgqrjg7zjg4fjgqPjg7PoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7Yis7IugIOyYpOuUmCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDUsXHJcbiAgfSxcclxuICAzOTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5peg6ZmQ5Z+O55qE5q275paXJyxcclxuICAgICAgJ2RlJzogJ1JldmFuY2hlIGluIGRlbiBSdWluZW4nLFxyXG4gICAgICAnZW4nOiAnQmF0dGxlIGluIHRoZSBCaWcgS2VlcCcsXHJcbiAgICAgICdmcic6ICdSZXZhbmNoZSBhdSB2aWV1eCBjaMOidGVhdScsXHJcbiAgICAgICdqYSc6ICfnnJ/jgq7jg6vjgqzjg6Hjg4Pjgrfjg6XoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KeEIOq4uOqwgOuplOyLnCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjgsXHJcbiAgfSxcclxuICAzOTc6IHtcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflupPlsJTmnK3mlq/opb/pg6jpq5jlnLAnLFxyXG4gICAgICAnZGUnOiAnV2VzdGxpY2hlcyBIb2NobGFuZCB2b24gQ29lcnRoYXMnLFxyXG4gICAgICAnZW4nOiAnQ29lcnRoYXMgV2VzdGVybiBIaWdobGFuZHMnLFxyXG4gICAgICAnZnInOiAnSGF1dGVzIHRlcnJlcyBkdSBDb2VydGhhcyBvY2NpZGVudGFsJyxcclxuICAgICAgJ2phJzogJ+OCr+ODq+OCtuOCueilv+mDqOmrmOWcsCcsXHJcbiAgICAgICdrbyc6ICfsu6TrpbTri6TsiqQg7ISc67aA6rOg7KeAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDk1LFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDksXHJcbiAgfSxcclxuICAzOTg6IHtcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpvpnloKHlj4LlpKnpq5jlnLAnLFxyXG4gICAgICAnZGUnOiAnRHJhdmFuaXNjaGVzIFZvcmxhbmQnLFxyXG4gICAgICAnZW4nOiAnVGhlIERyYXZhbmlhbiBGb3JlbGFuZHMnLFxyXG4gICAgICAnZnInOiAnQXZhbnQtcGF5cyBkcmF2YW5pZW4nLFxyXG4gICAgICAnamEnOiAn6auY5Zyw44OJ44Op44O044Kh44OL44KiJyxcclxuICAgICAgJ2tvJzogJ+qzoOyngCDrk5zrnbzrsJTri4jslYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogOTUsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1MCxcclxuICB9LFxyXG4gIDM5OToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+m+meWgoeWGhemZhuS9juWcsCcsXHJcbiAgICAgICdkZSc6ICdEcmF2YW5pc2NoZXMgSGludGVybGFuZCcsXHJcbiAgICAgICdlbic6ICdUaGUgRHJhdmFuaWFuIEhpbnRlcmxhbmRzJyxcclxuICAgICAgJ2ZyJzogJ0FycmnDqHJlLXBheXMgZHJhdmFuaWVuJyxcclxuICAgICAgJ2phJzogJ+S9juWcsOODieODqeODtOOCoeODi+OCoicsXHJcbiAgICAgICdrbyc6ICfsoIDsp4Ag65Oc652867CU64uI7JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDk1LFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTEsXHJcbiAgfSxcclxuICA0MDA6IHtcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnv7vkupHpm77mtbcnLFxyXG4gICAgICAnZGUnOiAnV2FsbGVuZGUgTmViZWwnLFxyXG4gICAgICAnZW4nOiAnVGhlIENodXJuaW5nIE1pc3RzJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiWN1bWUgZGVzIGNpZXV4IGRlIERyYXZhbmlhJyxcclxuICAgICAgJ2phJzogJ+ODieODqeODtOOCoeODi+OCoumbsua1tycsXHJcbiAgICAgICdrbyc6ICfrk5zrnbzrsJTri4jslYQg6rWs66aE67CU64ukJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDk1LFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTIsXHJcbiAgfSxcclxuICA0MDE6IHtcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpmL/lt7Tmi4nmj5DkuprkupHmtbcnLFxyXG4gICAgICAnZGUnOiAnQWJhbGF0aGlzY2hlcyBXb2xrZW5tZWVyJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTZWEgb2YgQ2xvdWRzJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiWN1bWUgZGVzIGNpZXV4IGRcXCdBYmFsYXRoaWEnLFxyXG4gICAgICAnamEnOiAn44Ki44OQ44Op44K344Ki6Zuy5rW3JyxcclxuICAgICAgJ2tvJzogJ+yVhOuwnOudvOyLnOyVhCDqtazrpoTrsJTri6QnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogOTUsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1MyxcclxuICB9LFxyXG4gIDQwMjoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mtlOWkp+mZhumYv+a1juWFueaLiScsXHJcbiAgICAgICdkZSc6ICdBenlzIExsYScsXHJcbiAgICAgICdlbic6ICdBenlzIExsYScsXHJcbiAgICAgICdmcic6ICdBenlzIExsYScsXHJcbiAgICAgICdqYSc6ICfjgqLjgrjjgrnjg7vjg6njg7wnLFxyXG4gICAgICAna28nOiAn7JWE7KeA7IqkIOudvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA5NSxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDU0LFxyXG4gIH0sXHJcbiAgNDAzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iLsembhOW9kuadpScsXHJcbiAgICAgICdkZSc6ICdWZXJyYXQgZGVyIFFhbHlhbmEnLFxyXG4gICAgICAnZW4nOiAnUmV0dXJuIG9mIHRoZSBCdWxsJyxcclxuICAgICAgJ2ZyJzogJ1JldG91ciBhdSBiZXJjYWlsJyxcclxuICAgICAgJ2phJzogJ+iLsembhOOBruW4sOmChCcsXHJcbiAgICAgICdrbyc6ICfsmIHsm4XsnZgg6reA7ZmYJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0yNTAsXHJcbiAgICAnb2Zmc2V0WSc6IDEyOCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQxNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflrabor4blrp3lupPov6blt7Tli5Llubvmg7Plm77kuabppoYnLFxyXG4gICAgICAnZGUnOiAnR3Jvw59lIEd1YmFsLUJpYmxpb3RoZWsnLFxyXG4gICAgICAnZW4nOiAnVGhlIEdyZWF0IEd1YmFsIExpYnJhcnknLFxyXG4gICAgICAnZnInOiAnTGEgR3JhbmRlIGJpYmxpb3Row6hxdWUgZGUgR3ViYWwnLFxyXG4gICAgICAnamEnOiAn56aB5pu45Zue5Y+OIOOCsOODluODqeW5u+aDs+Wbs+abuOmkqCcsXHJcbiAgICAgICdrbyc6ICfqtazruIzrnbwg7ZmY7IOB64+E7ISc6rSAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA0MTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mZhuihjOm4n+ernui1m++8muernui1m+aVmeWtpicsXHJcbiAgICAgICdkZSc6ICdDaG9jb2JvLVJlbm5lbjogw5xidW5nc2JhaG4nLFxyXG4gICAgICAnZW4nOiAnQ2hvY29ibyBSYWNlOiBUdXRvcmlhbCcsXHJcbiAgICAgICdmcic6ICdDb3Vyc2UgZFxcJ2FwcGVudGlzc2FnZScsXHJcbiAgICAgICdqYSc6ICfjg4Hjg6fjgrPjg5zjg6zjg7zjgrnvvJrjg4Hjg6Xjg7zjg4jjg6rjgqLjg6snLFxyXG4gICAgICAna28nOiAn7LSI7L2U67O0IOqyveyjvDog7Yqc7Yag66as7Ja8JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IC02OTAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA0MTg6IHtcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrkv67liqDlvrfln7rnoYDlsYInLFxyXG4gICAgICAnZGUnOiAnRnVuZGFtZW50ZScsXHJcbiAgICAgICdlbic6ICdGb3VuZGF0aW9uJyxcclxuICAgICAgJ2ZyJzogJ0lzaGdhcmQgLSBMXFwnQXNzaXNlJyxcclxuICAgICAgJ2phJzogJ+OCpOOCt+ODpeOCrOODq+ODie+8muS4i+WxpCcsXHJcbiAgICAgICdrbyc6ICfsnbTsiojqsIDrpbTrk5wg7ZWY7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQ3LFxyXG4gIH0sXHJcbiAgNDE5OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK5L+u5Yqg5b6356Cl5p+x5bGCJyxcclxuICAgICAgJ2RlJzogJ1N0cmViZXdlcmsnLFxyXG4gICAgICAnZW4nOiAnVGhlIFBpbGxhcnMnLFxyXG4gICAgICAnZnInOiAnSXNoZ2FyZCAtIExlcyBDb250cmVmb3J0cycsXHJcbiAgICAgICdqYSc6ICfjgqTjgrfjg6Xjgqzjg6vjg4nvvJrkuIrlsaQnLFxyXG4gICAgICAna28nOiAn7J207IqI6rCA66W065OcIOyDgey4tScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0OCxcclxuICB9LFxyXG4gIDQyMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnqbrkuK3npZ7ln5/kuI3ojrflspsnLFxyXG4gICAgICAnZGUnOiAnTmltbWVycmVpY2gnLFxyXG4gICAgICAnZW4nOiAnTmV2ZXJyZWFwJyxcclxuICAgICAgJ2ZyJzogJ05hbGxvbmNxdWVzJyxcclxuICAgICAgJ2phJzogJ+elnuWfn+a1ruWztiDjg43jg5Djg7zjg6rjg7zjg5cnLFxyXG4gICAgICAna28nOiAn6rGw65GQ7KeAIOyViuuKlCDshKwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQyMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflnKPmlZnkuK3mnqLkvIrkv67liqDlvrfmlZnnmofljoUnLFxyXG4gICAgICAnZGUnOiAnRXJ6YmFzaWxpa2EnLFxyXG4gICAgICAnZW4nOiAnVGhlIFZhdWx0JyxcclxuICAgICAgJ2ZyJzogJ0xhIFZvw7t0ZScsXHJcbiAgICAgICdqYSc6ICflvLfnoaznqoHlhaUg44Kk44K344Ol44Ks44Or44OJ5pWZ55qH5bqBJyxcclxuICAgICAgJ2tvJzogJ+ydtOyKiOqwgOultOuTnCDqtZDtmanssq0nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQyNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpgqPluIPph4zkuprli5Lmlq/orqjkvJDmiJgnLFxyXG4gICAgICAnZGUnOiAnQ2hyeXNhbGlzJyxcclxuICAgICAgJ2VuJzogJ1RoZSBDaHJ5c2FsaXMnLFxyXG4gICAgICAnZnInOiAnTGEgQ2hyeXNhbGlkZScsXHJcbiAgICAgICdqYSc6ICfjgqLjgrfjgqjjg7Pjg7vjg4rjg5fjg6rjgqLjg6zjgrnoqI7kvJDmiKYnLFxyXG4gICAgICAna28nOiAn7JWE7JSo7JeUIOuCmOu4jOumrOyVjOugiOyKpCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQzMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfljZrnianmiJjoiLDml6DpmZDlm57lu4onLFxyXG4gICAgICAnZGUnOiAnRGllIEZyYWt0YWwtS29udGludXVtJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGcmFjdGFsIENvbnRpbnV1bScsXHJcbiAgICAgICdmcic6ICdMZSBDb250aW51dW0gZnJhY3RhbCcsXHJcbiAgICAgICdqYSc6ICfljZrnianmiKboiaYg44OV44Op44Kv44K/44Or44O744Kz44Oz44OG44Kj44OL44Ki44OgJyxcclxuICAgICAgJ2tvJzogJ+ustO2VnOyXsOyGjSDrsJXrrLztlagnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTIxMyxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQzMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflsJjlsIHnp5jlsqkgKOS6ieWkuuaImCknLFxyXG4gICAgICAnZGUnOiAnUm9iYmVuaG9sbSAoRXJvYmVydW5nKScsXHJcbiAgICAgICdlbic6ICdTZWFsIFJvY2sgKFNlaXplKScsXHJcbiAgICAgICdmcic6ICdMZSBSb2NoZXIgZGVzIHRyw6lmb25kcyAoaW52YXNpb24pJyxcclxuICAgICAgJ2phJzogJ+OCt+ODvOODq+ODreODg+OCryAo5LqJ5aWq5oimKScsXHJcbiAgICAgICdrbyc6ICfrtInsnbjrkJwg67CU7JyE7ISsKOyfge2DiOyghCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTksXHJcbiAgfSxcclxuICA0MzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn572X5rOi6YKj5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gUmF2YW5hJyxcclxuICAgICAgJ2VuJzogJ1Rob2sgYXN0IFRob2sgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ1Rob2sgYXN0IFRob2sgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55yf44Op44O844O044Kh44OK6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ynhCDrnbzrsJTrgpgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDU3LFxyXG4gIH0sXHJcbiAgNDM0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WGsOmbquW6n+WgoeaaruWNq+WhlCcsXHJcbiAgICAgICdkZSc6ICdBYmVuZHJvdC1XYWNodCcsXHJcbiAgICAgICdlbic6ICdUaGUgRHVzayBWaWdpbCcsXHJcbiAgICAgICdmcic6ICdMZSBWaWdpbGUgZHUgQ3LDqXB1c2N1bGUnLFxyXG4gICAgICAnamEnOiAn5buD56Cm5o2c57SiIOODgOOCueOCr+ODtOOCo+OCuOODqycsXHJcbiAgICAgICdrbyc6ICfslrTsiqTrpoQg7JqU7IOIJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQyLFxyXG4gIH0sXHJcbiAgNDM1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mCqum+meeOi+W6p+m+meW3ouelnuauvycsXHJcbiAgICAgICdkZSc6ICdOZXN0IGRlcyBEcmFjaGVuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBZXJ5JyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBaXJlJyxcclxuICAgICAgJ2phJzogJ+mCquernOihgOaIpiDjg4njg6njgrTjg7PjgrrjgqjjgqLjg6rjg7wnLFxyXG4gICAgICAna28nOiAn7Jqp7J2YIOuRpeyngCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtNDAsXHJcbiAgICAnb2Zmc2V0WSc6IDU1LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDQzNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkv77mlq/puqbmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBCaXNtYXJjaycsXHJcbiAgICAgICdlbic6ICdUaGUgTGltaXRsZXNzIEJsdWUgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdJbW1lbnNpdMOpIGJsZXVlIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+ecn+ODk+OCueODnuODq+OCr+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsp4Qg67mE7Iqk66eI66W07YGsIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDQzNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflnIbmoYzpqpHlo6vmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnU2luZ3VsYXJpdMOkdHMtUmVha3RvcicsXHJcbiAgICAgICdlbic6ICdUaGUgU2luZ3VsYXJpdHkgUmVhY3RvcicsXHJcbiAgICAgICdmcic6ICdMZSBSw6lhY3RldXIgZGUgc2luZ3VsYXJpdMOpJyxcclxuICAgICAgJ2phJzogJ+ODiuOCpOODhOODu+OCquODluODu+ODqeOCpuODs+ODieiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfrgpjsnbTsuKAg7Jik67iMIOudvOyatOuTnCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTYsXHJcbiAgfSxcclxuICA0Mzg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6KGA5oiY6IuN56m56a2U56eR5a2m56CU56m25omAJyxcclxuICAgICAgJ2RlJzogJ8OEdGhlcm9jaGVtaXNjaGVzIEZvcjxTb2Z0SHlwaGVuLz5zY2h1bmdzPFNvZnRIeXBoZW4vPmxhYm9yJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBZXRoZXJvY2hlbWljYWwgUmVzZWFyY2ggRmFjaWxpdHknLFxyXG4gICAgICAnZnInOiAnTGUgTGFib3JhdG9pcmUgZGUgbWFnaXNtb2xvZ2llJyxcclxuICAgICAgJ2phJzogJ+iSvOWkqeiBluaIpiDprZTnp5HlrabnoJTnqbbmiYAnLFxyXG4gICAgICAna28nOiAn66eI6rO87ZWZIOyXsOq1rOyGjCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTgsXHJcbiAgICAnb2Zmc2V0WSc6IDE0OSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ0MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnlsbHnu53pobbntKLlp4bpmL/lsJTngbXls7AnLFxyXG4gICAgICAnZGUnOiAnU29obSBBbCcsXHJcbiAgICAgICdlbic6ICdTb2htIEFsJyxcclxuICAgICAgJ2ZyJzogJ1NvaG0gQWwnLFxyXG4gICAgICAnamEnOiAn6ZyK5bOw6LiP56C0IOOCveODvOODoOODu+OCouODqycsXHJcbiAgICAgICdrbyc6ICfshpwg7JWMJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDE4NSxcclxuICAgICdvZmZzZXRZJzogNTEsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA0NDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn5py656We5Z+OIOWQr+WKqOS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gRmF1c3QgZGVzIFZhdGVycycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgRmlzdCBvZiB0aGUgRmF0aGVyJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIFBvaW5nIGR1IFDDqHJlJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8mui1t+WLlee3qDEnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog6riw64+Z7Y64IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ0Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5ZCv5Yqo5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBFbGxlIGRlcyBWYXRlcnMnLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEN1ZmYgb2YgdGhlIEZhdGhlcicsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBQb2lnbmV0IGR1IFDDqHJlJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8mui1t+WLlee3qDInLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog6riw64+Z7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ0NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5ZCv5Yqo5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBBcm0gZGVzIFZhdGVycycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQXJtIG9mIHRoZSBGYXRoZXInLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgQnJhcyBkdSBQw6hyZScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zvvJrotbfli5Xnt6gzJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOq4sOuPme2OuCAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA0NDU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn5py656We5Z+OIOWQr+WKqOS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gTGFzdCBkZXMgVmF0ZXJzJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBCdXJkZW4gb2YgdGhlIEZhdGhlcicsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBGYXJkZWF1IGR1IFDDqHJlJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8mui1t+WLlee3qDQnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog6riw64+Z7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ0Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnvZfms6LpgqPmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBSYXZhbmEnLFxyXG4gICAgICAnZW4nOiAnVGhvayBhc3QgVGhvayAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnVGhvayBhc3QgVGhvayAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteODqeODvOODtOOCoeODiuiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg652867CU64KYIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1NyxcclxuICB9LFxyXG4gIDQ0Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkv77mlq/puqbmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBCaXNtYXJjaycsXHJcbiAgICAgICdlbic6ICdUaGUgTGltaXRsZXNzIEJsdWUgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdJbW1lbnNpdMOpIGJsZXVlIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144OT44K544Oe44Or44Kv6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDruYTsiqTrp4jrpbTtgawg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNDQ4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WchuahjOmqkeWjq+W5u+aDs+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdIZWxkZW5saWVkIHZvbiBUaG9yZGFucyBGYWxsJyxcclxuICAgICAgJ2VuJzogJ1RoZSBNaW5zdHJlbFxcJ3MgQmFsbGFkOiBUaG9yZGFuXFwncyBSZWlnbicsXHJcbiAgICAgICdmcic6ICdMZSByw6hnbmUgZGUgVGhvcmRhbicsXHJcbiAgICAgICdqYSc6ICfokrzlpKnlubvmg7Mg44OK44Kk44OE44O744Kq44OW44O744Op44Km44Oz44OJ6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrgpjsnbTsuKAg7Jik67iMIOudvOyatOuTnCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTYsXHJcbiAgfSxcclxuICA0NDk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn6Zu25byP5py656We5Z+OIOWQr+WKqOS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gRmF1c3QgZGVzIFZhdGVycyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgRmlzdCBvZiB0aGUgRmF0aGVyIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIFBvaW5nIGR1IFDDqHJlIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrotbfli5Xnt6gxJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOq4sOuPme2OuCjsmIHsm4UpIDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ1MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfpm7blvI/mnLrnpZ7ln44g5ZCv5Yqo5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBFbGxlIGRlcyBWYXRlcnMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEN1ZmYgb2YgdGhlIEZhdGhlciAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBQb2lnbmV0IGR1IFDDqHJlIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrotbfli5Xnt6gyJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOq4sOuPme2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ1MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfpm7blvI/mnLrnpZ7ln44g5ZCv5Yqo5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBBcm0gZGVzIFZhdGVycyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQXJtIG9mIHRoZSBGYXRoZXIgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgQnJhcyBkdSBQw6hyZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O86Zu25byP77ya6LW35YuV57eoMycsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDquLDrj5ntjrgo7JiB7JuFKSAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA0NTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn6Zu25byP5py656We5Z+OIOWQr+WKqOS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gTGFzdCBkZXMgVmF0ZXJzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBCdXJkZW4gb2YgdGhlIEZhdGhlciAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBGYXJkZWF1IGR1IFDDqHJlIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrotbfli5Xnt6g0JyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOq4sOuPme2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ3ODoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eUsOWbremDoScsXHJcbiAgICAgICdkZSc6ICdGcm9oZWhhbGRlJyxcclxuICAgICAgJ2VuJzogJ0lkeWxsc2hpcmUnLFxyXG4gICAgICAnZnInOiAnSWR5bGzDqWUnLFxyXG4gICAgICAnamEnOiAn44Kk44OH44Kj44Or44K344Oj44Kk44KiJyxcclxuICAgICAgJ2tvJzogJ+ydtOuUnOyDpOydtOyWtCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1NSxcclxuICB9LFxyXG4gIDUwNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6JCM5a6g5LmL546L77ya5aSn6LWb5a+55oiY77yI5Lq65py65a+55oiY77yJJyxcclxuICAgICAgJ2RlJzogJ0thbXBmIGRlciBUcmFiYW50ZW46IFR1cm5pZXIgKGdlZ2VuIEFyZW5hbWVpc3RlciknLFxyXG4gICAgICAnZW4nOiAnTG9WTTogTWFzdGVyIFRvdXJuYW1lbnQnLFxyXG4gICAgICAnZnInOiAnQmF0YWlsbGUgZGUgdG91cm5vaSBjb250cmUgbFxcJ29yZGluYXRldXInLFxyXG4gICAgICAnamEnOiAnTG9WTe+8muWkp+S8muWvvuaIpiAoQ1BV5a++5oimKScsXHJcbiAgICAgICdrbyc6ICfqvKzrp4gg7Lmc6rWsIOqzteuwqeyghDog64yA7ZqMIOuMgOqysCjsnbjqs7Ug7KeA64qlIOuMgOqysCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUwODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfprZToiKroiLnomZrml6DmlrnoiJ8nLFxyXG4gICAgICAnZGUnOiAnRGllIE5pY2h0cy1BcmNoZScsXHJcbiAgICAgICdlbic6ICdUaGUgVm9pZCBBcmsnLFxyXG4gICAgICAnZnInOiAnTFxcJ0FyY2hlIGR1IG7DqWFudCcsXHJcbiAgICAgICdqYSc6ICfprZToiKroiLnjg7TjgqnjgqTjg4njgqLjg7zjgq8nLFxyXG4gICAgICAna28nOiAn67O07J2065Oc7J2YIOuwqeyjvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAyODksXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDM3LFxyXG4gIH0sXHJcbiAgNTA5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a0u+WKqOaMkeaImDEnLFxyXG4gICAgICAnZGUnOiAnRXZlbnQtSW5oYWx0IDMnLFxyXG4gICAgICAnZW4nOiAnU3BlY2lhbCBFdmVudCBJSUknLFxyXG4gICAgICAnZnInOiAnRMOpZmkgc3DDqWNpYWwgSUlJJyxcclxuICAgICAgJ2phJzogJ+OCpOODmeODs+ODiOeUqOOCs+ODs+ODhuODs+ODhO+8mjMnLFxyXG4gICAgICAna28nOiAn7J2067Kk7Yq47JqpIOyehOustDogMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMyxcclxuICB9LFxyXG4gIDUxMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflnLDohInngbXnga/lpKnni7zmmJ/nga/loZQnLFxyXG4gICAgICAnZGUnOiAnUGhhcm9zIFNpcml1cyAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdQaGFyb3MgU2lyaXVzIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZSBQaGFyZSBkZSBTaXJpdXMgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn5Yi25Zyn5beo5aGUIOOCt+ODquOCpuOCueWkp+eBr+WPsCAoSGFyZCknLFxyXG4gICAgICAna28nOiAn7Iuc66as7Jqw7IqkIOuMgOuTseuMgCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNTExOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iNieacqOW6reWbreWco+iMieWkj+WonOakjeeJqeWbrScsXHJcbiAgICAgICdkZSc6ICdTYW5rdCBNb2NpYW5uZS1BcmJvcmV0dW0nLFxyXG4gICAgICAnZW4nOiAnU2FpbnQgTW9jaWFubmVcXCdzIEFyYm9yZXR1bScsXHJcbiAgICAgICdmcic6ICdMXFwnQXJib3JldHVtIFNhaW50ZS1Nb2NpYW5uZScsXHJcbiAgICAgICdqYSc6ICfojYnmnKjluq3lnJIg6IGW44Oi44K344Oj44O844OM5qSN54mp5ZySJyxcclxuICAgICAgJ2tvJzogJ+yEsSDrqqjsg6gg7Iud66y87JuQJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDQwLFxyXG4gICAgJ29mZnNldFknOiA2LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTEyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMyxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkupHlhqDnvqTlspvnmb3mmLzmjqLntKInLFxyXG4gICAgICAnZGUnOiAnRGFzIERpYWRlbSAobGVpY2h0KScsXHJcbiAgICAgICdlbic6ICdUaGUgRGlhZGVtIChFYXN5KScsXHJcbiAgICAgICdmcic6ICdMZSBEaWFkw6htZSAoZmFjaWxlKScsXHJcbiAgICAgICdqYSc6ICfpm7LmtbfmjqLntKIg44OH44Kj44Ki44OH44Og6Ku45bO2IChFYXN5KScsXHJcbiAgICAgICdrbyc6ICfrlJTslYTrjoAg7KCc64+EKOyJrOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNjAsXHJcbiAgfSxcclxuICA1MTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6keWGoOe+pOWym+WknOaZmuaOoue0oicsXHJcbiAgICAgICdkZSc6ICdEYXMgRGlhZGVtIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEaWFkZW0gKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIERpYWTDqG1lIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+mbsua1t+aOoue0oiDjg4fjgqPjgqLjg4fjg6Doq7jls7YgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+uUlOyVhOuOgCDsoJzrj4Qo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2MixcclxuICB9LFxyXG4gIDUxNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmmJ/mtbfnqbrpl7TpoqDlgJLloZQnLFxyXG4gICAgICAnZGUnOiAnQW50aXR1cm0nLFxyXG4gICAgICAnZW4nOiAnVGhlIEFudGl0b3dlcicsXHJcbiAgICAgICdmcic6ICdMXFwnQW50aXRvdXInLFxyXG4gICAgICAnamEnOiAn5pif5rW36Kaz5risIOmAhuOBleOBruWhlCcsXHJcbiAgICAgICdrbyc6ICfqsbDqvrjroZwg7ISgIO2DkScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTE3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iQqOiPsua0m+eJueatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdHw7Z0dGVyZMOkbW1lcnVuZyAtIFNlcGhpcm90JyxcclxuICAgICAgJ2VuJzogJ0NvbnRhaW5tZW50IEJheSBTMVQ3JyxcclxuICAgICAgJ2ZyJzogJ1VuaXTDqSBkZSBjb250ZW50aW9uIFMxUDcnLFxyXG4gICAgICAnamEnOiAn6a2U56We44K744OV44Kj44Ot44OI6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+uniOyLoCDshLjtlLzroZztirgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY2LFxyXG4gIH0sXHJcbiAgNTE5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elnuWco+mBl+i/ueaXoOmZkOWfjuW4guihl+WPpOi/uScsXHJcbiAgICAgICdkZSc6ICdIaXN0b3Jpc2NoZXMgQW1kYXBvciAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaGUgTG9zdCBDaXR5IG9mIEFtZGFwb3IgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBWZXN0aWdlcyBkZSBsYSBjaXTDqSBkXFwnQW1kYXBvciAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfnpZ7ogZbpgbrot6Eg5Y+k44Ki44Og44OA44OX44O844Or5biC6KGXIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfsmJsg7JWU64uk7Y+s66W0IOyLnOqwgOyngCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDY0LFxyXG4gICAgJ29mZnNldFknOiAzMTUsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDYzLFxyXG4gIH0sXHJcbiAgNTIwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+acuuelnuWfjiDlvovliqjkuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEZhdXN0IGRlcyBTb2huZXMnLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEZpc3Qgb2YgdGhlIFNvbicsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBQb2luZyBkdSBGaWxzJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8muW+i+WLlee3qDEnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7Jyo64+Z7Y64IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUyMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5b6L5Yqo5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBFbGxlIGRlcyBTb2huZXMnLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEN1ZmYgb2YgdGhlIFNvbicsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBQb2lnbmV0IGR1IEZpbHMnLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O877ya5b6L5YuV57eoMicsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDsnKjrj5ntjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTIyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+acuuelnuWfjiDlvovliqjkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEFybSBkZXMgU29obmVzJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBBcm0gb2YgdGhlIFNvbicsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBCcmFzIGR1IEZpbHMnLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O877ya5b6L5YuV57eoMycsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDsnKjrj5ntjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTEwLFxyXG4gICAgJ29mZnNldFknOiAtMTcwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTIzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+acuuelnuWfjiDlvovliqjkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIExhc3QgZGVzIFNvaG5lcycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQnVyZGVuIG9mIHRoZSBTb24nLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgRmFyZGVhdSBkdSBGaWxzJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8muW+i+WLlee3qDQnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7Jyo64+Z7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUyNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfokKjoj7LmtJvnibnmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBTZXBoaXJvdCcsXHJcbiAgICAgICdlbic6ICdDb250YWlubWVudCBCYXkgUzFUNyAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnVW5pdMOpIGRlIGNvbnRlbnRpb24gUzFQNyAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+altemtlOelnuOCu+ODleOCo+ODreODiOiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg66eI7IugIOyEuO2UvOuhnO2KuCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNjYsXHJcbiAgfSxcclxuICA1Mjk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn6Zu25byP5py656We5Z+OIOW+i+WKqOS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gRmF1c3QgZGVzIFNvaG5lcyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgRmlzdCBvZiB0aGUgU29uIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIFBvaW5nIGR1IEZpbHMgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8muW+i+WLlee3qDEnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7Jyo64+Z7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTMwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+mbtuW8j+acuuelnuWfjiDlvovliqjkuYvnq6AyJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEVsbGUgZGVzIFNvaG5lcyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQ3VmZiBvZiB0aGUgU29uIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIFBvaWduZXQgZHUgRmlscyAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O86Zu25byP77ya5b6L5YuV57eoMicsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDsnKjrj5ntjrgo7JiB7JuFKSAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1MzE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn6Zu25byP5py656We5Z+OIOW+i+WKqOS5i+eroDMnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gQXJtIGRlcyBTb2huZXMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEFybSBvZiB0aGUgU29uIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIEJyYXMgZHUgRmlscyAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O86Zu25byP77ya5b6L5YuV57eoMycsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDsnKjrj5ntjrgo7JiB7JuFKSAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMTAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xNzAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1MzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn6Zu25byP5py656We5Z+OIOW+i+WKqOS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gTGFzdCBkZXMgU29obmVzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBCdXJkZW4gb2YgdGhlIFNvbiAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBGYXJkZWF1IGR1IEZpbHMgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8muW+i+WLlee3qDQnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7Jyo64+Z7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTMzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+Wbm+WbveiBlOWQiOWGm+a8lCcsXHJcbiAgICAgICdkZSc6ICdUcnVwcGVuw7xidW5nIGRlciBFb3J6w6Rpc2NoZW4gQWxsaWFueicsXHJcbiAgICAgICdlbic6ICdBIFNwZWN0YWNsZSBmb3IgdGhlIEFnZXMnLFxyXG4gICAgICAnZnInOiAnTGEgZ3JhbmRlIG1hbsWTdXZyZSDDqW9yesOpZW5uZScsXHJcbiAgICAgICdqYSc6ICflm5vlm73lkIjlkIzmvJTnv5InLFxyXG4gICAgICAna28nOiAnNOqwnOq1rSDtlanrj5kg7ZuI66CoJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1Mzc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i6sumBv+iMg+WbtOaUu+WHuycsXHJcbiAgICAgICdkZSc6ICdGbMOkY2hlbmFuZ3JpZmZlbiBhdXN3ZWljaGVuJyxcclxuICAgICAgJ2VuJzogJ0F2b2lkIEFyZWEgb2YgRWZmZWN0IEF0dGFja3MnLFxyXG4gICAgICAnZnInOiAnw4l2aXRlciBsZXMgYXR0YXF1ZXMgw6AgYWlyZSBkXFwnZWZmZXQnLFxyXG4gICAgICAnamEnOiAn56+E5Zuy5pS75pKD44KS6YG/44GR44KI44GG77yBJyxcclxuICAgICAgJ2tvJzogJ+uylOychCDqs7XqsqnsnYQg7ZS87ZWY7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTM4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmjozmj6Hku4fmgajov57lh7snLFxyXG4gICAgICAnZGUnOiAnTWl0IEtvbWJvcyBGZWluZHNlbGlna2VpdCBhdWYgc2ljaCB6aWVoZW4nLFxyXG4gICAgICAnZW4nOiAnRXhlY3V0ZSBhIENvbWJvIHRvIEluY3JlYXNlIEVubWl0eScsXHJcbiAgICAgICdmcic6ICdHw6luw6lyZXIgZGUgbFxcJ2luaW1pdGnDqSBhdmVjIHVuIGNvbWJvJyxcclxuICAgICAgJ2phJzogJ+OCs+ODs+ODnOOBp+aVteimluOCkumbhuOCgeOCiOOBhu+8gScsXHJcbiAgICAgICdrbyc6ICfsvaTrs7Trpbwg7J207Ja0IOyggeqwnOyLrOydhCDrgYzsnpAhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1Mzk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aOp+WItuaVjOS6uueahOS7h+aBqCcsXHJcbiAgICAgICdkZSc6ICdLb21ib3MgaW0gS2FtcGYgZWluc2V0emVuJyxcclxuICAgICAgJ2VuJzogJ0V4ZWN1dGUgYSBDb21ibyBpbiBCYXR0bGUnLFxyXG4gICAgICAnZnInOiAnRWZmZWN0dWVyIGxlIGNvbWJvIGVuIGNvbWJhdCcsXHJcbiAgICAgICdqYSc6ICflrp/miKbjgafjgrPjg7Pjg5zjgavmjJHmiKbjgZfjgojjgYbvvIEnLFxyXG4gICAgICAna28nOiAn7Iuk7KCE7JeQ7IScIOy9pOuztOulvCDsgqzsmqntlbTrs7TsnpAhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NDA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aOp+WItuWkmuS4quaVjOS6uueahOS7h+aBqCcsXHJcbiAgICAgICdkZSc6ICdGZWluZHNlbGlna2VpdCBtZWhyZXJlciBHZWduZXIgYXVmIHNpY2ggemllaGVuJyxcclxuICAgICAgJ2VuJzogJ0FjY3J1ZSBFbm1pdHkgZnJvbSBNdWx0aXBsZSBUYXJnZXRzJyxcclxuICAgICAgJ2ZyJzogJ0F0dGlyZXIgbFxcJ2luaW1pdGnDqSBkZSBwbHVzaWV1cnMgZW5uZW1pcyBzdXIgc29pJyxcclxuICAgICAgJ2phJzogJ+ikh+aVsOOBruaVteOBi+OCieaVteimluOCkumbhuOCgeOCiOOBhu+8gScsXHJcbiAgICAgICdrbyc6ICfri6TsiJjsnZgg7KCB7JeQ6rKM7IScIOyggeqwnOyLrOydhCDrgYzsnpAhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NDE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WunuaImOaOp+WItuWkmuS4quaVjOS6uueahOS7h+aBqCcsXHJcbiAgICAgICdkZSc6ICdHZWdlbiBtZWhyZXJlIEdlZ25lciBhdWYgZWlubWFsIGvDpG1wZmVuJyxcclxuICAgICAgJ2VuJzogJ0VuZ2FnZSBNdWx0aXBsZSBUYXJnZXRzJyxcclxuICAgICAgJ2ZyJzogJ0FmZnJvbnRlciBwbHVzaWV1cnMgZW5uZW1pcycsXHJcbiAgICAgICdqYSc6ICflrp/miKbjgafopIfmlbDjga7mlbXjgajmiKbjgaPjgabjgb/jgojjgYbvvIEnLFxyXG4gICAgICAna28nOiAn7Iuk7KCE7JeQ7IScIOuLpOyImOydmCDsoIHqs7wg7Iu47JuM67O07J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTQyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmjqfliLbov5zlpITmlYzkurrnmoTku4fmgagnLFxyXG4gICAgICAnZGUnOiAnQXVzIGRlciBGZXJuZSBGZWluZHNlbGlna2VpdCBhdWYgc2ljaCB6aWVoZW4nLFxyXG4gICAgICAnZW4nOiAnRXhlY3V0ZSBhIFJhbmdlZCBBdHRhY2sgdG8gSW5jcmVhc2UgRW5taXR5JyxcclxuICAgICAgJ2ZyJzogJ0fDqW7DqXJlciBkZSBsXFwnaW5pbWl0acOpIMOgIGRpc3RhbmNlJyxcclxuICAgICAgJ2phJzogJ+mBoOi3nembouOBi+OCieaVteimluOCkumbhuOCgeOCiOOBhu+8gScsXHJcbiAgICAgICdrbyc6ICfrqYDrpqzshJwg7KCB6rCc7Ius7J2EIOuBjOyekCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU0Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjAsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn55WZ5b+D5aKe5o+055qE5pWM5Lq6JyxcclxuICAgICAgJ2RlJzogJ0ZlaW5kbGljaGUgVmVyc3TDpHJrdW5nIGF1ZmhhbHRlbicsXHJcbiAgICAgICdlbic6ICdFbmdhZ2UgRW5lbXkgUmVpbmZvcmNlbWVudHMnLFxyXG4gICAgICAnZnInOiAnRmFpcmUgZmFjZSDDoCBkZXMgcmVuZm9ydHMgZW5uZW1pcycsXHJcbiAgICAgICdqYSc6ICfmlbXjga7lopfmj7Tjgavlr77lv5zjgZfjgojjgYbvvIEnLFxyXG4gICAgICAna28nOiAn7KCBIOyngOybkOq1sOyXkCDrjIDsspjtlZjsnpAhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NDQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mFjeWQiOmYsuaKpOiBjOS4muaJk+WAkuWNleS4quaVjOS6uicsXHJcbiAgICAgICdkZSc6ICdHZWduZXIgZ2VtZWluc2FtIGJlc2llZ2VuJyxcclxuICAgICAgJ2VuJzogJ0Fzc2lzdCBBbGxpZXMgaW4gRGVmZWF0aW5nIGEgVGFyZ2V0JyxcclxuICAgICAgJ2ZyJzogJ1ZhaW5jcmUgdW4gZW5uZW1pIGVuIGFzc2lzdGFudCBkZXMgYWxsacOpcycsXHJcbiAgICAgICdqYSc6ICflkbPmlrnjgajljZTlipvjgZfjgabmlbXjgpLlgJLjgZ3jgYbvvIEnLFxyXG4gICAgICAna28nOiAn7YyM7Yuw7JuQ6rO8IO2Ykeugpe2VmOyXrCDsoIHsnYQg66y866as7LmY7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTQ1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfphY3lkIjpmLLmiqTogYzkuJrmiZPlgJLlpJrkuKrmlYzkuronLFxyXG4gICAgICAnZGUnOiAnRGVuIEdlZ25lciBlaW5lcyBWZXJiw7xuZGV0ZW4gYmVzaWVnZW4nLFxyXG4gICAgICAnZW4nOiAnRGVmZWF0IGFuIE9jY3VwaWVkIFRhcmdldCcsXHJcbiAgICAgICdmcic6ICdWYWluY3JlIHVuIGVubmVtaSBvY2N1cMOpIHBhciB1biBhbGxpw6knLFxyXG4gICAgICAnamEnOiAn5ZGz5pa544GM5byV44GN44Gk44GR44Gm44GE44KL5pW144KS5YCS44Gd44GG77yBJyxcclxuICAgICAgJ2tvJzogJ+2MjO2LsOybkOqzvCDqsJnsnYAg7KCB7J2EIOqzteqyqe2VmOyekCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU0Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjAsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Lqy6YG/6IyD5Zu05pS75Ye755qE5ZCM5pe26L+b6KGM5oiY5paXJyxcclxuICAgICAgJ2RlJzogJ0FuZ3JpZmZlbiBhdXN3ZWljaGVuJyxcclxuICAgICAgJ2VuJzogJ0F2b2lkIEVuZ2FnZWQgVGFyZ2V0cycsXHJcbiAgICAgICdmcic6ICdDb21iYXR0cmUgZW4gw6l2aXRhbnQgbGVzIGF0dGFxdWVzIGVubmVtaWVzJyxcclxuICAgICAgJ2phJzogJ+aVteOBruaUu+aSg+OCkumBv+OBkeOBquOBjOOCieaIpuOBiuOBhu+8gScsXHJcbiAgICAgICdrbyc6ICfsoIHsnZgg6rO16rKp7J2EIO2UvO2VmOuptOyEnCDsi7jsmrDsnpAhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NDg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eBtea0u+i/kOeUqOWcuuWcsOacuuWFsycsXHJcbiAgICAgICdkZSc6ICdNaXQgZGVtIEdlbMOkbmRlIGludGVyYWdpZXJlbicsXHJcbiAgICAgICdlbic6ICdJbnRlcmFjdCB3aXRoIHRoZSBCYXR0bGVmaWVsZCcsXHJcbiAgICAgICdmcic6ICdJbnRlcmFnaXIgYXZlYyBsZSBkw6ljb3IgZW4gY29tYmF0JyxcclxuICAgICAgJ2phJzogJ+OCruODn+ODg+OCr+OCkua0u+eUqOOBl+OBpuaIpuOBiuOBhu+8gScsXHJcbiAgICAgICdrbyc6ICftirnsiJgg7J6l7LmY66W8IO2ZnOyaqe2VmOupsCDsi7jsmrDsnpAhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NDk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+ayu+eWl+mYsuaKpOiBjOS4micsXHJcbiAgICAgICdkZSc6ICdWZXJiw7xuZGV0ZSBoZWlsZW4nLFxyXG4gICAgICAnZW4nOiAnSGVhbCBhbiBBbGx5JyxcclxuICAgICAgJ2ZyJzogJ1NvaWduZXIgdW4gYWxsacOpJyxcclxuICAgICAgJ2phJzogJ+WRs+aWueOCkuWbnuW+qeOBl+OCiOOBhu+8gScsXHJcbiAgICAgICdrbyc6ICftjIzti7Dsm5DsnYQg7ZqM67O17Iuc7YKk7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTUwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmsrvnlpflsI/pmJ/pmJ/lkZgnLFxyXG4gICAgICAnZGUnOiAnTWVocmVyZSBWZXJiw7xuZGV0ZSBoZWlsZW4nLFxyXG4gICAgICAnZW4nOiAnSGVhbCBNdWx0aXBsZSBBbGxpZXMnLFxyXG4gICAgICAnZnInOiAnU29pZ25lciBwbHVzaWV1cnMgYWxsacOpcycsXHJcbiAgICAgICdqYSc6ICfopIfmlbDjga7lkbPmlrnjgpLlm57lvqnjgZfjgojjgYbvvIEnLFxyXG4gICAgICAna28nOiAn64uk7IiY7J2YIO2MjO2LsOybkOydhCDtmozrs7Xsi5ztgqTsnpAhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+acgOe7iOiuree7gycsXHJcbiAgICAgICdkZSc6ICdMZXR6dGUgw5xidW5nJyxcclxuICAgICAgJ2VuJzogJ0ZpbmFsIEV4ZXJjaXNlJyxcclxuICAgICAgJ2ZyJzogJ0V4ZXJjaWNlIGZpbmFsJyxcclxuICAgICAgJ2phJzogJ+acgOe1guiok+e3tO+8gScsXHJcbiAgICAgICdrbyc6ICfrp4jsp4Drp4kg7ZuI66CoIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTU0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iNo+iqiemHjiAo56KO5Yaw5oiYKScsXHJcbiAgICAgICdkZSc6ICdGZWxkIGRlciBFaHJlIChaZXJzcGxpdHRlcnVuZyknLFxyXG4gICAgICAnZW4nOiAnVGhlIEZpZWxkcyBvZiBHbG9yeSAoU2hhdHRlciknLFxyXG4gICAgICAnZnInOiAnTGVzIENoYW1wcyBkZSBsYSBHbG9pcmUgKGJyaXNlLWdsYWNlKScsXHJcbiAgICAgICdqYSc6ICfjg5XjgqPjg7zjg6vjg4njg7vjgqrjg5bjg7vjgrDjg63jg7zjg6rjg7wgKOegleawt+aIpiknLFxyXG4gICAgICAna28nOiAn7JiB6rSR7J2YIO2PieybkCjsh4TruZnsoIQpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY3LFxyXG4gIH0sXHJcbiAgNTU1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+Wkqem+meWuq+auv+W/hue9quWuqycsXHJcbiAgICAgICdkZSc6ICdTb2hyIEtoYWknLFxyXG4gICAgICAnZW4nOiAnU29ociBLaGFpJyxcclxuICAgICAgJ2ZyJzogJ1NvaHIgS2hhaScsXHJcbiAgICAgICdqYSc6ICflpKnnq5zlrq7mrr8g44K944O844Or44O744Kr44KkJyxcclxuICAgICAgJ2tvJzogJ+yGjOultCDsubTsnbQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMzcwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTU2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+emgeW/jOWfjumCpueOm+WTiCcsXHJcbiAgICAgICdkZSc6ICdEaWUgU3RhZHQgZGVyIFRyw6RuZW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIFdlZXBpbmcgQ2l0eSBvZiBNaGFjaCcsXHJcbiAgICAgICdmcic6ICdMYSBDaXTDqSBkw6lmZW5kdWUgZGUgTWhhY2gnLFxyXG4gICAgICAnamEnOiAn56aB5b+M6YO95biC44Oe44OPJyxcclxuICAgICAgJ2tvJzogJ+q4iOq4sOuPhOyLnCDrp4jtlZgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTQwLFxyXG4gICAgJ29mZnNldFknOiAtNDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6buR5rah5Lyg6K+056C06Iiw5bKbJyxcclxuICAgICAgJ2RlJzogJ1NjaGlmZmJyZWNoZXItSW5zZWwgKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnSHVsbGJyZWFrZXIgSXNsZSAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTFxcJ8OObGUgZGUgQ3LDqHZlY2Fyw6huZSAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfpu5LmuKbkvJ3oqqwg44OP44Or44OW44Os44O844Kr44O844O744Ki44Kk44OrIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfrgpztjIzshKDsnZgg7ISsKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNjgsXHJcbiAgfSxcclxuICA1NTg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rC05Z+O5a6d54mp5bqTJyxcclxuICAgICAgJ2RlJzogJ0FxdWFwb2xpcycsXHJcbiAgICAgICdlbic6ICdUaGUgQXF1YXBvbGlzJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBcXVhcG9sZScsXHJcbiAgICAgICdqYSc6ICflrp3nianluqsg44Ki44Kv44Ki44Od44Oq44K5JyxcclxuICAgICAgJ2tvJzogJ+uztOusvOqzoCDslYTsv6DslYTtj7TrpqzsiqQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU1OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflsLzlvrfpnI3moLzlvoHpvpnmiJgnLFxyXG4gICAgICAnZGUnOiAnRGVyIGxldHp0ZSBTY2hpY2tzYWxzd2VnJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGaW5hbCBTdGVwcyBvZiBGYWl0aCcsXHJcbiAgICAgICdmcic6ICdMYSBEZXJuacOocmUgYXZhbmPDqWUgZGUgbGEgRm9pJyxcclxuICAgICAgJ2phJzogJ+ODi+ODvOOCuuODmOODg+OCsOW+geernOaIpicsXHJcbiAgICAgICdrbyc6ICfri4jrk5ztmLjqt7gg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNTYwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mbt+WPpOaLicK36IyDwrfkvJHokZfmlq/ov73lh7vmiJgnLFxyXG4gICAgICAnZGUnOiAnQmx1dGlnZXMgV2llZGVyPFNvZnRIeXBoZW4vPnNlaGVuJyxcclxuICAgICAgJ2VuJzogJ0EgQmxvb2R5IFJldW5pb24nLFxyXG4gICAgICAnZnInOiAnQ291cnNlLXBvdXJzdWl0ZSBkYW5zIGxlIGxhYm9yYXRvaXJlJyxcclxuICAgICAgJ2phJzogJ+ODrOOCsOODqeODu+ODtOOCoeODs+ODu+ODkuODpeODieODq+OCuei/veaSg+aIpicsXHJcbiAgICAgICdrbyc6ICfroIjqtbTrnbwg67CYIO2eiOuTnOujqOyKpCDstpTqsqnsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTE4LFxyXG4gICAgJ29mZnNldFknOiAxNDksXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NjE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIsx772eMTDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDEtMTApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxLTEwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMS0xMCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEIx772eQjEwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjF+QjEwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NjI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIsxMe+9njIw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxMS0yMCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDExLTIwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMTEtMjApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMTHvvZ5CMjAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCMTF+QjIwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NjM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIsyMe+9njMw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAyMS0zMCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDIxLTMwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMjEtMzApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMjHvvZ5CMzAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCMjF+QjMwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NjQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIszMe+9njQw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAzMS00MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDMxLTQwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMzEtNDApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMzHvvZ5CNDAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCMzF+QjQwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NjU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIs0Me+9njUw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiA0MS01MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDQxLTUwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgNDEtNTApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCNDHvvZ5CNTAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCNDF+QjUwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NjY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5bC85b636ZyN5qC85Lyg5aWH5b6B6b6Z5oiYJyxcclxuICAgICAgJ2RlJzogJ0RhcyBMaWVkIHZvbiBOaWRob2dncyBsZXR6dGVtIFJ1ZicsXHJcbiAgICAgICdlbic6ICdUaGUgTWluc3RyZWxcXCdzIEJhbGxhZDogTmlkaG9nZ1xcJ3MgUmFnZScsXHJcbiAgICAgICdmcic6ICdMXFwnaXJlIGRlIE5pZGhvZ2cnLFxyXG4gICAgICAnamEnOiAn5qW144OL44O844K644OY44OD44Kw5b6B56uc5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDri4jrk5ztmLjqt7gg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNTcxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuqHngbXlupzpgrjpl7nprLzluoTlm60nLFxyXG4gICAgICAnZGUnOiAnRGFzIEdlaXN0ZXJzY2hsb3NzJyxcclxuICAgICAgJ2VuJzogJ1RoZSBIYXVudGVkIE1hbm9yJyxcclxuICAgICAgJ2ZyJzogJ0xlIE1hbm9pciBoYW50w6knLFxyXG4gICAgICAnamEnOiAn5Lqh6ZyK5bGL5pW3IOODm+ODvOODs+ODhuODg+ODieODnuODiuODvCcsXHJcbiAgICAgICdrbyc6ICfsnKDroLnsnZgg7KeRJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Zmp5bO75bOh6LC35aGe5bCU5rOV54m55bCU5rqq6LC3JyxcclxuICAgICAgJ2RlJzogJ1hlbHBoYXRvbCcsXHJcbiAgICAgICdlbic6ICdYZWxwaGF0b2wnLFxyXG4gICAgICAnZnInOiAnWGVscGhhdG9sJyxcclxuICAgICAgJ2phJzogJ+Wzu+WOs+a4k+iwtyDjgrzjg6vjg5XjgqHjg4jjg6snLFxyXG4gICAgICAna28nOiAn7KCk7YyM7YaoJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xNDgsXHJcbiAgICAnb2Zmc2V0WSc6IDM1LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0MCxcclxuICB9LFxyXG4gIDU3Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfntKLoj7LlqIXmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBTb3BoaWEnLFxyXG4gICAgICAnZW4nOiAnQ29udGFpbm1lbnQgQmF5IFAxVDYnLFxyXG4gICAgICAnZnInOiAnVW5pdMOpIGRlIGNvbnRlbnRpb24gUDFQNicsXHJcbiAgICAgICdqYSc6ICflpbPnpZ7jgr3jg5XjgqPjgqLoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7Jes7IugIOyGjO2UvOyVhCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNjksXHJcbiAgfSxcclxuICA1Nzc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57Si6I+y5aiF5q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ1plbml0IGRlciBHw7Z0dGVyIC0gU29waGlhJyxcclxuICAgICAgJ2VuJzogJ0NvbnRhaW5tZW50IEJheSBQMVQ2IChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdVbml0w6kgZGUgY29udGVudGlvbiBQMVA2IChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW15aWz56We44K944OV44Kj44Ki6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDsl6zsi6Ag7IaM7ZS87JWEIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2OSxcclxuICB9LFxyXG4gIDU3ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnp5jmnKzlrp3lupPov6blt7Tli5Llubvmg7Plm77kuabppoYnLFxyXG4gICAgICAnZGUnOiAnR3Jvw59lIEd1YmFsLUJpYmxpb3RoZWsgKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnVGhlIEdyZWF0IEd1YmFsIExpYnJhcnkgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xhIEdyYW5kZSBiaWJsaW90aMOocXVlIGRlIEd1YmFsIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+eogOabuOWbnuWPjiDjgrDjg5bjg6nlubvmg7Plm7Pmm7jppKggKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+q1rOu4jOudvCDtmZjsg4Hrj4TshJzqtIAo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAxMTYsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1Nzk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S5neWuq+W5u+WNoe+8muW5u+WNoeWvueWxgOWupCcsXHJcbiAgICAgICdkZSc6ICdUcmlwbGUgVHJpYWQ6IFdlbHRlbnNhbG9uJyxcclxuICAgICAgJ2VuJzogJ1RoZSBUcmlwbGUgVHJpYWQgQmF0dGxlaGFsbCcsXHJcbiAgICAgICdmcic6ICdBcsOobmUgVHJpcGxlIFRyaWFkZScsXHJcbiAgICAgICdqYSc6ICfjg4jjg6rjg5fjg6vjg4jjg6njgqTjgqLjg4nvvJrjgqvjg7zjg4njg5Djg4jjg6vjg6vjg7zjg6AnLFxyXG4gICAgICAna28nOiAn7Yq466as7ZSMIO2KuOudvOydtOyWtOuTnDog7Lm065OcIOuMgOqysOyepScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA4MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTgwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+acuuelnuWfjiDlpKnliqjkuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEF1Z2VuIGRlcyBTY2jDtnBmZXJzJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBFeWVzIG9mIHRoZSBDcmVhdG9yJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlcyBZZXV4IGR1IENyw6lhdGV1cicsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zvvJrlpKnli5Xnt6gxJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOyynOuPme2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDc1LFxyXG4gICAgJ29mZnNldFknOiAxNCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU4MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5aSp5Yqo5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBBdGVtIGRlcyBTY2jDtnBmZXJzJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBCcmVhdGggb2YgdGhlIENyZWF0b3InLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgU291ZmZsZSBkdSBDcsOpYXRldXInLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O877ya5aSp5YuV57eoMicsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDsspzrj5ntjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtODAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1ODI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn5py656We5Z+OIOWkqeWKqOS5i+eroDMnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gSGVyeiBkZXMgU2Now7ZwZmVycycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgSGVhcnQgb2YgdGhlIENyZWF0b3InLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgQ8WTdXIgZHUgQ3LDqWF0ZXVyJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8muWkqeWLlee3qDMnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7LKc64+Z7Y64IDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU4Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5aSp5Yqo5LmL56ugNCcsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBTZWVsZSBkZXMgU2Now7ZwZmVycycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgU291bCBvZiB0aGUgQ3JlYXRvcicsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMXFwnw4JtZSBkdSBDcsOpYXRldXInLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O877ya5aSp5YuV57eoNCcsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDsspzrj5ntjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTg0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+mbtuW8j+acuuelnuWfjiDlpKnliqjkuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEF1Z2VuIGRlcyBTY2jDtnBmZXJzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBFeWVzIG9mIHRoZSBDcmVhdG9yIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlcyBZZXV4IGR1IENyw6lhdGV1ciAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O86Zu25byP77ya5aSp5YuV57eoMScsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDsspzrj5ntjrgo7JiB7JuFKSAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDc1LFxyXG4gICAgJ29mZnNldFknOiAxNCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU4NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfpm7blvI/mnLrnpZ7ln44g5aSp5Yqo5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBBdGVtIGRlcyBTY2jDtnBmZXJzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBCcmVhdGggb2YgdGhlIENyZWF0b3IgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgU291ZmZsZSBkdSBDcsOpYXRldXIgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8muWkqeWLlee3qDInLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7LKc64+Z7Y64KOyYgeybhSkgMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtODAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1ODY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn6Zu25byP5py656We5Z+OIOWkqeWKqOS5i+eroDMnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gSGVyeiBkZXMgU2Now7ZwZmVycyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgSGVhcnQgb2YgdGhlIENyZWF0b3IgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgQ8WTdXIgZHUgQ3LDqWF0ZXVyIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrlpKnli5Xnt6gzJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOyynOuPme2OuCjsmIHsm4UpIDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU4Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfpm7blvI/mnLrnpZ7ln44g5aSp5Yqo5LmL56ugNCcsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBTZWVsZSBkZXMgU2Now7ZwZmVycyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgU291bCBvZiB0aGUgQ3JlYXRvciAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMXFwnw4JtZSBkdSBDcsOpYXRldXIgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8muWkqeWLlee3qDQnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7LKc64+Z7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTg5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfokIzlrqDkuYvnjovvvJrnjqnlrrblr7nmiJjvvIjnu6nngrnotZvvvIknLFxyXG4gICAgICAnZGUnOiAnS2FtcGYgZGVyIFRyYWJhbnRlbjogR2VnZW4gU3BpZWxlciAodW0gUlApJyxcclxuICAgICAgJ2VuJzogJ0xvVk06IFBsYXllciBCYXR0bGUgKFJQKScsXHJcbiAgICAgICdmcic6ICdCYXRhaWxsZSBzaW1wbGUgY29udHJlIHVuIGpvdWV1ciAoYXZlYyBQUiknLFxyXG4gICAgICAnamEnOiAnTG9WTe+8muODl+ODrOOCpOODpOODvOWvvuaIpiAoUlDlpInli5XjgYLjgoopJyxcclxuICAgICAgJ2tvJzogJ+q8rOuniCDsuZzqtawg6rO167Cp7KCEOiDtlIzroIjsnbTslrQg64yA6rKwKFJQIOuzgOuPmSDsnojsnYwpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1OTA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iQjOWuoOS5i+eOi++8muWkp+i1m+WvueaImO+8iOeOqeWutuWvueaImO+8iScsXHJcbiAgICAgICdkZSc6ICdLYW1wZiBkZXIgVHJhYmFudGVuOiBUdXJuaWVyIChnZWdlbiBTcGllbGVyKScsXHJcbiAgICAgICdlbic6ICdMb1ZNOiBUb3VybmFtZW50JyxcclxuICAgICAgJ2ZyJzogJ0JhdGFpbGxlIGRlIHRvdXJub2kgY29udHJlIGRlcyBqb3VldXJzJyxcclxuICAgICAgJ2phJzogJ0xvVk3vvJrlpKfkvJrlr77miKYgKOODl+ODrOOCpOODpOODvOWvvuaIpu+8iScsXHJcbiAgICAgICdrbyc6ICfqvKzrp4gg7Lmc6rWsIOqzteuwqeyghDog64yA7ZqMIOuMgOqysCjtlIzroIjsnbTslrQg64yA6rKwKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTkxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfokIzlrqDkuYvnjovvvJrnjqnlrrblr7nmiJjvvIjml6Dnu6nngrnotZvvvIknLFxyXG4gICAgICAnZGUnOiAnS2FtcGYgZGVyIFRyYWJhbnRlbjogR2VnZW4gU3BpZWxlciAob2huZSBSUCknLFxyXG4gICAgICAnZW4nOiAnTG9WTTogUGxheWVyIEJhdHRsZSAoTm9uLVJQKScsXHJcbiAgICAgICdmcic6ICdCYXRhaWxsZSBzaW1wbGUgY29udHJlIHVuIGpvdWV1ciAoc2FucyBQUiknLFxyXG4gICAgICAnamEnOiAnTG9WTe+8muODl+ODrOOCpOODpOODvOWvvuaIpiAoUlDlpInli5XjgarjgZcpJyxcclxuICAgICAgJ2tvJzogJ+q8rOuniCDsuZzqtawg6rO167Cp7KCEOiDtlIzroIjsnbTslrQg64yA6rKwKFJQIOuzgOuPmSDsl4bsnYwpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1OTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57qg57yg5LiN5riF55qE5a6/5ZG9JyxcclxuICAgICAgJ2RlJzogJ1dlbHRlbsO8YmVyZ3JlaWZlbmRlcyBTY2hpY2tzYWwnLFxyXG4gICAgICAnZW4nOiAnT25lIExpZmUgZm9yIE9uZSBXb3JsZCcsXHJcbiAgICAgICdmcic6ICdEZXN0aW5zIGVudHJlY3JvaXPDqXMnLFxyXG4gICAgICAnamEnOiAn57Wh44G/5ZCI44GG5a6/5ZG9JyxcclxuICAgICAgJ2tvJzogJ+uSpOyWve2eiOuKlCDsiJnrqoUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjgsXHJcbiAgfSxcclxuICA1OTM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIs1Me+9njYw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiA1MSAtIDYwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgNTEtNjApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyA1MS02MCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEI1Me+9nkI2MCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEI1MX5CNjAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU5NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izYx772eNzDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDYxIC0gNzApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyA2MS03MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDYxLTcwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjYx772eQjcwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjYxfkI3MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTk1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLNzHvvZ44MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gNzEgLSA4MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDcxLTgwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgNzEtODApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCNzHvvZ5CODAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCNzF+QjgwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1OTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIs4Me+9njkw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiA4MSAtIDkwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgODEtOTApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyA4MS05MCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEI4Me+9nkI5MCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEI4MX5COTAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU5Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izkx772eMTAw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiA5MSAtIDEwMCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDkxLTEwMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDkxLTEwMCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEI5Me+9nkIxMDAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCOTF+QjEwMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTk4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMTAx772eMTEw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxMDEgLSAxMTApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxMDEtMTEwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMTAxLTExMCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEIxMDHvvZ5CMTEwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjEwMX5CMTEwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1OTk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIsxMTHvvZ4xMjDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDExMSAtIDEyMCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDExMS0xMjApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyAxMTEtMTIwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjExMe+9nkIxMjAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCMTExfkIxMjAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYwMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izEyMe+9njEzMOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTIxIC0gMTMwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMTIxLTEzMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDEyMS0xMzApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMTIx772eQjEzMCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxMjF+QjEzMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjAxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMTMx772eMTQw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxMzEgLSAxNDApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxMzEtMTQwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMTMxLTE0MCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEIxMzHvvZ5CMTQwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjEzMX5CMTQwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIsxNDHvvZ4xNTDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDE0MSAtIDE1MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDE0MS0xNTApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyAxNDEtMTUwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjE0Me+9nkIxNTAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCMTQxfkIxNTAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYwMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izE1Me+9njE2MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTUxIC0gMTYwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMTUxLTE2MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDE1MS0xNjApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMTUx772eQjE2MCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxNTF+QjE2MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjA0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMTYx772eMTcw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxNjEgLSAxNzApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxNjEtMTcwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMTYxLTE3MCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEIxNjHvvZ5CMTcwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjE2MX5CMTcwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MDU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIsxNzHvvZ4xODDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDE3MSAtIDE4MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDE3MS0xODApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyAxNzEtMTgwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjE3Me+9nkIxODAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCMTcxfkIxODAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYwNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izE4Me+9njE5MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTgxIC0gMTkwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMTgxLTE5MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDE4MS0xOTApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMTgx772eQjE5MCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxODF+QjE5MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjA3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMTkx772eMjAw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxOTEgLSAyMDApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxOTEtMjAwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMTkxLTIwMCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEIxOTHvvZ5CMjAwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjE5MX5CMjAwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MTI6IHtcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfln7rmi4nlt7TlsLzkuprovrnljLonLFxyXG4gICAgICAnZGUnOiAnQWJhbmlzY2hlcyBHcmVuemxhbmQnLFxyXG4gICAgICAnZW4nOiAnVGhlIEZyaW5nZXMnLFxyXG4gICAgICAnZnInOiAnTGVzIE1hcmdlcycsXHJcbiAgICAgICdqYSc6ICfjgq7jg6njg5Djg4vjgqLovrrlooPlnLDluK8nLFxyXG4gICAgICAna28nOiAn6riw652867CU64uI7JWEIOuzgOuwqeyngOuMgCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3OSxcclxuICB9LFxyXG4gIDYxMzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e6oueOiea1tycsXHJcbiAgICAgICdkZSc6ICdSdWJpbnNlZScsXHJcbiAgICAgICdlbic6ICdUaGUgUnVieSBTZWEnLFxyXG4gICAgICAnZnInOiAnTWVyIGRlIFJ1YmlzJyxcclxuICAgICAgJ2phJzogJ+e0heeOiea1tycsXHJcbiAgICAgICdrbyc6ICftmY3smKXtlbQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODMsXHJcbiAgfSxcclxuICA2MTQ6IHtcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflu7blpI8nLFxyXG4gICAgICAnZGUnOiAnWWFueGlhJyxcclxuICAgICAgJ2VuJzogJ1lhbnhpYScsXHJcbiAgICAgICdmcic6ICdZYW54aWEnLFxyXG4gICAgICAnamEnOiAn44Ok44Oz44K1JyxcclxuICAgICAgJ2tvJzogJ+yWgOyDpCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4NCxcclxuICB9LFxyXG4gIDYxNToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflnZrniaLpk4Hlo4Hlt7Tln4PokKjplb/ln44nLFxyXG4gICAgICAnZGUnOiAnQmFlbHNhci1XYWxsJyxcclxuICAgICAgJ2VuJzogJ0JhZWxzYXJcXCdzIFdhbGwnLFxyXG4gICAgICAnZnInOiAnTGEgTXVyYWlsbGUgZGUgQmFlbHNhcicsXHJcbiAgICAgICdqYSc6ICflt6jlpKfpmLLlo4Eg44OQ44Ko44K144Or44Gu6ZW35Z+OJyxcclxuICAgICAgJ2tvJzogJ+uwlOydvOyCrOultCDsnqXshLEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMTgyLFxyXG4gICAgJ29mZnNldFknOiAzMixcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDAsXHJcbiAgfSxcclxuICA2MTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rW35bqV5a6r5q6/57Sr5rC05a6rJyxcclxuICAgICAgJ2RlJzogJ1NoaXN1aScsXHJcbiAgICAgICdlbic6ICdTaGlzdWkgb2YgdGhlIFZpb2xldCBUaWRlcycsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgYXV4IE1hcsOpZXMgdmlvbGV0dGVzJyxcclxuICAgICAgJ2phJzogJ+a1t+W6leWuruauvyDntKvmsLTlrq4nLFxyXG4gICAgICAna28nOiAn7Iuc7Iqk7J20IOq2gScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAzNSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYxNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnlsbHmt7HlooPntKLlp4bpmL/lsJTngbXls7AnLFxyXG4gICAgICAnZGUnOiAnU29obSBBbCAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdTb2htIEFsIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdTb2htIEFsIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+mciuWzsOa1hOWMliDjgr3jg7zjg6Djg7vjgqLjg6sgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+yGnCDslYwo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAxMjgsXHJcbiAgICAnb2Zmc2V0WSc6IC0zMixcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjgsXHJcbiAgfSxcclxuICA2MjA6IHtcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfln7rmi4nlt7TlsLzkuprlsbHljLonLFxyXG4gICAgICAnZGUnOiAnRGllIFppbm5lbicsXHJcbiAgICAgICdlbic6ICdUaGUgUGVha3MnLFxyXG4gICAgICAnZnInOiAnTGVzIFBpY3MnLFxyXG4gICAgICAnamEnOiAn44Ku44Op44OQ44OL44Ki5bGx5bKz5Zyw5bivJyxcclxuICAgICAgJ2tvJzogJ+q4sOudvOuwlOuLiOyVhCDsgrDslYXsp4DrjIAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODAsXHJcbiAgfSxcclxuICA2MjE6IHtcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfln7rmi4nlt7TlsLzkuprmuZbljLonLFxyXG4gICAgICAnZGUnOiAnRGFzIEZlbm4nLFxyXG4gICAgICAnZW4nOiAnVGhlIExvY2hzJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBMYWNzJyxcclxuICAgICAgJ2phJzogJ+OCruODqeODkOODi+OCoua5lueVlOWcsOW4rycsXHJcbiAgICAgICdrbyc6ICfquLDrnbzrsJTri4jslYQg7Zi467CY7KeA64yAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDgxLFxyXG4gIH0sXHJcbiAgNjIyOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSq6Ziz56We6I2J5Y6fJyxcclxuICAgICAgJ2RlJzogJ0F6aW0tU3RlcHBlJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBemltIFN0ZXBwZScsXHJcbiAgICAgICdmcic6ICdTdGVwcGUgZFxcJ0F6aW0nLFxyXG4gICAgICAnamEnOiAn44Ki44K444Og44K544OG44OD44OXJyxcclxuICAgICAgJ2tvJzogJ+yVhOynkCDrjIDstIjsm5AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODUsXHJcbiAgfSxcclxuICA2MjM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6K+V54K86KGM6Lev5be05YS/6L6+5pyo6Zy46YGTJyxcclxuICAgICAgJ2RlJzogJ0JhcmRhbXMgUHJvYmUnLFxyXG4gICAgICAnZW4nOiAnQmFyZGFtXFwncyBNZXR0bGUnLFxyXG4gICAgICAnZnInOiAnTGEgRm9yY2UgZGUgQmFyZGFtJyxcclxuICAgICAgJ2phJzogJ+S8nee1seippue3tCDjg5Djg6vjg4Djg6DopofpgZMnLFxyXG4gICAgICAna28nOiAn67CU66W064u0IO2MqOuPhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjI0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMyxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkupHlhqDnvqTlspvnmb3mmLzmjqLntKLvvIjni6nnjI7kuJPnlKjvvIknLFxyXG4gICAgICAnZGUnOiAnRGFzIERpYWRlbSAtIEphZ2RncsO8bmRlIChsZWljaHQpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEaWFkZW0gSHVudGluZyBHcm91bmRzIChFYXN5KScsXHJcbiAgICAgICdmcic6ICdMZSBEaWFkw6htZTxJbmRlbnQvPjogdGVycmFpbnMgZGUgY2hhc3NlIChmYWNpbGUpJyxcclxuICAgICAgJ2phJzogJ+mbsua1t+aOoue0oiDjg4fjgqPjgqLjg4fjg6Doq7jls7bvvJrni6nnjJ/pmZDlrpogKEVhc3kpJyxcclxuICAgICAgJ2tvJzogJ+uUlOyVhOuOgCDsoJzrj4Q6IOyghO2IrCDtlZzsoJUo7Ims7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2MCxcclxuICB9LFxyXG4gIDYyNToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjMsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LqR5Yag576k5bKb6buE5piP5o6i57Si77yI54up54yO5LiT55So77yJJyxcclxuICAgICAgJ2RlJzogJ0RhcyBEaWFkZW0gLSBKYWdkZ3LDvG5kZScsXHJcbiAgICAgICdlbic6ICdUaGUgRGlhZGVtIEh1bnRpbmcgR3JvdW5kcycsXHJcbiAgICAgICdmcic6ICdMZSBEaWFkw6htZTxJbmRlbnQvPjogdGVycmFpbnMgZGUgY2hhc3NlJyxcclxuICAgICAgJ2phJzogJ+mbsua1t+aOoue0oiDjg4fjgqPjgqLjg4fjg6Doq7jls7bvvJrni6nnjJ/pmZDlrponLFxyXG4gICAgICAna28nOiAn65SU7JWE646AIOygnOuPhDog7KCE7YisIO2VnOyglScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2MSxcclxuICB9LFxyXG4gIDYyNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmvILmtYHmtbfln5/lppbmrYzmtbcnLFxyXG4gICAgICAnZGUnOiAnU2lyZW5lbi1TZWUnLFxyXG4gICAgICAnZW4nOiAnVGhlIFNpcmVuc29uZyBTZWEnLFxyXG4gICAgICAnZnInOiAnTGEgTWVyIGR1IENoYW50IGRlcyBzaXLDqG5lcycsXHJcbiAgICAgICdqYSc6ICfmvILmtYHmtbfln58g44K744Kk44Os44O844Oz5rW3JyxcclxuICAgICAgJ2tvJzogJ+yEuOydtOugjCDtlbQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzYsXHJcbiAgfSxcclxuICA2Mjc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5b2x5LmL5Zu9JyxcclxuICAgICAgJ2RlJzogJ0R1biBTY2FpdGgnLFxyXG4gICAgICAnZW4nOiAnRHVuIFNjYWl0aCcsXHJcbiAgICAgICdmcic6ICdEdW4gU2NhaXRoJyxcclxuICAgICAgJ2phJzogJ+W9seOBruWbveODgOODs+ODu+OCueOCq+ODvCcsXHJcbiAgICAgICdrbyc6ICfrkZQg7Iqk7Lm0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0zNTAsXHJcbiAgICAnb2Zmc2V0WSc6IC00MDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDU4LFxyXG4gIH0sXHJcbiAgNjI4OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6buE6YeR5rivJyxcclxuICAgICAgJ2RlJzogJ0t1Z2FuZScsXHJcbiAgICAgICdlbic6ICdLdWdhbmUnLFxyXG4gICAgICAnZnInOiAnS3VnYW5lJyxcclxuICAgICAgJ2phJzogJ+OCr+OCrOODjScsXHJcbiAgICAgICdrbyc6ICfsv6DqsIDrhKQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODIsXHJcbiAgfSxcclxuICA2MzA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6keWGoOe+pOWym+aImOS6ieelnueMjuWcuicsXHJcbiAgICAgICdkZSc6ICdEYXMgRGlhZGVtIC0gSGFsb25lcyBQcsO8ZnVuZycsXHJcbiAgICAgICdlbic6ICdUaGUgRGlhZGVtIC0gVHJpYWxzIG9mIHRoZSBGdXJ5JyxcclxuICAgICAgJ2ZyJzogJ0xlIERpYWTDqG1lIC0gw4lwcmV1dmVzIGRlIEhhbG9uZScsXHJcbiAgICAgICdqYSc6ICfpm7LmtbfmjqLntKIg44OH44Kj44Ki44OH44Og6Ku45bO2ICjni6nnjJ8pJyxcclxuICAgICAgJ2tvJzogJ+uUlOyVhOuOgCDsoJzrj4Q6IOyghO2IrCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3MSxcclxuICB9LFxyXG4gIDYzMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliqDlsJTmj5Dor7rlubPljp/pga3pgYfmiJgnLFxyXG4gICAgICAnZGUnOiAnSGVsaW9kcm9tJyxcclxuICAgICAgJ2VuJzogJ1RoZSBDYXJ0ZW5lYXUgRmxhdHM6IEhlbGlvZHJvbWUnLFxyXG4gICAgICAnZnInOiAnUml4ZSDDoCBsXFwnSMOpbGlvZHJvbWUnLFxyXG4gICAgICAnamEnOiAn44Kr44Or44OG44OO44O85bmz5Y6f6YGt6YGH5oimJyxcclxuICAgICAgJ2tvJzogJ+y5tOultO2FjOuFuCDtj4nsm5Ag7KGw7Jqw7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MzU6IHtcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnpZ7mi7Pnl5UnLFxyXG4gICAgICAnZGUnOiAnUmhhbGdycyBXYWNodCcsXHJcbiAgICAgICdlbic6ICdSaGFsZ3JcXCdzIFJlYWNoJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXRlbmR1ZSBkZSBSaGFsZ3InLFxyXG4gICAgICAnamEnOiAn44Op44O844Or44Ks44O844K644Oq44O844OBJyxcclxuICAgICAgJ2tvJzogJ+uehOqxsOydmCDshpDquLgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzgsXHJcbiAgfSxcclxuICA2Mzc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56WW5bCU5a6b5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gWnVydmFuJyxcclxuICAgICAgJ2VuJzogJ0NvbnRhaW5tZW50IEJheSBaMVQ5JyxcclxuICAgICAgJ2ZyJzogJ1VuaXTDqSBkZSBjb250ZW50aW9uIFoxUDknLFxyXG4gICAgICAnamEnOiAn6ay856We44K644Or44Ov44O844Oz6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3gOyLoCDso7zrpbTrsJgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDc1LFxyXG4gIH0sXHJcbiAgNjM4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elluWwlOWum+atvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIFp1cnZhbicsXHJcbiAgICAgICdlbic6ICdDb250YWlubWVudCBCYXkgWjFUOSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnVW5pdMOpIGRlIGNvbnRlbnRpb24gWjFQOSAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+altemsvOelnuOCuuODq+ODr+ODvOODs+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg6reA7IugIOyjvOultOuwmCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzUsXHJcbiAgfSxcclxuICA2NTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6keWGoOe+pOWym+S4sOmltuelnuemj+WcsCcsXHJcbiAgICAgICdkZSc6ICdEYXMgRGlhZGVtIC0gTm9waGljYXMgUHLDvGZ1bmcnLFxyXG4gICAgICAnZW4nOiAnVGhlIERpYWRlbSAtIFRyaWFscyBvZiB0aGUgTWF0cm9uJyxcclxuICAgICAgJ2ZyJzogJ0xlIERpYWTDqG1lIC0gw4lwcmV1dmVzIGRlIE5vcGhpY2EnLFxyXG4gICAgICAnamEnOiAn6Zuy5rW35o6i57SiIOODh+OCo+OCouODh+ODoOiruOWztiAo5o6h6ZuGKScsXHJcbiAgICAgICdrbyc6ICfrlJTslYTrjoAg7KCc64+EOiDssYTsp5EnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzEsXHJcbiAgfSxcclxuICA2NjA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Kej5pS+5Yaz5oiY5aSa546b546L5Z+OJyxcclxuICAgICAgJ2RlJzogJ0J1cmcgRG9tYScsXHJcbiAgICAgICdlbic6ICdEb21hIENhc3RsZScsXHJcbiAgICAgICdmcic6ICdMZSBDaMOidGVhdSBkZSBEb21hJyxcclxuICAgICAgJ2phJzogJ+ino+aUvuaxuuaIpiDjg4njg57ln44nLFxyXG4gICAgICAna28nOiAn64+E66eIIOyEsScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjYxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3qOeCruimgeWhnuW4neWbveeZveWxseWgoScsXHJcbiAgICAgICdkZSc6ICdDYXN0cnVtIEFiYW5pYScsXHJcbiAgICAgICdlbic6ICdDYXN0cnVtIEFiYW5pYScsXHJcbiAgICAgICdmcic6ICdDYXN0cnVtIEFiYW5pYScsXHJcbiAgICAgICdqYSc6ICflt6jnoLLopoHloZ4g44Kr44K544OI44Or44Og44O744Ki44OQ44OL44KiJyxcclxuICAgICAgJ2tvJzogJ+y5tOyKpO2KuOujuCDslYTrsJTri4jslYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogNzIsXHJcbiAgICAnb2Zmc2V0WSc6IC0xODYsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2NjI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5oG25YWa5a2k5Z+O6buE6YeR6ZiBJyxcclxuICAgICAgJ2RlJzogJ1NjaGxvc3MgS3VnYW5lJyxcclxuICAgICAgJ2VuJzogJ0t1Z2FuZSBDYXN0bGUnLFxyXG4gICAgICAnZnInOiAnTGUgQ2jDonRlYXUgZGUgS3VnYW5lJyxcclxuICAgICAgJ2phJzogJ+aCquWFmuaIkOaVlyDjgq/jgqzjg43ln44nLFxyXG4gICAgICAna28nOiAn7L+g6rCA64SkIOyEsScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA3MCxcclxuICAgICdvZmZzZXRZJzogMzMsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2NjM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5L+u6KGM5Y+k5Yi55pif5a+85a+6JyxcclxuICAgICAgJ2RlJzogJ1RlbXBlbCBkZXIgRmF1c3QnLFxyXG4gICAgICAnZW4nOiAnVGhlIFRlbXBsZSBvZiB0aGUgRmlzdCcsXHJcbiAgICAgICdmcic6ICdMZSBUZW1wbGUgZHUgUG9pbmcnLFxyXG4gICAgICAnamEnOiAn5aOK56We5L+u6KGMIOaYn+WwjuWxseWvuumZoicsXHJcbiAgICAgICdrbyc6ICfshLHrj4TsgrAg7IKs7JuQJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC00MjcsXHJcbiAgICAnb2Zmc2V0WSc6IC0zMTQsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2NjU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6bG86YGT546w6Lqr77yBJyxcclxuICAgICAgJ2RlJzogJ0VpbiB6d2VpZmVsaGFmdGVzIEFuZ2Vib3QnLFxyXG4gICAgICAnZW4nOiAnSXRcXCdzIFByb2JhYmx5IGEgVHJhcCcsXHJcbiAgICAgICdmcic6ICdVbiBkcsO0bGUgZGUgTmFtYXp1JyxcclxuICAgICAgJ2phJzogJ+OCruODp+ODieOCpuePvuOCi++8gScsXHJcbiAgICAgICdrbyc6ICfqtZDrj4Qg65Ox7J6lIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjc0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mhu+S9kOS5i+eUt+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdHw7Z0dGVyZMOkbW1lcnVuZyAtIFN1c2FubycsXHJcbiAgICAgICdlbic6ICdUaGUgUG9vbCBvZiBUcmlidXRlJyxcclxuICAgICAgJ2ZyJzogJ0xhIENyaXF1ZSBhdXggdHJpYnV0cycsXHJcbiAgICAgICdqYSc6ICfjgrnjgrXjg47jgqroqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7Iqk7IKs64W47JikIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3NyxcclxuICB9LFxyXG4gIDY3Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpobvkvZDkuYvnlLfmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBTdXNhbm8nLFxyXG4gICAgICAnZW4nOiAnVGhlIFBvb2wgb2YgVHJpYnV0ZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGEgQ3JpcXVlIGF1eCB0cmlidXRzIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144K544K144OO44Kq6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDsiqTsgqzrhbjsmKQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDc3LFxyXG4gIH0sXHJcbiAgNjc5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elnum+meatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdLw7ZuaWdsaWNoZSBNZW5hZ2VyaWUnLFxyXG4gICAgICAnZW4nOiAnVGhlIFJveWFsIE1lbmFnZXJpZScsXHJcbiAgICAgICdmcic6ICdMYSBNw6luYWdlcmllIHJveWFsZScsXHJcbiAgICAgICdqYSc6ICfnpZ7pvo3oqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7Iug66OhIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3NixcclxuICB9LFxyXG4gIDY4NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuo7ph4zmmILng63nmoTnp5jnrZYnLFxyXG4gICAgICAnZGUnOiAnV2VnZSB6dXIgVHJhbnN6ZW5kZW56JyxcclxuICAgICAgJ2VuJzogJ1RoZSBSZXNvbmFudCcsXHJcbiAgICAgICdmcic6ICdMYSBydXNlIGRcXCdVcmlhbmdlcicsXHJcbiAgICAgICdqYSc6ICfjgqbjg6rjgqjjg7Pjgrjjgqfjga7np5jnrZYnLFxyXG4gICAgICAna28nOiAn7JyE66as7JWZ7KCc7J2YIOu5hOyxhScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjg4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mCo+i+vuaFlScsXHJcbiAgICAgICdkZSc6ICdOYWFkYW0nLFxyXG4gICAgICAnZW4nOiAnTmFhZGFtJyxcclxuICAgICAgJ2ZyJzogJ0xhIGdyYW5kZSBiYXRhaWxsZSBkdSBOYWFkYW0nLFxyXG4gICAgICAnamEnOiAn57WC56+A44Gu5ZCI5oimJyxcclxuICAgICAgJ2tvJzogJ+qzhOygiOuBnSDtlansoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDY4OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpj5bmiJjnuqLojrLpmL/mi4nnsbPmoLwnLFxyXG4gICAgICAnZGUnOiAnQWxhIE1oaWdvJyxcclxuICAgICAgJ2VuJzogJ0FsYSBNaGlnbycsXHJcbiAgICAgICdmcic6ICdBbGEgTWhpZ28nLFxyXG4gICAgICAnamEnOiAn57SF6JOu5rG65oimIOOCouODqeODn+OCtCcsXHJcbiAgICAgICdrbyc6ICfslYzrnbzrr7jqs6AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMjkyLFxyXG4gICAgJ29mZnNldFknOiAtMTYzLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjkwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aXtuepuueLree8neWklue8mCcsXHJcbiAgICAgICdkZSc6ICdJbnRlcmRpbWVuc2lvbmFsZXIgUmlzcycsXHJcbiAgICAgICdlbic6ICdJbnRlcmRpbWVuc2lvbmFsIFJpZnQnLFxyXG4gICAgICAnZnInOiAnRmlzc3VyZSBpbnRlcmRpbWVuc2lvbm5lbGxlJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk++8muWklue4gScsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIOiDsmbjqs70nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzEnLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgMS4wJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjEuMCcsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHYxLjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44OH44Or44K/57eoMScsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog64247YOA7Y64IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzInLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgMi4wJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjIuMCcsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHYyLjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44OH44Or44K/57eoMicsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog64247YOA7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzMnLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgMy4wJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjMuMCcsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHYzLjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44OH44Or44K/57eoMycsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog64247YOA7Y64IDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzQnLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgNC4wJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjQuMCcsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHY0LjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44OH44Or44K/57eoNCcsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog64247YOA7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzEnLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgMS4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjEuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHYxLjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muODh+ODq+OCv+e3qDEnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOuNuO2DgO2OuCjsmIHsm4UpIDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzInLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgMi4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjIuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHYyLjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muODh+ODq+OCv+e3qDInLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOuNuO2DgO2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzMnLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgMy4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjMuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHYzLjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muODh+ODq+OCv+e3qDMnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOuNuO2DgO2OuCjsmIHsm4UpIDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzQnLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgNC4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjQuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHY0LjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muODh+ODq+OCv+e3qDQnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOuNuO2DgO2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA3MDU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSn5Lya5byA5aeLJyxcclxuICAgICAgJ2RlJzogJ1RoYWwgenUgRWhyZW4nLFxyXG4gICAgICAnZW4nOiAnSW4gVGhhbFxcJ3MgTmFtZScsXHJcbiAgICAgICdmcic6ICdMZSB0b3Vybm9pIGNvbW3DqW1vcmF0aWYgZHUgc3VsdGFuYXQnLFxyXG4gICAgICAnamEnOiAn44Km44Or546L5p2v6ZeY5oqA5Lya44Gu5aeL44G+44KKJyxcclxuICAgICAgJ2tvJzogJ+yauOuLpO2VmCDsmZXsi6TrsLAg7Yis6riw64yA7ZqMJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDgsXHJcbiAgfSxcclxuICA3MDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Li65LqG5pu05by6JyxcclxuICAgICAgJ2RlJzogJ0RpZSBob2hlIEt1bnN0IGRlcyBTY2h3ZXJ0a2FtcGZzJyxcclxuICAgICAgJ2VuJzogJ1JhaXNpbmcgdGhlIFN3b3JkJyxcclxuICAgICAgJ2ZyJzogJ0xhIGZpbmFsZSBkZXMgY2hhbXBpb25zJyxcclxuICAgICAgJ2phJzogJ+OBleOCieOBquOCi+WJo+ihk+OBrumrmOOBv+OBuCcsXHJcbiAgICAgICdrbyc6ICfrjZQg64aS7J2AIOqygOyIoOydmCDqsr3sp4DroZwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOCxcclxuICB9LFxyXG4gIDcwNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmipfkuonkuYvlipsnLFxyXG4gICAgICAnZGUnOiAnRGllIEtyYWZ0IGRlcyBXaWRlcnN0YW5kcycsXHJcbiAgICAgICdlbic6ICdXaXRoIEhlYXJ0IGFuZCBTdGVlbCcsXHJcbiAgICAgICdmcic6ICdUcmFuc21pZ3JhdGlvbiBkw6ltb25pYXF1ZScsXHJcbiAgICAgICdqYSc6ICfmipfjgYblipsnLFxyXG4gICAgICAna28nOiAn66ee7ISc64qUIO2emCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAyOTgsXHJcbiAgICAnb2Zmc2V0WSc6IDM1MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzcsXHJcbiAgfSxcclxuICA3MDg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rW36YO96Lev5Lq66Lqr6aaW5byCJyxcclxuICAgICAgJ2RlJzogJ01vcmQgaXN0IHNlaW4gSG9iYnknLFxyXG4gICAgICAnZW4nOiAnQmxvb2Qgb24gdGhlIERlY2snLFxyXG4gICAgICAnZnInOiAnTGEgbMOpZ2VuZGUgZGUgTXVzb3NhaTxJbmRlbnQvPjogbFxcJ2Fzc2Fzc2luIGRlIExpbXNhIExvbWluc2EnLFxyXG4gICAgICAnamEnOiAn5rW36YO944KS6ZyH44KP44GZ5Lq65pas44KK44Gu5a6077yBJyxcclxuICAgICAgJ2tvJzogJ+2VtOyWkeuPhOyLnOulvCDtnZTrk5zripQg7IK07J247J6Q7J2YIOyXsO2ajCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDcwOToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnoHmgbbkuYvkurrmnKjmnq8nLFxyXG4gICAgICAnZGUnOiAnRGVyIEluYmVncmlmZiBkZXMgQsO2c2VuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGYWNlIG9mIFRydWUgRXZpbCcsXHJcbiAgICAgICdmcic6ICdMXFwnYWJvbWluYWJsZSBLb2dhcmFzaGknLFxyXG4gICAgICAnamEnOiAn5qW15oKq5Lq644Kz44Ks44Op44K3JyxcclxuICAgICAgJ2tvJzogJ+q3ueyVheustOuPhO2VnCDsvZTqsIDrnbzsi5wnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogOTUsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0OSxcclxuICB9LFxyXG4gIDcxMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnb7lj7bpl6jlpJbkuYvlj5gnLFxyXG4gICAgICAnZGUnOiAnVm9yZmFsbCBhdWYgZGVtIE1hdHN1YmEtUGxhdHonLFxyXG4gICAgICAnZW4nOiAnTWF0c3ViYSBNYXloZW0nLFxyXG4gICAgICAnZnInOiAnUsOoZ2xlbWVudCBkZSBjb21wdGUgYXUgc3F1YXJlIE1hdHN1YmEnLFxyXG4gICAgICAnamEnOiAn5p2+6JGJ6ZaA5aSW44Gu5aSJJyxcclxuICAgICAgJ2tvJzogJ+uniOy4oOuwlCDsgqzrs4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODIsXHJcbiAgfSxcclxuICA3MTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Yaz5oiY6b6f55Sy5bKbJyxcclxuICAgICAgJ2RlJzogJ0VudDxTb2Z0SHlwaGVuLz5zY2hlaTxTb2Z0SHlwaGVuLz5kdW5nczxTb2Z0SHlwaGVuLz5zY2hsYWNodCBhdWYgQmVra28nLFxyXG4gICAgICAnZW4nOiAnVGhlIEJhdHRsZSBvbiBCZWtrbycsXHJcbiAgICAgICdmcic6ICdMXFwnYWY8U29mdEh5cGhlbi8+ZnJvbjxTb2Z0SHlwaGVuLz50ZTxTb2Z0SHlwaGVuLz5tZW50IGRlIGRldXgganVzdGljZXMnLFxyXG4gICAgICAnamEnOiAn44OZ44OD44Kz44Km5bO244Gu5rG66ZeYJyxcclxuICAgICAgJ2tvJzogJ+uyoOy9lOyasCDshKzsnZgg6rKw7YisJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDgzLFxyXG4gIH0sXHJcbiAgNzEyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i/kOays+WuneeJqeW6kycsXHJcbiAgICAgICdkZSc6ICdLYW7DpGxlIHZvbiBVem5haXInLFxyXG4gICAgICAnZW4nOiAnVGhlIExvc3QgQ2FuYWxzIG9mIFV6bmFpcicsXHJcbiAgICAgICdmcic6ICdMZXMgQ2FuYXV4IHBlcmR1cyBkXFwnVXpuYWlyJyxcclxuICAgICAgJ2phJzogJ+WuneeJqeW6qyDjgqbjgrrjg43jgqLjgqvjg4rjg6snLFxyXG4gICAgICAna28nOiAn67O066y86rOgIOyasOymiOuEpOyWtCDsmrTtlZgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDcxMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmvIbpu5HnmoTlt6jpvpknLFxyXG4gICAgICAnZGUnOiAnRGVyIHRvYmVuZGUgRHJhY2hlJyxcclxuICAgICAgJ2VuJzogJ0RhcmsgYXMgdGhlIE5pZ2h0IFNreScsXHJcbiAgICAgICdmcic6ICdBdXNzaSBzb21icmUgcXVlIGxhIG51aXQnLFxyXG4gICAgICAnamEnOiAn5ryG6buS44Gu5beo56ucJyxcclxuICAgICAgJ2tvJzogJ+y5oO2dkeydmCDqsbDro6EnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODUsXHJcbiAgfSxcclxuICA3MTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57qi6KGA5LmL6b6Z6aqR5aOrJyxcclxuICAgICAgJ2RlJzogJ0RlciBSdWJpbi1EcmFjaGVucmVpdGVyJyxcclxuICAgICAgJ2VuJzogJ0RyYWdvbiBTb3VuZCcsXHJcbiAgICAgICdmcic6ICdMZSBEcmFnb24gw6ljYXJsYXRlJyxcclxuICAgICAgJ2phJzogJ+e0heOBruernOmojuWjqycsXHJcbiAgICAgICdrbyc6ICfrtonsnYAg7Jqp6riw7IKsJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3MTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6YGl6L+c55qE5oan5oasJyxcclxuICAgICAgJ2RlJzogJ1Byb2JlIGRlcyBNZWlzdGVycycsXHJcbiAgICAgICdlbic6ICdUaGUgT3JwaGFucyBhbmQgdGhlIEJyb2tlbiBCbGFkZScsXHJcbiAgICAgICdmcic6ICdMXFwnYXNwaXJhdGlvbiByZWZvdWzDqWUnLFxyXG4gICAgICAnamEnOiAn44GC44Go5LiJ5bqm44CB6YGl44GL44Gq5oan5oasJyxcclxuICAgICAgJ2tvJzogJ+yVnuycvOuhnCDshLgg67KILCDslYTrk53tlZwg64+Z6rK9JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDk1LFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODYsXHJcbiAgfSxcclxuICA3MTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5YaN5qyh55u46KeBJyxcclxuICAgICAgJ2RlJzogJ0F1cyBkZXIgVGllZmUgZGVzIEhlcnplbnMnLFxyXG4gICAgICAnZW4nOiAnT3VyIENvbXByb21pc2UnLFxyXG4gICAgICAnZnInOiAnTGEgZGVybmnDqHJlIHPDqXBhcmF0aW9uJyxcclxuICAgICAgJ2phJzogJ+OBguOBqOS4gOW6puOAgeWQm+OBq+S8muOBiOOBn+OCiScsXHJcbiAgICAgICdrbyc6ICfslZ7snLzroZwg7ZWcIOuyiCwg64SI7JmAIOunjOuCoCDsiJgg7J6I64uk66m0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNzE3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WOn+WIneeahOaImOWjqycsXHJcbiAgICAgICdkZSc6ICdEaWUgVXJrcmFmdCBpbiBpaHInLFxyXG4gICAgICAnZW4nOiAnQ3VyaW91cyBHb3JnZSBNZWV0cyBIaXMgTWF0Y2gnLFxyXG4gICAgICAnZnInOiAnTFxcJ8OpcHJldXZlIGRlIGZvcmNlJyxcclxuICAgICAgJ2phJzogJ+WOn+WIneeahOOBquW9vOWlsycsXHJcbiAgICAgICdrbyc6ICfsm5DstIjsoIEg6re464WAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC03NyxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDcxODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnh4Png6flkKfpq5jlkIknLFxyXG4gICAgICAnZGUnOiAnS3JpZWdlcmlzY2hlIExlaWRlbnNjaGFmdCcsXHJcbiAgICAgICdlbic6ICdUaGUgSGVhcnQgb2YgdGhlIFByb2JsZW0nLFxyXG4gICAgICAnZnInOiAnUGFzc2lvbiBndWVycmnDqHJlJyxcclxuICAgICAgJ2phJzogJ+eHg+OBiOOCiOOCtOODvOOCuO+8gScsXHJcbiAgICAgICdrbyc6ICfrtojtg4DsmKzrnbzrnbwsIOyCsOqzqOynnOq4sCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODUsXHJcbiAgfSxcclxuICA3MTk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ZCJ56Wl5aSp5aWz5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gTGFrc2htaScsXHJcbiAgICAgICdlbic6ICdFbWFuYXRpb24nLFxyXG4gICAgICAnZnInOiAnw4ltYW5hdGlvbicsXHJcbiAgICAgICdqYSc6ICfjg6njgq/jgrfjg6Xjg5/oqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn65297IqI66+4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4NyxcclxuICB9LFxyXG4gIDcyMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflkInnpaXlpKnlpbPmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBMYWtzaG1pJyxcclxuICAgICAgJ2VuJzogJ0VtYW5hdGlvbiAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnw4ltYW5hdGlvbiAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteODqeOCr+OCt+ODpeODn+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg65297IqI66+4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4NyxcclxuICB9LFxyXG4gIDcyMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnqb/otorml7bnqbrnmoTlpJnmhL8nLFxyXG4gICAgICAnZGUnOiAnRWluIFd1bnNjaCBhdXMgYWx0ZW4gWmVpdGVuJyxcclxuICAgICAgJ2VuJzogJ091ciBVbnN1bmcgSGVyb2VzJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdlc3BvaXIgZW4gaMOpcml0YWdlJyxcclxuICAgICAgJ2phJzogJ+aZguOCkuOBi+OBkeOCi+mhmOOBhCcsXHJcbiAgICAgICdrbyc6ICfsi5zqsITsnYQg65uw7Ja064SY7J2AIOyXvOybkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTc1LFxyXG4gICAgJ29mZnNldFknOiAtMjk3LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2MyxcclxuICB9LFxyXG4gIDcyMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflvbHpmpDlv43ms5XotLQnLFxyXG4gICAgICAnZGUnOiAnQXVzIGRlbSBWZXJib3JnZW5lbicsXHJcbiAgICAgICdlbic6ICdXaGVuIENsYW5zIENvbGxpZGUnLFxyXG4gICAgICAnZnInOiAnTGEgYmF0YWlsbGUgZGVzIGNsYW5zJyxcclxuICAgICAgJ2phJzogJ+W9semaoOW/jeazleW4licsXHJcbiAgICAgICdrbyc6ICfqt7jrprzsnpAg7J2467KV7LKpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDg1LFxyXG4gIH0sXHJcbiAgNzI1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i/kOays+WuneeJqeW6k+a3seWxgicsXHJcbiAgICAgICdkZSc6ICdWZXJnZXNzZW5lIEthbsOkbGUgdm9uIFV6bmFpcicsXHJcbiAgICAgICdlbic6ICdUaGUgSGlkZGVuIENhbmFscyBvZiBVem5haXInLFxyXG4gICAgICAnZnInOiAnTGVzIENhbmF1eCBjYWNow6lzIGRcXCdVem5haXInLFxyXG4gICAgICAnamEnOiAn5a6d54mp5bqrIOOCpuOCuuODjeOCouOCq+ODiuODq+a3seWxpCcsXHJcbiAgICAgICdrbyc6ICfrs7TrrLzqs6Ag7Jqw7KaI64Sk7Ja0IOyatO2VmCDsi6zsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDcyOToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfot53pqqjnoJTnqbbmiYAgKOacuuWKqOaImCknLFxyXG4gICAgICAnZGUnOiAnQXN0cmFnYWxvcycsXHJcbiAgICAgICdlbic6ICdBc3RyYWdhbG9zJyxcclxuICAgICAgJ2ZyJzogJ0FzdHJhZ2Fsb3MgKG1hY2hpbmVyaWUpJyxcclxuICAgICAgJ2phJzogJ+OCouOCueODiOODqeOCrOODreOCuSAo5qmf5bel5oimKScsXHJcbiAgICAgICdrbyc6ICfslYTsiqTtirjrnbzqsIjroZzsiqQo6riw6rO17KCEKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzMwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elnum+meaipuW5u+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdIZWxkZW5saWVkIHZvbiBTaGlucnl1JyxcclxuICAgICAgJ2VuJzogJ1RoZSBNaW5zdHJlbFxcJ3MgQmFsbGFkOiBTaGlucnl1XFwncyBEb21haW4nLFxyXG4gICAgICAnZnInOiAnTGUgZG9tYWluZSBkZSBTaGlucnl1JyxcclxuICAgICAgJ2phJzogJ+alteelnum+jeiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7Iug66OhIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3NixcclxuICB9LFxyXG4gIDczMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmsonmsqHnpZ7mrr/mlq/ljaHmi4npgZfov7knLFxyXG4gICAgICAnZGUnOiAnRGllIHZlcnN1bmtlbmUgU3RhZHQgU2thbGxhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEcm93bmVkIENpdHkgb2YgU2thbGxhJyxcclxuICAgICAgJ2ZyJzogJ0xhIENpdMOpIGVuZ2xvdXRpZSBkZSBTa2FsbGEnLFxyXG4gICAgICAnamEnOiAn5rC05rKh6YG65qeLIOOCueOCq+ODqScsXHJcbiAgICAgICdrbyc6ICfsiqTsubzrnbwg7Jyg7KCBJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDE4NSxcclxuICAgICdvZmZzZXRZJzogNSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDczMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjYsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56aB5Zyw5LyY6Zu35Y2hIOW4uOmjjuS5i+WcsCcsXHJcbiAgICAgICdkZSc6ICdFdXJla2EgQW5lbW9zJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGb3JiaWRkZW4gTGFuZCwgRXVyZWthIEFuZW1vcycsXHJcbiAgICAgICdmcic6ICdFdXLDqmthIEFuZW1vcycsXHJcbiAgICAgICdqYSc6ICfnpoHmlq3jga7lnLAg44Ko44Km44Os44Kr77ya44Ki44ON44Oi44K557eoJyxcclxuICAgICAgJ2tvJzogJ+q4iOuLqOydmCDrlYUg7JeQ7Jqw66CI7Lm0OiDslYTrhKTrqqjsiqTtjrgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTEsXHJcbiAgfSxcclxuICA3MzM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI4LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJuee7neWig+aImCcsXHJcbiAgICAgICdkZSc6ICdFbmRsb3NlIFNjaGF0dGVuIHZvbiBCYWhhbXV0IChmYXRhbCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFVuZW5kaW5nIENvaWwgb2YgQmFoYW11dCAoVWx0aW1hdGUpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBYsOubWUgaW5maW5pIGRlIEJhaGFtdXQgKGZhdGFsKScsXHJcbiAgICAgICdqYSc6ICfntbbjg5Djg4/jg6Djg7zjg4joqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KCIIOuwlO2VmOustO2KuCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDczNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpLHokL3kuYvpg73mi4nlt7TnurPmlq/loZQnLFxyXG4gICAgICAnZGUnOiAnUmFiYW5hc3RyZScsXHJcbiAgICAgICdlbic6ICdUaGUgUm95YWwgQ2l0eSBvZiBSYWJhbmFzdHJlJyxcclxuICAgICAgJ2ZyJzogJ0xhIENpdMOpIHJveWFsZSBkZSBSYWJhbmFzdHJlJyxcclxuICAgICAgJ2phJzogJ+WkseOCj+OCjOOBn+mDvSDjg6njg5Djg4rjgrnjgr8nLFxyXG4gICAgICAna28nOiAn7JmV64+EIOudvOuwlOuCmOyKpO2EsCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAzMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NDE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iJr+e8mOS7quW8jycsXHJcbiAgICAgICdkZSc6ICdWYWxlbnRpb256ZXJlbW9uaWUnLFxyXG4gICAgICAnZW4nOiAnVGhlIFZhbGVudGlvbmVcXCdzIENlcmVtb255JyxcclxuICAgICAgJ2ZyJzogJ0xhIEPDqXLDqW1vbmllIGRlIGxhIFZhbGVudGlvbicsXHJcbiAgICAgICdqYSc6ICfjg7TjgqHjg6zjg7Pjg4bjgqPjgqrjg7Pjgrvjg6zjg6Ljg4vjg7wnLFxyXG4gICAgICAna28nOiAn67Cc66CM7Yuw7JioIOyYiOyLneyepScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAxMjUsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57qi546J54Gr5bGx54ux5LmL55uWJyxcclxuICAgICAgJ2RlJzogJ0jDtmxsZW5zcHVuZCcsXHJcbiAgICAgICdlbic6ICdIZWxsc1xcJyBMaWQnLFxyXG4gICAgICAnZnInOiAnTGUgQ291dmVyY2xlIGRlcyBlbmZlcnMnLFxyXG4gICAgICAnamEnOiAn57SF546J54Gr5bGxIOeNhOS5i+iTiycsXHJcbiAgICAgICdrbyc6ICfsp4DsmKXrmpzqu5EnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc0Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnlq/ni4LmiJjoiLDml6DpmZDlm57lu4onLFxyXG4gICAgICAnZGUnOiAnRGllIEZyYWt0YWwtS29udGludXVtIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGcmFjdGFsIENvbnRpbnV1bSAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgQ29udGludXVtIGZyYWN0YWwgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn5pq06LWw5oim6ImmIOODleODqeOCr+OCv+ODq+ODu+OCs+ODs+ODhuOCo+ODi+OCouODoCAoSGFyZCknLFxyXG4gICAgICAna28nOiAn66y07ZWc7Jew7IaNIOuwleusvO2VqCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDM1MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc0Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnmb3omY7plYfprYLmiJgnLFxyXG4gICAgICAnZGUnOiAnU2VlbGVudGFueiAtIEJ5YWtrbycsXHJcbiAgICAgICdlbic6ICdUaGUgSmFkZSBTdG9hJyxcclxuICAgICAgJ2ZyJzogJ0xhIENsYWlyacOocmUgZGUgSmFkZScsXHJcbiAgICAgICdqYSc6ICfnmb3omY7lvoHprYLmiKYnLFxyXG4gICAgICAna28nOiAn67Cx7Zi4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MyxcclxuICB9LFxyXG4gIDc0ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMScsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAxLjAnLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMS4wJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjEuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjgrfjgrDjg57nt6gxJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDsi5zqt7jrp4jtjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc0OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMicsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAyLjAnLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMi4wJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjIuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjgrfjgrDjg57nt6gyJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDsi5zqt7jrp4jtjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMycsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAzLjAnLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMy4wJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjMuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjgrfjgrDjg57nt6gzJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDsi5zqt7jrp4jtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDNCcsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSA0LjAnLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWNC4wJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjQuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjgrfjgrDjg57nt6g0JyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDsi5zqt7jrp4jtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMScsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAxLjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMS4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjEuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44K344Kw44Oe57eoMScsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7Iuc6re466eI7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMicsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAyLjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMi4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjIuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44K344Kw44Oe57eoMicsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7Iuc6re466eI7Y64KOyYgeybhSkgMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMycsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAzLjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMy4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjMuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44K344Kw44Oe57eoMycsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7Iuc6re466eI7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDNCcsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSA0LjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWNC4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjQuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44K344Kw44Oe57eoNCcsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7Iuc6re466eI7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnmb3omY7or5fprYLmiJgnLFxyXG4gICAgICAnZGUnOiAnU2VlbGVuc3R1cm0gLSBCeWFra28nLFxyXG4gICAgICAnZW4nOiAnVGhlIEphZGUgU3RvYSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGEgQ2xhaXJpw6hyZSBkZSBKYWRlIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW155m96JmO5b6B6a2C5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrsLHtmLgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDkzLFxyXG4gIH0sXHJcbiAgNzU5OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSa546b6aOe5ZywJyxcclxuICAgICAgJ2RlJzogJ0RvbWFuaXNjaGUgRW5rbGF2ZScsXHJcbiAgICAgICdlbic6ICdUaGUgRG9tYW4gRW5jbGF2ZScsXHJcbiAgICAgICdmcic6ICdRdWFydGllciBlbmNsYXbDqSBkZSBEb21hJyxcclxuICAgICAgJ2phJzogJ+ODieODnueUuuS6uuWcsCcsXHJcbiAgICAgICdrbyc6ICfrj4Trp4gg64+E7J2N7KeAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDIzLFxyXG4gICAgJ29mZnNldFknOiAzNCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODQsXHJcbiAgfSxcclxuICA3NjE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn54Gr6b6Z54up54yO5oiYJyxcclxuICAgICAgJ2RlJzogJ0phZ2QgYXVmIFJhdGhhbG9zJyxcclxuICAgICAgJ2VuJzogJ1RoZSBHcmVhdCBIdW50JyxcclxuICAgICAgJ2ZyJzogJ0NoYXNzZSBhdSBSYXRoYWxvcycsXHJcbiAgICAgICdqYSc6ICfjg6rjgqrjg6zjgqbjgrnni6nnjJ/miKYnLFxyXG4gICAgICAna28nOiAn66as7Jik66CI7Jqw7IqkIOyImOugteyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzYyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eBq+m+meS4iuS9jeeLqeeMjuaImCcsXHJcbiAgICAgICdkZSc6ICdKYWdkIGF1ZiBSYXRoYWxvcyAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaGUgR3JlYXQgSHVudCAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnQ2hhc3NlIGF1IFJhdGhhbG9zIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Oq44Kq44Os44Km44K554up54yf5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrpqzsmKTroIjsmrDsiqQg7IiY66C17KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NjM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+emgeWcsOS8mOmbt+WNoSDmgZLlhrDkuYvlnLAnLFxyXG4gICAgICAnZGUnOiAnRXVyZWthIFBhZ29zJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGb3JiaWRkZW4gTGFuZCwgRXVyZWthIFBhZ29zJyxcclxuICAgICAgJ2ZyJzogJ0V1csOqa2EgUGFnb3MnLFxyXG4gICAgICAnamEnOiAn56aB5pat44Gu5ZywIOOCqOOCpuODrOOCq++8muODkeOCtOOCuee3qCcsXHJcbiAgICAgICdrbyc6ICfquIjri6jsnZgg65WFIOyXkOyasOugiOy5tDog7YyM6rOg7Iqk7Y64JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDk0LFxyXG4gIH0sXHJcbiAgNzY4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mjjuawtOeBteW6meWyqeeHleW6mScsXHJcbiAgICAgICdkZSc6ICdLb21wYXNzIGRlciBTY2h3YWxiZScsXHJcbiAgICAgICdlbic6ICdUaGUgU3dhbGxvd1xcJ3MgQ29tcGFzcycsXHJcbiAgICAgICdmcic6ICdMZSBDb21wYXMgZGUgbFxcJ0hpcm9uZGVsbGUnLFxyXG4gICAgICAnamEnOiAn6aKo5rC06ZyK5q6/IOOCrOODs+OCqOODs+W7nycsXHJcbiAgICAgICdrbyc6ICfqsJXsl5Qg7KKF66yYJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDI0MCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc2OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmi4LmmZPnmoTlsJHlubQnLFxyXG4gICAgICAnZGUnOiAnRGVyIEtuYWJlIGRlciBNb3JnZW5yw7Z0ZScsXHJcbiAgICAgICdlbic6ICdFbWlzc2FyeSBvZiB0aGUgRGF3bicsXHJcbiAgICAgICdmcic6ICdWb3lhZ2UgZW4gdGVycmUgaG9zdGlsZScsXHJcbiAgICAgICdqYSc6ICfjgIzmmoHjgI3jga7lsJHlubQnLFxyXG4gICAgICAna28nOiAnXFwn7IOI67K9XFwn7J2YIOyGjOuFhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzcwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnkuYvlvqHmn7EgMe+9njEw5bGCJyxcclxuICAgICAgJ2RlJzogJ0hpbW1lbHNzw6R1bGUgKEViZW5lbiAxLTEwKScsXHJcbiAgICAgICdlbic6ICdIZWF2ZW4tb24tSGlnaCAgKEZsb29ycyAxLTEwKScsXHJcbiAgICAgICdmcic6ICdMZSBQaWxpZXIgZGVzIENpZXV4ICjDqXRhZ2VzIDEtMTApJyxcclxuICAgICAgJ2phJzogJ+OCouODoeODjuODn+ODj+OCt+ODqSAx772eMTDlsaQnLFxyXG4gICAgICAna28nOiAn7LKc6raB7YORIDF+MTDsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc3MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5LmL5b6h5p+xIDEx772eMjDlsYInLFxyXG4gICAgICAnZGUnOiAnSGltbWVsc3PDpHVsZSAoRWJlbmVuIDExLTIwKScsXHJcbiAgICAgICdlbic6ICdIZWF2ZW4tb24tSGlnaCAgKEZsb29ycyAxMS0yMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGlsaWVyIGRlcyBDaWV1eCAow6l0YWdlcyAxMS0yMCknLFxyXG4gICAgICAnamEnOiAn44Ki44Oh44OO44Of44OP44K344OpIDEx772eMjDlsaQnLFxyXG4gICAgICAna28nOiAn7LKc6raB7YORIDExfjIw7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkqeS5i+W+oeafsSAyMe+9njMw5bGCJyxcclxuICAgICAgJ2RlJzogJ0hpbW1lbHNzw6R1bGUgKEViZW5lbiAyMS0zMCknLFxyXG4gICAgICAnZW4nOiAnSGVhdmVuLW9uLUhpZ2ggIChGbG9vcnMgMjEtMzApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBpbGllciBkZXMgQ2lldXggKMOpdGFnZXMgMjEtMzApJyxcclxuICAgICAgJ2phJzogJ+OCouODoeODjuODn+ODj+OCt+ODqSAyMe+9njMw5bGkJyxcclxuICAgICAgJ2tvJzogJ+yynOq2ge2DkSAyMX4zMOy4tScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzczOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnkuYvlvqHmn7EgNDHvvZ41MOWxgicsXHJcbiAgICAgICdkZSc6ICdIaW1tZWxzc8OkdWxlIChFYmVuZW4gNDEtNTApJyxcclxuICAgICAgJ2VuJzogJ0hlYXZlbi1vbi1IaWdoICAoRmxvb3JzIDQxLTUwKScsXHJcbiAgICAgICdmcic6ICdMZSBQaWxpZXIgZGVzIENpZXV4ICjDqXRhZ2VzIDQxLTUwKScsXHJcbiAgICAgICdqYSc6ICfjgqLjg6Hjg47jg5/jg4/jgrfjg6kgNDHvvZ41MOWxpCcsXHJcbiAgICAgICdrbyc6ICfsspzqtoHtg5EgNDF+NTDsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc3NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5LmL5b6h5p+xIDYx772eNzDlsYInLFxyXG4gICAgICAnZGUnOiAnSGltbWVsc3PDpHVsZSAoRWJlbmVuIDYxLTcwKScsXHJcbiAgICAgICdlbic6ICdIZWF2ZW4tb24tSGlnaCAgKEZsb29ycyA2MS03MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGlsaWVyIGRlcyBDaWV1eCAow6l0YWdlcyA2MS03MCknLFxyXG4gICAgICAnamEnOiAn44Ki44Oh44OO44Of44OP44K344OpIDYx772eNzDlsaQnLFxyXG4gICAgICAna28nOiAn7LKc6raB7YORIDYxfjcw7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NzU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkqeS5i+W+oeafsSA4Me+9njkw5bGCJyxcclxuICAgICAgJ2RlJzogJ0hpbW1lbHNzw6R1bGUgKEViZW5lbiA4MS05MCknLFxyXG4gICAgICAnZW4nOiAnSGVhdmVuLW9uLUhpZ2ggIChGbG9vcnMgODEtOTApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBpbGllciBkZXMgQ2lldXggKMOpdGFnZXMgODEtOTApJyxcclxuICAgICAgJ2phJzogJ+OCouODoeODjuODn+ODj+OCt+ODqSA4Me+9njkw5bGkJyxcclxuICAgICAgJ2tvJzogJ+yynOq2ge2DkSA4MX45MOy4tScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzc2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WwgemXreWco+WhlOm7jumTjuaLiee6s+Wkp+eBr+WhlCcsXHJcbiAgICAgICdkZSc6ICdSaWNodGZldWVyIHZvbiBSaWRvcmFuYScsXHJcbiAgICAgICdlbic6ICdUaGUgUmlkb3JhbmEgTGlnaHRob3VzZScsXHJcbiAgICAgICdmcic6ICdMZSBQaGFyZSBkZSBSaWRvcmFuYScsXHJcbiAgICAgICdqYSc6ICflsIHjgZjjgonjgozjgZ/ogZbloZQg44Oq44OJ44Or44Ki44OKJyxcclxuICAgICAgJ2tvJzogJ+uMgOuTseuMgCDrpqzrj4TrpbTslYTrgpgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMjAyLFxyXG4gICAgJ29mZnNldFknOiAtOTIsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3Nzc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI4LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eptuaegeelnuWFtee7neWig+aImCcsXHJcbiAgICAgICdkZSc6ICdIZWxkZW5saWVkIHZvbiBVbHRpbWEgKGZhdGFsKScsXHJcbiAgICAgICdlbic6ICdUaGUgV2VhcG9uXFwncyBSZWZyYWluIChVbHRpbWF0ZSknLFxyXG4gICAgICAnZnInOiAnTGEgRmFudGFzbWFnb3JpZSBkXFwnVWx0aW1hIChmYXRhbCknLFxyXG4gICAgICAnamEnOiAn57W244Ki44Or44OG44Oe44Km44Kn44Od44Oz56C05aOK5L2c5oimJyxcclxuICAgICAgJ2tvJzogJ+ygiCDslYzthYzrp4gg7Juo7Y+wIO2MjOq0tOyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyNixcclxuICB9LFxyXG4gIDc3ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnIjor7vmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBUc3VrdXlvbWknLFxyXG4gICAgICAnZW4nOiAnQ2FzdHJ1bSBGbHVtaW5pcycsXHJcbiAgICAgICdmcic6ICdDYXN0cnVtIEZsdW1pbmlzJyxcclxuICAgICAgJ2phJzogJ+ODhOOCr+ODqOODn+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsuKDsv6DsmpTrr7gg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3Nzk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pyI6K+75bm95aSc5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ1plbml0IGRlciBHw7Z0dGVyIC0gVHN1a3V5b21pJyxcclxuICAgICAgJ2VuJzogJ1RoZSBNaW5zdHJlbFxcJ3MgQmFsbGFkOiBUc3VrdXlvbWlcXCdzIFBhaW4nLFxyXG4gICAgICAnZnInOiAnQ2FzdHJ1bSBGbHVtaW5pcyAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteODhOOCr+ODqOODn+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7Lig7L+g7JqU66+4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzgyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnkuYvlvqHmn7EgMzHvvZ40MOWxgicsXHJcbiAgICAgICdkZSc6ICdIaW1tZWxzc8OkdWxlIChFYmVuZW4gMzEtNDApJyxcclxuICAgICAgJ2VuJzogJ0hlYXZlbi1vbi1IaWdoICAoRmxvb3JzIDMxLTQwKScsXHJcbiAgICAgICdmcic6ICdMZSBQaWxpZXIgZGVzIENpZXV4ICjDqXRhZ2VzIDMxLTQwKScsXHJcbiAgICAgICdqYSc6ICfjgqLjg6Hjg47jg5/jg4/jgrfjg6kgMzHvvZ40MOWxpCcsXHJcbiAgICAgICdrbyc6ICfsspzqtoHtg5EgMzF+NDDsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc4Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5LmL5b6h5p+xIDUx772eNjDlsYInLFxyXG4gICAgICAnZGUnOiAnSGltbWVsc3PDpHVsZSAoRWJlbmVuIDUxLTYwKScsXHJcbiAgICAgICdlbic6ICdIZWF2ZW4tb24tSGlnaCAgKEZsb29ycyA1MS02MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGlsaWVyIGRlcyBDaWV1eCAow6l0YWdlcyA1MS02MCknLFxyXG4gICAgICAnamEnOiAn44Ki44Oh44OO44Of44OP44K344OpIDUx772eNjDlsaQnLFxyXG4gICAgICAna28nOiAn7LKc6raB7YORIDUxfjYw7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3ODQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkqeS5i+W+oeafsSA3Me+9njgw5bGCJyxcclxuICAgICAgJ2RlJzogJ0hpbW1lbHNzw6R1bGUgKEViZW5lbiA3MS04MCknLFxyXG4gICAgICAnZW4nOiAnSGVhdmVuLW9uLUhpZ2ggIChGbG9vcnMgNzEtODApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBpbGllciBkZXMgQ2lldXggKMOpdGFnZXMgNzEtODApJyxcclxuICAgICAgJ2phJzogJ+OCouODoeODjuODn+ODj+OCt+ODqSA3Me+9njgw5bGkJyxcclxuICAgICAgJ2tvJzogJ+yynOq2ge2DkSA3MX44MOy4tScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzg1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnkuYvlvqHmn7EgOTHvvZ4xMDDlsYInLFxyXG4gICAgICAnZGUnOiAnSGltbWVsc3PDpHVsZSAoRWJlbmVuIDkxLTEwMCknLFxyXG4gICAgICAnZW4nOiAnSGVhdmVuLW9uLUhpZ2ggIChGbG9vcnMgOTEtMTAwKScsXHJcbiAgICAgICdmcic6ICdMZSBQaWxpZXIgZGVzIENpZXV4ICjDqXRhZ2VzIDkxLTEwMCknLFxyXG4gICAgICAnamEnOiAn44Ki44Oh44OO44Of44OP44K344OpIDkx772eMTAw5bGkJyxcclxuICAgICAgJ2tvJzogJ+yynOq2ge2DkSA5MX4xMDDsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc4ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmsaHmn5Pluq3lm63lnKPojInlpI/lqJzmpI3nianlm60nLFxyXG4gICAgICAnZGUnOiAnU2Fua3QgTW9jaWFubmUtQXJib3JldHVtIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1NhaW50IE1vY2lhbm5lXFwncyBBcmJvcmV0dW0gKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBcmJvcmV0dW0gU2FpbnRlLU1vY2lhbm5lIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+iNieacqOaxmuafkyDogZbjg6Ljgrfjg6Pjg7zjg4zmpI3nianlnJIgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+yEsSDrqqjsg6gg7Iud66y87JuQKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc4OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvkuqHlpKflnLDnu4jmnKvnhKblnJ8nLFxyXG4gICAgICAnZGUnOiAnRGFzIEthcmdsYW5kJyxcclxuICAgICAgJ2VuJzogJ1RoZSBCdXJuJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdFc2NhcnJlJyxcclxuICAgICAgJ2phJzogJ+awuOS5heeEpuWcnyDjgrbjg7vjg5Djg7zjg7MnLFxyXG4gICAgICAna28nOiAn7JiB6rWsIOy0iO2GoOyngOuMgCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5NyxcclxuICB9LFxyXG4gIDc5MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn54G+5Y6E6YeN546w5Yab5LqL5ryU5LmgJyxcclxuICAgICAgJ2RlJzogJ0dlZGVua3NjaGxhY2h0IGRlciBFb3J6w6Rpc2NoZW4gQWxsaWFueicsXHJcbiAgICAgICdlbic6ICdUaGUgQ2FsYW1pdHkgUmV0b2xkJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBncmFuZGVzIG1hbsWTdXZyZXMgY29tbcOpbW9yYXRpdmVzJyxcclxuICAgICAgJ2phJzogJ+aWsOeUn+elrei7jeS6i+a8lOe/kicsXHJcbiAgICAgICdrbyc6ICfsi6Dsg53soJwg6rWw7IKs7ZuI66CoJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDk1LFxyXG4gIH0sXHJcbiAgNzkxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+makOWhniAo5py65Yqo5oiYKScsXHJcbiAgICAgICdkZSc6ICdWZXJib3JnZW5lIFNjaGx1Y2h0JyxcclxuICAgICAgJ2VuJzogJ0hpZGRlbiBHb3JnZScsXHJcbiAgICAgICdmcic6ICdHb3JnZSBkw6lyb2LDqWUgKG1hY2hpbmVyaWUpJyxcclxuICAgICAgJ2phJzogJ+ODkuODieOCpeODs+OCtOODvOOCuCAo5qmf5bel5oimKScsXHJcbiAgICAgICdrbyc6ICfsiKjqsqjsp4Qg67O066OoKOq4sOqzteyghCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc5Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Jma5pmv6Lez6Lez5LmQ5aSn5oyR5oiYJyxcclxuICAgICAgJ2RlJzogJ0tha3Rvci1LbGV0dGVyd2FuZCcsXHJcbiAgICAgICdlbic6ICdMZWFwIG9mIEZhaXRoJyxcclxuICAgICAgJ2ZyJzogJ0hhdXRlIHZvbHRpZ2UnLFxyXG4gICAgICAnamEnOiAn5oyR5oim77yBIOOCuOODo+ODs+ODlOODs+OCsOOCouOCueODrOODgeODg+OCrycsXHJcbiAgICAgICdrbyc6ICfrm7DslrTrnbwhIOygkO2VkSDsmrTrj5ntmownLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc5Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflm73looPpmLLnur/ln7rlp4bliKnnibnmmpfljLonLFxyXG4gICAgICAnZGUnOiAnRGllIEdoaW1seXQtRmluc3Rlcm5pcycsXHJcbiAgICAgICdlbic6ICdUaGUgR2hpbWx5dCBEYXJrJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBUw6luw6hicmVzIGRlIEdoaW1seXQnLFxyXG4gICAgICAnamEnOiAn5aKD55WM5oim57eaIOOCruODoOODquODiOODgOODvOOCrycsXHJcbiAgICAgICdrbyc6ICfquYDrpqztirgg7Zmp7JW8JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3OTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDksXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6L+Q5rKz5a6d54mp5bqT56We5q6/JyxcclxuICAgICAgJ2RlJzogJ0dsw7xja3NhbHTDpHJlIHZvbiBVem5haXInLFxyXG4gICAgICAnZW4nOiAnVGhlIFNoaWZ0aW5nIEFsdGFycyBvZiBVem5haXInLFxyXG4gICAgICAnZnInOiAnTGUgVGVtcGxlIHNhY3LDqSBkXFwnVXpuYWlyJyxcclxuICAgICAgJ2phJzogJ+WuneeJqeW6qyDjgqbjgrrjg43jgqLjgqvjg4rjg6vnpa3mrr8nLFxyXG4gICAgICAna28nOiAn67O066y86rOgIOyasOymiOuEpOyWtCDsmrTtlZgg7KCc7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3OTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+emgeWcsOS8mOmbt+WNoSDmtozngavkuYvlnLAnLFxyXG4gICAgICAnZGUnOiAnRXVyZWthIFB5cm9zJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGb3JiaWRkZW4gTGFuZCwgRXVyZWthIFB5cm9zJyxcclxuICAgICAgJ2ZyJzogJ0V1csOqa2EgUHlyb3MnLFxyXG4gICAgICAnamEnOiAn56aB5pat44Gu5ZywIOOCqOOCpuODrOOCq++8muODlOODpeODvOODreOCuee3qCcsXHJcbiAgICAgICdrbyc6ICfquIjri6jsnZgg65WFIOyXkOyasOugiOy5tDog7ZS866Gc7Iqk7Y64JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDk2LFxyXG4gIH0sXHJcbiAgNzk2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyNyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflh7rpgZPmiJgnLFxyXG4gICAgICAnZGUnOiAnRGViw7x0IGluIGRlciBIaW1tbGlzY2hlbiBBcmVuYScsXHJcbiAgICAgICdlbic6ICdBbGxcXCdzIFdlbGwgVGhhdCBTdGFydHMgV2VsbCcsXHJcbiAgICAgICdmcic6ICdEw6lidXQgZHUgc3BlY3RhY2xlJyxcclxuICAgICAgJ2phJzogJ+ODh+ODk+ODpeODvOODnuODg+ODgScsXHJcbiAgICAgICdrbyc6ICfrjbDrt5TsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc5Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmpZTnn7PmtJ4nLFxyXG4gICAgICAnZGUnOiAnRGVyIFdpbGxlIGRlciBNb25kZ8O2dHRpbicsXHJcbiAgICAgICdlbic6ICdUaGUgV2lsbCBvZiB0aGUgTW9vbicsXHJcbiAgICAgICdmcic6ICdSYWxsaWVtZW50IGRhbnMgbGEgc3RlcHBlJyxcclxuICAgICAgJ2phJzogJ+allOefs+OBruiZmicsXHJcbiAgICAgICdrbyc6ICfskJDquLDrj4wg64+Z6rW0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3OTg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzEnLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgMS4wJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjEuMCcsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHYxLjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44Ki44Or44OV44Kh57eoMScsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7JWM7YyM7Y64IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA3OTk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzInLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgMi4wJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjIuMCcsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHYyLjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44Ki44Or44OV44Kh57eoMicsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7JWM7YyM7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzMnLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgMy4wJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjMuMCcsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHYzLjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44Ki44Or44OV44Kh57eoMycsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7JWM7YyM7Y64IDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzQnLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgNC4wJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjQuMCcsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHY0LjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44Ki44Or44OV44Kh57eoNCcsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7JWM7YyM7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzEnLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgMS4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjEuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHYxLjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muOCouODq+ODleOCoee3qDEnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOyVjO2MjO2OuCjsmIHsm4UpIDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzInLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgMi4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjIuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHYyLjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muOCouODq+ODleOCoee3qDInLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOyVjO2MjO2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzMnLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgMy4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjMuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHYzLjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muOCouODq+ODleOCoee3qDMnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOyVjO2MjO2OuCjsmIHsm4UpIDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzQnLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgNC4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjQuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHY0LjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muOCouODq+ODleOCoee3qDQnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOyVjO2MjO2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5L+d6ZWW5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0R1ZWxsIGF1ZiBkZXIgS3VnYW5lLUJyw7xja2UnLFxyXG4gICAgICAnZW4nOiAnS3VnYW5lIE9oYXNoaScsXHJcbiAgICAgICdmcic6ICdMZSBQb250IE9oYXNoaScsXHJcbiAgICAgICdqYSc6ICfnnJ/jg6jjgqbjgrjjg7Pjg5zjgqboqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KeEIOyalOyasOynhOuztCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDgxMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnLHpm4DplYfprYLmiJgnLFxyXG4gICAgICAnZGUnOiAnU2VlbGVudGFueiAtIFN1emFrdScsXHJcbiAgICAgICdlbic6ICdIZWxsc1xcJyBLaWVyJyxcclxuICAgICAgJ2ZyJzogJ0xlIE5pZCBkZXMgTGFtZW50YXRpb25zJyxcclxuICAgICAgJ2phJzogJ+acsembgOW+gemtguaIpicsXHJcbiAgICAgICdrbyc6ICfso7zsnpEg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDk4LFxyXG4gIH0sXHJcbiAgODExOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+acsembgOivl+mtguaImCcsXHJcbiAgICAgICdkZSc6ICdTZWVsZW5zdHVybSAtIFN1emFrdScsXHJcbiAgICAgICdlbic6ICdIZWxsc1xcJyBLaWVyIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMZSBOaWQgZGVzIExhbWVudGF0aW9ucyAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteacsembgOW+gemtguaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7KO87J6RIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5OCxcclxuICB9LFxyXG4gIDgxMzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mbt+WFi+WFsOW+tycsXHJcbiAgICAgICdkZSc6ICdTZWVubGFuZCcsXHJcbiAgICAgICdlbic6ICdMYWtlbGFuZCcsXHJcbiAgICAgICdmcic6ICdHcmFuZC1MYWMnLFxyXG4gICAgICAnamEnOiAn44Os44Kk44Kv44Op44Oz44OJJyxcclxuICAgICAgJ2tvJzogJ+ugiOydtO2BrOuenOuTnCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDYsXHJcbiAgfSxcclxuICA4MTQ6IHtcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnj4LpnLLopb/kuprlspsnLFxyXG4gICAgICAnZGUnOiAnS2hvbHVzaWEnLFxyXG4gICAgICAnZW4nOiAnS2hvbHVzaWEnLFxyXG4gICAgICAnZnInOiAnS2hvbHVzaWEnLFxyXG4gICAgICAnamEnOiAn44Kz44Or44K344Ki5bO2JyxcclxuICAgICAgJ2tvJzogJ+y9nOujqOyLnOyVhCDshKwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTA3LFxyXG4gIH0sXHJcbiAgODE1OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5a6J56mGwrfoib7lhbAnLFxyXG4gICAgICAnZGUnOiAnQW1oIEFyYWVuZycsXHJcbiAgICAgICdlbic6ICdBbWggQXJhZW5nJyxcclxuICAgICAgJ2ZyJzogJ0FtaCBBcmFlbmcnLFxyXG4gICAgICAnamEnOiAn44Ki44Og44O744Ki44Os44O844OzJyxcclxuICAgICAgJ2tvJzogJ+yVhOuvgCDslYTrnq0nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTA4LFxyXG4gIH0sXHJcbiAgODE2OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK5bCU576O5qC8JyxcclxuICAgICAgJ2RlJzogJ0lsIE1oZWcnLFxyXG4gICAgICAnZW4nOiAnSWwgTWhlZycsXHJcbiAgICAgICdmcic6ICdJbCBNaGVnJyxcclxuICAgICAgJ2phJzogJ+OCpOODq+ODu+ODoeOCsCcsXHJcbiAgICAgICdrbyc6ICfsnbwg66mU6re4JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwOSxcclxuICB9LFxyXG4gIDgxNzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aLieWHr+aPkOWNoeWkp+ajruaelycsXHJcbiAgICAgICdkZSc6ICdEZXIgR3Jvw59lIFdhbGQgUmFrXFwndGlrYScsXHJcbiAgICAgICdlbic6ICdUaGUgUmFrXFwndGlrYSBHcmVhdHdvb2QnLFxyXG4gICAgICAnZnInOiAnUmFrXFwndGlrYScsXHJcbiAgICAgICdqYSc6ICfjg6njgrHjg4bjgqPjgqvlpKfmo67mnpcnLFxyXG4gICAgICAna28nOiAn65287LyA7Yuw7Lm0IOuMgOyCvOumvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMTAsXHJcbiAgfSxcclxuICA4MTg6IHtcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpu5Hpo47mtbcnLFxyXG4gICAgICAnZGUnOiAnVGVtcGVzdCcsXHJcbiAgICAgICdlbic6ICdUaGUgVGVtcGVzdCcsXHJcbiAgICAgICdmcic6ICdMYSBUZW1ww6p0ZScsXHJcbiAgICAgICdqYSc6ICfjg4bjg7Pjg5rjgrnjg4gnLFxyXG4gICAgICAna28nOiAn7YWc7Y6Y7Iqk7Yq4JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDExMSxcclxuICB9LFxyXG4gIDgxOToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+awtOaZtumDvScsXHJcbiAgICAgICdkZSc6ICdDcnlzdGFyaXVtJyxcclxuICAgICAgJ2VuJzogJ1RoZSBDcnlzdGFyaXVtJyxcclxuICAgICAgJ2ZyJzogJ0NyaXN0YXJpdW0nLFxyXG4gICAgICAnamEnOiAn44Kv44Oq44K544K/44Oq44Km44OgJyxcclxuICAgICAgJ2tvJzogJ+2BrOumrOyKpO2DgOumrOybgCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMTIsXHJcbiAgfSxcclxuICA4MjA6IHtcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmuLjmnKvpgqYnLFxyXG4gICAgICAnZGUnOiAnRXVsbW9yZScsXHJcbiAgICAgICdlbic6ICdFdWxtb3JlJyxcclxuICAgICAgJ2ZyJzogJ0V1bG1vcmUnLFxyXG4gICAgICAnamEnOiAn44Om44O844Or44Oi44KiJyxcclxuICAgICAgJ2tvJzogJ+ycqOuqqOyWtCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMTMsXHJcbiAgfSxcclxuICA4MjE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rC05aaW5bm75Zut5aSa5oGp576O5qC856aB5ZutJyxcclxuICAgICAgJ2RlJzogJ0RvaG4gTWhlZycsXHJcbiAgICAgICdlbic6ICdEb2huIE1oZWcnLFxyXG4gICAgICAnZnInOiAnRG9obiBNaGVnJyxcclxuICAgICAgJ2phJzogJ+awtOWmluW5u+WckiDjg4njgqnjg7zjg4zjg7vjg6HjgrAnLFxyXG4gICAgICAna28nOiAn64+E64qQIOuplOq3uCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAyMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4MjI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lyq6YCg5aSp55WM5qC86bKB5qC854Gr5bGxJyxcclxuICAgICAgJ2RlJzogJ0RlciBHdWxnJyxcclxuICAgICAgJ2VuJzogJ010LiBHdWxnJyxcclxuICAgICAgJ2ZyJzogJ01vbnQgR3VsZycsXHJcbiAgICAgICdqYSc6ICflgb3pgKDlpKnnlYwg44Kw44Or44Kw54Gr5bGxJyxcclxuICAgICAgJ2tvJzogJ+q1tOq3uCDtmZTsgrAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTE4OCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTAyLFxyXG4gIH0sXHJcbiAgODIzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aWh+aYjuWPpOi/ueWlh+WdpumCo+elnuW9sea0nicsXHJcbiAgICAgICdkZSc6ICdJcnJ1bmdlbiBkZXIgUWl0YXJpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBRaXRhbmEgUmF2ZWwnLFxyXG4gICAgICAnZnInOiAnTFxcJ0VuY2hldsOqdHJlbWVudCBkZXMgUWl0YXJpJyxcclxuICAgICAgJ2phJzogJ+WPpOi3oeaOoue0oiDjgq3jgr/jg7Pjg4rnpZ7lvbHmtJ4nLFxyXG4gICAgICAna28nOiAn7YKk7YOA64KYIOyLoOq1tCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtMjc0LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDIsXHJcbiAgfSxcclxuICA4MjQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Z2S6b6Z6ZWH6a2C5oiYJyxcclxuICAgICAgJ2RlJzogJ1NlZWxlbnRhbnogLSBTZWlyeXUnLFxyXG4gICAgICAnZW4nOiAnVGhlIFdyZWF0aCBvZiBTbmFrZXMnLFxyXG4gICAgICAnZnInOiAnTFxcJ8OObG90IGRlcyBBbWVydHVtZXMnLFxyXG4gICAgICAnamEnOiAn6Z2S6b6N5b6B6a2C5oimJyxcclxuICAgICAgJ2tvJzogJ+yyreujoSDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTksXHJcbiAgfSxcclxuICA4MjU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Z2S6b6Z6K+X6a2C5oiYJyxcclxuICAgICAgJ2RlJzogJ1NlZWxlbnN0dXJtIC0gU2Vpcnl1JyxcclxuICAgICAgJ2VuJzogJ1RoZSBXcmVhdGggb2YgU25ha2VzIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMXFwnw45sb3QgZGVzIEFtZXJ0dW1lcyAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+altemdkum+jeW+gemtguaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7LKt66OhIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5OSxcclxuICB9LFxyXG4gIDgyNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuZDmrLLkuYvmiYDnk6/ljZrorrfkv67pgZPpmaInLFxyXG4gICAgICAnZGUnOiAnS2xvc3RlciB2b24gT3Jib25uZScsXHJcbiAgICAgICdlbic6ICdUaGUgT3Jib25uZSBNb25hc3RlcnknLFxyXG4gICAgICAnZnInOiAnTGUgTW9uYXN0w6hyZSBkXFwnT3Jib25uZScsXHJcbiAgICAgICdqYSc6ICfmpb3mrLLjga7lg6fpmaIg44Kq44O844Oc44Oz44OMJyxcclxuICAgICAgJ2tvJzogJ+yYpOuzuOuKkCDsiJjrj4Tsm5AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTU0NSxcclxuICAgICdvZmZzZXRZJzogLTY2MyxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDgyNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjYsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56aB5Zyw5LyY6Zu35Y2hIOS4sOawtOS5i+WcsCcsXHJcbiAgICAgICdkZSc6ICdFdXJla2EgSHlkYXRvcycsXHJcbiAgICAgICdlbic6ICdUaGUgRm9yYmlkZGVuIExhbmQsIEV1cmVrYSBIeWRhdG9zJyxcclxuICAgICAgJ2ZyJzogJ0V1csOqa2EgSHlkYXRvcycsXHJcbiAgICAgICdqYSc6ICfnpoHmlq3jga7lnLAg44Ko44Km44Os44Kr77ya44OS44Ol44OA44OI44K557eoJyxcclxuICAgICAgJ2tvJzogJ+q4iOuLqOydmCDrlYUg7JeQ7Jqw66CI7Lm0OiDtnojri6TthqDsiqTtjrgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogNDc1LFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDAsXHJcbiAgfSxcclxuICA4MzA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Iux6ZuE5oy95q2MJyxcclxuICAgICAgJ2RlJzogJ1JlcXVpZW0gZGVyIEhlbGRlbicsXHJcbiAgICAgICdlbic6ICdBIFJlcXVpZW0gZm9yIEhlcm9lcycsXHJcbiAgICAgICdmcic6ICdVbiByZXF1aWVtIHBvdXIgbGVzIGjDqXJvcycsXHJcbiAgICAgICdqYSc6ICfoi7Hpm4Tjgbjjga7pjq7prYLmrYwnLFxyXG4gICAgICAna28nOiAn7JiB7JuF7J2EIOychO2VnCDsp4TtmLzqsIAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDgzMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSa546b5pa55Z+O5oiY77ya5Lic6aOO5oiYNOS6uuS6suWPi+ahjO+8iOS4jeW4pumjn+aWre+8iScsXHJcbiAgICAgICdkZSc6ICc0LVNwaWVsZXItTWFoam9uZyAoc2NobmVsbGUgUGFydGllLCBLdWl0YW4gZGVha3RpdmllcnQpJyxcclxuICAgICAgJ2VuJzogJ0ZvdXItcGxheWVyIE1haGpvbmcgKFF1aWNrIE1hdGNoLCBLdWl0YW4gRGlzYWJsZWQpJyxcclxuICAgICAgJ2ZyJzogJ01haGpvbmcgZG9taWVuPEluZGVudC8+OiA0IGpvdWV1cnMgKHBhcnRpZSByYXBpZGUgc2FucyBrdWl0YW4pJyxcclxuICAgICAgJ2phJzogJ+ODieODnuW8j+m6u+mbgO+8muadsemiqOaIpjTkurrjgrvjg4Pjg4jljZPvvIjjgq/jgqTjgr/jg7PnhKHjgZfvvIknLFxyXG4gICAgICAna28nOiAn7J6R7Yyo7Jyg7Z2sOiDrj5ntko3soIQgNOyduOyaqSDtg4HsnpAo67aA66W06riwIOuLqOyalOq1rCDsl4bsnYwpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4MzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+epuuWGm+ijheeUsumpvumptuWRmCcsXHJcbiAgICAgICdkZSc6ICdMdWZ0d2FmZmUsIEZldWVyIGZyZWkhJyxcclxuICAgICAgJ2VuJzogJ0FpciBGb3JjZSBPbmUnLFxyXG4gICAgICAnZnInOiAnQXMgZGUgbFxcJ2FpcicsXHJcbiAgICAgICdqYSc6ICflh7rmkoPvvIEg44Ko44Ki44OV44Kp44O844K544OR44Kk44Ot44OD44OIJyxcclxuICAgICAgJ2tvJzogJ+y2nOqyqSEg7JeQ7Ja07Y+s7IqkIOyhsOyiheyCrCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODM0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mjjuS5i+S9v+iAhScsXHJcbiAgICAgICdkZSc6ICdEdXJjaCBkZW4gU3R1cm0gdW5kIHp1csO8Y2snLFxyXG4gICAgICAnZW4nOiAnTWVzc2VuZ2VyIG9mIHRoZSBXaW5kcycsXHJcbiAgICAgICdmcic6ICdMYSBNZXNzYWfDqHJlIGR1IHZlbnQnLFxyXG4gICAgICAnamEnOiAn5p2l6Kiq44Gb44GX6aKo44Gu5b6h5L2/JyxcclxuICAgICAgJ2tvJzogJ+uwlOuejOydmCDslrTsgqwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTAxLFxyXG4gIH0sXHJcbiAgODM2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mBv+aakeemu+Wuq+mprOWIqeWNoeWkp+S6lScsXHJcbiAgICAgICdkZSc6ICdNYWxpa2FocyBCcnVubmVuJyxcclxuICAgICAgJ2VuJzogJ01hbGlrYWhcXCdzIFdlbGwnLFxyXG4gICAgICAnZnInOiAnTGUgUHVpdHMgZGUgTWFsaWthaCcsXHJcbiAgICAgICdqYSc6ICfniL3mtrzpm6Llrq4g44Oe44Oq44Kr44Gu5aSn5LqV5oi4JyxcclxuICAgICAgJ2tvJzogJ+unkOumrOy5tCDtgbDsmrDrrLwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTY1LFxyXG4gICAgJ29mZnNldFknOiAtMzAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMixcclxuICB9LFxyXG4gIDgzNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpgYfooq3pm4bokL3msLTmu6nmnZEnLFxyXG4gICAgICAnZGUnOiAnSG9sbWluc3RlcicsXHJcbiAgICAgICdlbic6ICdIb2xtaW5zdGVyIFN3aXRjaCcsXHJcbiAgICAgICdmcic6ICdIb2xtaW5zdGVyJyxcclxuICAgICAgJ2phJzogJ+auuuaIrumDt+adkSDjg5vjg6vjg5/jg7Pjgrnjgr/jg7wnLFxyXG4gICAgICAna28nOiAn7ZmA66+87Iqk7YSwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMixcclxuICB9LFxyXG4gIDgzODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnKvml6XmmpflvbHkuprpqazkuYznvZfmj5AnLFxyXG4gICAgICAnZGUnOiAnQW1hdXJvdCcsXHJcbiAgICAgICdlbic6ICdBbWF1cm90JyxcclxuICAgICAgJ2ZyJzogJ0FtYXVyb3RlJyxcclxuICAgICAgJ2phJzogJ+e1guacq+W5u+aDsyDjgqLjg7zjg6Ljg63jg7zjg4gnLFxyXG4gICAgICAna28nOiAn7JWE66qo66Gc7Yq4JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwNSxcclxuICB9LFxyXG4gIDg0MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflvILnlYzpgZfmnoTluIzlsJTnp5Hmlq/lrarmmbbloZQnLFxyXG4gICAgICAnZGUnOiAnRGVyIEtyaXN0YWxsendpbGxpbmcnLFxyXG4gICAgICAnZW4nOiAnVGhlIFR3aW5uaW5nJyxcclxuICAgICAgJ2ZyJzogJ0xhIE1hY2xlIGRlIFN5cmN1cycsXHJcbiAgICAgICdqYSc6ICfnlbDnlYzpgbrmp4sg44K344Or44Kv44K544O744OE44Kk44OL44Oz44KwJyxcclxuICAgICAgJ2tvJzogJ+yMjeuRpeydtCDsi5zrpbTsv6DsiqQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg0MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliJvpgKDmnLrmnoTpmL/lsLzlvrfnvZflrabpmaInLFxyXG4gICAgICAnZGUnOiAnQWthZGFlbWlhIEFueWRlcicsXHJcbiAgICAgICdlbic6ICdBa2FkYWVtaWEgQW55ZGVyJyxcclxuICAgICAgJ2ZyJzogJ0FrYWRhZW1pYSBBbnlkcmUnLFxyXG4gICAgICAnamEnOiAn5Ym16YCg5qmf6ZaiIOOCouODiuOCpOODgOOCouOCq+ODh+ODn+OCoicsXHJcbiAgICAgICdrbyc6ICfslaDrgpjsnbTrjZQg7JWE7Lm0642w66+47JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDMwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODQ1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e8h+WdpuWmrumbheatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdPZmZlbmJhcnVuZyAtIFRpdGFuaWEnLFxyXG4gICAgICAnZW4nOiAnVGhlIERhbmNpbmcgUGxhZ3VlJyxcclxuICAgICAgJ2ZyJzogJ0xhIFZhbHNlIGR1IE1vbmFycXVlJyxcclxuICAgICAgJ2phJzogJ+ODhuOCo+OCv+ODvOODi+OCouiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfti7Dtg4Dri4jslYQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMyxcclxuICB9LFxyXG4gIDg0Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfml6DnkZXngbXlkJvmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnT2ZmZW5iYXJ1bmcgLSBJbm5vemVueicsXHJcbiAgICAgICdlbic6ICdUaGUgQ3Jvd24gb2YgdGhlIEltbWFjdWxhdGUnLFxyXG4gICAgICAnZnInOiAnTGEgQ291cm9ubmUgZGUgbFxcJ0ltbWFjdWzDqScsXHJcbiAgICAgICdqYSc6ICfjgqTjg47jgrvjg7PjgrnoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7J2064W47IS87IqkIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDQsXHJcbiAgfSxcclxuICA4NDc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ZOI6L+q5pav5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ09mZmVuYmFydW5nIC0gSGFkZXMnLFxyXG4gICAgICAnZW4nOiAnVGhlIER5aW5nIEdhc3AnLFxyXG4gICAgICAnZnInOiAnTGUgUsOibGUgZGUgbFxcJ0Fnb25pZScsXHJcbiAgICAgICdqYSc6ICfjg4/jg7zjg4fjgrnoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7ZWY642w7IqkIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDUsXHJcbiAgfSxcclxuICA4NDg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5peg55GV54G15ZCb5q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ0xldHp0ZSBMw6R1dGVydW5nIC0gSW5ub3plbnonLFxyXG4gICAgICAnZW4nOiAnVGhlIENyb3duIG9mIHRoZSBJbW1hY3VsYXRlIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMYSBDb3Vyb25uZSBkZSBsXFwnSW1tYWN1bMOpIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Kk44OO44K744Oz44K56KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDsnbTrhbjshLzsiqQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwNCxcclxuICB9LFxyXG4gIDg0OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g6KeJ6YaS5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdFZGVucyBFcndhY2hlbiAtIEF1ZmVyc3RlaHVuZycsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBHYXRlOiBSZXN1cnJlY3Rpb24nLFxyXG4gICAgICAnZnInOiAnTFxcJ8OJdmVpbCBkXFwnw4lkZW4gLSBSw6lzdXJyZWN0aW9uJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs++8muimmumGkue3qDEnLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqwgeyEse2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4NTA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S45biM5pyb5LmQ5ZutIOiniemGkuS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgRXJ3YWNoZW4gLSBOaWVkZXJrdW5mdCcsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBHYXRlOiBEZXNjZW50JyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gRGVzY2VudGUnLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz77ya6Kaa6YaS57eoMicsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rCB7ISx7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg1MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g6KeJ6YaS5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdFZGVucyBFcndhY2hlbiAtIMOcYmVyZmx1dHVuZycsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBHYXRlOiBJbnVuZGF0aW9uJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gRMOpbHVnZScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJropprphpLnt6gzJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqsIHshLHtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzOCxcclxuICB9LFxyXG4gIDg1Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g6KeJ6YaS5LmL56ugNCcsXHJcbiAgICAgICdkZSc6ICdFZGVucyBFcndhY2hlbiAtIEJlZXJkaWd1bmcnLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgR2F0ZTogU2VwdWx0dXJlJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gSW5odW1hdGlvbicsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJropprphpLnt6g0JyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqsIHshLHtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMyxcclxuICB9LFxyXG4gIDg1Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjpm7blvI/luIzmnJvkuZDlm60g6KeJ6YaS5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdFZGVucyBFcndhY2hlbiAtIEF1ZmVyc3RlaHVuZyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBHYXRlOiBSZXN1cnJlY3Rpb24gKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTFxcJ8OJdmVpbCBkXFwnw4lkZW4gLSBSw6lzdXJyZWN0aW9uIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7Ppm7blvI/vvJropprphpLnt6gxJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqsIHshLHtjrgo7JiB7JuFKSAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4NTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOiniemGkuS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgRXJ3YWNoZW4gLSBOaWVkZXJrdW5mdCAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBHYXRlOiBEZXNjZW50IChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gRGVzY2VudGUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs+mbtuW8j++8muimmumGkue3qDInLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqwgeyEse2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg1NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjpm7blvI/luIzmnJvkuZDlm60g6KeJ6YaS5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdFZGVucyBFcndhY2hlbiAtIMOcYmVyZmx1dHVuZyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBHYXRlOiBJbnVuZGF0aW9uIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gRMOpbHVnZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya6Kaa6YaS57eoMycsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rCB7ISx7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzOCxcclxuICB9LFxyXG4gIDg1Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjpm7blvI/luIzmnJvkuZDlm60g6KeJ6YaS5LmL56ugNCcsXHJcbiAgICAgICdkZSc6ICdFZGVucyBFcndhY2hlbiAtIEJlZXJkaWd1bmcgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgR2F0ZTogU2VwdWx0dXJlIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gSW5odW1hdGlvbiAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya6Kaa6YaS57eoNCcsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rCB7ISx7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMyxcclxuICB9LFxyXG4gIDg1ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnvIflnablpq7pm4XmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnTGV0enRlIEzDpHV0ZXJ1bmcgLSBUaXRhbmlhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEYW5jaW5nIFBsYWd1ZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGEgVmFsc2UgZHUgTW9uYXJxdWUgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjg4bjgqPjgr/jg7zjg4vjgqLoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IO2LsO2DgOuLiOyVhCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTAzLFxyXG4gIH0sXHJcbiAgODU5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+acuuWFs+OAgeivheWSkuOAgeWJp+avkuS4juKApuKApicsXHJcbiAgICAgICdkZSc6ICdEZXIgQmVpY2h0c3R1aGwgdm9uIFRvdXBhc2EgZGVtIMOEbHRlcmVuJyxcclxuICAgICAgJ2VuJzogJ0xlZ2VuZCBvZiB0aGUgTm90LXNvLWhpZGRlbiBUZW1wbGUnLFxyXG4gICAgICAnZnInOiAnTGUgQ29uZmVzc2lvbm5hbCBkZSBUb3VwYXNhIGxcXCdhbmNpZW4nLFxyXG4gICAgICAnamEnOiAn5LuV5o6b44GR44Go5ZGq44GE44Go5q+S44GoJyxcclxuICAgICAgJ2tvJzogJ+2VqOygleqzvCDsoIDso7zsmYAg64+FJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMixcclxuICB9LFxyXG4gIDg2MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflup/pg73mi7/lt7TnpLroib7lhbAnLFxyXG4gICAgICAnZGUnOiAnVmF0ZXIgdW5kIEJydWRlcicsXHJcbiAgICAgICdlbic6ICdDb21pbmcgQ2xlYW4nLFxyXG4gICAgICAnZnInOiAnU3VyIGxlcyByYWlscyBkZSBOYWJhYXRoIEFyZW5nJyxcclxuICAgICAgJ2phJzogJ+W7g+mDveODiuODkOOCueOCouODrOODsycsXHJcbiAgICAgICdrbyc6ICfrgpjrsJTsiqTslYTroJ0g7Y+Q7ZeIJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMixcclxuICB9LFxyXG4gIDg3Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmkYfmkYbnmoTlpKnlubMnLFxyXG4gICAgICAnZGUnOiAnT2IgTWl0bGVpZCBvZGVyIEhhc3MnLFxyXG4gICAgICAnZW4nOiAnVGhlIEhhcmRlbmVkIEhlYXJ0JyxcclxuICAgICAgJ2ZyJzogJ05haXNzYW5jZSBkXFwndW4gYm91cnJlYXUnLFxyXG4gICAgICAnamEnOiAn5o+644KM44KL5aSp56ekJyxcclxuICAgICAgJ2tvJzogJ+2dlOuTpOumrOuKlCDsspzsua0nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg3NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflj6Tku6PlpKflho3nlJ/prZTms5UnLFxyXG4gICAgICAnZGUnOiAnQWx0ZXIgWmF1YmVyJyxcclxuICAgICAgJ2VuJzogJ1RoZSBMb3N0IGFuZCB0aGUgRm91bmQnLFxyXG4gICAgICAnZnInOiAnTWFnaWUgYW5jZXN0cmFsZScsXHJcbiAgICAgICdqYSc6ICflj6Tjga7lpKflho3nlJ/prZTms5UnLFxyXG4gICAgICAna28nOiAn6rOg64yA7J2YIOuMgOyerOyDnSDrp4jrspUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTEwLFxyXG4gIH0sXHJcbiAgODc1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WLh+aVoueahOeMjuS6uicsXHJcbiAgICAgICdkZSc6ICdEZXIgTGVnZW5kZSBhdWYgZGVyIFNwdXInLFxyXG4gICAgICAnZW4nOiAnVGhlIEh1bnRlclxcJ3MgTGVnYWN5JyxcclxuICAgICAgJ2ZyJzogJ0xhIGNoYXNzZXVzZSBkZSBsw6lnZW5kZScsXHJcbiAgICAgICdqYSc6ICfli4fmsJfjga7ni6nkuronLFxyXG4gICAgICAna28nOiAn7Jqp6riwIOyeiOuKlCDsgqzrg6XqvrwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNjMsXHJcbiAgfSxcclxuICA4NzY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aWI6LSd5bCU54m555qE5ZCO5oKUJyxcclxuICAgICAgJ2RlJzogJ0VpbiBncm/Dn2VzIE9wZmVyJyxcclxuICAgICAgJ2VuJzogJ055ZWxiZXJ0XFwncyBMYW1lbnQnLFxyXG4gICAgICAnZnInOiAnVW5lIGN1cGlkaXTDqSBiaWVuIGfDqW7DqXJldXNlJyxcclxuICAgICAgJ2phJzogJ+ODiuOCpOODq+ODmeODq+ODiOOBruW+jOaClCcsXHJcbiAgICAgICdrbyc6ICfrgpjsnbzrsqDrpbTtirjsnZgg7ZuE7ZqMJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4Nzk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDksXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qKm57695a6d5aKDJyxcclxuICAgICAgJ2RlJzogJ1ZlcmxpZXNlIHZvbiBMeWhlIEdoaWFoJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEdW5nZW9ucyBvZiBMeWhlIEdoaWFoJyxcclxuICAgICAgJ2ZyJzogJ0xlIERvbmpvbiBoeXBvZ8OpZW4gZHUgTHloZSBHaGlhaCcsXHJcbiAgICAgICdqYSc6ICflrp3nianluqsg44Oq44Kn44O844O744Ku44Ki44O744OA44Oz44K444On44OzJyxcclxuICAgICAgJ2tvJzogJ+uztOusvOqzoCDrpqzsmIgg6riw7JWEIOyngO2VmOuvuOq2gScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODgyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkjeWItuW3peWOguW6n+WinycsXHJcbiAgICAgICdkZSc6ICdEaWUga29waWVydGUgRmFicmlrJyxcclxuICAgICAgJ2VuJzogJ1RoZSBDb3BpZWQgRmFjdG9yeScsXHJcbiAgICAgICdmcic6ICdMYSByw6lwbGlxdWUgZGUgbFxcJ3VzaW5lIGTDqXNhZmZlY3TDqWUnLFxyXG4gICAgICAnamEnOiAn6KSH6KO944K144Os44K/5bel5aC05buD5aKfJyxcclxuICAgICAgJ2tvJzogJ+uzteygnOuQnCDqs7XsnqUg7Y+Q7ZeIJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDYxMCxcclxuICAgICdvZmZzZXRZJzogNzAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4ODQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6a2U5rOV5a6r5q6/5a6H5a6Z5a6rJyxcclxuICAgICAgJ2RlJzogJ0NoYXRlYXUgQ29zbWVhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBHcmFuZCBDb3Ntb3MnLFxyXG4gICAgICAnZnInOiAnTGUgQ29zbW9zIGNvcnVzY2FudCcsXHJcbiAgICAgICdqYSc6ICfprZTms5Xlrq7mrr8g44Kw44Op44Oz44O744Kz44K544Oi44K5JyxcclxuICAgICAgJ2tvJzogJ+q3uOuekSDsvZTsiqTrqqjsiqQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg4NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflk4jov6rmlq/lraTlv7Xmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnTGV0enRlIEzDpHV0ZXJ1bmcgLSBIYWRlcycsXHJcbiAgICAgICdlbic6ICdUaGUgTWluc3RyZWxcXCdzIEJhbGxhZDogSGFkZXNcXCdzIEVsZWd5JyxcclxuICAgICAgJ2ZyJzogJ0xlIFLDomxlIGRlIGxcXCdBZ29uaWUgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjg4/jg7zjg4fjgrnoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IO2VmOuNsOyKpCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTA1LFxyXG4gIH0sXHJcbiAgODg3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyOCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfnu53looPmiJgnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIChmYXRhbCknLFxyXG4gICAgICAnZW4nOiAnVGhlIEVwaWMgb2YgQWxleGFuZGVyIChVbHRpbWF0ZSknLFxyXG4gICAgICAnZnInOiAnTFxcJ09keXNzw6llIGRcXCdBbGV4YW5kZXIgKGZhdGFsKScsXHJcbiAgICAgICdqYSc6ICfntbbjgqLjg6zjgq3jgrXjg7Pjg4Djg7zoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KCIIOyVjOugieyCsOuNlCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg4ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmmILokKjlk4jlh6/lsJTvvIjnq57kuonmiJjvvIknLFxyXG4gICAgICAnZGUnOiAnT25zYWwgSGFrYWlyIChEYW5zaGlnIE5hYWRhbSknLFxyXG4gICAgICAnZW4nOiAnT25zYWwgSGFrYWlyIChEYW5zaGlnIE5hYWRhbSknLFxyXG4gICAgICAnZnInOiAnT25zYWwgSGFrYWlyIChEYW5zaGlnIE5hYWRhbSknLFxyXG4gICAgICAnamEnOiAn44Kq44Oz44K144Or44O744OP44Kr44Kk44OrICjntYLnr4DmiKYpJyxcclxuICAgICAgJ2tvJzogJ+yYqOyCtCDtlZjsubTsnbTrpbQo6rOE7KCI64GdIO2VqeyghCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTE3LFxyXG4gIH0sXHJcbiAgODkzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e6r+eZveiqk+e6puOAgea8hum7keWvhue6picsXHJcbiAgICAgICdkZSc6ICdEZXIgV29sZiB1bmQgZGVyIERyYWNoZW5yZWl0ZXInLFxyXG4gICAgICAnZW4nOiAnVm93cyBvZiBWaXJ0dWUsIERlZWRzIG9mIENydWVsdHknLFxyXG4gICAgICAnZnInOiAnVsWTdXggZGUgdmVydHUsIGFjdGVzIGRlIGNydWF1dMOpJyxcclxuICAgICAgJ2phJzogJ+eZveOBjeiqk+e0hOOAgem7kuOBjeWvhue0hCcsXHJcbiAgICAgICdrbyc6ICftlZjsloAg7ISc7JW9LCDqsoDsnYAg67CA7JW9JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4OTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5oiR5b+D5L6d5penJyxcclxuICAgICAgJ2RlJzogJ1RydWJlbCBpbSBUcmF1bWxhbmQnLFxyXG4gICAgICAnZW4nOiAnQXMgdGhlIEhlYXJ0IEJpZHMnLFxyXG4gICAgICAnZnInOiAnw4AgbFxcJ8OpY291dGUgZGUgc29pJyxcclxuICAgICAgJ2phJzogJ+OBk+OBruW/g+OBjOacm+OCgOOBjOOBvuOBvuOBqycsXHJcbiAgICAgICdrbyc6ICfsnbQg66eI7J2M7J20IOybkO2VmOuKlCDrjIDroZwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEyLFxyXG4gICAgJ29mZnNldFknOiA1MCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDAsXHJcbiAgfSxcclxuICA4OTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57qi5a6d55+z56We5YW156C05Z2P5L2c5oiYJyxcclxuICAgICAgJ2RlJzogJ1J1YmluZmV1ZXIgLSBFbnRmZXNzZWx1bmcnLFxyXG4gICAgICAnZW4nOiAnQ2luZGVyIERyaWZ0JyxcclxuICAgICAgJ2ZyJzogJ0xlcyBOdcOpZXMgZGUgQnJhbmRvbnMnLFxyXG4gICAgICAnamEnOiAn44Or44OT44O844Km44Kn44Od44Oz56C05aOK5L2c5oimJyxcclxuICAgICAgJ2tvJzogJ+ujqOu5hCDsm6jtj7Ag7YyM6rS07J6R7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgODk4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+m7kemjjua1t+W6lemYv+WwvOW+t+e9l+i/veW/hummhicsXHJcbiAgICAgICdkZSc6ICdBbmFtbmVzaXMgQW55ZGVyJyxcclxuICAgICAgJ2VuJzogJ0FuYW1uZXNpcyBBbnlkZXInLFxyXG4gICAgICAnZnInOiAnQW5hbW5lc2lzIEFueWRyZScsXHJcbiAgICAgICdqYSc6ICfpu5LpoqjmtbflupUg44Ki44OL44OJ44Op44K544O744Ki44OK44Og44ON44O844K344K5JyxcclxuICAgICAgJ2tvJzogJ+yVoOuLiOuTnOudvOyKpCDslYTrgqjrhKTsi5zsiqQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMzkwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTAwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflh7rmtbflnoLpkpMnLFxyXG4gICAgICAnZGUnOiAnQXVmIGdyb8OfZXIgRmFocnQnLFxyXG4gICAgICAnZW4nOiAnT2NlYW4gRmlzaGluZycsXHJcbiAgICAgICdmcic6ICdQw6pjaGUgZW4gbWVyJyxcclxuICAgICAgJ2phJzogJ+OCquODvOOCt+ODo+ODs+ODleOCo+ODg+OCt+ODs+OCsCcsXHJcbiAgICAgICdrbyc6ICfrqLzrsJTri6Qg64Ka7IucJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0LFxyXG4gIH0sXHJcbiAgOTAyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlhbHpuKPkuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFJlc29uYW56IC0gRW50bGFkdW5nJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFZlcnNlOiBGdWxtaW5hdGlvbicsXHJcbiAgICAgICdmcic6ICdMZXMgQWNjb3JkcyBkXFwnw4lkZW4gLSBGdWxtaW5hdGlvbicsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJrlhbHps7Tnt6gxJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqs7XrqoXtjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTAzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlhbHpuKPkuYvnq6AyJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFJlc29uYW56IC0gUmFzZXJlaScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBWZXJzZTogRnVyb3InLFxyXG4gICAgICAnZnInOiAnTGVzIEFjY29yZHMgZFxcJ8OJZGVuIC0gRnVyZXVyJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs++8muWFsemztOe3qDInLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqzteuqhe2OuCAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MDQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S45biM5pyb5LmQ5ZutIOWFsem4o+S5i+eroDMnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgUmVzb25hbnogLSBCaWxkZXJzdHVybScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBWZXJzZTogSWNvbm9jbGFzbScsXHJcbiAgICAgICdmcic6ICdMZXMgQWNjb3JkcyBkXFwnw4lkZW4gLSBJY29ub2NsYXNtZScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJrlhbHps7Tnt6gzJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqs7XrqoXtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTA1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlhbHpuKPkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFJlc29uYW56IC0gRXJzdGFycnVuZycsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBWZXJzZTogUmVmdWxnZW5jZScsXHJcbiAgICAgICdmcic6ICdMZXMgQWNjb3JkcyBkXFwnw4lkZW4gLSDDiWNsYXQnLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz77ya5YWx6bO057eoNCcsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rO166qF7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDYsXHJcbiAgfSxcclxuICA5MDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOWFsem4o+S5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgUmVzb25hbnogLSBFbnRsYWR1bmcgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgVmVyc2U6IEZ1bG1pbmF0aW9uIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBBY2NvcmRzIGRcXCfDiWRlbiAtIEZ1bG1pbmF0aW9uIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7Ppm7blvI/vvJrlhbHps7Tnt6gxJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqs7XrqoXtjrgo7JiB7JuFKSAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MDc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOWFsem4o+S5i+eroDInLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgUmVzb25hbnogLSBSYXNlcmVpIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFZlcnNlOiBGdXJvciAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMZXMgQWNjb3JkcyBkXFwnw4lkZW4gLSBGdXJldXIgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs+mbtuW8j++8muWFsemztOe3qDInLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqzteuqhe2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkwODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjpm7blvI/luIzmnJvkuZDlm60g5YWx6bij5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdFZGVucyBSZXNvbmFueiAtIEJpbGRlcnN0dXJtIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFZlcnNlOiBJY29ub2NsYXNtIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBBY2NvcmRzIGRcXCfDiWRlbiAtIEljb25vY2xhc21lIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7Ppm7blvI/vvJrlhbHps7Tnt6gzJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqs7XrqoXtjrgo7JiB7JuFKSAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MDk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOWFsem4o+S5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgUmVzb25hbnogLSBFcnN0YXJydW5nIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFZlcnNlOiBSZWZ1bGdlbmNlIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBBY2NvcmRzIGRcXCfDiWRlbiAtIMOJY2xhdCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya5YWx6bO057eoNCcsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rO166qF7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0NixcclxuICB9LFxyXG4gIDkxMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfljZrlhbnpm4XloKHlnpLokrjlj5Hkuovku7YnLFxyXG4gICAgICAnZGUnOiAnRGVyIEJvemphLVZvcmZhbGwnLFxyXG4gICAgICAnZW4nOiAnVGhlIEJvemphIEluY2lkZW50JyxcclxuICAgICAgJ2ZyJzogJ1Byw6lsdWRlIMOgIGxhIGNhdGFzdHJvcGhlJyxcclxuICAgICAgJ2phJzogJ+OCt+OCv+ODh+ODq+ODu+ODnOOCuuODpOiSuOeZuuS6i+WkiScsXHJcbiAgICAgICdrbyc6ICfrs7Tspojslbwg7IKs6rG0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEyMyxcclxuICB9LFxyXG4gIDkxMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnuqLlrp3nn7PnpZ7lhbXni4Lmg7PkvZzmiJgnLFxyXG4gICAgICAnZGUnOiAnUnViaW5mZXVlciAtIFRyYXVtYScsXHJcbiAgICAgICdlbic6ICdDaW5kZXIgRHJpZnQgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBOdcOpZXMgZGUgQnJhbmRvbnMgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjg6vjg5Pjg7zjgqbjgqfjg53jg7PnoLTlo4rkvZzmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOujqOu5hCDsm6jtj7Ag7YyM6rS07J6R7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgOTEzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WNmuWFuembheWgoeWekui/veW/huaImCcsXHJcbiAgICAgICdkZSc6ICdNZW1vcmlhIE1pc2VyYSAoZXh0cmVtKScsXHJcbiAgICAgICdlbic6ICdNZW1vcmlhIE1pc2VyYSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTWVtb3JpYSBNaXNlcmEgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgrfjgr/jg4fjg6vjg7vjg5zjgrrjg6Tov73mhrbmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOuztOymiOyVvCDstpTslrXsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTM1LFxyXG4gICAgJ29mZnNldFknOiA2ODMsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEyMyxcclxuICB9LFxyXG4gIDkxNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfoi7Hpm4Tml6Dms5Xlronmga8nLFxyXG4gICAgICAnZGUnOiAnVm9uIHNjaGxhZmVuZGVuIEhlbGRlbicsXHJcbiAgICAgICdlbic6ICdBIFNsZWVwIERpc3R1cmJlZCcsXHJcbiAgICAgICdmcic6ICdMXFwnw6lwcmV1dmUgcm9ua2EnLFxyXG4gICAgICAnamEnOiAn5rGd44CB6Iux6ZuE44Gu55yg44KK5aao44GS44KL44GvJyxcclxuICAgICAgJ2tvJzogJ+q3uOuMgCwg7JiB7JuF7J2YIOyeoOydhCDrsKntlbTtlZjripTqsIAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkxNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmmpflvbHlhrPmiJjor7rlvJflhbDnibknLFxyXG4gICAgICAnZGUnOiAnU2NobGFjaHQgdW0gTm9ydnJhbmR0JyxcclxuICAgICAgJ2VuJzogJ1RoZSBIZXJvZXNcXCcgR2F1bnRsZXQnLFxyXG4gICAgICAnZnInOiAnTGEgVHJhdmVyc8OpZSBkZSBOb3J2cmFuZHQnLFxyXG4gICAgICAnamEnOiAn5ryG6buS5rG65oimIOODjuODq+ODtOODqeODs+ODiCcsXHJcbiAgICAgICdrbyc6ICfrhbjrpbTruIzrnoDtirgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogNjI2LFxyXG4gICAgJ29mZnNldFknOiAtNjExLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMjUsXHJcbiAgfSxcclxuICA5MTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lq65YG25Yab5LqL5Z+65ZywJyxcclxuICAgICAgJ2RlJzogJ0RpZSBQdXBwZW5mZXN0dW5nJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQdXBwZXRzXFwnIEJ1bmtlcicsXHJcbiAgICAgICdmcic6ICdMYSBiYXNlIG1pbGl0YWlyZSBkZXMgUGFudGlucycsXHJcbiAgICAgICdqYSc6ICfkurrlvaLjgr/jg4Hjg47ou43kuovln7rlnLAnLFxyXG4gICAgICAna28nOiAn7J247ZiV65Ok7J2YIOq1sOyCrCDquLDsp4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMjkwLFxyXG4gICAgJ29mZnNldFknOiAtMTkwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTIwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyOSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfljZfmlrnljZrlhbnpm4XmiJjnur8nLFxyXG4gICAgICAnZGUnOiAnQm96amEtU8O8ZGZyb250JyxcclxuICAgICAgJ2VuJzogJ1RoZSBCb3pqYW4gU291dGhlcm4gRnJvbnQnLFxyXG4gICAgICAnZnInOiAnRnJvbnQgc3VkIGRlIEJvemphJyxcclxuICAgICAgJ2phJzogJ+WNl+aWueODnOOCuuODpOaIpue3micsXHJcbiAgICAgICdrbyc6ICfrgqjrtoAg67O07KaI7JW8IOyghOyEoCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTI3LFxyXG4gICAgJ29mZnNldFknOiAtNDI0LFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMjQsXHJcbiAgfSxcclxuICA5MjI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5YWJ5LmL5oiY5aOr5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0tyaWVnZXIgZGVzIExpY2h0cycsXHJcbiAgICAgICdlbic6ICdUaGUgU2VhdCBvZiBTYWNyaWZpY2UnLFxyXG4gICAgICAnZnInOiAnTGUgVHLDtG5lIGR1IFNhY3JpZmljZScsXHJcbiAgICAgICdqYSc6ICfjgqbjgqnjg7zjg6rjgqLjg7vjgqrjg5bjg7vjg6njgqTjg4joqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn67mb7J2YIOyghOyCrCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTI1LFxyXG4gIH0sXHJcbiAgOTIzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WFieS5i+aImOWjq+W5u+iAgOatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdLcmllZ2VyIGRlcyBMaWNodHMgKGV4dHJlbSknLFxyXG4gICAgICAnZW4nOiAnVGhlIFNlYXQgb2YgU2FjcmlmaWNlIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMZSBUcsO0bmUgZHUgU2FjcmlmaWNlIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Km44Kp44O844Oq44Ki44O744Kq44OW44O744Op44Kk44OI6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDruZvsnZgg7KCE7IKsIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMjYsXHJcbiAgfSxcclxuICA5MjQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDksXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qKm57695a6d5q6/JyxcclxuICAgICAgJ2RlJzogJ0RhcyBLYXJ1c3NlbGwgdm9uIEx5aGUgR2hpYWgnLFxyXG4gICAgICAnZW4nOiAnVGhlIFNoaWZ0aW5nIE91YmxpZXR0ZXMgb2YgTHloZSBHaGlhaCcsXHJcbiAgICAgICdmcic6ICdMZSBKYXJkaW4gc2VjcmV0IGR1IEx5aGUgR2hpYWgnLFxyXG4gICAgICAnamEnOiAn5a6d54mp5bqrIOODquOCp+ODvOODu+OCruOCouODu+ODgOODs+OCuOODp+ODs+elreauvycsXHJcbiAgICAgICdrbyc6ICfrs7TrrLzqs6Ag66as7JiIIOq4sOyVhCDsp4DtlZjrr7jqtoEg7KCc7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MjU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6aOe57+U5ZCn77yM5YmN5b6A57u05bCU5Yip54m577yBJyxcclxuICAgICAgJ2RlJzogJ0x1ZnRhbmdyaWZmIGF1ZiBXZXJseXQnLFxyXG4gICAgICAnZW4nOiAnU2xlZXAgTm93IGluIFNhcHBoaXJlJyxcclxuICAgICAgJ2ZyJzogJ1N1ciBsYSBtZXIgZGUgc2FwaGlyJyxcclxuICAgICAgJ2phJzogJ+mjm+OBue+8gSDjgqbjgqfjg6vjg6rjg4jjgbggJyxcclxuICAgICAgJ2tvJzogJ+uCoOyVhOudvCEg7Juw66as7Yq466W8IO2Wpe2VmOyXrCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAxNSxcclxuICAgICdvZmZzZXRZJzogLTYxMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkyOToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTYsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5LiK56aP5Zyw5LqR5Yag576k5bKbJyxcclxuICAgICAgJ2RlJzogJ0RhcyBEaWFkZW0gLSBFcnNjaGxpZcOfdW5nJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEaWFkZW0nLFxyXG4gICAgICAnZnInOiAnTGUgRGlhZMOobWUnLFxyXG4gICAgICAnamEnOiAn6Zuy5rW35o6h6ZuGIOODh+OCo+OCouODh+ODoOiruOWzticsXHJcbiAgICAgICdrbyc6ICfrlJTslYTrjoAg7KCc64+EJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY4LFxyXG4gIH0sXHJcbiAgOTMwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W4jOeTpuW5u+W3p+aImCcsXHJcbiAgICAgICdkZSc6ICdUcmF1bXByw7xmdW5nIC0gU2hpdmEnLFxyXG4gICAgICAnZW4nOiAnVGhlIEFraCBBZmFoIEFtcGhpdGhlYXRyZSAoVW5yZWFsKScsXHJcbiAgICAgICdmcic6ICdMXFwnQW1waGl0aMOpw6J0cmUgZFxcJ0FraCBBZmFoIChpcnLDqWVsKScsXHJcbiAgICAgICdqYSc6ICflubvjgrfjg7TjgqHoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7ZmYIOyLnOuwlCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDYsXHJcbiAgfSxcclxuICA5MzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6KSq6Imy55qE6K6w5b+GJyxcclxuICAgICAgJ2RlJzogJ1ZlcmJsYXNzdGUgRXJpbm5lcnVuZ2VuJyxcclxuICAgICAgJ2VuJzogJ0ZhZGVkIE1lbW9yaWVzJyxcclxuICAgICAgJ2ZyJzogJ1NvdXZlbmlyIHDDqXJpc3NhYmxlJyxcclxuICAgICAgJ2phJzogJ+iJsuOBguOBm+OBn+iomOaGticsXHJcbiAgICAgICdrbyc6ICfruZvrsJTrnpwg6riw7Ja1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDExNCxcclxuICB9LFxyXG4gIDkzMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfprZTmnK/lt6XmiL/njpvmiZjpm4Xlt6XkvZzlrqQnLFxyXG4gICAgICAnZGUnOiAnTWF0b3lhcyBBdGVsaWVyJyxcclxuICAgICAgJ2VuJzogJ01hdG95YVxcJ3MgUmVsaWN0JyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBdGVsaWVyIGFiYW5kb25uw6kgZGUgTWF0b3lhJyxcclxuICAgICAgJ2phJzogJ+mtlOihk+W3peaIvyDjg57jg4jjg7zjg6Tjga7jgqLjg4jjg6rjgqgnLFxyXG4gICAgICAna28nOiAn66eI7Yag7JW87J2YIOqzteuwqScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtNzUsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MzQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57u/5a6d55+z56We5YW156C05Z2P5L2c5oiYJyxcclxuICAgICAgJ2RlJzogJ1NtYXJhZ2RzdHVybSAtIEVudGZlc3NlbHVuZycsXHJcbiAgICAgICdlbic6ICdDYXN0cnVtIE1hcmludW0nLFxyXG4gICAgICAnZnInOiAnQ2FzdHJ1bSBNYXJpbnVtJyxcclxuICAgICAgJ2phJzogJ+OCqOODoeODqeODq+ODieOCpuOCp+ODneODs+egtOWjiuS9nOaIpicsXHJcbiAgICAgICdrbyc6ICfsl5DrqZTrnoTrk5wg7Juo7Y+wIO2MjOq0tOyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTM1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e7v+Wuneefs+elnuWFteeLguaDs+S9nOaImCcsXHJcbiAgICAgICdkZSc6ICdTbWFyYWdkc3R1cm0gLSBUcmF1bWEnLFxyXG4gICAgICAnZW4nOiAnQ2FzdHJ1bSBNYXJpbnVtIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdDYXN0cnVtIE1hcmludW0gKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgqjjg6Hjg6njg6vjg4njgqbjgqfjg53jg7PnoLTlo4rkvZzmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOyXkOuplOuehOuTnCDsm6jtj7Ag7YyM6rS07J6R7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MzY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+Wls+eOi+WPpOauvycsXHJcbiAgICAgICdkZSc6ICdEZWx1YnJ1bSBSZWdpbmFlJyxcclxuICAgICAgJ2VuJzogJ0RlbHVicnVtIFJlZ2luYWUnLFxyXG4gICAgICAnZnInOiAnRGVsdWJydW0gUmVnaW5hZScsXHJcbiAgICAgICdqYSc6ICfjgrDjg7Pjg5Ljg6vjg4njg7vjg4fjgqPjg6vjg7zjg5bjg6njg6AnLFxyXG4gICAgICAna28nOiAn6rWw7Z6Q65OcIOyCrOybkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtMzc4LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTM3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyOSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpm7blvI/lpbPnjovlj6Tmrr8nLFxyXG4gICAgICAnZGUnOiAnRGVsdWJydW0gUmVnaW5hZSAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdEZWx1YnJ1bSBSZWdpbmFlIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0RlbHVicnVtIFJlZ2luYWUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+OCsOODs+ODkuODq+ODieODu+ODh+OCo+ODq+ODvOODluODqeODoOmbtuW8jycsXHJcbiAgICAgICdrbyc6ICfqtbDtnpDrk5wg7IKs7JuQKOyYgeybhSknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTM3OCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkzODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpu4Tph5HlubPljp/luJXmiIjlsJTotZ7ojYnljp8nLFxyXG4gICAgICAnZGUnOiAnRGllIEdvbGRlbmUgRWJlbmUgdm9uIFBhZ2x0aFxcJ2FuJyxcclxuICAgICAgJ2VuJzogJ1BhZ2x0aFxcJ2FuJyxcclxuICAgICAgJ2ZyJzogJ0xhIGdyYW5kZSBwcmFpcmllIGRlIFBhZ2x0aFxcJ2FuJyxcclxuICAgICAgJ2phJzogJ+m7hOmHkeW5s+WOnyDjg5Hjgqzjg6vjgrbjg7MnLFxyXG4gICAgICAna28nOiAn7YyM6riA64uoJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDQxNSxcclxuICAgICdvZmZzZXRZJzogLTExMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk0MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lmd5a6r5bm75Y2h77ya5a6Y5pa56ZSm5qCH6LWbJyxcclxuICAgICAgJ2RlJzogJ1RyaXBsZSBUcmlhZDogTWFuZGVydmlsbGUtVHVybmllcicsXHJcbiAgICAgICdlbic6ICdUcmlwbGUgVHJpYWQgT3BlbiBUb3VybmFtZW50JyxcclxuICAgICAgJ2ZyJzogJ1RvdXJub2kgb2ZmaWNpZWwgZGUgVHJpcGxlIFRyaWFkZScsXHJcbiAgICAgICdqYSc6ICfjg4jjg6rjg5fjg6vjg4jjg6njgqTjgqLjg4nvvJrjgqrjg5XjgqPjgrfjg6Pjg6vjg4jjg7zjg4rjg6Hjg7Pjg4gnLFxyXG4gICAgICAna28nOiAn7Yq466as7ZSMIO2KuOudvOydtOyWtOuTnDog6rO17IudIO2GoOuEiOuovO2KuCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA4MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuZ3lrqvlubvljaHvvJrplKbmoIfotZvlr7nlsYDlrqQnLFxyXG4gICAgICAnZGUnOiAnVHJpcGxlIFRyaWFkOiBQcml2YXR0dXJuaWVyJyxcclxuICAgICAgJ2VuJzogJ1RyaXBsZSBUcmlhZCBJbnZpdGF0aW9uYWwgUGFybG9yJyxcclxuICAgICAgJ2ZyJzogJ1NhbGxlIGRlIHRvdXJub2kgbGlicmUgZGUgVHJpcGxlIFRyaWFkZScsXHJcbiAgICAgICdqYSc6ICfjg4jjg6rjg5fjg6vjg4jjg6njgqTjgqLjg4nvvJrjgqvjgrnjgr/jg6Djg4jjg7zjg4rjg6Hjg7Pjg4jjg6vjg7zjg6AnLFxyXG4gICAgICAna28nOiAn7Yq466as7ZSMIO2KuOudvOydtOyWtOuTnDog7Lmc7ISgIO2GoOuEiOuovO2KuCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA4MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlho3nlJ/kuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFZlcmhlacOfdW5nIC0gVW1icmEnLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogVW1icmEnLFxyXG4gICAgICAnZnInOiAnTGEgUHJvbWVzc2UgZFxcJ8OJZGVuIC0gTnXDqWUnLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz77ya5YaN55Sf57eoMScsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog7J6s7IOd7Y64IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk0Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g5YaN55Sf5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdFZGVucyBWZXJoZWnDn3VuZyAtIExpdGFuZWknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogTGl0YW55JyxcclxuICAgICAgJ2ZyJzogJ0xhIFByb21lc3NlIGRcXCfDiWRlbiAtIExpdGFuaWUnLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz77ya5YaN55Sf57eoMicsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog7J6s7IOd7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk0NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g5YaN55Sf5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdFZGVucyBWZXJoZWnDn3VuZyAtIEFuYW1vcnBob3NlJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFByb21pc2U6IEFuYW1vcnBob3NpcycsXHJcbiAgICAgICdmcic6ICdMYSBQcm9tZXNzZSBkXFwnw4lkZW4gLSBBbmFtb3JwaG9zZScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJrlho3nlJ/nt6gzJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDsnqzsg53tjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQ1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlho3nlJ/kuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFZlcmhlacOfdW5nIC0gRXdpZ2tlaXQnLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogRXRlcm5pdHknLFxyXG4gICAgICAnZnInOiAnTGEgUHJvbWVzc2UgZFxcJ8OJZGVuIC0gw4l0ZXJuaXTDqScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJrlho3nlJ/nt6g0JyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDsnqzsg53tjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtNzEsXHJcbiAgICAnb2Zmc2V0WSc6IDIzLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQ2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOmbtuW8j+W4jOacm+S5kOWbrSDlho3nlJ/kuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFZlcmhlacOfdW5nIC0gVW1icmEgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogVW1icmEgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGEgUHJvbWVzc2UgZFxcJ8OJZGVuIC0gTnXDqWUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs+mbtuW8j++8muWGjeeUn+e3qDEnLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOyerOyDne2OuCjsmIHsm4UpIDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk0Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjpm7blvI/luIzmnJvkuZDlm60g5YaN55Sf5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdFZGVucyBWZXJoZWnDn3VuZyAtIExpdGFuZWkgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogTGl0YW55IChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xhIFByb21lc3NlIGRcXCfDiWRlbiAtIExpdGFuaWUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs+mbtuW8j++8muWGjeeUn+e3qDInLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOyerOyDne2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk0ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjpm7blvI/luIzmnJvkuZDlm60g5YaN55Sf5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdFZGVucyBWZXJoZWnDn3VuZyAtIEFuYW1vcnBob3NlIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFByb21pc2U6IEFuYW1vcnBob3NpcyAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMYSBQcm9tZXNzZSBkXFwnw4lkZW4gLSBBbmFtb3JwaG9zZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya5YaN55Sf57eoMycsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog7J6s7IOd7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQ5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOmbtuW8j+W4jOacm+S5kOWbrSDlho3nlJ/kuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFZlcmhlacOfdW5nIC0gRXdpZ2tlaXQgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogRXRlcm5pdHkgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGEgUHJvbWVzc2UgZFxcJ8OJZGVuIC0gw4l0ZXJuaXTDqSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya5YaN55Sf57eoNCcsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog7J6s7IOd7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiA3NSxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk1MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpkrvnn7PnpZ7lhbXmjZXojrfkvZzmiJgnLFxyXG4gICAgICAnZGUnOiAnRGlhbWFudGJsaXR6IC0gRW50ZmVzc2VsdW5nJyxcclxuICAgICAgJ2VuJzogJ1RoZSBDbG91ZCBEZWNrJyxcclxuICAgICAgJ2ZyJzogJ0xlIFRpbGxhYyBkZXMgQ2lycnVzJyxcclxuICAgICAgJ2phJzogJ+ODgOOCpOODpOOCpuOCp+ODneODs+aNleeNsuS9nOaIpicsXHJcbiAgICAgICdrbyc6ICfri6TsnbTslYTrqqzrk5wg7Juo7Y+wIO2PrO2ajeyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTUxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mSu+efs+elnuWFteeLguaDs+S9nOaImCcsXHJcbiAgICAgICdkZSc6ICdEaWFtYW50YmxpdHogLSBUcmF1bWEnLFxyXG4gICAgICAnZW4nOiAnVGhlIENsb3VkIERlY2sgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xlIFRpbGxhYyBkZXMgQ2lycnVzIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144OA44Kk44Ok44Km44Kn44Od44Oz5o2V542y5L2c5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDri6TsnbTslYTrqqzrk5wg7Juo7Y+wIO2PrO2ajeyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTUyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W8guW9oualvOmYgeS9kOeJueWhlCcsXHJcbiAgICAgICdkZSc6ICdEZXIgVHVybSB2b24gWm90JyxcclxuICAgICAgJ2VuJzogJ1RoZSBUb3dlciBvZiBab3QnLFxyXG4gICAgICAnZnInOiAnTGEgdG91ciBkZSBab3R0JyxcclxuICAgICAgJ2phJzogJ+eVsOW9oualvOmWoyDjgr7jg4Pjg4jjga7loZQnLFxyXG4gICAgICAna28nOiAn7KGw7Yq4IO2DkScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtNTAsXHJcbiAgICAnb2Zmc2V0WSc6IC01MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk1Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfms7Dlnablubvlt6fmiJgnLFxyXG4gICAgICAnZGUnOiAnVHJhdW1wcsO8ZnVuZyAtIFRpdGFuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBOYXZlbCAoVW5yZWFsKScsXHJcbiAgICAgICdmcic6ICdMZSBOb21icmlsIChpcnLDqWVsKScsXHJcbiAgICAgICdqYSc6ICflubvjgr/jgqTjgr/jg7PoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7ZmYIO2DgOydtO2DhCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjMsXHJcbiAgfSxcclxuICA5NTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aiB5bCU5biD5YWw5b635oms5biG6LW36IiqJyxcclxuICAgICAgJ2RlJzogJ0d1dGUgV2luZGUgZsO8ciBWeWxicmFuZCcsXHJcbiAgICAgICdlbic6ICdUaGUgR3JlYXQgU2hpcCBWeWxicmFuZCcsXHJcbiAgICAgICdmcic6ICdVbiBuYXZpcmUgbm9tbcOpIFZ5bGJyYW5kJyxcclxuICAgICAgJ2phJzogJ+ODkOOCpOODq+ODluODqeODs+ODieOBruiIueWHuicsXHJcbiAgICAgICdrbyc6ICfrsJTsnbzruIzrnpzrk5wg7Lac7ZWtJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIzLFxyXG4gIH0sXHJcbiAgOTU1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elnuS9keWls+eOiycsXHJcbiAgICAgICdkZSc6ICdIaW5hYiBpbiBkaWUgUnVpbmVuJyxcclxuICAgICAgJ2VuJzogJ0ZpdCBmb3IgYSBRdWVlbicsXHJcbiAgICAgICdmcic6ICdRdWUgbGVzIERpZXV4IGdhcmRlbnQgbGEgUmVpbmUnLFxyXG4gICAgICAnamEnOiAn44K044OD44OJ44O744K744Kk44OW44O744K244O744Kv44Kk44O844OzJyxcclxuICAgICAgJ2tvJzogJ+qwkyDshLjsnbTruIwg642UIO2AuCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtNzUwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTU2OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6L+35rSlJyxcclxuICAgICAgJ2RlJzogJ0xhYnlyaW50aG9zJyxcclxuICAgICAgJ2VuJzogJ0xhYnlyaW50aG9zJyxcclxuICAgICAgJ2ZyJzogJ0xlIExhYnlyaW50aG9zJyxcclxuICAgICAgJ2phJzogJ+ODqeODtOOCo+ODquODs+OCveOCuScsXHJcbiAgICAgICdrbyc6ICfrnbzruYTrprDthqDsiqQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTMxLFxyXG4gIH0sXHJcbiAgOTU3OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6JCo57u05aWI5bKbJyxcclxuICAgICAgJ2RlJzogJ1RoYXZuYWlyJyxcclxuICAgICAgJ2VuJzogJ1RoYXZuYWlyJyxcclxuICAgICAgJ2ZyJzogJ1RoYXZuYWlyJyxcclxuICAgICAgJ2phJzogJ+OCteODmeODjeOCouWzticsXHJcbiAgICAgICdrbyc6ICfsgqzrsqDrhKTslrQg7ISsJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzMixcclxuICB9LFxyXG4gIDk1ODoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WKoOmbt+mprCcsXHJcbiAgICAgICdkZSc6ICdHYXJsZW1hbGQnLFxyXG4gICAgICAnZW4nOiAnR2FybGVtYWxkJyxcclxuICAgICAgJ2ZyJzogJ0dhcmxlbWFsZCcsXHJcbiAgICAgICdqYSc6ICfjgqzjg6zjg57jg6vjg4knLFxyXG4gICAgICAna28nOiAn6rCI66CI66eQ65OcJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzMyxcclxuICB9LFxyXG4gIDk1OToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WPueaBr+a1tycsXHJcbiAgICAgICdkZSc6ICdNYXJlIExhbWVudG9ydW0nLFxyXG4gICAgICAnZW4nOiAnTWFyZSBMYW1lbnRvcnVtJyxcclxuICAgICAgJ2ZyJzogJ01hcmUgTGFtZW50b3J1bScsXHJcbiAgICAgICdqYSc6ICflmIbjgY3jga7mtbcnLFxyXG4gICAgICAna28nOiAn67mE7YOE7J2YIOuwlOuLpCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMzUsXHJcbiAgfSxcclxuICA5NjA6IHtcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnlpJblpKnlnpMnLFxyXG4gICAgICAnZGUnOiAnVWx0aW1hIFRodWxlJyxcclxuICAgICAgJ2VuJzogJ1VsdGltYSBUaHVsZScsXHJcbiAgICAgICdmcic6ICdVbHRpbWEgVGh1bMOpJyxcclxuICAgICAgJ2phJzogJ+OCpuODq+ODhuOCo+ODnuODu+ODiOOCpeODvOODrCcsXHJcbiAgICAgICdrbyc6ICfsmrjti7Drp4gg7Yi066CIJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzNixcclxuICB9LFxyXG4gIDk2MToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WOhOWwlOW6h+aWrycsXHJcbiAgICAgICdkZSc6ICdFbHBpcycsXHJcbiAgICAgICdlbic6ICdFbHBpcycsXHJcbiAgICAgICdmcic6ICdFbHBpcycsXHJcbiAgICAgICdqYSc6ICfjgqjjg6vjg5TjgrknLFxyXG4gICAgICAna28nOiAn7JeY7ZS87IqkJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzNCxcclxuICB9LFxyXG4gIDk2Mjoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aXp+iQqOmbt+WuiScsXHJcbiAgICAgICdkZSc6ICdBbHQtU2hhcmxheWFuJyxcclxuICAgICAgJ2VuJzogJ09sZCBTaGFybGF5YW4nLFxyXG4gICAgICAnZnInOiAnVmllaWxsZSBTaGFybGF5YW4nLFxyXG4gICAgICAnamEnOiAn44Kq44O844Or44OJ44O744K344Oj44O844Os44Ki44OzJyxcclxuICAgICAgJ2tvJzogJ+yYrOuTnCDsg6zroIjsnbTslYgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTM3LFxyXG4gIH0sXHJcbiAgOTYzOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ouJ5pyt572VJyxcclxuICAgICAgJ2RlJzogJ1JhZHotYXQtSGFuJyxcclxuICAgICAgJ2VuJzogJ1JhZHotYXQtSGFuJyxcclxuICAgICAgJ2ZyJzogJ1JhZHotYXQtSGFuJyxcclxuICAgICAgJ2phJzogJ+ODqeOCtuODj+ODsycsXHJcbiAgICAgICdrbyc6ICfrnbzsnpDtlZwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTM4LFxyXG4gIH0sXHJcbiAgOTY2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W4jOacm+S5i+eCruWPsO+8muKAnOWhlOKAnScsXHJcbiAgICAgICdkZSc6ICdEZXIgVHVybSwgUGFyYWRpZ21lbmJyZWNoZXInLFxyXG4gICAgICAnZW4nOiAnVGhlIFRvd2VyIGF0IFBhcmFkaWdtXFwncyBCcmVhY2gnLFxyXG4gICAgICAnZnInOiAnTGEgdG91ciBkZSBsYSBDb250aW5nZW5jZScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjg47noLLlj7DvvJrjgIzloZTjgI0nLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIO2PrOuMgDogXFwn7YORXFwnJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDgwOCxcclxuICAgICdvZmZzZXRZJzogLTc3MixcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk2Nzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W4neWbvea1t+S4iuWfuuWcsOW5suiIueWdnicsXHJcbiAgICAgICdkZSc6ICdUcm9ja2VuZG9jayB2b24gQ2FzdHJ1bSBNYXJpbnVtJyxcclxuICAgICAgJ2VuJzogJ0Nhc3RydW0gTWFyaW51bSBEcnlkb2NrcycsXHJcbiAgICAgICdmcic6ICdDYWxlIHPDqGNoZSBkZSBDYXN0cnVtIE1hcmludW0nLFxyXG4gICAgICAnamEnOiAn44Kr44K544OG44OD44Or44Og44O744Oe44Oq44OM44Og44O744OJ44Op44Kk44OJ44OD44KvJyxcclxuICAgICAgJ2tvJzogJ+y5tOyKpO2KuOujuCDrp4jrpqzriJQg6rG07ISg6rGwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5Njg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI4LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ0RyYWNoZW5rcmllZyAoZmF0YWwpJyxcclxuICAgICAgJ2VuJzogJ0RyYWdvbnNvbmdcXCdzIFJlcHJpc2UgKFVsdGltYXRlKScsXHJcbiAgICAgICdmcic6ICdMYSBHdWVycmUgZHUgY2hhbnQgZGVzIGRyYWdvbnMgKGZhdGFsKScsXHJcbiAgICAgICdqYSc6ICfntbbnq5zoqanmiKbkuoknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk2OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfprZTlr7znpZ7pl6jlt7TliKvloZQnLFxyXG4gICAgICAnZGUnOiAnRGVyIFR1cm0gdm9uIEJhYmlsJyxcclxuICAgICAgJ2VuJzogJ1RoZSBUb3dlciBvZiBCYWJpbCcsXHJcbiAgICAgICdmcic6ICdMYSB0b3VyIGRlIEJhYmlsJyxcclxuICAgICAgJ2phJzogJ+mtlOWwjuelnumWgCDjg5Djg5bjgqTjg6vjga7loZQnLFxyXG4gICAgICAna28nOiAn67CU67iM7J28IO2DkScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAyNzAsXHJcbiAgICAnb2Zmc2V0WSc6IC0zMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgOTcwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+acq+aXpeagkea1t+S4h+ebuOajruWbvScsXHJcbiAgICAgICdkZSc6ICdWYW5hc3BhdGknLFxyXG4gICAgICAnZW4nOiAnVmFuYXNwYXRpJyxcclxuICAgICAgJ2ZyJzogJ1ZhbmFzcGF0aScsXHJcbiAgICAgICdqYSc6ICfntYLmnKvmqLnmtbcg44O044Kh44OK44K544OR44OG44KjJyxcclxuICAgICAgJ2tvJzogJ+uwlOuCmOyKpO2MjO2LsCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAyODAsXHJcbiAgICAnb2Zmc2V0WSc6IDgsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0MSxcclxuICB9LFxyXG4gIDk3Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliKnnu7TkuprmoZHlubvlt6fmiJgnLFxyXG4gICAgICAnZGUnOiAnVHJhdW1wcsO8ZnVuZyAtIExldmlhdGhhbicsXHJcbiAgICAgICdlbic6ICdUaGUgPEVtcGhhc2lzPldob3JsZWF0ZXI8L0VtcGhhc2lzPiAoVW5yZWFsKScsXHJcbiAgICAgICdmcic6ICdMZSBCcmlzZXVyIGRlIG1hcsOpZXMgKGlycsOpZWwpJyxcclxuICAgICAgJ2phJzogJ+W5u+ODquODtOOCoeOCpOOCouOCteODs+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICftmZgg66as67CU7J207Ja07ISgIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzOCxcclxuICB9LFxyXG4gIDk3Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnIDnu4jlubvmg7PmnKvkuJbnu4jov7knLFxyXG4gICAgICAnZGUnOiAnRGFzIFN0ZXJuZW5ncmFiJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEZWFkIEVuZHMnLFxyXG4gICAgICAnZnInOiAnTFxcJ0lzc3VlIGF1eCBJbXBhc3NlcycsXHJcbiAgICAgICdqYSc6ICfmnIDntYLlubvmg7Mg44Os44Og44OK44Oz44OIJyxcclxuICAgICAgJ2tvJzogJ+yelO2VtOuzhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMzEwLFxyXG4gICAgJ29mZnNldFknOiAxNSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ0LFxyXG4gIH0sXHJcbiAgOTc0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WIm+mAoOeOr+Wig+aegeWMl+mAoOeJqemZoicsXHJcbiAgICAgICdkZSc6ICdLdGlzaXMgSHlwZXJib3JlaWEnLFxyXG4gICAgICAnZW4nOiAnS3Rpc2lzIEh5cGVyYm9yZWlhJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdIeXBlcmJvcsOpZScsXHJcbiAgICAgICdqYSc6ICflibXpgKDnkrDlooMg44OS44Ol44Oa44Or44Oc44Os44Ki6YCg54mp6ZmiJyxcclxuICAgICAgJ2tvJzogJ+2cmO2OmOultOuztOugiOyVhCDsobDrrLzsm5AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogNDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xNTAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5NzU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aJjuadnOivuuWwlOmrmOWOnycsXHJcbiAgICAgICdkZSc6ICdaYWRub3ItSG9jaGViZW5lJyxcclxuICAgICAgJ2VuJzogJ1phZG5vcicsXHJcbiAgICAgICdmcic6ICdIYXV0cyBwbGF0ZWF1eCBkZSBaYWRub3InLFxyXG4gICAgICAnamEnOiAn44K244OI44Kl44OO44Or6auY5Y6fJyxcclxuICAgICAgJ2tvJzogJ+yekO2KuOuFuOultCDqs6Dsm5AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTMwLFxyXG4gIH0sXHJcbiAgOTc2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S5kOWbremDveW4gueskeeskemVhycsXHJcbiAgICAgICdkZSc6ICdTbWlsZXRvbicsXHJcbiAgICAgICdlbic6ICdTbWlsZXRvbicsXHJcbiAgICAgICdmcic6ICdSaXNldHRlLXN1ci1sdW5lJyxcclxuICAgICAgJ2phJzogJ+alveWckumDveW4giDjgrnjg57jgqTjg6vjg4jjg7MnLFxyXG4gICAgICAna28nOiAn7Iqk66eI7J287YS0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0yMixcclxuICAgICdvZmZzZXRZJzogLTQyLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTc3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+aWl+iHs+m7juaYjicsXHJcbiAgICAgICdkZSc6ICdLYW1wZiBpbSBNb3JnZW5ncmF1ZW4nLFxyXG4gICAgICAnZW4nOiAnRGVhdGggVW50byBEYXduJyxcclxuICAgICAgJ2ZyJzogJ0F1YmUgbWV1cnRyacOocmUnLFxyXG4gICAgICAnamEnOiAn6buO5piO44Gu5q276ZeYJyxcclxuICAgICAgJ2tvJzogJ+yXrOuqheydmCDsgqztiKwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTE0LFxyXG4gIH0sXHJcbiAgOTc4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aYn+a1t+a3seW5veWvu+WboOaYn+aZtumVnCcsXHJcbiAgICAgICdkZSc6ICdEYXMgQWl0aWFza29wJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBaXRpYXNjb3BlJyxcclxuICAgICAgJ2ZyJzogJ0xlIFByaXNtZSBkZSBsXFwnQWl0aWEnLFxyXG4gICAgICAnamEnOiAn5pif5rW35r2c6IiqIOOCouOCpOODhuOCo+OCquODs+aYn+aZtumPoScsXHJcbiAgICAgICdrbyc6ICfslYTsnbTti7DsmKgg67OE7ZiE66+46rK9JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDgsXHJcbiAgICAnb2Zmc2V0WSc6IC01MDEsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5ODY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn55S16ISR5qKm5aKD5pav5o+Q5qC8546b5ZubJyxcclxuICAgICAgJ2RlJzogJ1N0aWdtYS1Ib2xvbWV0cmllJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTdGlnbWEgRHJlYW1zY2FwZScsXHJcbiAgICAgICdmcic6ICdSw6p2ZSDDqWxlY3RyaXF1ZSBkZSBTdGlnbWEtNCcsXHJcbiAgICAgICdqYSc6ICfpm7vohLPlpKLmg7Mg44K544OG44Kj44Kw44Oe44O744OV44Kp44O8JyxcclxuICAgICAgJ2tvJzogJ+yKpO2LsOq3uOuniC00JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDE0NCxcclxuICAgICdvZmZzZXRZJzogLTE0LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDAsXHJcbiAgfSxcclxuICA5OTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5L2Q6L+q5Lqa5YWL5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ1Byb3BoZXRpZSAtIFpvZGlhcmsnLFxyXG4gICAgICAnZW4nOiAnVGhlIERhcmsgSW5zaWRlJyxcclxuICAgICAgJ2ZyJzogJ0xlIENyYXTDqHJlIGRlcyBNYXJ0eXJzJyxcclxuICAgICAgJ2phJzogJ+OCvuODh+OCo+OCouODvOOCr+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsobDrlJTslYTtgawg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzOSxcclxuICB9LFxyXG4gIDk5Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvZDov6rkuprlhYvmmp3mmpfmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnRXNjaGF0b3MgLSBab2RpYXJrJyxcclxuICAgICAgJ2VuJzogJ1RoZSBNaW5zdHJlbFxcJ3MgQmFsbGFkOiBab2RpYXJrXFwncyBGYWxsJyxcclxuICAgICAgJ2ZyJzogJ0xlIENyYXTDqHJlIGRlcyBNYXJ0eXJzIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144K+44OH44Kj44Ki44O844Kv6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDsobDrlJTslYTtgawg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzOSxcclxuICB9LFxyXG4gIDk5NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ruR56i954G15q6/6Ze56ay855ub5a60JyxcclxuICAgICAgJ2RlJzogJ0x1c3RpZ2VzIEJhbmtldHQnLFxyXG4gICAgICAnZW4nOiAnVGhlIFBoYW50b21zXFwnIEZlYXN0JyxcclxuICAgICAgJ2ZyJzogJ0xlIGJhbnF1ZXQgY2F1Y2hlbWFyZGVzcXVlJyxcclxuICAgICAgJ2phJzogJ+mBk+WMlumll+WutCDjg5vjg7zjg7Pjg4bjg4Pjg4njg5XjgqPjg7zjgrnjg4gnLFxyXG4gICAgICAna28nOiAn7Jyg66C57J2YIOyXsO2ajCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAyMCxcclxuICAgICdvZmZzZXRZJzogMTAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5OTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rW35b635p6X5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ1Byb3BoZXRpZSAtIEh5ZGFlbHluJyxcclxuICAgICAgJ2VuJzogJ1RoZSBNb3RoZXJjcnlzdGFsJyxcclxuICAgICAgJ2ZyJzogJ0xlIENyaXN0YWwtbcOocmUnLFxyXG4gICAgICAnamEnOiAn44OP44Kk44OH44Oq44Oz6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+2VmOydtOuNuOumsCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTM5LFxyXG4gIH0sXHJcbiAgOTk2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a1t+W+t+ael+aZluWFieatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdFc2NoYXRvcyAtIEh5ZGFlbHluJyxcclxuICAgICAgJ2VuJzogJ1RoZSBNaW5zdHJlbFxcJ3MgQmFsbGFkOiBIeWRhZWx5blxcJ3MgQ2FsbCcsXHJcbiAgICAgICdmcic6ICdMZSBDcmlzdGFsLW3DqHJlIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144OP44Kk44OH44Oq44Oz6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDtlZjsnbTrjbjrprAg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzOSxcclxuICB9LFxyXG4gIDk5Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnu4jnu5PkuYvmiJgnLFxyXG4gICAgICAnZGUnOiAnUHJvcGhldGllIC0gRW5kc8OkbmdlcmluJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGaW5hbCBEYXknLFxyXG4gICAgICAnZnInOiAnTGUgUsOpcG9ucyBmaW5hbCcsXHJcbiAgICAgICdqYSc6ICfntYLnhInjga7miKbjgYQnLFxyXG4gICAgICAna28nOiAn7KKF7Ja47J2YIOqysOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMTYsXHJcbiAgfSxcclxuICA5OTg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnZGUnOiAnRXNjaGF0b3MgLSBFbmRzw6RuZ2VyaW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIE1pbnN0cmVsXFwncyBCYWxsYWQ6IEVuZHNpbmdlclxcJ3MgQXJpYScsXHJcbiAgICAgICdmcic6ICdMZSBSw6lwb25zIGZpbmFsIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn57WC5qW144Gu5oim44GEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGF0YTtcclxuIiwiaW1wb3J0IHsgTGFuZyB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9sYW5ndWFnZXMnO1xyXG5pbXBvcnQgeyBMb2NhbGVUZXh0IH0gZnJvbSAnLi4vLi4vdHlwZXMvdHJpZ2dlcic7XHJcblxyXG5pbXBvcnQgeyBPb3BzeU9wdGlvbnMgfSBmcm9tICcuL29vcHN5X29wdGlvbnMnO1xyXG5cclxuLy8gRmllbGRzIGZvciBuZXQgbG9nIGFiaWxpdHkgbGluZXMuXHJcbmV4cG9ydCBjb25zdCBrRmllbGRGbGFncyA9IDg7XHJcbmV4cG9ydCBjb25zdCBrRmllbGREYW1hZ2UgPSA5O1xyXG5cclxuLy8gSWYga0ZpZWxkRmxhZ3MgaXMgYW55IG9mIHRoZXNlIHZhbHVlcywgdGhlbiBjb25zaWRlciBmaWVsZCAxMC8xMSBhcyA4LzkuXHJcbi8vIEl0IGFwcGVhcnMgYSBsaXR0bGUgYml0IHRoYXQgZmxhZ3MgY29tZSBpbiBwYWlycyBvZiB2YWx1ZXMsIGJ1dCBpdCdzIHVuY2xlYXJcclxuLy8gd2hhdCB0aGVzZSBtZWFuLlxyXG5leHBvcnQgY29uc3Qga1NoaWZ0RmxhZ1ZhbHVlcyA9IFsnM0UnLCAnMTEzJywgJzIxMycsICczMTMnXTtcclxuZXhwb3J0IGNvbnN0IGtGbGFnSW5zdGFudERlYXRoID0gJzM2JzsgLy8gQWx3YXlzIDM2ID9cclxuLy8gbWlzcywgZGFtYWdlLCBibG9jaywgcGFycnksIGluc3RhbnQgZGVhdGhcclxuZXhwb3J0IGNvbnN0IGtBdHRhY2tGbGFncyA9IFsnMDEnLCAnMDMnLCAnMDUnLCAnMDYnLCBrRmxhZ0luc3RhbnREZWF0aF07XHJcbmV4cG9ydCBjb25zdCBrSGVhbEZsYWdzID0gWycwNCddO1xyXG5cclxuLy8gVE9ETzogc2hvdWxkIHdlIGluY2x1ZGUgZGFtYWdlICE9IDAgaGVyZT9cclxuZXhwb3J0IGNvbnN0IGRhbWFnZUZpZWxkcyA9IHtcclxuICBmbGFnczogYFtefF0qKD86JHtrQXR0YWNrRmxhZ3Muam9pbignfCcpfSkoPz1cXFxcfClgLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHBsYXllckRhbWFnZUZpZWxkcyA9IHtcclxuICB0YXJnZXRJZDogJ1teNF0uLi4uLi4uJyxcclxuICAuLi5kYW1hZ2VGaWVsZHMsXHJcbn07XHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXHJcblxyXG4vKlxyXG5GaWVsZCA3IEZsYWdzOlxyXG4gICcwJyA9IG1lZGl0YXRpb24sIGFvZSB3aXRoIG5vIHRhcmdldHNcclxuXHJcbiAgZGFtYWdlIGxvdyBieXRlczpcclxuICAgIDB4MDEgPSBkb2RnZVxyXG4gICAgMHgwMyA9IGRhbWFnZVxyXG4gICAgMHgwNSA9IGJsb2NrZWQgZGFtYWdlXHJcbiAgICAweDA2ID0gcGFycmllZCBkYW1hZ2VcclxuICAgIDB4Pz8gPSBpbnN0YW50IGRlYXRoXHJcblxyXG4gIGRhbWFnZSBtb2RpZmllcnM6XHJcbiAgICAweDEwMCA9IGNyaXQgZGFtYWdlXHJcbiAgICAweDIwMCA9IGRpcmVjdCBoaXQgZGFtYWdlXHJcbiAgICAweDMwMCA9IGNyaXQgZGlyZWN0IGhpdCBkYW1hZ2VcclxuXHJcbiAgaGVhbCBtb2RpZmllcnM6XHJcbiAgICAweDAwMDA0ID0gaGVhbFxyXG4gICAgMHgxMDAwNCA9IGNyaXQgaGVhbFxyXG5cclxuICBTcGVjaWFsIGNhc2VzOlxyXG4gICAgKiBJZiBmbGFncyBhcmUgM0UsIHNoaWZ0IDkrMTAgdHdvIG92ZXIgdG8gYmUgNys4LiAgKHdoeT8/PylcclxuICAgICogUGxlbmFyeSBpbmR1bGdlbmNlIGhhcyBmbGFncz0xMTMvMjEzLzMxMyBmb3Igc3RhY2tzLCBzaGlmdCB0d28gYXMgd2VsbC5cclxuXHJcbiAgRGFtYWdlOlxyXG4gICAgKiBMZWZ0LWV4dGVuZCB6ZXJvZXMgdG8gOCBjaGFycywgZS5nLiAyOTM0MDAxID0+IDAyOTM0MDAxLCBvciAxMDAwID0+IDAwMDAxMDAwLlxyXG4gICAgKiBTaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgNCBieXRlcyAoOCBjaGFycykuXHJcbiAgICAqIEZpcnN0IHR3byBieXRlcyBhcmUgZGFtYWdlLlxyXG4gICAgKiAwMDAwNDAwMCBtYXNrIGltcGxpZXMgZXh0cmEgZGFtYWdlIChhbmQgc29tZSB3ZWlyZCBtYXRoKTpcclxuICAgICAgYnl0ZXMgPSBBQkNELCB3aGVyZSBDID0gMHg0MC5cclxuICAgICAgdG90YWwgZGFtYWdlID0gREEoQi1EKSwgYXMgdGhyZWUgYnl0ZXMgdG9nZXRoZXIgaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlci5cclxuICAgICAgZS5nLiA0MjRFNDAwRiA9PiAwRiA0MiAoNEUgLSAwRiA9IDNGKSA9PiAwRjQyM0YgPT4gOTk5OTk5XHJcbiAgICAqIDAwMDAxMDAwIG1hc2sgaW1wbGllcyAwIGRhbWFnZSwgZS5nLiBoYWxsb3dlZC5cclxuXHJcbkV4YW1wbGVzOlxyXG4oMSkgMTgyMTYgZGFtYWdlIGZyb20gR3JhbmQgQ3Jvc3MgQWxwaGEgKGJhc2ljIGRhbWFnZSlcclxuICAxNjo0MDAwMTMzMzpOZW8gRXhkZWF0aDoyNDJCOkdyYW5kIENyb3NzIEFscGhhOjEwNDg2MzhDOlRhdGVyIFRvdDo3NTAwMDM6NDcyODAwMDA6MUM6ODAyNDJCOjA6MDowOjA6MDowOjA6MDowOjA6MDowOjM2OTA2OjQxMjQxOjUxNjA6NTE2MDo4ODA6MTAwMDowLjAwOTIyNjM2NTotNy44MTEyODotMS4xOTIwOTNFLTA3OjE2MDQzMDE1OjE3NzAyMjcyOjEyMDAwOjEyMDAwOjEwMDA6MTAwMDotMC4wMTUzMTk4MjotMTkuMDI4MDg6MDpcclxuXHJcbigyKSA4MjUzOCBkYW1hZ2UgZnJvbSBIeXBlcmRyaXZlICgweDQwMDAgZXh0cmEgZGFtYWdlIG1hc2spXHJcbiAgMTU6NDAwMjRGQkE6S2Vma2E6MjhFODpIeXBlcmRyaXZlOjEwNkMxREJBOk9rb25vbWkgWWFraTo3NTAwMDM6NDI2QjQwMDE6MUM6MjhFODgwMDA6MDowOjA6MDowOjA6MDowOjA6MDowOjA6MzU4MTE6NjI0NjQ6NDU2MDo0NTYwOjk0MDoxMDAwOi0wLjE1ODYwNjE6LTUuNzUzMTUzOjA6MzAwOTg5MDY6MzE1NTkwNjI6MTIwMDA6MTIwMDA6MTAwMDoxMDAwOjAuMzUwODkxMTowLjQ0MjUwNDk6Mi4zODQxODZFLTA3OlxyXG5cclxuKDMpIDIyMTA5IGRhbWFnZSBmcm9tIEdyYW5kIENyb3NzIE9tZWdhICg6M0U6MDogc2hpZnQsIHVua25vd24gMHg0MDAwMCBmbGFnKVxyXG4gIDE2OjQwMDAxMzMzOk5lbyBFeGRlYXRoOjI0MkQ6R3JhbmQgQ3Jvc3MgT21lZ2E6MTA0ODYzOEM6VGF0ZXIgVG90OjNFOjA6NzUwMDAzOjU2NUQwMDAwOjFDOjgwMjQyRDowOjA6MDowOjA6MDowOjA6MDowOjQxMjQxOjQxMjQxOjUxNjA6NTE2MDo2NzA6MTAwMDotMC4zMjUxNjQxOjYuNTI2Mjk5OjEuMTkyMDkzRS0wNzo3NTYwOTQ0OjE3NzAyMjcyOjEyMDAwOjEyMDAwOjEwMDA6MTAwMDowOjE5OjIuMzg0MTg2RS0wNzpcclxuXHJcbig0KSAxNTczMiBjcml0IGhlYWwgZnJvbSAzIGNvbmZlc3Npb24gc3RhY2sgUGxlbmFyeSBJbmR1bGdlbmNlICg6PzEzOjRDMzogc2hpZnQpXHJcbiAgMTY6MTA2NDdEMkY6VGFrbyBZYWtpOjFEMDk6UGxlbmFyeSBJbmR1bGdlbmNlOjEwNkREMDE5Ok9rb25vbWkgWWFraTozMTM6NEMzOjEwMDA0OjNENzQ6MDowOjA6MDowOjA6MDowOjA6MDowOjA6NzEyNDo0MDI2NToxNDQwMDo5MTkyOjEwMDA6MTAwMDotMTAuNzg4MTU6MTEuOTQ3ODE6MDoxMTM0Mzo0MDAyOToxOTY1MjoxNjQ1MToxMDAwOjEwMDA6Ni4zMzY2NDg6Ny43MTAwMDQ6MDpcclxuXHJcbig1KSBpbnN0YW50IGRlYXRoIHR3aXN0ZXJcclxuICAxNjo0MDAwNEQ1RDpUd2ludGFuaWE6MjZBQjpUd2lzdGVyOjEwNTczRkRDOlRpbmkgUG91dGluaTozMzowOjFDOjI2QUI4MDAwOjA6MDowOjA6MDowOjA6MDowOjA6MDowOjQzOTg1OjQzOTg1OjU3NjA6NTc2MDo5MTA6MTAwMDotOC40MjE3OTo5LjQ5MjUxOi0xLjE5MjA5M0UtMDc6NTcyNTA6NTcyNTA6MDowOjEwMDA6MTAwMDotOC41NjU2NDU6MTAuMjA5NTk6MDpcclxuXHJcbig2KSB6ZXJvIGRhbWFnZSB0YXJnZXRsZXNzIGFvZSAoRTAwMDAwMDAgdGFyZ2V0KVxyXG4gIDE2OjEwM0FBRUU0OlBvdGF0byBDaGlwcHk6QjE6TWlhc21hIElJOkUwMDAwMDAwOjowOjA6MDowOjA6MDowOjA6MDowOjA6MDowOjA6MDowOjo6Ojo6Ojo6OjE5NDAwOjQwMjg3OjE3NjQ5OjE3NjMzOjEwMDA6MTAwMDotMC42NTYxODk6LTMuNzk5NTYxOi01Ljk2MDQ2NEUtMDg6XHJcblxyXG4qL1xyXG5cclxuLyogZXNsaW50LWVuYWJsZSAqL1xyXG5cclxuZXhwb3J0IGNvbnN0IFNob3J0TmFtaWZ5ID0gKFxyXG4gIG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCxcclxuICBwbGF5ZXJOaWNrczogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH0sXHJcbik6IHN0cmluZyA9PiB7XHJcbiAgLy8gVE9ETzogbWFrZSB0aGlzIHVuaXF1ZSBhbW9uZyB0aGUgcGFydHkgaW4gY2FzZSBvZiBmaXJzdCBuYW1lIGNvbGxpc2lvbnMuXHJcbiAgLy8gVE9ETzogcHJvYmFibHkgdGhpcyBzaG91bGQgYmUgYSBnZW5lcmFsIGNhY3Rib3QgdXRpbGl0eS5cclxuICBpZiAoIW5hbWUpXHJcbiAgICByZXR1cm4gJz8/Pyc7XHJcblxyXG4gIGNvbnN0IG5pY2sgPSBwbGF5ZXJOaWNrc1tuYW1lXTtcclxuICBpZiAobmljaylcclxuICAgIHJldHVybiBuaWNrO1xyXG5cclxuICBjb25zdCBpZHggPSBuYW1lLmluZGV4T2YoJyAnKTtcclxuICByZXR1cm4gaWR4IDwgMCA/IG5hbWUgOiBuYW1lLnN1YnN0cigwLCBpZHgpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IFRyYW5zbGF0ZSA9IChsYW5nOiBMYW5nLCBvYmo/OiBMb2NhbGVUZXh0IHwgc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcclxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpXHJcbiAgICByZXR1cm4gb2JqO1xyXG4gIHJldHVybiBvYmpbbGFuZ10gPz8gb2JqWydlbiddO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IEdldEZvcm1hdHRlZFRpbWUgPSAoYmFzZVRpbWU6IG51bWJlciB8IHVuZGVmaW5lZCwgdGltZTogbnVtYmVyKTogc3RyaW5nID0+IHtcclxuICBpZiAoIWJhc2VUaW1lKVxyXG4gICAgcmV0dXJuICcnO1xyXG4gIGNvbnN0IHRvdGFsU2Vjb25kcyA9IE1hdGguZmxvb3IoKHRpbWUgLSBiYXNlVGltZSkgLyAxMDAwKTtcclxuICBjb25zdCBzZWNvbmRzID0gdG90YWxTZWNvbmRzICUgNjA7XHJcbiAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IodG90YWxTZWNvbmRzIC8gNjApO1xyXG4gIHJldHVybiBgJHttaW51dGVzfToke3NlY29uZHMgPCAxMCA/IGAwJHtzZWNvbmRzfWAgOiBzZWNvbmRzfWA7XHJcbn07XHJcblxyXG4vLyBUdXJucyBhIHNjcmFtYmxlZCBzdHJpbmcgZGFtYWdlIGZpZWxkIGludG8gYW4gaW50ZWdlci5cclxuLy8gU2luY2UgZmllbGRzIGFyZSBtb2RpZmllZCBpbiBwbGFjZSByaWdodCBub3csIHRoaXMgZG9lcyBub3RoaW5nIGlmIGNhbGxlZFxyXG4vLyBhZ2FpbiB3aXRoIGFuIGludGVnZXIuICBUaGlzIGlzIGtpbmQgb2YgYSBoYWNrLCBzb3JyeS5cclxuZXhwb3J0IGNvbnN0IFVuc2NyYW1ibGVEYW1hZ2UgPSAoZmllbGQ/OiBzdHJpbmcpOiBudW1iZXIgPT4ge1xyXG4gIGlmIChmaWVsZCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgcmV0dXJuIDA7XHJcbiAgY29uc3QgbGVuID0gZmllbGQubGVuZ3RoO1xyXG4gIGlmIChsZW4gPD0gNClcclxuICAgIHJldHVybiAwO1xyXG4gIC8vIEdldCB0aGUgbGVmdCB0d28gYnl0ZXMgYXMgZGFtYWdlLlxyXG4gIGxldCBkYW1hZ2UgPSBwYXJzZUludChmaWVsZC5zdWJzdHIoMCwgbGVuIC0gNCksIDE2KTtcclxuICAvLyBDaGVjayBmb3IgdGhpcmQgYnl0ZSA9PSAweDQwLlxyXG4gIGlmIChmaWVsZFtsZW4gLSA0XSA9PT0gJzQnKSB7XHJcbiAgICAvLyBXcmFwIGluIHRoZSA0dGggYnl0ZSBhcyBleHRyYSBkYW1hZ2UuICBTZWUgbm90ZXMgYWJvdmUuXHJcbiAgICBjb25zdCByaWdodERhbWFnZSA9IHBhcnNlSW50KGZpZWxkLnN1YnN0cihsZW4gLSAyLCAyKSwgMTYpO1xyXG4gICAgZGFtYWdlID0gZGFtYWdlIC0gcmlnaHREYW1hZ2UgKyAocmlnaHREYW1hZ2UgPDwgMTYpO1xyXG4gIH1cclxuICByZXR1cm4gZGFtYWdlO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IElzUGxheWVySWQgPSAoaWQ/OiBzdHJpbmcpOiBib29sZWFuID0+IHtcclxuICBpZiAoaWQgPT09IHVuZGVmaW5lZClcclxuICAgIHJldHVybiBmYWxzZTtcclxuICBjb25zdCBmaXJzdENoYXIgPSBpZFswXTtcclxuICByZXR1cm4gZmlyc3RDaGFyID8gZmlyc3RDaGFyIDwgJzQnIDogZmFsc2U7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgSXNUcmlnZ2VyRW5hYmxlZCA9IChvcHRpb25zOiBPb3BzeU9wdGlvbnMsIGlkOiBzdHJpbmcpOiBib29sZWFuID0+IHtcclxuICBpZiAoaWQgaW4gb3B0aW9ucy5EaXNhYmxlZFRyaWdnZXJzKVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICBjb25zdCBhdXRvQ29uZmlnID0gb3B0aW9ucy5QZXJUcmlnZ2VyQXV0b0NvbmZpZ1tpZF07XHJcbiAgaWYgKGF1dG9Db25maWcpXHJcbiAgICByZXR1cm4gYXV0b0NvbmZpZy5lbmFibGVkO1xyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBHZXRTb2xvTWlzdGFrZVRleHQgPSAoYWJpbGl0eTogc3RyaW5nKTogTG9jYWxlVGV4dCA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGVuOiBgJHthYmlsaXR5fSAoYWxvbmUpYCxcclxuICAgIGRlOiBgJHthYmlsaXR5fSAoYWxsZWluKWAsXHJcbiAgICBmcjogYCR7YWJpbGl0eX0gKHNldWwoZSkpYCxcclxuICAgIGphOiBgJHthYmlsaXR5fSAo5LiA5Lq6KWAsXHJcbiAgICBjbjogYCR7YWJpbGl0eX0gKOWNleWQgylgLFxyXG4gICAga286IGAke2FiaWxpdHl9ICjtmLzsnpAg66ee7J2MKWAsXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBHZXRTaGFyZU1pc3Rha2VUZXh0ID0gKGFiaWxpdHk6IHN0cmluZywgbnVtVGFyZ2V0czogbnVtYmVyKTogTG9jYWxlVGV4dCA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGVuOiBgJHthYmlsaXR5fSAoc2hhcmUgeCR7bnVtVGFyZ2V0c30pYCxcclxuICAgIGRlOiBgJHthYmlsaXR5fSAoZ2V0ZWlsdCBtaXQgJHtudW1UYXJnZXRzfSlgLFxyXG4gICAgZnI6IGAke2FiaWxpdHl9IChwYXJ0YWdlKWAsIC8vIEZJWE1FXHJcbiAgICBqYTogYCR7YWJpbGl0eX0gKOmgreWJsuOCiilgLCAvLyBGSVhNRVxyXG4gICAgY246IGAke2FiaWxpdHl9ICjph43lj6A6ICR7bnVtVGFyZ2V0c33mrKEpYCxcclxuICAgIGtvOiBgJHthYmlsaXR5fSAo6rCZ7J20IOunnuydjDogJHtudW1UYXJnZXRzfeuqhSlgLFxyXG4gIH07XHJcbn07XHJcbiIsIi8vIFRPRE86IG1heWJlIHRoaXMgc2hvdWxkIGJlIHN0cnVjdHVyZWQgaWRlbnRpY2FsbHkgdG8gYSB0aW1lbGluZVJlcGxhY2Ugc2VjdGlvbi5cclxuXHJcbmltcG9ydCB7IExhbmcsIE5vbkVuTGFuZyB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9sYW5ndWFnZXMnO1xyXG5cclxuLy8gSXQncyBhd2t3YXJkIHRvIHJlZmVyIHRvIHRoZXNlIHN0cmluZyBrZXlzLCBzbyBuYW1lIHRoZW0gYXMgcmVwbGFjZVN5bmNba2V5cy5zZWFsS2V5XS5cclxuZXhwb3J0IGNvbnN0IHN5bmNLZXlzID0ge1xyXG4gIC8vIFNlYWwgaXMgdHJ5aW5nIHRvIG1hdGNoIHRoZXNlIHR5cGVzIG9mIGxpbmVzLCBhbmQgaXMgbW9yZSBjb21wbGljYXRlZCBiZWNhdXNlIGl0J3NcclxuICAvLyB0cnlpbmcgdG8gYWxzbyBjYXB0dXJlIHRoZSBhcmVhIG5hbWU6XHJcbiAgLy8gICBwYXJzZWQgbG9nIGxpbmVzOiAwMDowODM5OjpTb21ldGhpbmcgd2lsbCBiZSBzZWFsZWQgb2ZmXHJcbiAgLy8gICBuZXR3b3JrIGxvZyBsaW5lczogMDB8dGltZXN0YW1wfDA4Mzl8fFNvbWV0aGluZyB3aWxsIGJlIHNlYWxlZCBvZmZcclxuICAvLyAgIE5ldFJlZ2V4ZXM6IF5eKD86MDApXFx8KD86W158XSopXFx8KD86MDgzOSlcXHwoPzpbXnxdKilcXHwoPzpTb21ldGhpbmcgd2lsbCBiZSBzZWFsZWQgb2ZmLio/KVxcfFxyXG4gIHNlYWw6XHJcbiAgICAnKD88PTAwOjA4Mzk6OnwwMFxcXFx8W158XSpcXFxcfDA4MzlcXFxcfFxcXFx8fFxcXFx8XFxcXChcXFxcPzopKFtefF0qKSB3aWxsIGJlIHNlYWxlZCBvZmYoPzogaW4gKD86WzAtOV0rIHNlY29uZHMpPyk/JyxcclxuICB1bnNlYWw6ICdpcyBubyBsb25nZXIgc2VhbGVkJyxcclxuICBlbmdhZ2U6ICdFbmdhZ2UhJyxcclxufTtcclxuXHJcbmNvbnN0IHRleHRLZXlzID0ge1xyXG4gIC8vIE1hdGNoIGRpcmVjdGlvbnMgaW4gcmVwbGFjZVRleHRcclxuICAvLyBlZzogYChOKWAsIGAoU1cpYCwgYChORS9OVylgLCBldGMuXHJcbiAgRTogJyg/PD0gXFxcXCh8XFxcXC8pRSg/PVxcXFwpfFxcXFwvKScsXHJcbiAgTjogJyg/PD0gXFxcXCh8XFxcXC8pTig/PVxcXFwpfFxcXFwvKScsXHJcbiAgUzogJyg/PD0gXFxcXCh8XFxcXC8pUyg/PVxcXFwpfFxcXFwvKScsXHJcbiAgVzogJyg/PD0gXFxcXCh8XFxcXC8pVyg/PVxcXFwpfFxcXFwvKScsXHJcbiAgTkU6ICcoPzw9IFxcXFwofFxcXFwvKU5FKD89XFxcXCl8XFxcXC8pJyxcclxuICBOVzogJyg/PD0gXFxcXCh8XFxcXC8pTlcoPz1cXFxcKXxcXFxcLyknLFxyXG4gIFNFOiAnKD88PSBcXFxcKHxcXFxcLylTRSg/PVxcXFwpfFxcXFwvKScsXHJcbiAgU1c6ICcoPzw9IFxcXFwofFxcXFwvKVNXKD89XFxcXCl8XFxcXC8pJyxcclxuICAvLyBNYXRjaCBSb2xlcyBpbiByZXBsYWNlVGV4dFxyXG4gIC8vIGVnOiBgKFRhbmspYCwgYChIZWFsZXIpYCwgYChEUFMpYCwgZXRjXHJcbiAgVGFuazogJyg/PD0gXFxcXCh8XFxcXC8pVGFua3M/KD89XFxcXCl8XFxcXC8pJyxcclxuICBIZWFsZXI6ICcoPzw9IFxcXFwofFxcXFwvKUhlYWxlcnM/KD89XFxcXCl8XFxcXC8pJyxcclxuICBEUFM6ICcoPzw9IFxcXFwofFxcXFwvKURQUyg/PVxcXFwpfFxcXFwvKScsXHJcbiAgLy8gTWF0Y2ggYC0tMS0tYCBzdHlsZSB0ZXh0LlxyXG4gIE51bWJlcjogJy0tKFxcXFxzKlxcXFxkK1xcXFxzKiktLScsXHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBDb21tb25SZXBsYWNlbWVudCA9IHtcclxuICByZXBsYWNlU3luYzoge1xyXG4gICAgW3JlcGxhY2VLZXk6IHN0cmluZ106IHsgW2tleSBpbiBMYW5nXT86IHN0cmluZyB9O1xyXG4gIH07XHJcbiAgcmVwbGFjZVRleHQ6IHtcclxuICAgIFtyZXBsYWNlS2V5OiBzdHJpbmddOlxyXG4gICAgICAmIHtcclxuICAgICAgICBba2V5IGluIE5vbkVuTGFuZ10/OiBzdHJpbmc7XHJcbiAgICAgIH1cclxuICAgICAgJiB7XHJcbiAgICAgICAgLy8gZG9uJ3Qgc2V0IHRoaXMga2V5LCBidXQgYWxsb3cgdXMgdG8gYXNrIGlmIGl0IGV4aXN0c1xyXG4gICAgICAgIGVuPzogbmV2ZXI7XHJcbiAgICAgIH07XHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21tb25SZXBsYWNlbWVudDogQ29tbW9uUmVwbGFjZW1lbnQgPSB7XHJcbiAgcmVwbGFjZVN5bmM6IHtcclxuICAgIFtzeW5jS2V5cy5zZWFsXToge1xyXG4gICAgICBlbjogJyQxIHdpbGwgYmUgc2VhbGVkIG9mZicsXHJcbiAgICAgIGRlOlxyXG4gICAgICAgICdOb2NoIDE1IFNla3VuZGVuLCBiaXMgc2ljaCAoPzooPzpkZXJ8ZGllfGRhcykgKT8oPzpadWdhbmcgenUoPzpbcm1dfCBkZW4pPyApPyQxIHNjaGxpZcOfdCcsXHJcbiAgICAgIGZyOiAnRmVybWV0dXJlIGQoPzplfHV8ZXMpICg/OmxcXCd8bGEgfGxlcz8gKT8kMSBkYW5zJyxcclxuICAgICAgamE6ICckMeOBruWwgemOluOBvuOBp+OBguOBqCcsXHJcbiAgICAgIGNuOiAn6LedJDHooqvlsIHplIHov5jmnIknLFxyXG4gICAgICBrbzogJzE17LSIIO2bhOyXkCAkMVvsnbTqsIBdIOu0ieyHhOuQqeuLiOuLpCcsXHJcbiAgICB9LFxyXG4gICAgW3N5bmNLZXlzLnVuc2VhbF06IHtcclxuICAgICAgZW46ICdpcyBubyBsb25nZXIgc2VhbGVkJyxcclxuICAgICAgZGU6ICfDtmZmbmV0IHNpY2ggKD86d2llZGVyfGVybmV1dCknLFxyXG4gICAgICBmcjogJ091dmVydHVyZSAnLFxyXG4gICAgICBqYTogJ+OBruWwgemOluOBjOino+OBi+OCjOOBnycsXHJcbiAgICAgIGNuOiAn55qE5bCB6ZSB6Kej6Zmk5LqGJyxcclxuICAgICAga286ICfsnZgg67SJ7IeE6rCAIO2VtOygnOuQmOyXiOyKteuLiOuLpCcsXHJcbiAgICB9LFxyXG4gICAgW3N5bmNLZXlzLmVuZ2FnZV06IHtcclxuICAgICAgZW46ICdFbmdhZ2UhJyxcclxuICAgICAgZGU6ICdTdGFydCEnLFxyXG4gICAgICBmcjogJ8OAIGxcXCdhdHRhcXVlJyxcclxuICAgICAgamE6ICfmiKbpl5jplovlp4vvvIEnLFxyXG4gICAgICBjbjogJ+aImOaWl+W8gOWni++8gScsXHJcbiAgICAgIGtvOiAn7KCE7YisIOyLnOyekSEnLFxyXG4gICAgfSxcclxuICB9LFxyXG4gIHJlcGxhY2VUZXh0OiB7XHJcbiAgICAnLS1hZGRzIHNwYXduLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1BZGRzIGVyc2NoZWluZW4tLScsXHJcbiAgICAgIGZyOiAnLS1BcHBhcml0aW9uIGRcXCdhZGRzLS0nLFxyXG4gICAgICBqYTogJy0t6ZuR6a2a5Ye654++LS0nLFxyXG4gICAgICBjbjogJy0t5bCP5oCq5Ye6546wLS0nLFxyXG4gICAgICBrbzogJy0t7KuEIOyGjO2ZmC0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1hZGRzIHRhcmdldGFibGUtLSc6IHtcclxuICAgICAgZGU6ICctLUFkZHMgYW52aXNpZXJiYXItLScsXHJcbiAgICAgIGZyOiAnLS1BZGRzIGNpYmxhYmxlcy0tJyxcclxuICAgICAgamE6ICctLembkemtmuOCv+ODvOOCsuODg+ODiOWPr+iDvS0tJyxcclxuICAgICAgY246ICctLeWwj+aAquWPr+mAieS4rS0tJyxcclxuICAgICAga286ICctLeyrhCDtg4Dqsp8g6rCA64qlLS0nLFxyXG4gICAgfSxcclxuICAgICctLWNlbnRlci0tJzoge1xyXG4gICAgICBkZTogJy0tTWl0dGUtLScsXHJcbiAgICAgIGZyOiAnLS1DZW50cmUtLScsXHJcbiAgICAgIGphOiAnLS3jgrvjg7Pjgr/jg7wtLScsXHJcbiAgICAgIGNuOiAnLS3kuK3lpK4tLScsXHJcbiAgICAgIGtvOiAnLS3spJHslZktLScsXHJcbiAgICB9LFxyXG4gICAgJ1xcXFwoY2VudGVyXFxcXCknOiB7XHJcbiAgICAgIGRlOiAnKE1pdHRlKScsXHJcbiAgICAgIGZyOiAnKENlbnRyZSknLFxyXG4gICAgICBqYTogJyjjgrvjg7Pjgr/jg7wpJyxcclxuICAgICAgY246ICco5Lit5aSuKScsXHJcbiAgICAgIGtvOiAnKOykkeyVmSknLFxyXG4gICAgfSxcclxuICAgICctLWNsb25lcyBhcHBlYXItLSc6IHtcclxuICAgICAgZGU6ICctLUtsb25lIGVyc2NoZWluZW4tLScsXHJcbiAgICAgIGZyOiAnLS1BcHBhcml0aW9uIGRlcyBjbG9uZXMtLScsXHJcbiAgICAgIGphOiAnLS3lubvlvbHlh7rnj74tLScsXHJcbiAgICAgIGNuOiAnLS3lubvlvbHlh7rnjrAtLScsXHJcbiAgICAgIGtvOiAnLS3rtoTsi6Ag7IaM7ZmYLS0nLFxyXG4gICAgfSxcclxuICAgICctLWNvcm5lci0tJzoge1xyXG4gICAgICBkZTogJy0tRWNrZS0tJyxcclxuICAgICAgZnI6ICctLUNvaW4tLScsXHJcbiAgICAgIGphOiAnLS3jgrPjg7zjg4rjg7wtLScsXHJcbiAgICAgIGNuOiAnLS3op5LokL0tLScsXHJcbiAgICAgIGtvOiAnLS3qtazshJ0tLScsXHJcbiAgICB9LFxyXG4gICAgJy0tZHBzIGJ1cm4tLSc6IHtcclxuICAgICAgZGU6ICctLURQUyBidXJuLS0nLFxyXG4gICAgICBmcjogJy0tQnVybiBkcHMtLScsXHJcbiAgICAgIGphOiAnLS3ngavlipvlh7rjgZstLScsXHJcbiAgICAgIGNuOiAnLS3ovazngastLScsXHJcbiAgICAgIGtvOiAnLS3rlJwg7LK07YGsLS0nLFxyXG4gICAgfSxcclxuICAgICctLWVhc3QtLSc6IHtcclxuICAgICAgZGU6ICctLU9zdGVuLS0nLFxyXG4gICAgICBmcjogJy0tRXN0LS0nLFxyXG4gICAgICBqYTogJy0t5p2xLS0nLFxyXG4gICAgICBjbjogJy0t5LicLS0nLFxyXG4gICAgICBrbzogJy0t64+Z7Kq9LS0nLFxyXG4gICAgfSxcclxuICAgICdcXFxcKGVhc3RcXFxcKSc6IHtcclxuICAgICAgZGU6ICcoT3N0ZW4pJyxcclxuICAgICAgZnI6ICcoRXN0KScsXHJcbiAgICAgIGphOiAnKOadsSknLFxyXG4gICAgICBjbjogJyjkuJwpJyxcclxuICAgICAga286ICco64+Z7Kq9KScsXHJcbiAgICB9LFxyXG4gICAgJ0VucmFnZSc6IHtcclxuICAgICAgZGU6ICdGaW5hbGFuZ3JpZmYnLFxyXG4gICAgICBmcjogJ0VucmFnZScsXHJcbiAgICAgIGphOiAn5pmC6ZaT5YiH44KMJyxcclxuICAgICAgY246ICfni4LmmrQnLFxyXG4gICAgICBrbzogJ+yghOupuOq4sCcsXHJcbiAgICB9LFxyXG4gICAgJy0tZnJvemVuLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1laW5nZWZyb3Jlbi0tJyxcclxuICAgICAgZnI6ICctLUdlbMOpLS0nLFxyXG4gICAgICBqYTogJy0t5YeN57WQLS0nLFxyXG4gICAgICBjbjogJy0t5Ya757uTLS0nLFxyXG4gICAgICBrbzogJy0t67mZ6rKwLS0nLFxyXG4gICAgfSxcclxuICAgICctLWluLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1SZWluLS0nLFxyXG4gICAgICBmcjogJy0tSW50w6lyaWV1ci0tJyxcclxuICAgICAgamE6ICctLeS4rS0tJyxcclxuICAgICAgY246ICctLeWGhS0tJyxcclxuICAgICAga286ICctLeyViC0tJyxcclxuICAgIH0sXHJcbiAgICAnXFxcXChJblxcXFwpJzoge1xyXG4gICAgICBkZTogJyhSZWluKScsXHJcbiAgICAgIGZyOiAnKEludMOpcmlldXIpJyxcclxuICAgICAgamE6ICco5LitKScsXHJcbiAgICAgIGNuOiAnKOWGhSknLFxyXG4gICAgICBrbzogJyjslYgpJyxcclxuICAgIH0sXHJcbiAgICAnXFxcXChpbm5lclxcXFwpJzoge1xyXG4gICAgICBkZTogJyhpbm5lbiknLFxyXG4gICAgICBmcjogJyhpbnTDqXJpZXVyKScsXHJcbiAgICAgIGphOiAnKOS4rSknLFxyXG4gICAgICBjbjogJyjlhoUpJyxcclxuICAgICAga286ICco7JWIKScsXHJcbiAgICB9LFxyXG4gICAgJy0tanVtcC0tJzoge1xyXG4gICAgICBkZTogJy0tU3BydW5nLS0nLFxyXG4gICAgICBmcjogJy0tU2F1dC0tJyxcclxuICAgICAgamE6ICctLeOCuOODo+ODs+ODly0tJyxcclxuICAgICAgY246ICctLei3sy0tJyxcclxuICAgICAga286ICctLeygkO2UhC0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1rbm9ja2JhY2stLSc6IHtcclxuICAgICAgZGU6ICctLVLDvGNrc3Rvw58tLScsXHJcbiAgICAgIGZyOiAnLS1Qb3Vzc8OpZS0tJyxcclxuICAgICAgamE6ICctLeODjuODg+OCr+ODkOODg+OCry0tJyxcclxuICAgICAgY246ICctLeWHu+mAgC0tJyxcclxuICAgICAga286ICctLeuEieuwsS0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1taWRkbGUtLSc6IHtcclxuICAgICAgZGU6ICctLU1pdHRlLS0nLFxyXG4gICAgICBmcjogJy0tTWlsaWV1LS0nLFxyXG4gICAgICBqYTogJy0t5Lit5aSuLS0nLFxyXG4gICAgICBjbjogJy0t5Lit6Ze0LS0nLFxyXG4gICAgICBrbzogJy0t7KSR7JWZLS0nLFxyXG4gICAgfSxcclxuICAgICdcXFxcKG1pZGRsZVxcXFwpJzoge1xyXG4gICAgICBkZTogJyhNaXR0ZSknLFxyXG4gICAgICBmcjogJyhNaWxpZXUpJyxcclxuICAgICAgamE6ICco5Lit5aSuKScsXHJcbiAgICAgIGNuOiAnKOS4remXtCknLFxyXG4gICAgICBrbzogJyjspJHslZkpJyxcclxuICAgIH0sXHJcbiAgICAnLS1ub3J0aC0tJzoge1xyXG4gICAgICBkZTogJy0tTm9yZGVuLS0nLFxyXG4gICAgICBmcjogJy0tTm9yZC0tJyxcclxuICAgICAgamE6ICctLeWMly0tJyxcclxuICAgICAgY246ICctLeWMly0tJyxcclxuICAgICAga286ICctLeu2geyqvS0tJyxcclxuICAgIH0sXHJcbiAgICAnXFxcXChub3J0aFxcXFwpJzoge1xyXG4gICAgICBkZTogJyhOb3JkZW4pJyxcclxuICAgICAgZnI6ICcoTm9yZCknLFxyXG4gICAgICBqYTogJyjljJcpJyxcclxuICAgICAgY246ICco5YyXKScsXHJcbiAgICAgIGtvOiAnKOu2geyqvSknLFxyXG4gICAgfSxcclxuICAgICctLW5vcnRoZWFzdC0tJzoge1xyXG4gICAgICBkZTogJy0tTm9yZG9zdGVuLS0nLFxyXG4gICAgICBmcjogJy0tTm9yZC1Fc3QtLScsXHJcbiAgICAgIGphOiAnLS3ljJfmnbEtLScsXHJcbiAgICAgIGNuOiAnLS3kuJzljJctLScsXHJcbiAgICAgIGtvOiAnLS3rtoHrj5ktLScsXHJcbiAgICB9LFxyXG4gICAgJy0tbm9ydGh3ZXN0LS0nOiB7XHJcbiAgICAgIGRlOiAnLS1Ob3Jkd2VzdGVuLS0nLFxyXG4gICAgICBmcjogJy0tTm9yZC1PdWVzdC0tJyxcclxuICAgICAgamE6ICctLeWMl+ilvy0tJyxcclxuICAgICAgY246ICctLeilv+WMly0tJyxcclxuICAgICAga286ICctLeu2geyEnC0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1vdXQtLSc6IHtcclxuICAgICAgZGU6ICctLVJhdXMtLScsXHJcbiAgICAgIGZyOiAnLS1FeHTDqXJpZXVyLS0nLFxyXG4gICAgICBqYTogJy0t5aSWLS0nLFxyXG4gICAgICBjbjogJy0t5aSWLS0nLFxyXG4gICAgICBrbzogJy0t67CWLS0nLFxyXG4gICAgfSxcclxuICAgICdcXFxcKE91dFxcXFwpJzoge1xyXG4gICAgICBkZTogJyhSYXVzKScsXHJcbiAgICAgIGZyOiAnKEV4dMOpcmlldXIpJyxcclxuICAgICAgamE6ICco5aSWKScsXHJcbiAgICAgIGNuOiAnKOWkliknLFxyXG4gICAgICBrbzogJyjrsJYpJyxcclxuICAgIH0sXHJcbiAgICAnXFxcXChvdXRlclxcXFwpJzoge1xyXG4gICAgICBkZTogJyhhdcOfZW4pJyxcclxuICAgICAgZnI6ICcoZXh0w6lyaWV1ciknLFxyXG4gICAgICBqYTogJyjlpJYpJyxcclxuICAgICAgY246ICco5aSWKScsXHJcbiAgICAgIGtvOiAnKOuwliknLFxyXG4gICAgfSxcclxuICAgICdcXFxcKG91dHNpZGVcXFxcKSc6IHtcclxuICAgICAgZGU6ICcoRHJhdcOfZW4pJyxcclxuICAgICAgZnI6ICcow4AgbFxcJ2V4dMOpcmlldXIpJyxcclxuICAgICAgamE6ICco5aSWKScsXHJcbiAgICAgIGNuOiAnKOWklumdoiknLFxyXG4gICAgICBrbzogJyjrsJTquaUpJyxcclxuICAgIH0sXHJcbiAgICAnLS1yb3RhdGUtLSc6IHtcclxuICAgICAgZGU6ICctLXJvdGllcmVuLS0nLFxyXG4gICAgICBmcjogJy0tcm90YXRpb24tLScsXHJcbiAgICAgIGphOiAnLS3lm57ou6ItLScsXHJcbiAgICAgIGNuOiAnLS3ml4vovawtLScsXHJcbiAgICAgIGtvOiAnLS3tmozsoIQtLScsXHJcbiAgICB9LFxyXG4gICAgJy0tc291dGgtLSc6IHtcclxuICAgICAgZGU6ICctLVPDvGRlbi0tJyxcclxuICAgICAgZnI6ICctLVN1ZC0tJyxcclxuICAgICAgamE6ICctLeWNly0tJyxcclxuICAgICAgY246ICctLeWNly0tJyxcclxuICAgICAga286ICctLeuCqOyqvS0tJyxcclxuICAgIH0sXHJcbiAgICAnXFxcXChzb3V0aFxcXFwpJzoge1xyXG4gICAgICBkZTogJyhTw7xkZW4pJyxcclxuICAgICAgZnI6ICcoU3VkKScsXHJcbiAgICAgIGphOiAnKOWNlyknLFxyXG4gICAgICBjbjogJyjljZcpJyxcclxuICAgICAga286ICco64Ko7Kq9KScsXHJcbiAgICB9LFxyXG4gICAgJy0tc291dGhlYXN0LS0nOiB7XHJcbiAgICAgIGRlOiAnLS1Tw7xkb3N0ZW4tLScsXHJcbiAgICAgIGZyOiAnLS1TdWQtRXN0LS0nLFxyXG4gICAgICBqYTogJy0t5Y2X5p2xLS0nLFxyXG4gICAgICBjbjogJy0t5Lic5Y2XLS0nLFxyXG4gICAgICBrbzogJy0t64Ko64+ZLS0nLFxyXG4gICAgfSxcclxuICAgICctLXNvdXRod2VzdC0tJzoge1xyXG4gICAgICBkZTogJy0tU8O8ZHdlc3Rlbi0tJyxcclxuICAgICAgZnI6ICctLVN1ZC1PdWVzdC0tJyxcclxuICAgICAgamE6ICctLeWNl+ilvy0tJyxcclxuICAgICAgY246ICctLeilv+WNly0tJyxcclxuICAgICAga286ICctLeuCqOyEnC0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1zcGxpdC0tJzoge1xyXG4gICAgICBkZTogJy0tdGVpbGVuLS0nLFxyXG4gICAgICBmcjogJy0tZGl2aXNpb24tLScsXHJcbiAgICAgIGphOiAnLS3liIboo4ItLScsXHJcbiAgICAgIGNuOiAnLS3liIboo4ItLScsXHJcbiAgICAgIGtvOiAnLS3rtoTsl7QtLScsXHJcbiAgICB9LFxyXG4gICAgJy0tc3R1bi0tJzoge1xyXG4gICAgICBkZTogJy0tQmV0w6R1YnVuZy0tJyxcclxuICAgICAgZnI6ICctLcOJdG91cmRpc3NlbWVudC0tJyxcclxuICAgICAgamE6ICctLeOCueOCv+ODsy0tJyxcclxuICAgICAgY246ICctLeWHu+aZlS0tJyxcclxuICAgICAga286ICctLeq4sOygiC0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1zeW5jLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1zeW5jaHJvbmlzYXRpb24tLScsXHJcbiAgICAgIGZyOiAnLS1zeW5jaHJvbmlzYXRpb24tLScsXHJcbiAgICAgIGphOiAnLS3jgrfjg7Pjgq8tLScsXHJcbiAgICAgIGNuOiAnLS3lkIzmraXljJYtLScsXHJcbiAgICAgIGtvOiAnLS3rj5nquLDtmZQtLScsXHJcbiAgICB9LFxyXG4gICAgJy0tKFswLTldK3ggKT90YXJnZXRhYmxlLS0nOiB7XHJcbiAgICAgIGRlOiAnLS0kMWFudmlzaWVyYmFyLS0nLFxyXG4gICAgICBmcjogJy0tJDFjaWJsYWJsZS0tJyxcclxuICAgICAgamE6ICctLSQx44K/44O844Ky44OD44OI5Y+v6IO9LS0nLFxyXG4gICAgICBjbjogJy0tJDHlj6/pgInkuK0tLScsXHJcbiAgICAgIGtvOiAnLS0kMe2DgOqynyDqsIDriqUtLScsXHJcbiAgICB9LFxyXG4gICAgJy0tdGVsZXBvcnQtLSc6IHtcclxuICAgICAgZGU6ICctLXRlbGVwb3J0YXRpb24tLScsXHJcbiAgICAgIGZyOiAnLS10w6lsw6lwb3J0YXRpb24tLScsXHJcbiAgICAgIGphOiAnLS3jg4bjg6zjg53jg7zjg4gtLScsXHJcbiAgICAgIGNuOiAnLS3kvKDpgIEtLScsXHJcbiAgICAgIGtvOiAnLS3siJzqsIQg7J2064+ZLS0nLFxyXG4gICAgfSxcclxuICAgICctLXVudGFyZ2V0YWJsZS0tJzoge1xyXG4gICAgICBkZTogJy0tbmljaCBhbnZpc2llcmJhci0tJyxcclxuICAgICAgZnI6ICctLW5vbiBjaWJsYWJsZS0tJyxcclxuICAgICAgamE6ICctLeOCv+ODvOOCsuODg+ODiOS4jeWPry0tJyxcclxuICAgICAgY246ICctLeaXoOazlemAieS4rS0tJyxcclxuICAgICAga286ICctLe2DgOqynyDrtojqsIDriqUtLScsXHJcbiAgICB9LFxyXG4gICAgJy0td2VzdC0tJzoge1xyXG4gICAgICBkZTogJy0tV2VzdGVuLS0nLFxyXG4gICAgICBmcjogJy0tT3Vlc3QtLScsXHJcbiAgICAgIGphOiAnLS3opb8tLScsXHJcbiAgICAgIGNuOiAnLS3opb8tLScsXHJcbiAgICAgIGtvOiAnLS3shJzsqr0tLScsXHJcbiAgICB9LFxyXG4gICAgW3RleHRLZXlzLkVdOiB7XHJcbiAgICAgIGRlOiAnTycsXHJcbiAgICAgIGZyOiAnRScsXHJcbiAgICAgIGphOiAn5p2xJyxcclxuICAgICAgY246ICfkuJwnLFxyXG4gICAgICBrbzogJ+uPmScsXHJcbiAgICB9LFxyXG4gICAgW3RleHRLZXlzLk5dOiB7XHJcbiAgICAgIGRlOiAnTicsXHJcbiAgICAgIGZyOiAnTicsXHJcbiAgICAgIGphOiAn5YyXJyxcclxuICAgICAgY246ICfljJcnLFxyXG4gICAgICBrbzogJ+u2gScsXHJcbiAgICB9LFxyXG4gICAgW3RleHRLZXlzLlNdOiB7XHJcbiAgICAgIGRlOiAnUycsXHJcbiAgICAgIGZyOiAnUycsXHJcbiAgICAgIGphOiAn5Y2XJyxcclxuICAgICAgY246ICfljZcnLFxyXG4gICAgICBrbzogJ+uCqCcsXHJcbiAgICB9LFxyXG4gICAgW3RleHRLZXlzLlddOiB7XHJcbiAgICAgIGRlOiAnVycsXHJcbiAgICAgIGZyOiAnTycsXHJcbiAgICAgIGphOiAn6KW/JyxcclxuICAgICAgY246ICfopb8nLFxyXG4gICAgICBrbzogJ+yEnCcsXHJcbiAgICB9LFxyXG4gICAgW3RleHRLZXlzLk5FXToge1xyXG4gICAgICBkZTogJ05PJyxcclxuICAgICAgZnI6ICdORScsXHJcbiAgICAgIGphOiAn5YyX5p2xJyxcclxuICAgICAgY246ICfkuJzljJcnLFxyXG4gICAgICBrbzogJ+u2geuPmScsXHJcbiAgICB9LFxyXG4gICAgW3RleHRLZXlzLk5XXToge1xyXG4gICAgICBkZTogJ05XJyxcclxuICAgICAgZnI6ICdOTycsXHJcbiAgICAgIGphOiAn5YyX6KW/JyxcclxuICAgICAgY246ICfopb/ljJcnLFxyXG4gICAgICBrbzogJ+u2geyEnCcsXHJcbiAgICB9LFxyXG4gICAgW3RleHRLZXlzLlNFXToge1xyXG4gICAgICBkZTogJ1NPJyxcclxuICAgICAgZnI6ICdTRScsXHJcbiAgICAgIGphOiAn5Y2X5p2xJyxcclxuICAgICAgY246ICfkuJzljZcnLFxyXG4gICAgICBrbzogJ+uCqOuPmScsXHJcbiAgICB9LFxyXG4gICAgW3RleHRLZXlzLlNXXToge1xyXG4gICAgICBkZTogJ1NXJyxcclxuICAgICAgZnI6ICdTTycsXHJcbiAgICAgIGphOiAn5Y2X6KW/JyxcclxuICAgICAgY246ICfopb/ljZcnLFxyXG4gICAgICBrbzogJ+uCqOyEnCcsXHJcbiAgICB9LFxyXG4gICAgW3RleHRLZXlzLlRhbmtdOiB7XHJcbiAgICAgIGRlOiAnVGFuaycsXHJcbiAgICAgIGZyOiAnVGFuaycsXHJcbiAgICAgIGphOiAn44K/44Oz44KvJyxcclxuICAgICAgY246ICflnablhYsnLFxyXG4gICAgICBrbzogJ+2Dsey7pCcsXHJcbiAgICB9LFxyXG4gICAgW3RleHRLZXlzLkhlYWxlcl06IHtcclxuICAgICAgZGU6ICdIZWlsZXInLFxyXG4gICAgICBmcjogJ0hlYWxlcicsXHJcbiAgICAgIGphOiAn44OS44O844Op44O8JyxcclxuICAgICAgY246ICfmsrvnlpcnLFxyXG4gICAgICBrbzogJ+2ekOufrCcsXHJcbiAgICB9LFxyXG4gICAgW3RleHRLZXlzLkRQU106IHtcclxuICAgICAgZGU6ICdEUFMnLFxyXG4gICAgICBmcjogJ0RQUycsXHJcbiAgICAgIGphOiAnRFBTJyxcclxuICAgICAgY246ICdEUFMnLFxyXG4gICAgICBrbzogJ+uUnOufrCcsXHJcbiAgICB9LFxyXG4gICAgW3RleHRLZXlzLk51bWJlcl06IHtcclxuICAgICAgZGU6ICctLSQxLS0nLFxyXG4gICAgICBmcjogJy0tJDEtLScsXHJcbiAgICAgIGphOiAnLS0kMS0tJyxcclxuICAgICAgY246ICctLSQxLS0nLFxyXG4gICAgICBrbzogJy0tJDEtLScsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBLZXlzIGludG8gY29tbW9uUmVwbGFjZW1lbnQgb2JqZWN0cyB0aGF0IHJlcHJlc2VudCBcInBhcnRpYWxcIiB0cmFuc2xhdGlvbnMsXHJcbi8vIGluIHRoZSBzZW5zZSB0aGF0IGV2ZW4gaWYgaXQgYXBwbGllcywgdGhlcmUgc3RpbGwgbmVlZHMgdG8gYmUgYW5vdGhlclxyXG4vLyB0cmFuc2xhdGlvbiBmb3IgaXQgdG8gYmUgY29tcGxldGUuICBUaGVzZSBrZXlzIHNob3VsZCBiZSBleGFjdGx5IHRoZSBzYW1lXHJcbi8vIGFzIHRoZSBrZXlzIGZyb20gdGhlIGNvbW1vblJlcGxhY2VtZW50IGJsb2NrIGFib3ZlLiAgVGhlc2UgYXJlIHVzZWQgZm9yXHJcbi8vIHRpbWVsaW5lIHJlZ2V4ZXMgb25seS5cclxuZXhwb3J0IGNvbnN0IHBhcnRpYWxDb21tb25UaW1lbGluZVJlcGxhY2VtZW50S2V5cyA9IFtcclxuICAvLyBCZWNhdXNlIHRoZSB6b25lIG5hbWUgbmVlZHMgdG8gYmUgdHJhbnNsYXRlZCBoZXJlLCB0aGlzIGlzIHBhcnRpYWwuXHJcbiAgc3luY0tleXMuc2VhbCxcclxuICAvLyBEaXJlY3Rpb25zXHJcbiAgdGV4dEtleXMuRSxcclxuICB0ZXh0S2V5cy5OLFxyXG4gIHRleHRLZXlzLlMsXHJcbiAgdGV4dEtleXMuVyxcclxuICB0ZXh0S2V5cy5ORSxcclxuICB0ZXh0S2V5cy5OVyxcclxuICB0ZXh0S2V5cy5TRSxcclxuICB0ZXh0S2V5cy5TVyxcclxuICAvLyBSb2xlc1xyXG4gIHRleHRLZXlzLlRhbmssXHJcbiAgdGV4dEtleXMuSGVhbGVyLFxyXG4gIHRleHRLZXlzLkRQUyxcclxuXTtcclxuXHJcbi8vIFNhbWUgYXMgdGhlIHRpbWVsaW5lIHZlcnNpb24gYWJvdmUsIGJ1dCBvbmx5IGZvciB0cmlnZ2VyIHJlZ2V4ZXMuXHJcbmV4cG9ydCBjb25zdCBwYXJ0aWFsQ29tbW9uVHJpZ2dlclJlcGxhY2VtZW50S2V5cyA9IFtcclxuICAvLyBCZWNhdXNlIHRoZSB6b25lIG5hbWUgbmVlZHMgdG8gYmUgdHJhbnNsYXRlZCBoZXJlLCB0aGlzIGlzIHBhcnRpYWwuXHJcbiAgc3luY0tleXMuc2VhbCxcclxuXTtcclxuIiwiaW1wb3J0IHsgQ2FjdGJvdEJhc2VSZWdFeHAgfSBmcm9tICcuLi90eXBlcy9uZXRfdHJpZ2dlcic7XHJcbmltcG9ydCB7XHJcbiAgY29tbW9uUmVwbGFjZW1lbnQsXHJcbiAgcGFydGlhbENvbW1vblRpbWVsaW5lUmVwbGFjZW1lbnRLZXlzLFxyXG4gIHBhcnRpYWxDb21tb25UcmlnZ2VyUmVwbGFjZW1lbnRLZXlzLFxyXG59IGZyb20gJy4uL3VpL3JhaWRib3NzL2NvbW1vbl9yZXBsYWNlbWVudCc7XHJcbmltcG9ydCB7IFRpbWVsaW5lUmVwbGFjZW1lbnQgfSBmcm9tICcuLi91aS9yYWlkYm9zcy90aW1lbGluZV9wYXJzZXInO1xyXG5cclxuaW1wb3J0IHsgTGFuZyB9IGZyb20gJy4vbGFuZ3VhZ2VzJztcclxuaW1wb3J0IE5ldFJlZ2V4ZXMgZnJvbSAnLi9uZXRyZWdleGVzJztcclxuaW1wb3J0IFJlZ2V4ZXMgZnJvbSAnLi9yZWdleGVzJztcclxuXHJcbi8vIEZpbGwgaW4gTG9jYWxlUmVnZXggc28gdGhhdCB0aGluZ3MgbGlrZSBMb2NhbGVSZWdleC5jb3VudGRvd25TdGFydC5kZSBpcyBhIHZhbGlkIHJlZ2V4LlxyXG5jb25zdCBsb2NhbGVMaW5lcyA9IHtcclxuICBjb3VudGRvd25TdGFydDoge1xyXG4gICAgZW46ICdCYXR0bGUgY29tbWVuY2luZyBpbiAoPzx0aW1lPlxcXFx5e0Zsb2F0fSkgc2Vjb25kcyEgXFxcXCgoPzxwbGF5ZXI+Lio/KVxcXFwpJyxcclxuICAgIGRlOiAnTm9jaCAoPzx0aW1lPlxcXFx5e0Zsb2F0fSkgU2VrdW5kZW4gYmlzIEthbXBmYmVnaW5uISBcXFxcKCg/PHBsYXllcj4uKj8pXFxcXCknLFxyXG4gICAgZnI6ICdEw6lidXQgZHUgY29tYmF0IGRhbnMgKD88dGltZT5cXFxceXtGbG9hdH0pIHNlY29uZGVzWyBdPyEgXFxcXCgoPzxwbGF5ZXI+Lio/KVxcXFwpJyxcclxuICAgIGphOiAn5oim6ZeY6ZaL5aeL44G+44GnKD88dGltZT5cXFxceXtGbG9hdH0p56eS77yBIO+8iCg/PHBsYXllcj4uKj8p77yJJyxcclxuICAgIGNuOiAn6Led56a75oiY5paX5byA5aeL6L+Y5pyJKD88dGltZT5cXFxceXtGbG9hdH0p56eS77yBIO+8iCg/PHBsYXllcj4uKj8p77yJJyxcclxuICAgIGtvOiAn7KCE7YisIOyLnOyekSAoPzx0aW1lPlxcXFx5e0Zsb2F0fSnstIgg7KCEISBcXFxcKCg/PHBsYXllcj4uKj8pXFxcXCknLFxyXG4gIH0sXHJcbiAgY291bnRkb3duRW5nYWdlOiB7XHJcbiAgICBlbjogJ0VuZ2FnZSEnLFxyXG4gICAgZGU6ICdTdGFydCEnLFxyXG4gICAgZnI6ICfDgCBsXFwnYXR0YXF1ZVsgXT8hJyxcclxuICAgIGphOiAn5oim6ZeY6ZaL5aeL77yBJyxcclxuICAgIGNuOiAn5oiY5paX5byA5aeL77yBJyxcclxuICAgIGtvOiAn7KCE7YisIOyLnOyekSEnLFxyXG4gIH0sXHJcbiAgY291bnRkb3duQ2FuY2VsOiB7XHJcbiAgICBlbjogJ0NvdW50ZG93biBjYW5jZWxlZCBieSAoPzxwbGF5ZXI+XFxcXHl7TmFtZX0pJyxcclxuICAgIGRlOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KSBoYXQgZGVuIENvdW50ZG93biBhYmdlYnJvY2hlbicsXHJcbiAgICBmcjogJ0xlIGNvbXB0ZSDDoCByZWJvdXJzIGEgw6l0w6kgaW50ZXJyb21wdSBwYXIgKD88cGxheWVyPlxcXFx5e05hbWV9KVsgXT9cXFxcLicsXHJcbiAgICBqYTogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnjgavjgojjgorjgIHmiKbpl5jplovlp4vjgqvjgqbjg7Pjg4jjgYzjgq3jg6Pjg7Pjgrvjg6vjgZXjgozjgb7jgZfjgZ/jgIInLFxyXG4gICAgY246ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p5Y+W5raI5LqG5oiY5paX5byA5aeL5YCS6K6h5pe244CCJyxcclxuICAgIGtvOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KSDri5jsnbQg7LSI7J296riw66W8IOy3qOyGjO2WiOyKteuLiOuLpFxcXFwuJyxcclxuICB9LFxyXG4gIGFyZWFTZWFsOiB7XHJcbiAgICBlbjogJyg/PGFyZWE+Lio/KSB3aWxsIGJlIHNlYWxlZCBvZmYgaW4gKD88dGltZT5cXFxceXtGbG9hdH0pIHNlY29uZHMhJyxcclxuICAgIGRlOiAnTm9jaCAoPzx0aW1lPlxcXFx5e0Zsb2F0fSkgU2VrdW5kZW4sIGJpcyBzaWNoICg/PGFyZWE+Lio/KSBzY2hsaWXDn3QnLFxyXG4gICAgZnI6ICdGZXJtZXR1cmUgKD88YXJlYT4uKj8pIGRhbnMgKD88dGltZT5cXFxceXtGbG9hdH0pIHNlY29uZGVzWyBdP1xcXFwuJyxcclxuICAgIGphOiAnKD88YXJlYT4uKj8p44Gu5bCB6Y6W44G+44Gn44GC44GoKD88dGltZT5cXFxceXtGbG9hdH0p56eSJyxcclxuICAgIGNuOiAn6LedKD88YXJlYT4uKj8p6KKr5bCB6ZSB6L+Y5pyJKD88dGltZT5cXFxceXtGbG9hdH0p56eSJyxcclxuICAgIGtvOiAnKD88dGltZT5cXFxceXtGbG9hdH0p7LSIIO2bhOyXkCAoPzxhcmVhPi4qPyko7J20fOqwgCkg67SJ7IeE65Cp64uI64ukXFxcXC4nLFxyXG4gIH0sXHJcbiAgYXJlYVVuc2VhbDoge1xyXG4gICAgZW46ICcoPzxhcmVhPi4qPykgaXMgbm8gbG9uZ2VyIHNlYWxlZC4nLFxyXG4gICAgZGU6ICcoPzxhcmVhPi4qPykgw7ZmZm5ldCBzaWNoIGVybmV1dC4nLFxyXG4gICAgZnI6ICdPdXZlcnR1cmUgKD88YXJlYT4uKj8pWyBdPyEnLFxyXG4gICAgamE6ICcoPzxhcmVhPi4qPynjga7lsIHpjpbjgYzop6PjgYvjgozjgZ/igKbigKYnLFxyXG4gICAgY246ICcoPzxhcmVhPi4qPynnmoTlsIHplIHop6PpmaTkuoYnLFxyXG4gICAga286ICcoPzxhcmVhPi4qPynsnZgg67SJ7IeE6rCAIO2VtOygnOuQmOyXiOyKteuLiOuLpFxcXFwuJyxcclxuICB9LFxyXG4gIC8vIFJlY2lwZSBuYW1lIGFsd2F5cyBzdGFydCB3aXRoIFxcdWUwYmJcclxuICAvLyBIUSBpY29uIGlzIFxcdWUwM2NcclxuICBjcmFmdGluZ1N0YXJ0OiB7XHJcbiAgICBlbjogJ1lvdSBiZWdpbiBzeW50aGVzaXppbmcgKD88Y291bnQ+KGFuP3xcXFxcZCspICk/XFx1ZTBiYig/PHJlY2lwZT4uKilcXFxcLicsXHJcbiAgICBkZTpcclxuICAgICAgJ0R1IGhhc3QgYmVnb25uZW4sIGR1cmNoIFN5bnRoZXNlICg/PGNvdW50PihlaW4oZXxlc3xlbXxlcik/fFxcXFxkKykgKT9cXHVlMGJiKD88cmVjaXBlPi4qKSBoZXJ6dXN0ZWxsZW5cXFxcLicsXHJcbiAgICBmcjogJ1ZvdXMgY29tbWVuY2V6IMOgIGZhYnJpcXVlciAoPzxjb3VudD4odW5lP3xcXFxcZCspICk/XFx1ZTBiYig/PHJlY2lwZT4uKilcXFxcLicsXHJcbiAgICBqYTogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnjga9cXHVlMGJiKD88cmVjaXBlPi4qKSjDlyg/PGNvdW50PlxcXFxkKykpP+OBruijveS9nOOCkumWi+Wni+OBl+OBn+OAgicsXHJcbiAgICBjbjogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnlvIDlp4vliLbkvZzigJxcXHVlMGJiKD88cmVjaXBlPi4qKeKAnSjDlyg/PGNvdW50PlxcXFxkKykpP+OAgicsXHJcbiAgICBrbzogJ1xcdWUwYmIoPzxyZWNpcGU+LiopKMOXKD88Y291bnQ+XFxcXGQrKeqwnCk/IOygnOyekeydhCDsi5zsnpHtlanri4jri6RcXFxcLicsXHJcbiAgfSxcclxuICB0cmlhbENyYWZ0aW5nU3RhcnQ6IHtcclxuICAgIGVuOiAnWW91IGJlZ2luIHRyaWFsIHN5bnRoZXNpcyBvZiBcXHVlMGJiKD88cmVjaXBlPi4qKVxcXFwuJyxcclxuICAgIGRlOiAnRHUgaGFzdCBtaXQgZGVyIFRlc3RzeW50aGVzZSB2b24gXFx1ZTBiYig/PHJlY2lwZT4uKikgYmVnb25uZW5cXFxcLicsXHJcbiAgICBmcjogJ1ZvdXMgY29tbWVuY2V6IHVuZSBzeW50aMOoc2UgZFxcJ2Vzc2FpIHBvdXIgdW5lPyBcXHVlMGJiKD88cmVjaXBlPi4qKVxcXFwuJyxcclxuICAgIGphOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeOBr1xcdWUwYmIoPzxyZWNpcGU+Liop44Gu6KO95L2c57e057+S44KS6ZaL5aeL44GX44Gf44CCJyxcclxuICAgIGNuOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeW8gOWni+e7g+S5oOWItuS9nFxcdWUwYmIoPzxyZWNpcGU+Liop44CCJyxcclxuICAgIGtvOiAnXFx1ZTBiYig/PHJlY2lwZT4uKikg7KCc7J6RIOyXsOyKteydhCDsi5zsnpHtlanri4jri6RcXFxcLicsXHJcbiAgfSxcclxuICBjcmFmdGluZ0ZpbmlzaDoge1xyXG4gICAgZW46ICdZb3Ugc3ludGhlc2l6ZSAoPzxjb3VudD4oYW4/fFxcXFxkKykgKT9cXHVlMGJiKD88cmVjaXBlPi4qKShcXHVlMDNjKT9cXFxcLicsXHJcbiAgICBkZTpcclxuICAgICAgJ0R1IGhhc3QgZXJmb2xncmVpY2ggKD88Y291bnQ+KGVpbihlfGVzfGVtfGVyKT98XFxcXGQrKSApPyg/PHJlY2lwZT4uKikoXFx1ZTAzYyk/IGhlcmdlc3RlbGx0XFxcXC4nLFxyXG4gICAgZnI6ICdWb3VzIGZhYnJpcXVleiAoPzxjb3VudD4odW5lP3xcXFxcZCspICk/XFx1ZTBiYig/PHJlY2lwZT4uKikoXFx1ZTAzYyk/XFxcXC4nLFxyXG4gICAgamE6ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p44GvXFx1ZTBiYig/PHJlY2lwZT4uKikoXFx1ZTAzYyk/KMOXKD88Y291bnQ+XFxcXGQrKSk/44KS5a6M5oiQ44GV44Gb44Gf77yBJyxcclxuICAgIGNuOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeWItuS9nOKAnFxcdWUwYmIoPzxyZWNpcGU+LiopKFxcdWUwM2MpP+KAnSjDlyg/PGNvdW50PlxcXFxkKykpP+aIkOWKn++8gScsXHJcbiAgICBrbzogJyg/PHBsYXllcj5cXFxceXtOYW1lfSkg64uY7J20IFxcdWUwYmIoPzxyZWNpcGU+LiopKFxcdWUwM2MpPyjDlyg/PGNvdW50PlxcXFxkKynqsJwpPyjsnYR866W8KSDsmYTshLHtlojsirXri4jri6QhJyxcclxuICB9LFxyXG4gIHRyaWFsQ3JhZnRpbmdGaW5pc2g6IHtcclxuICAgIGVuOiAnWW91ciB0cmlhbCBzeW50aGVzaXMgb2YgXFx1ZTBiYig/PHJlY2lwZT4uKikgcHJvdmVkIGEgc3VjY2VzcyEnLFxyXG4gICAgZGU6ICdEaWUgVGVzdHN5bnRoZXNlIHZvbiBcXHVlMGJiKD88cmVjaXBlPi4qKSB3YXIgZXJmb2xncmVpY2ghJyxcclxuICAgIGZyOiAnVm90cmUgc3ludGjDqHNlIGRcXCdlc3NhaSBwb3VyIGZhYnJpcXVlciBcXHVlMGJiKD88cmVjaXBlPi4qKSBhIMOpdMOpIGNvdXJvbm7DqWUgZGUgc3VjY8OocyEnLFxyXG4gICAgamE6ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p44GvXFx1ZTBiYig/PHJlY2lwZT4uKinjga7oo73kvZznt7Tnv5LjgavmiJDlip/jgZfjgZ/vvIEnLFxyXG4gICAgY246ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p57uD5Lmg5Yi25L2cXFx1ZTBiYig/PHJlY2lwZT4uKinmiJDlip/kuobvvIEnLFxyXG4gICAga286ICdcXHVlMGJiKD88cmVjaXBlPi4qKSDsoJzsnpEg7Jew7Iq17JeQIOyEseqzte2WiOyKteuLiOuLpCEnLFxyXG4gIH0sXHJcbiAgY3JhZnRpbmdGYWlsOiB7XHJcbiAgICBlbjogJ1lvdXIgc3ludGhlc2lzIGZhaWxzIScsXHJcbiAgICBkZTogJ0RlaW5lIFN5bnRoZXNlIGlzdCBmZWhsZ2VzY2hsYWdlbiEnLFxyXG4gICAgZnI6ICdMYSBzeW50aMOoc2Ugw6ljaG91ZVxcXFwuezN9JyxcclxuICAgIGphOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeOBr+ijveS9nOOBq+WkseaVl+OBl+OBn+KApuKApicsXHJcbiAgICBjbjogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnliLbkvZzlpLHotKXkuobigKbigKYnLFxyXG4gICAga286ICfsoJzsnpHsl5Ag7Iuk7Yyo7ZaI7Iq164uI64uk4oCm4oCmXFxcXC4nLFxyXG4gIH0sXHJcbiAgdHJpYWxDcmFmdGluZ0ZhaWw6IHtcclxuICAgIGVuOiAnWW91ciB0cmlhbCBzeW50aGVzaXMgb2YgXFx1ZTBiYig/PHJlY2lwZT4uKikgZmFpbGVkXFxcXC57M30nLFxyXG4gICAgZGU6ICdEaWUgVGVzdHN5bnRoZXNlIHZvbiBcXHVlMGJiKD88cmVjaXBlPi4qKSBpc3QgZmVobGdlc2NobGFnZW5cXFxcLnszfScsXHJcbiAgICBmcjpcclxuICAgICAgJ1ZvdHJlIHN5bnRow6hzZSBkXFwnZXNzYWkgcG91ciBmYWJyaXF1ZXIgXFx1ZTBiYig/PHJlY2lwZT4uKikgc1xcJ2VzdCBzb2xkw6llIHBhciB1biDDqWNoZWNcXFxcLnszfScsXHJcbiAgICBqYTogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnjga9cXHVlMGJiKD88cmVjaXBlPi4qKeOBruijveS9nOe3tOe/kuOBq+WkseaVl+OBl+OBn+KApuKApicsXHJcbiAgICBjbjogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnnu4PkuaDliLbkvZxcXHVlMGJiKD88cmVjaXBlPi4qKeWksei0peS6huKApuKApicsXHJcbiAgICBrbzogJ1xcdWUwYmIoPzxyZWNpcGU+LiopIOygnOyekSDsl7DsirXsl5Ag7Iuk7Yyo7ZaI7Iq164uI64uk4oCm4oCmXFxcXC4nLFxyXG4gIH0sXHJcbiAgY3JhZnRpbmdDYW5jZWw6IHtcclxuICAgIGVuOiAnWW91IGNhbmNlbCB0aGUgc3ludGhlc2lzXFxcXC4nLFxyXG4gICAgZGU6ICdEdSBoYXN0IGRpZSBTeW50aGVzZSBhYmdlYnJvY2hlblxcXFwuJyxcclxuICAgIGZyOiAnTGEgc3ludGjDqHNlIGVzdCBhbm51bMOpZVxcXFwuJyxcclxuICAgIGphOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeOBr+ijveS9nOOCkuS4reatouOBl+OBn+OAgicsXHJcbiAgICBjbjogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnkuK3mraLkuobliLbkvZzkvZzkuJrjgIInLFxyXG4gICAga286ICfsoJzsnpHsnYQg7KSR7KeA7ZaI7Iq164uI64ukXFxcXC4nLFxyXG4gIH0sXHJcbiAgdHJpYWxDcmFmdGluZ0NhbmNlbDoge1xyXG4gICAgZW46ICdZb3UgYWJhbmRvbmVkIHRyaWFsIHN5bnRoZXNpc1xcXFwuJyxcclxuICAgIGRlOiAnVGVzdHN5bnRoZXNlIGFiZ2Vicm9jaGVuXFxcXC4nLFxyXG4gICAgZnI6ICdWb3VzIGF2ZXogaW50ZXJyb21wdSBsYSBzeW50aMOoc2UgZFxcJ2Vzc2FpXFxcXC4nLFxyXG4gICAgamE6ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p44Gv6KO95L2c57e057+S44KS5Lit5q2i44GX44Gf44CCJyxcclxuICAgIGNuOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeWBnOatouS6hue7g+S5oOOAgicsXHJcbiAgICBrbzogJ+ygnOyekSDsl7DsirXsnYQg7KSR7KeA7ZaI7Iq164uI64ukXFxcXC4nLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcblxyXG50eXBlIExvY2FsZUxpbmUgPSB7IGVuOiBzdHJpbmcgfSAmIFBhcnRpYWw8UmVjb3JkPEV4Y2x1ZGU8TGFuZywgJ2VuJz4sIHN0cmluZz4+O1xyXG5cclxudHlwZSBMb2NhbGVSZWdleGVzT2JqID0gUmVjb3JkPGtleW9mIHR5cGVvZiBsb2NhbGVMaW5lcywgUmVjb3JkPExhbmcsIFJlZ0V4cD4+O1xyXG5cclxuY2xhc3MgUmVnZXhTZXQge1xyXG4gIHJlZ2V4ZXM/OiBMb2NhbGVSZWdleGVzT2JqO1xyXG4gIG5ldFJlZ2V4ZXM/OiBMb2NhbGVSZWdleGVzT2JqO1xyXG5cclxuICBnZXQgbG9jYWxlUmVnZXgoKTogTG9jYWxlUmVnZXhlc09iaiB7XHJcbiAgICBpZiAodGhpcy5yZWdleGVzKVxyXG4gICAgICByZXR1cm4gdGhpcy5yZWdleGVzO1xyXG4gICAgdGhpcy5yZWdleGVzID0gdGhpcy5idWlsZExvY2FsZVJlZ2V4ZXMoXHJcbiAgICAgIGxvY2FsZUxpbmVzLFxyXG4gICAgICAoczogc3RyaW5nKSA9PiBSZWdleGVzLmdhbWVMb2coeyBsaW5lOiBzICsgJy4qPycgfSksXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHRoaXMucmVnZXhlcztcclxuICB9XHJcblxyXG4gIGdldCBsb2NhbGVOZXRSZWdleCgpOiBMb2NhbGVSZWdleGVzT2JqIHtcclxuICAgIGlmICh0aGlzLm5ldFJlZ2V4ZXMpXHJcbiAgICAgIHJldHVybiB0aGlzLm5ldFJlZ2V4ZXM7XHJcbiAgICB0aGlzLm5ldFJlZ2V4ZXMgPSB0aGlzLmJ1aWxkTG9jYWxlUmVnZXhlcyhcclxuICAgICAgbG9jYWxlTGluZXMsXHJcbiAgICAgIChzOiBzdHJpbmcpID0+IE5ldFJlZ2V4ZXMuZ2FtZUxvZyh7IGxpbmU6IHMgKyAnW158XSo/JyB9KSxcclxuICAgICk7XHJcbiAgICByZXR1cm4gdGhpcy5uZXRSZWdleGVzO1xyXG4gIH1cclxuXHJcbiAgYnVpbGRMb2NhbGVSZWdleGVzKFxyXG4gICAgbG9jYWxlczogdHlwZW9mIGxvY2FsZUxpbmVzLFxyXG4gICAgYnVpbGRlcjogKHM6IHN0cmluZykgPT4gQ2FjdGJvdEJhc2VSZWdFeHA8J0dhbWVMb2cnPiB8IFJlZ0V4cCxcclxuICApOiBMb2NhbGVSZWdleGVzT2JqIHtcclxuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXHJcbiAgICAgIE9iamVjdFxyXG4gICAgICAgIC5lbnRyaWVzKGxvY2FsZXMpXHJcbiAgICAgICAgLm1hcCgoW2tleSwgbGluZXNdKSA9PiBba2V5LCB0aGlzLmJ1aWxkTG9jYWxlUmVnZXgobGluZXMsIGJ1aWxkZXIpXSksXHJcbiAgICApIGFzIExvY2FsZVJlZ2V4ZXNPYmo7XHJcbiAgfVxyXG5cclxuICBidWlsZExvY2FsZVJlZ2V4KFxyXG4gICAgbGluZXM6IExvY2FsZUxpbmUsXHJcbiAgICBidWlsZGVyOiAoczogc3RyaW5nKSA9PiBDYWN0Ym90QmFzZVJlZ0V4cDwnR2FtZUxvZyc+IHwgUmVnRXhwLFxyXG4gICk6IFJlY29yZDxMYW5nLCBDYWN0Ym90QmFzZVJlZ0V4cDwnR2FtZUxvZyc+IHwgUmVnRXhwPiB7XHJcbiAgICBjb25zdCByZWdleEVuID0gYnVpbGRlcihsaW5lcy5lbik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBlbjogcmVnZXhFbixcclxuICAgICAgZGU6IGxpbmVzLmRlICE9PSB1bmRlZmluZWQgPyBidWlsZGVyKGxpbmVzLmRlKSA6IHJlZ2V4RW4sXHJcbiAgICAgIGZyOiBsaW5lcy5mciAhPT0gdW5kZWZpbmVkID8gYnVpbGRlcihsaW5lcy5mcikgOiByZWdleEVuLFxyXG4gICAgICBqYTogbGluZXMuamEgIT09IHVuZGVmaW5lZCA/IGJ1aWxkZXIobGluZXMuamEpIDogcmVnZXhFbixcclxuICAgICAgY246IGxpbmVzLmNuICE9PSB1bmRlZmluZWQgPyBidWlsZGVyKGxpbmVzLmNuKSA6IHJlZ2V4RW4sXHJcbiAgICAgIGtvOiBsaW5lcy5rbyAhPT0gdW5kZWZpbmVkID8gYnVpbGRlcihsaW5lcy5rbykgOiByZWdleEVuLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHJlZ2V4U2V0ID0gbmV3IFJlZ2V4U2V0KCk7XHJcblxyXG5leHBvcnQgY29uc3QgTG9jYWxlUmVnZXggPSByZWdleFNldC5sb2NhbGVSZWdleDtcclxuZXhwb3J0IGNvbnN0IExvY2FsZU5ldFJlZ2V4ID0gcmVnZXhTZXQubG9jYWxlTmV0UmVnZXg7XHJcblxyXG4vLyBUcmFuc2xhdGUgYSB0cmlnZ2VyIG9yIHRpbWVsaW5lIHJlZ2V4IChyZXBsYWNlU3luYykgb3IgdGltZWxpbmUgdGV4dCAocmVwbGFjZVRleHQpLFxyXG4vLyByZXR1cm5pbmcgdGhlIHRleHQgYW5kIHdoZXRoZXIgb3Igbm90IGl0IGNhbiBiZSBjb25zaWRlcmVkIFwidHJhbnNsYXRlZFwiLlxyXG4vLyBOb3RlLCB0aGlzIHdvbid0IGNhdGNoIGFueXRoaW5nIHRoYXQgbmVlZHMgbXVsdGlwbGUgdHJhbnNsYXRpb25zLCBidXQgd2lsbCBjYXRjaFxyXG4vLyBhbnl0aGluZyBmcm9tIGNvbW1vbiB0cmFuc2xhdGlvbnMgdGhhdCBhcmUgcGFydGlhbCAoZS5nLiBhIHNlYWwgcmVnZXggbmVlZHNcclxuLy8gYSB6b25lIG5hbWUgdG8gYmUgY29uc2lkZXJlZCBhIGZ1bGwgdHJhbnNsYXRpb24uXHJcbmV4cG9ydCBjb25zdCB0cmFuc2xhdGVXaXRoUmVwbGFjZW1lbnRzID0gKFxyXG4gIHRleHQ6IHN0cmluZyxcclxuICByZXBsYWNlS2V5OiAncmVwbGFjZVN5bmMnIHwgJ3JlcGxhY2VUZXh0JyxcclxuICByZXBsYWNlTGFuZzogTGFuZyxcclxuICByZXBsYWNlbWVudHM/OiBUaW1lbGluZVJlcGxhY2VtZW50W10sXHJcbik6IHsgdGV4dDogc3RyaW5nOyB3YXNUcmFuc2xhdGVkOiBib29sZWFuIH0gPT4ge1xyXG4gIC8vIEFsbCByZWdleCByZXBsYWNlbWVudHMgYXJlIGFsd2F5cyBnbG9iYWwuXHJcbiAgY29uc3QgaXNHbG9iYWwgPSByZXBsYWNlS2V5ID09PSAncmVwbGFjZVN5bmMnO1xyXG5cclxuICBsZXQgd2FzVHJhbnNsYXRlZCA9IGZhbHNlO1xyXG4gIGZvciAoY29uc3QgciBvZiByZXBsYWNlbWVudHMgPz8gW10pIHtcclxuICAgIGlmIChyLmxvY2FsZSAmJiByLmxvY2FsZSAhPT0gcmVwbGFjZUxhbmcpXHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgY29uc3QgcmVwcyA9IHJbcmVwbGFjZUtleV07XHJcbiAgICBpZiAoIXJlcHMpXHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocmVwcykpIHtcclxuICAgICAgY29uc3QgcmVnZXggPSBpc0dsb2JhbCA/IFJlZ2V4ZXMucGFyc2VHbG9iYWwoa2V5KSA6IFJlZ2V4ZXMucGFyc2Uoa2V5KTtcclxuICAgICAgaWYgKHRleHQubWF0Y2gocmVnZXgpKVxyXG4gICAgICAgIHdhc1RyYW5zbGF0ZWQgPSB0cnVlO1xyXG4gICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHJlZ2V4LCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBDb21tb24gUmVwbGFjZW1lbnRzXHJcbiAgY29uc3QgcmVwbGFjZW1lbnQgPSBjb21tb25SZXBsYWNlbWVudFtyZXBsYWNlS2V5XTtcclxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhyZXBsYWNlbWVudCA/PyB7fSkpIHtcclxuICAgIGNvbnN0IHJlcGwgPSB2YWx1ZVtyZXBsYWNlTGFuZ107XHJcbiAgICBpZiAocmVwbCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICBjb250aW51ZTtcclxuICAgIGNvbnN0IHJlZ2V4ID0gaXNHbG9iYWwgPyBSZWdleGVzLnBhcnNlR2xvYmFsKGtleSkgOiBSZWdleGVzLnBhcnNlKGtleSk7XHJcblxyXG4gICAgY29uc3QgcGFydGlhbEtleXMgPSByZXBsYWNlS2V5ID09PSAncmVwbGFjZVN5bmMnXHJcbiAgICAgID8gcGFydGlhbENvbW1vblRyaWdnZXJSZXBsYWNlbWVudEtleXNcclxuICAgICAgOiBwYXJ0aWFsQ29tbW9uVGltZWxpbmVSZXBsYWNlbWVudEtleXM7XHJcbiAgICBpZiAodGV4dC5tYXRjaChyZWdleCkpIHtcclxuICAgICAgLy8gQ29uc2lkZXIgYW55IHBhcnRpYWwgdHJhbnNsYXRpb25zIGFzIFwibm90IGZvdW5kXCIgKGUuZy4gYSBzZWFsXHJcbiAgICAgIC8vIG1lc3NhZ2UgdGhhdCBzdGlsbCBuZWVkcyB0aGUgem9uZSBuYW1lIHRvIGJlIHRyYW5zbGF0ZWQgdG8gYmVcclxuICAgICAgLy8gY29uc2lkZXJlZCBmdWxseSB0cmFuc2xhdGVkKS5cclxuICAgICAgbGV0IGlzUGFydGlhbCA9IGZhbHNlO1xyXG4gICAgICBmb3IgKGNvbnN0IHBhcnRpYWxLZXkgb2YgcGFydGlhbEtleXMpIHtcclxuICAgICAgICBpZiAoUmVnZXhlcy5wYXJzZUdsb2JhbChwYXJ0aWFsS2V5KS50ZXN0KGtleSkpIHtcclxuICAgICAgICAgIGlzUGFydGlhbCA9IHRydWU7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFpc1BhcnRpYWwpXHJcbiAgICAgICAgd2FzVHJhbnNsYXRlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZShyZWdleCwgcmVwbCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4geyB0ZXh0LCB3YXNUcmFuc2xhdGVkIH07XHJcbn07XHJcblxyXG4vLyBUcmFuc2xhdGVzIGEgdGltZWxpbmUgb3IgdHJpZ2dlciByZWdleCBmb3IgYSBnaXZlbiBsYW5ndWFnZS5cclxuZXhwb3J0IGNvbnN0IHRyYW5zbGF0ZVJlZ2V4ID0gKFxyXG4gIHRleHQ6IHN0cmluZyB8IFJlZ0V4cCxcclxuICByZXBsYWNlTGFuZzogTGFuZyxcclxuICByZXBsYWNlbWVudHM/OiBUaW1lbGluZVJlcGxhY2VtZW50W10sXHJcbik6IHN0cmluZyA9PiB7XHJcbiAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnc3RyaW5nJylcclxuICAgIHJldHVybiB0cmFuc2xhdGVXaXRoUmVwbGFjZW1lbnRzKHRleHQsICdyZXBsYWNlU3luYycsIHJlcGxhY2VMYW5nLCByZXBsYWNlbWVudHMpLnRleHQ7XHJcbiAgcmV0dXJuIHRyYW5zbGF0ZVdpdGhSZXBsYWNlbWVudHModGV4dC5zb3VyY2UsICdyZXBsYWNlU3luYycsIHJlcGxhY2VMYW5nLCByZXBsYWNlbWVudHMpLnRleHQ7XHJcbn07XHJcblxyXG4vLyBUcmFuc2xhdGVzIGEgdGltZWxpbmUgdGV4dCBmb3IgYSBnaXZlbiBsYW5ndWFnZS5cclxuZXhwb3J0IGNvbnN0IHRyYW5zbGF0ZVRleHQgPSAoXHJcbiAgdGV4dDogc3RyaW5nLFxyXG4gIHJlcGxhY2VMYW5nOiBMYW5nLFxyXG4gIHJlcGxhY2VtZW50cz86IFRpbWVsaW5lUmVwbGFjZW1lbnRbXSxcclxuKTogc3RyaW5nID0+IHRyYW5zbGF0ZVdpdGhSZXBsYWNlbWVudHModGV4dCwgJ3JlcGxhY2VUZXh0JywgcmVwbGFjZUxhbmcsIHJlcGxhY2VtZW50cykudGV4dDtcclxuIiwiaW1wb3J0IHsgRGFtYWdlVHJhY2tlciB9IGZyb20gJy4vZGFtYWdlX3RyYWNrZXInO1xyXG5cclxuLy8gSGFuZGxlcyB3aGVuIHRvIHN0YXJ0IGFuZCBzdG9wIGNvbWJhdC5cclxuLy8gT3V0c2lkZSBjYWxsZXJzIChlLmcuIERhbWFnZVRyYWNrZXIpIGNhbiBjYWxsIFN0YXJ0Q29tYmF0L1N0b3BDb21iYXQgYXMgbmVlZGVkIGZyb21cclxuLy8gdmFyaW91cyBzb3VyY2VzIChsaW5lcywgZXZlbnRzKSBhbmQgdGhpcyB3aWxsIGFwcGx5IGh5c3RlcmVzaXMgdG8gb25seSBlbWl0XHJcbi8vIE9uU3RhcnRFbmNvdW50ZXIvT25TdG9wRW5jb3VudGVyIGV2ZW50cyBiYWNrIHRvIERhbWFnZVRyYWNrZXIgb24gZWRnZSB0cmFuc2l0aW9ucy5cclxuZXhwb3J0IGNsYXNzIENvbWJhdFN0YXRlIHtcclxuICBwdWJsaWMgc3RhcnRUaW1lPzogbnVtYmVyO1xyXG4gIHB1YmxpYyBzdG9wVGltZT86IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkYW1hZ2VUcmFja2VyOiBEYW1hZ2VUcmFja2VyKSB7XHJcbiAgICB0aGlzLlJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICBSZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuc3RhcnRUaW1lID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5zdG9wVGltZSA9IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIFN0YXJ0Q29tYmF0KHRpbWVzdGFtcDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAvLyBXaXBpbmcgLyBpbiBjb21iYXQgc3RhdGUgLyBkYW1hZ2UgYXJlIGFsbCByYWN5IHdpdGggZWFjaCBvdGhlci5cclxuICAgIC8vIE9uZSBwb3RlbnRpYWwgb3JkZXJpbmc6XHJcbiAgICAvLyAgIC1pbiBjb21iYXQ6IGZhbHNlXHJcbiAgICAvLyAgIC13aXBlXHJcbiAgICAvLyAgIC1iZWxhdGVkIGRlYXRoL2RhbWFnZSA8LS0gdGhpcyBkYW1hZ2Ugc2hvdWxkbid0IHN0YXJ0XHJcbiAgICAvLyAgIC1kYW1hZ2UgKGVhcmx5IHB1bGwpIDwtLSB0aGlzIGRhbWFnZSBzaG91bGRcclxuICAgIC8vICAgLWluIGNvbWJhdDogdHJ1ZVxyXG4gICAgLy8gVGhlcmVmb3JlLCBzdXBwcmVzcyBcInN0YXJ0IGNvbWJhdFwiIGFmdGVyIHdpcGVzIHdpdGhpbiBhIHNob3J0XHJcbiAgICAvLyBwZXJpb2Qgb2YgdGltZS4gIEdyb3NzLlxyXG4gICAgaWYgKHRoaXMuc3RhcnRUaW1lICE9PSB1bmRlZmluZWQpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGNvbnN0IGtNaW5pbXVtU2Vjb25kc0FmdGVyV2lwZSA9IDU7XHJcbiAgICBpZiAodGhpcy5zdG9wVGltZSAmJiB0aW1lc3RhbXAgLSB0aGlzLnN0b3BUaW1lIDwgMTAwMCAqIGtNaW5pbXVtU2Vjb25kc0FmdGVyV2lwZSlcclxuICAgICAgcmV0dXJuO1xyXG4gICAgdGhpcy5zdGFydFRpbWUgPSB0aW1lc3RhbXA7XHJcbiAgICB0aGlzLnN0b3BUaW1lID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIHRoaXMuZGFtYWdlVHJhY2tlci5PblN0YXJ0RW5jb3VudGVyKHRpbWVzdGFtcCk7XHJcbiAgfVxyXG5cclxuICBTdG9wQ29tYmF0KHRpbWVzdGFtcDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5zdG9wVGltZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICByZXR1cm47XHJcbiAgICB0aGlzLnN0YXJ0VGltZSA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMuc3RvcFRpbWUgPSB0aW1lc3RhbXA7XHJcbiAgICB0aGlzLmRhbWFnZVRyYWNrZXIuT25TdG9wRW5jb3VudGVyKHRpbWVzdGFtcCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFBhcnR5IH0gZnJvbSAnLi4vdHlwZXMvZXZlbnQnO1xyXG5pbXBvcnQgeyBKb2IsIFJvbGUgfSBmcm9tICcuLi90eXBlcy9qb2InO1xyXG5cclxuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJztcclxuXHJcbmNvbnN0IGVtcHR5Um9sZVRvUGFydHlOYW1lcyA9ICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdGFuazogW10sXHJcbiAgICBoZWFsZXI6IFtdLFxyXG4gICAgZHBzOiBbXSxcclxuICAgIGNyYWZ0ZXI6IFtdLFxyXG4gICAgZ2F0aGVyZXI6IFtdLFxyXG4gICAgbm9uZTogW10sXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhcnR5VHJhY2tlciB7XHJcbiAgZGV0YWlsczogUGFydHlbXSA9IFtdO1xyXG4gIHBhcnR5TmFtZXNfOiBzdHJpbmdbXSA9IFtdO1xyXG4gIHBhcnR5SWRzXzogc3RyaW5nW10gPSBbXTtcclxuICBhbGxpYW5jZU5hbWVzXzogc3RyaW5nW10gPSBbXTtcclxuICBhbGxpYW5jZUlkc186IHN0cmluZ1tdID0gW107XHJcbiAgbmFtZVRvUm9sZV86IHsgW25hbWU6IHN0cmluZ106IFJvbGUgfSA9IHt9O1xyXG4gIGlkVG9OYW1lXzogeyBbaWQ6IHN0cmluZ106IHN0cmluZyB9ID0ge307XHJcbiAgcm9sZVRvUGFydHlOYW1lc186IFJlY29yZDxSb2xlLCBzdHJpbmdbXT4gPSBlbXB0eVJvbGVUb1BhcnR5TmFtZXMoKTtcclxuXHJcbiAgLy8gQmluZCB0aGlzIHRvIFBhcnR5Q2hhbmdlZCBldmVudHMuXHJcbiAgb25QYXJ0eUNoYW5nZWQoZTogeyBwYXJ0eTogUGFydHlbXSB9KTogdm9pZCB7XHJcbiAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB0aGlzLmRldGFpbHMgPSBlLnBhcnR5O1xyXG5cclxuICAgIGZvciAoY29uc3QgcCBvZiBlLnBhcnR5KSB7XHJcbiAgICAgIHRoaXMuYWxsaWFuY2VJZHNfLnB1c2gocC5pZCk7XHJcbiAgICAgIHRoaXMuYWxsaWFuY2VOYW1lc18ucHVzaChwLm5hbWUpO1xyXG4gICAgICBjb25zdCBqb2JOYW1lID0gVXRpbC5qb2JFbnVtVG9Kb2IocC5qb2IpO1xyXG4gICAgICBjb25zdCByb2xlID0gVXRpbC5qb2JUb1JvbGUoam9iTmFtZSk7XHJcbiAgICAgIHRoaXMuaWRUb05hbWVfW3AuaWRdID0gcC5uYW1lO1xyXG4gICAgICB0aGlzLm5hbWVUb1JvbGVfW3AubmFtZV0gPSByb2xlO1xyXG4gICAgICBpZiAocC5pblBhcnR5KSB7XHJcbiAgICAgICAgdGhpcy5wYXJ0eUlkc18ucHVzaChwLmlkKTtcclxuICAgICAgICB0aGlzLnBhcnR5TmFtZXNfLnB1c2gocC5uYW1lKTtcclxuICAgICAgICB0aGlzLnJvbGVUb1BhcnR5TmFtZXNfW3JvbGVdLnB1c2gocC5uYW1lKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzZXQoKTogdm9pZCB7XHJcbiAgICAvLyBvcmlnaW5hbCBldmVudCBkYXRhXHJcbiAgICB0aGlzLmRldGFpbHMgPSBbXTtcclxuICAgIHRoaXMucGFydHlOYW1lc18gPSBbXTtcclxuICAgIHRoaXMucGFydHlJZHNfID0gW107XHJcbiAgICB0aGlzLmFsbGlhbmNlTmFtZXNfID0gW107XHJcbiAgICB0aGlzLmFsbGlhbmNlSWRzXyA9IFtdO1xyXG4gICAgdGhpcy5uYW1lVG9Sb2xlXyA9IHt9O1xyXG4gICAgdGhpcy5pZFRvTmFtZV8gPSB7fTtcclxuXHJcbiAgICAvLyByb2xlIC0+IFtuYW1lc10gYnV0IG9ubHkgZm9yIHBhcnR5XHJcbiAgICB0aGlzLnJvbGVUb1BhcnR5TmFtZXNfID0gZW1wdHlSb2xlVG9QYXJ0eU5hbWVzKCk7XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBuYW1lcyBvZiBwbGF5ZXJzIGluIHlvdXIgaW1tZWRpYXRlIHBhcnR5XHJcbiAgZ2V0IHBhcnR5TmFtZXMoKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIHRoaXMucGFydHlOYW1lc187XHJcbiAgfVxyXG5cclxuICBnZXQgcGFydHlJZHMoKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIHRoaXMucGFydHlJZHNfO1xyXG4gIH1cclxuXHJcbiAgLy8gcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgbmFtZXMgb2YgcGxheWVycyBpbiB5b3VyIGFsbGlhbmNlXHJcbiAgZ2V0IGFsbGlhbmNlTmFtZXMoKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuYWxsaWFuY2VOYW1lc187XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBuYW1lcyBvZiB0YW5rcyBpbiB5b3VyIGltbWVkaWF0ZSBwYXJ0eVxyXG4gIGdldCB0YW5rTmFtZXMoKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIHRoaXMucm9sZVRvUGFydHlOYW1lc19bJ3RhbmsnXTtcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIG5hbWVzIG9mIGhlYWxlcnMgaW4geW91ciBpbW1lZGlhdGUgcGFydHlcclxuICBnZXQgaGVhbGVyTmFtZXMoKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIHRoaXMucm9sZVRvUGFydHlOYW1lc19bJ2hlYWxlciddO1xyXG4gIH1cclxuXHJcbiAgLy8gcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgbmFtZXMgb2YgZHBzIHBsYXllcnMgaW4geW91ciBpbW1lZGlhdGUgcGFydHlcclxuICBnZXQgZHBzTmFtZXMoKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIHRoaXMucm9sZVRvUGFydHlOYW1lc19bJ2RwcyddO1xyXG4gIH1cclxuXHJcbiAgLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBuYW1lZCBwbGF5ZXIgaW4geW91ciBhbGxpYW5jZSBpcyBhIHBhcnRpY3VsYXIgcm9sZVxyXG4gIGlzUm9sZShuYW1lOiBzdHJpbmcsIHJvbGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMubmFtZVRvUm9sZV9bbmFtZV0gPT09IHJvbGU7XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIHRydWUgaWYgdGhlIG5hbWVkIHBsYXllciBpbiB5b3VyIGFsbGlhbmNlIGlzIGEgdGFua1xyXG4gIGlzVGFuayhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmlzUm9sZShuYW1lLCAndGFuaycpO1xyXG4gIH1cclxuXHJcbiAgLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBuYW1lZCBwbGF5ZXIgaW4geW91ciBhbGxpYW5jZSBpcyBhIGhlYWxlclxyXG4gIGlzSGVhbGVyKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNSb2xlKG5hbWUsICdoZWFsZXInKTtcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgbmFtZWQgcGxheWVyIGluIHlvdXIgYWxsaWFuY2UgaXMgYSBkcHNcclxuICBpc0RQUyhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmlzUm9sZShuYW1lLCAnZHBzJyk7XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIHRydWUgaWYgdGhlIG5hbWVkIHBsYXllciBpcyBpbiB5b3VyIGltbWVkaWF0ZSBwYXJ0eVxyXG4gIGluUGFydHkobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5wYXJ0eU5hbWVzLmluY2x1ZGVzKG5hbWUpO1xyXG4gIH1cclxuXHJcbiAgLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBuYW1lZCBwbGF5ZXIgaXMgaW4geW91ciBhbGxpYW5jZVxyXG4gIGluQWxsaWFuY2UobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5hbGxpYW5jZU5hbWVzLmluY2x1ZGVzKG5hbWUpO1xyXG4gIH1cclxuXHJcbiAgLy8gZm9yIGEgbmFtZWQgcGxheWVyLCByZXR1cm5zIHRoZSBvdGhlciB0YW5rIGluIHlvdXIgaW1tZWRpYXRlIHBhcnR5XHJcbiAgLy8gaWYgbmFtZWQgcGxheWVyIGlzIG5vdCBhIHRhbmssIG9yIHRoZXJlJ3Mgbm90IGV4YWN0bHkgdHdvIHRhbmtzXHJcbiAgLy8gaW4geW91ciBpbW1lZGlhdGUgcGFydHksIHJldHVybnMgbnVsbC5cclxuICBvdGhlclRhbmsobmFtZTogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IG5hbWVzID0gdGhpcy50YW5rTmFtZXM7XHJcbiAgICBpZiAobmFtZXMubGVuZ3RoICE9PSAyKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBpZiAobmFtZXNbMF0gPT09IG5hbWUpXHJcbiAgICAgIHJldHVybiBuYW1lc1sxXTtcclxuICAgIGlmIChuYW1lc1sxXSA9PT0gbmFtZSlcclxuICAgICAgcmV0dXJuIG5hbWVzWzBdO1xyXG4gIH1cclxuXHJcbiAgLy8gc2VlOiBvdGhlclRhbmssIGJ1dCBmb3IgaGVhbGVycy5cclxuICBvdGhlckhlYWxlcihuYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3QgbmFtZXMgPSB0aGlzLnJvbGVUb1BhcnR5TmFtZXNfWydoZWFsZXInXTtcclxuICAgIGlmIChuYW1lcy5sZW5ndGggIT09IDIpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGlmIChuYW1lc1swXSA9PT0gbmFtZSlcclxuICAgICAgcmV0dXJuIG5hbWVzWzFdO1xyXG4gICAgaWYgKG5hbWVzWzFdID09PSBuYW1lKVxyXG4gICAgICByZXR1cm4gbmFtZXNbMF07XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIHRoZSBqb2IgbmFtZSBvZiB0aGUgc3BlY2lmaWVkIHBhcnR5IG1lbWJlclxyXG4gIGpvYk5hbWUobmFtZTogc3RyaW5nKTogSm9iIHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IHBhcnR5SW5kZXggPSB0aGlzLnBhcnR5TmFtZXMuaW5kZXhPZihuYW1lKTtcclxuICAgIGlmIChwYXJ0eUluZGV4ID49IDApXHJcbiAgICAgIHJldHVybiBVdGlsLmpvYkVudW1Ub0pvYih0aGlzLmRldGFpbHNbcGFydHlJbmRleF0/LmpvYiBhcyBudW1iZXIpO1xyXG4gIH1cclxuXHJcbiAgbmFtZUZyb21JZChpZDogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmlkVG9OYW1lX1tpZF07XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCB0eXBlIE1pc3NhYmxlQnVmZlR5cGUgPSAnaGVhbCcgfCAnZGFtYWdlJyB8ICdtaXRpZ2F0aW9uJztcclxuXHJcbmV4cG9ydCB0eXBlIE1pc3NhYmxlRWZmZWN0ID0ge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgdHlwZTogTWlzc2FibGVCdWZmVHlwZTtcclxuICBlZmZlY3RJZDogc3RyaW5nIHwgcmVhZG9ubHkgc3RyaW5nW107XHJcbiAgY29sbGVjdFNlY29uZHM6IG51bWJlcjtcclxuICBpZ25vcmVTZWxmPzogYm9vbGVhbjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIE1pc3NhYmxlQWJpbGl0eSA9IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHR5cGU6IE1pc3NhYmxlQnVmZlR5cGU7XHJcbiAgYWJpbGl0eUlkOiBzdHJpbmcgfCByZWFkb25seSBzdHJpbmdbXTtcclxuICBjb2xsZWN0U2Vjb25kcz86IG51bWJlcjtcclxuICBpZ25vcmVTZWxmPzogYm9vbGVhbjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIE1pc3NhYmxlQnVmZiA9IE1pc3NhYmxlQWJpbGl0eSB8IE1pc3NhYmxlRWZmZWN0O1xyXG5cclxuZXhwb3J0IGNvbnN0IG1pc3NlZEVmZmVjdEJ1ZmZNYXA6IHJlYWRvbmx5IE1pc3NhYmxlRWZmZWN0W10gPSBbXHJcbiAge1xyXG4gICAgaWQ6ICdDb2xsZWN0aXZlIFVuY29uc2Npb3VzJyxcclxuICAgIHR5cGU6ICdtaXRpZ2F0aW9uJyxcclxuICAgIGVmZmVjdElkOiAnMzUxJyxcclxuICAgIGNvbGxlY3RTZWNvbmRzOiAyMCxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnUGFzc2FnZSBvZiBBcm1zJyxcclxuICAgIHR5cGU6ICdtaXRpZ2F0aW9uJyxcclxuICAgIC8vIEFybXMgVXAgPSA0OTggKG90aGVycyksIFBhc3NhZ2UgT2YgQXJtcyA9IDQ5NyAoeW91KS4gIFVzZSBib3RoIGluIGNhc2UgZXZlcnlib2R5IGlzIG1pc3NlZC5cclxuICAgIGVmZmVjdElkOiBbJzQ5NycsICc0OTgnXSxcclxuICAgIGlnbm9yZVNlbGY6IHRydWUsXHJcbiAgICBjb2xsZWN0U2Vjb25kczogMTUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ0RpdmluZSBWZWlsJyxcclxuICAgIHR5cGU6ICdtaXRpZ2F0aW9uJyxcclxuICAgIGVmZmVjdElkOiAnMkQ3JyxcclxuICAgIGlnbm9yZVNlbGY6IHRydWUsXHJcbiAgICBjb2xsZWN0U2Vjb25kczogMixcclxuICB9LFxyXG4gIHtcclxuICAgIC8vIFJQUiBoZWFsXHJcbiAgICBpZDogJ0NyZXN0IG9mIFRpbWUgUmV0dXJuZWQnLFxyXG4gICAgdHlwZTogJ2hlYWwnLFxyXG4gICAgZWZmZWN0SWQ6ICdBMjYnLFxyXG4gICAgY29sbGVjdFNlY29uZHM6IDIsXHJcbiAgfSxcclxuXSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBjb25zdCBtaXNzZWRBYmlsaXR5QnVmZk1hcDogcmVhZG9ubHkgTWlzc2FibGVBYmlsaXR5W10gPSBbXHJcbiAge1xyXG4gICAgaWQ6ICdIZWFydCBPZiBMaWdodCcsXHJcbiAgICB0eXBlOiAnbWl0aWdhdGlvbicsXHJcbiAgICBhYmlsaXR5SWQ6ICczRjIwJyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnRGFyayBNaXNzaW9uYXJ5JyxcclxuICAgIHR5cGU6ICdtaXRpZ2F0aW9uJyxcclxuICAgIGFiaWxpdHlJZDogJzQwNTcnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdTaGFrZSBJdCBPZmYnLFxyXG4gICAgdHlwZTogJ21pdGlnYXRpb24nLFxyXG4gICAgYWJpbGl0eUlkOiAnMUNEQycsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ1RlY2huaWNhbCBGaW5pc2gnLFxyXG4gICAgdHlwZTogJ2RhbWFnZScsXHJcbiAgICAvLyAzRjQ0IGlzIHRoZSBjb3JyZWN0IFF1YWRydXBsZSBUZWNobmljYWwgRmluaXNoLCBvdGhlcnMgYXJlIERpbmt5IFRlY2huaWNhbCBGaW5pc2guXHJcbiAgICBhYmlsaXR5SWQ6IFsnM0Y0MScsICczRjQyJywgJzNGNDMnLCAnM0Y0NCddLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdEaXZpbmF0aW9uJyxcclxuICAgIHR5cGU6ICdkYW1hZ2UnLFxyXG4gICAgYWJpbGl0eUlkOiAnNDBBOCcsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ0Jyb3RoZXJob29kJyxcclxuICAgIHR5cGU6ICdkYW1hZ2UnLFxyXG4gICAgYWJpbGl0eUlkOiAnMUNFNCcsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ0JhdHRsZSBMaXRhbnknLFxyXG4gICAgdHlwZTogJ2RhbWFnZScsXHJcbiAgICBhYmlsaXR5SWQ6ICdERTUnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdFbWJvbGRlbicsXHJcbiAgICB0eXBlOiAnZGFtYWdlJyxcclxuICAgIGFiaWxpdHlJZDogJzFENjAnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdCYXR0bGUgVm9pY2UnLFxyXG4gICAgdHlwZTogJ2RhbWFnZScsXHJcbiAgICBhYmlsaXR5SWQ6ICc3NicsXHJcbiAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyBsaW5lIGFmdGVyIDUueCBpcyBub3Qgc3VwcG9ydGVkIGFueW1vcmUuXHJcbiAgICAvLyBUZWNobmljYWxseSBCYXR0bGUgVm9pY2UgY2FuJ3QgbWlzcyB0aGUgYmFyZCBpdHNlbGYsIHNvIHRoaXMgaXMgYSBub29wIGluIDYueC5cclxuICAgIGlnbm9yZVNlbGY6IHRydWUsXHJcbiAgfSxcclxuICB7XHJcbiAgICAvLyA1eFxyXG4gICAgaWQ6ICdEZXZvdGlvbicsXHJcbiAgICB0eXBlOiAnZGFtYWdlJyxcclxuICAgIGFiaWxpdHlJZDogJzFEMUEnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdTZWFyaW5nIExpZ2h0JyxcclxuICAgIHR5cGU6ICdkYW1hZ2UnLFxyXG4gICAgYWJpbGl0eUlkOiAnNjRGMicsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ0FyY2FuZSBDaXJjbGUnLFxyXG4gICAgdHlwZTogJ2RhbWFnZScsXHJcbiAgICBhYmlsaXR5SWQ6ICc1RjU1JyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnVHJvdWJhZG91cicsXHJcbiAgICB0eXBlOiAnbWl0aWdhdGlvbicsXHJcbiAgICBhYmlsaXR5SWQ6ICcxQ0VEJyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnVGFjdGljaWFuJyxcclxuICAgIHR5cGU6ICdtaXRpZ2F0aW9uJyxcclxuICAgIGFiaWxpdHlJZDogJzQxRjknLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdTaGllbGQgU2FtYmEnLFxyXG4gICAgdHlwZTogJ21pdGlnYXRpb24nLFxyXG4gICAgYWJpbGl0eUlkOiAnM0U4QycsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ01hbnRyYScsXHJcbiAgICB0eXBlOiAnbWl0aWdhdGlvbicsXHJcbiAgICBhYmlsaXR5SWQ6ICc0MScsXHJcbiAgfSxcclxuICB7XHJcbiAgICAvLyBMQjFcclxuICAgIGlkOiAnSGVhbGluZyBXaW5kJyxcclxuICAgIHR5cGU6ICdoZWFsJyxcclxuICAgIGFiaWxpdHlJZDogJ0NFJyxcclxuICB9LFxyXG4gIHtcclxuICAgIC8vIExCMlxyXG4gICAgaWQ6ICdCcmVhdGggb2YgdGhlIEVhcnRoJyxcclxuICAgIHR5cGU6ICdoZWFsJyxcclxuICAgIGFiaWxpdHlJZDogJ0NGJyxcclxuICB9LFxyXG4gIHtcclxuICAgIC8vIExCIDNcclxuICAgIGlkOiAnUHVsc2Ugb2YgTGlmZScsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICdEMCcsXHJcbiAgfSxcclxuICB7XHJcbiAgICAvLyBTTU4gcGhvZW5peCBoZWFsXHJcbiAgICBpZDogJ0V2ZXJsYXN0aW5nIEZsaWdodCcsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICc0MDg1JyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnTWVkaWNhJyxcclxuICAgIHR5cGU6ICdoZWFsJyxcclxuICAgIGFiaWxpdHlJZDogJzdDJyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnTWVkaWNhIElJJyxcclxuICAgIHR5cGU6ICdoZWFsJyxcclxuICAgIGFiaWxpdHlJZDogJzg1JyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnQWZmbGF0dXMgUmFwdHVyZScsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICc0MDk2JyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnVGVtcGVyYW5jZScsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICc3NTEnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdQbGVuYXJ5IEluZHVsZ2VuY2UnLFxyXG4gICAgdHlwZTogJ2hlYWwnLFxyXG4gICAgYWJpbGl0eUlkOiAnMUQwOScsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ1N1Y2NvcicsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICdCQScsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ0luZG9taXRhYmlsaXR5JyxcclxuICAgIHR5cGU6ICdoZWFsJyxcclxuICAgIGFiaWxpdHlJZDogJ0RGRicsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ0RlcGxveW1lbnQgVGFjdGljcycsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICdFMDEnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdXaGlzcGVyaW5nIERhd24nLFxyXG4gICAgdHlwZTogJ2hlYWwnLFxyXG4gICAgYWJpbGl0eUlkOiAnMzIzJyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnRmV5IEJsZXNzaW5nJyxcclxuICAgIHR5cGU6ICdoZWFsJyxcclxuICAgIGFiaWxpdHlJZDogJzQwQTAnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdDb25zb2xhdGlvbicsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICc0MEEzJyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnQW5nZWxcXCdzIFdoaXNwZXInLFxyXG4gICAgdHlwZTogJ2hlYWwnLFxyXG4gICAgYWJpbGl0eUlkOiAnNDBBNicsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ0ZleSBJbGx1bWluYXRpb24nLFxyXG4gICAgdHlwZTogJ21pdGlnYXRpb24nLFxyXG4gICAgYWJpbGl0eUlkOiAnMzI1JyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnU2VyYXBoaWMgSWxsdW1pbmF0aW9uJyxcclxuICAgIHR5cGU6ICdtaXRpZ2F0aW9uJyxcclxuICAgIGFiaWxpdHlJZDogJzQwQTcnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgLy8gVGVjaG5pY2FsbHkgdGhlIG1pdGlnYXRpb24gaXMgXCJEZXNwZXJhdGUgTWVhc3VyZXNcIiwgYnV0IGl0IGNvbWVzIGZyb21cclxuICAgIC8vIHRoZSBFeHBlZGllbnQgYWJpbGl0eSBvbiBlYWNoIHBsYXllciBhbmQgXCJFeHBlZGllbmNlXCIgaXMgdGhlIGhhc3RlIGJ1ZmYuXHJcbiAgICBpZDogJ0V4cGVkaWVudCcsXHJcbiAgICB0eXBlOiAnbWl0aWdhdGlvbicsXHJcbiAgICBhYmlsaXR5SWQ6ICc2NTBDJyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnS2VyYWNob2xlJyxcclxuICAgIHR5cGU6ICdtaXRpZ2F0aW9uJyxcclxuICAgIGFiaWxpdHlJZDogJzVFRUEnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdQYW5oYWltYScsXHJcbiAgICB0eXBlOiAnbWl0aWdhdGlvbicsXHJcbiAgICBhYmlsaXR5SWQ6ICc1RUY3JyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnQW5nZWwgRmVhdGhlcnMnLFxyXG4gICAgdHlwZTogJ2hlYWwnLFxyXG4gICAgYWJpbGl0eUlkOiAnMTA5NycsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ0hlbGlvcycsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICdFMTAnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdBc3BlY3RlZCBIZWxpb3MnLFxyXG4gICAgdHlwZTogJ2hlYWwnLFxyXG4gICAgYWJpbGl0eUlkOiBbJ0UxMScsICczMjAwJ10sXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ0NlbGVzdGlhbCBPcHBvc2l0aW9uJyxcclxuICAgIHR5cGU6ICdoZWFsJyxcclxuICAgIGFiaWxpdHlJZDogJzQwQTknLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdTdGVsbGFyIEJ1cnN0JyxcclxuICAgIHR5cGU6ICdoZWFsJyxcclxuICAgIGFiaWxpdHlJZDogJzFEMTAnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdTdGVsbGFyIEV4cGxvc2lvbicsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICcxRDExJyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnQXN0cmFsIFN0YXNpcycsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICcxMDk4JyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnUHJvZ25vc2lzJyxcclxuICAgIHR5cGU6ICdoZWFsJyxcclxuICAgIGFiaWxpdHlJZDogJzVFREUnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdQaHlzaXMnLFxyXG4gICAgdHlwZTogJ2hlYWwnLFxyXG4gICAgYWJpbGl0eUlkOiAnNUVFMCcsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ0V1a3Jhc2lhbiBQcm9nbm9zaXMnLFxyXG4gICAgdHlwZTogJ2hlYWwnLFxyXG4gICAgYWJpbGl0eUlkOiAnNUVFNCcsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ0l4b2Nob2xlJyxcclxuICAgIHR5cGU6ICdoZWFsJyxcclxuICAgIGFiaWxpdHlJZDogJzVFRUInLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdQZXBzaXMnLFxyXG4gICAgdHlwZTogJ2hlYWwnLFxyXG4gICAgYWJpbGl0eUlkOiAnNUVFRCcsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ1BoeXNpcyBJSScsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICc1RUVFJyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnSG9sb3MnLFxyXG4gICAgdHlwZTogJ2hlYWwnLFxyXG4gICAgYWJpbGl0eUlkOiAnNUVGNicsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ1BuZXVtYScsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICAvLyA1RUZFIG9uIGVuZW1pZXMsIGFuZCA2Q0I2IG9uIGZyaWVuZGxpZXMuXHJcbiAgICBhYmlsaXR5SWQ6ICc2Q0I2JyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnV2hpdGUgV2luZCcsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICcyQzhFJyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnR29ic2tpbicsXHJcbiAgICB0eXBlOiAnaGVhbCcsXHJcbiAgICBhYmlsaXR5SWQ6ICc0NzgwJyxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnTG9zdCBBZXRoZXJzaGllbGQnLFxyXG4gICAgdHlwZTogJ21pdGlnYXRpb24nLFxyXG4gICAgYWJpbGl0eUlkOiAnNTc1MycsXHJcbiAgfSxcclxuXSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUJ1ZmZUcmlnZ2VySWRzID0gKCk6IHN0cmluZ1tdID0+IHtcclxuICBjb25zdCBidWZmczogTWlzc2FibGVCdWZmW10gPSBbLi4ubWlzc2VkRWZmZWN0QnVmZk1hcCwgLi4ubWlzc2VkQWJpbGl0eUJ1ZmZNYXBdO1xyXG4gIGJ1ZmZzLnNvcnQoKGEsIGIpID0+IGEuaWQubG9jYWxlQ29tcGFyZShiLmlkKSk7XHJcbiAgcmV0dXJuIGJ1ZmZzLm1hcCgoYnVmZikgPT4gYEJ1ZmYgJHtidWZmLmlkfWApO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBMYW5nIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL2xhbmd1YWdlcyc7XHJcbmltcG9ydCBsb2dEZWZpbml0aW9ucyBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbmV0bG9nX2RlZnMnO1xyXG5pbXBvcnQgeyBEZWF0aFJlcG9ydERhdGEsIE9vcHN5TWlzdGFrZSB9IGZyb20gJy4uLy4uL3R5cGVzL29vcHN5JztcclxuXHJcbmltcG9ydCB7XHJcbiAga0F0dGFja0ZsYWdzLFxyXG4gIGtIZWFsRmxhZ3MsXHJcbiAga1NoaWZ0RmxhZ1ZhbHVlcyxcclxuICBUcmFuc2xhdGUsXHJcbiAgVW5zY3JhbWJsZURhbWFnZSxcclxufSBmcm9tICcuL29vcHN5X2NvbW1vbic7XHJcbmltcG9ydCB7XHJcbiAgVHJhY2tlZERlYXRoUmVhc29uRXZlbnQsXHJcbiAgVHJhY2tlZEV2ZW50LFxyXG4gIFRyYWNrZWRFdmVudFR5cGUsXHJcbiAgVHJhY2tlZExpbmVFdmVudCxcclxuICBUcmFja2VkTWlzdGFrZUV2ZW50LFxyXG59IGZyb20gJy4vcGxheWVyX3N0YXRlX3RyYWNrZXInO1xyXG5cclxuLy8gVE9ETzogbG90cyBvZiB0aGluZ3MgbGVmdCB0byBkbyB3aXRoIGRlYXRoIHJlcG9ydHNcclxuLy8gKiBwcm9iYWJseSBpbmNsdWRlIG1heCBocCBhcyB3ZWxsP1xyXG4vLyAqIGNvbnNvbGlkYXRlIEhvVC9Eb1QgKHdpdGggZXhwYW5kYWJsZSBDU1MpXHJcbi8vICogc2hvdyBtaXRpZ2F0aW9uIGVmZmVjdHMgdGhhdCBhcmUgYWN0aXZlIGR1cmluZyBkYW1hZ2UgKHdpdGggaWNvbnM/PyBvciBhdCBsZWFzdCB0ZXh0IHRvIHN0YXJ0PylcclxuLy8gICAqIGFsc28gbmVlZCB0byB0cmFjayBlZmZlY3RzIHRoYXQgYXJlIGFjdGl2ZSBwcmlvciB0byB0aGUgc2V0IG9mIGV2ZW50cyBwYXNzZWQgaW5cclxuLy8gICAqIGFsc28gbmVlZCB0byBoYW5kbGUgZWZmZWN0cyBsb3N0IChhbmQgZ2FpbmVkPyEpIGFmdGVyIGRlYXRoXHJcbi8vICogY29uc29saWRhdGUgbXVsdGlwbGUgZGFtYWdlIHRoYXQga2lsbGVkIChlLmcuIFNvbGVtbiBDb25maXRlb3IgeDQpIGludG8gc3VtbWFyeSB0ZXh0XHJcbi8vICogbWF5YmUgaWYgYSBwbGF5ZXIgaXMgZnVsbHkgaGVhbGVkLCB0cmltIGFiaWxpdGllcyBiZWZvcmUgdGhhdD9cclxuXHJcbmNvbnN0IHByb2Nlc3NBYmlsaXR5TGluZSA9IChzcGxpdExpbmU6IHN0cmluZ1tdKSA9PiB7XHJcbiAgY29uc3QgZmxhZ0lkeCA9IGxvZ0RlZmluaXRpb25zLkFiaWxpdHkuZmllbGRzLmZsYWdzO1xyXG4gIGxldCBmbGFncyA9IHNwbGl0TGluZVtmbGFnSWR4XSA/PyAnJztcclxuICBsZXQgZGFtYWdlID0gc3BsaXRMaW5lW2ZsYWdJZHggKyAxXSA/PyAnJztcclxuICBpZiAoa1NoaWZ0RmxhZ1ZhbHVlcy5pbmNsdWRlcyhmbGFncykpIHtcclxuICAgIGZsYWdzID0gc3BsaXRMaW5lW2ZsYWdJZHggKyAyXSA/PyBmbGFncztcclxuICAgIGRhbWFnZSA9IHNwbGl0TGluZVtmbGFnSWR4ICsgM10gPz8gZGFtYWdlO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgYW1vdW50ID0gVW5zY3JhbWJsZURhbWFnZShkYW1hZ2UpO1xyXG4gIGNvbnN0IGxvd0J5dGUgPSBgMDAke2ZsYWdzfWAuc3Vic3RyKC0yKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGFtb3VudDogYW1vdW50LFxyXG4gICAgbG93Qnl0ZTogbG93Qnl0ZSxcclxuICAgIGZsYWdzOiBmbGFncyxcclxuICAgIGlzSGVhbDoga0hlYWxGbGFncy5pbmNsdWRlcyhsb3dCeXRlKSxcclxuICAgIGlzQXR0YWNrOiBrQXR0YWNrRmxhZ3MuaW5jbHVkZXMobG93Qnl0ZSksXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFBhcnNlZERlYXRoUmVwb3J0TGluZSA9IHtcclxuICB0aW1lc3RhbXA6IG51bWJlcjtcclxuICB0aW1lc3RhbXBTdHI6IHN0cmluZztcclxuICB0eXBlOiBUcmFja2VkRXZlbnRUeXBlO1xyXG4gIGN1cnJlbnRIcD86IG51bWJlcjtcclxuICBhbW91bnQ/OiBudW1iZXI7XHJcbiAgYW1vdW50U3RyPzogc3RyaW5nO1xyXG4gIGFtb3VudENsYXNzPzogc3RyaW5nO1xyXG4gIGljb24/OiBzdHJpbmc7XHJcbiAgdGV4dD86IHN0cmluZztcclxufTtcclxuXHJcbi8vIENvbnRhaW5zIGFsbCB0aGUgaW5mb3JtYXRpb24gdG8gZGlzcGxheSBpbmZvcm1hdGlvbiBhYm91dCBhIHBsYXllcidzIGRlYXRoLlxyXG4vLyBgZXZlbnRzYCBjb250YWluIHRoZSBsYXN0IE4gc2Vjb25kcyBvZiB0cmFja2VkIGxpbmUgZXZlbnRzIHRoYXQgcGVydGFpbiB0byB0aGUgcGxheWVyLlxyXG4vLyBUaGlzIGNsYXNzJ3Mgam9iIGlzIHRvIHNvcnQgdGhyb3VnaCB0aG9zZSByYXcgbGluZXMgYW5kIGdlbmVyYXRlIGEgc3Vic2V0IG9mIHBhcnNlZFxyXG4vLyBsaW5lcyB0aGF0IHZhcmlvdXMgdmlld3MgbWlnaHQgd2FudCB0byBkaXNwbGF5IGluIHNvbWUgZmFzaGlvbi5cclxuZXhwb3J0IGNsYXNzIERlYXRoUmVwb3J0IHtcclxuICBwcml2YXRlIGxhbmc6IExhbmc7XHJcbiAgcHJpdmF0ZSBiYXNlVGltZXN0YW1wOiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgcHVibGljIGRlYXRoVGltZXN0YW1wOiBudW1iZXI7XHJcbiAgcHVibGljIHRhcmdldElkOiBzdHJpbmc7XHJcbiAgcHVibGljIHRhcmdldE5hbWU6IHN0cmluZztcclxuICBwcml2YXRlIGV2ZW50czogVHJhY2tlZEV2ZW50W107XHJcbiAgcHJpdmF0ZSBwYXJzZWRSZXBvcnRMaW5lcz86IFBhcnNlZERlYXRoUmVwb3J0TGluZVtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihkYXRhOiBEZWF0aFJlcG9ydERhdGEpIHtcclxuICAgIHRoaXMubGFuZyA9IGRhdGEubGFuZztcclxuICAgIHRoaXMuYmFzZVRpbWVzdGFtcCA9IGRhdGEuYmFzZVRpbWVzdGFtcDtcclxuICAgIHRoaXMuZGVhdGhUaW1lc3RhbXAgPSBkYXRhLmRlYXRoVGltZXN0YW1wO1xyXG4gICAgdGhpcy50YXJnZXRJZCA9IGRhdGEudGFyZ2V0SWQ7XHJcbiAgICB0aGlzLnRhcmdldE5hbWUgPSBkYXRhLnRhcmdldE5hbWU7XHJcbiAgICB0aGlzLmV2ZW50cyA9IGRhdGEuZXZlbnRzO1xyXG4gIH1cclxuXHJcbiAgLy8gR2VuZXJhdGVzIGFuIE9vcHN5TWlzdGFrZSB0aGF0IHJlcHJlc2VudHMgdGhpcyBEZWF0aFJlcG9ydC5cclxuICBwdWJsaWMgc3RhdGljIGdlbmVyYXRlTWlzdGFrZShkYXRhOiBEZWF0aFJlcG9ydERhdGEpOiBPb3BzeU1pc3Rha2Uge1xyXG4gICAgLy8gV2FsayBiYWNrd2FyZCB0aHJvdWdoIGV2ZW50cyB1bnRpbCB3ZSBmaW5kIHRoZSBsYXN0IGRhbWFnZSBvciBhIGRlYXRoIHJlYXNvbi5cclxuICAgIGZvciAobGV0IGkgPSBkYXRhLmV2ZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICBjb25zdCBldmVudCA9IGRhdGEuZXZlbnRzW2ldO1xyXG4gICAgICBpZiAoIWV2ZW50KVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ0RlYXRoUmVhc29uJykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB0eXBlOiAnZGVhdGgnLFxyXG4gICAgICAgICAgbmFtZTogZGF0YS50YXJnZXROYW1lLFxyXG4gICAgICAgICAgdGV4dDogZXZlbnQudGV4dCxcclxuICAgICAgICAgIHJlcG9ydDogZGF0YSxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBUT0RPOiBjb25zaWRlciBjb21iaW5pbmcgbXVsdGlwbGUgYWJpbGl0aWVzIHRoYXQgYXJlIHRha2VuIGluIGEgdmVyeVxyXG4gICAgICAvLyBzaG9ydCBwZXJpb2Qgb2YgdGltZSwgZS5nLiBcIkEgKyBCXCIgb3IgXCJDIHg0XCIuXHJcbiAgICAgIGlmIChldmVudC50eXBlID09PSAnQWJpbGl0eScpIHtcclxuICAgICAgICBjb25zdCBhYmlsaXR5ID0gcHJvY2Vzc0FiaWxpdHlMaW5lKGV2ZW50LnNwbGl0TGluZSk7XHJcbiAgICAgICAgaWYgKGFiaWxpdHkuaXNBdHRhY2sgJiYgYWJpbGl0eS5hbW91bnQgPiAwKSB7XHJcbiAgICAgICAgICBjb25zdCBhYmlsaXR5TmFtZSA9IGV2ZW50LnNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5BYmlsaXR5LmZpZWxkcy5hYmlsaXR5XSA/PyAnPz8/JztcclxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRIcCA9IGV2ZW50LnNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5BYmlsaXR5LmZpZWxkcy50YXJnZXRDdXJyZW50SHBdID8/ICc/Pz8nO1xyXG4gICAgICAgICAgY29uc3QgdGV4dCA9IGAke2FiaWxpdHlOYW1lfSAoJHthYmlsaXR5LmFtb3VudH0vJHtjdXJyZW50SHB9KWA7XHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiAnZGVhdGgnLFxyXG4gICAgICAgICAgICBuYW1lOiBkYXRhLnRhcmdldE5hbWUsXHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgIHJlcG9ydDogZGF0YSxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdHlwZTogJ2RlYXRoJyxcclxuICAgICAgbmFtZTogZGF0YS50YXJnZXROYW1lLFxyXG4gICAgICB0ZXh0OiAnPz8/JyxcclxuICAgICAgcmVwb3J0OiBkYXRhLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIEEgaGVscGVyIGZ1bmN0aW9uIHRvIHR1cm4gYSB0aW1lc3RhbXAgaW50byBhIHN0cmluZyByZWxhdGl2ZSB0byB0aGlzIERlYXRoUmVwb3J0LlxyXG4gIC8vIFRoZSBiYXNlIHRpbWVzdGFtcCBpdCBpcyByZWxhdGl2ZSB0byBpcyBnZW5lcmFsbHkgdGhlIHN0YXJ0IG9mIHRoZSBmaWdodC5cclxuICBtYWtlUmVsYXRpdmVUaW1lU3RyaW5nKHRpbWVzdGFtcDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGJhc2UgPSB0aGlzLmJhc2VUaW1lc3RhbXA7XHJcbiAgICBpZiAoIWJhc2UpXHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIGNvbnN0IGRlbHRhTXMgPSB0aW1lc3RhbXAgLSBiYXNlO1xyXG4gICAgY29uc3QgcHJlZml4ID0gZGVsdGFNcyA8IDAgPyAnLScgOiAnJztcclxuICAgIGNvbnN0IGRlbHRhVG90YWxTZWNvbmRzID0gTWF0aC5yb3VuZChNYXRoLmFicyhkZWx0YU1zKSAvIDEwMDApO1xyXG4gICAgY29uc3QgZGVsdGFTZWNvbmRzID0gYDAwJHtkZWx0YVRvdGFsU2Vjb25kcyAlIDYwfWAuc3Vic3RyKC0yKTtcclxuICAgIGNvbnN0IGRlbHRhTWludXRlcyA9IE1hdGguZmxvb3IoZGVsdGFUb3RhbFNlY29uZHMgLyA2MCk7XHJcbiAgICByZXR1cm4gYCR7cHJlZml4fSR7ZGVsdGFNaW51dGVzfToke2RlbHRhU2Vjb25kc31gO1xyXG4gIH1cclxuXHJcbiAgLy8gTGF6aWx5IGRvIHNvbWUgd29yayB0byBwcm9jZXNzIHRoZSB0cmFja2VkIGxpbmVzIGZyb20gYHRoaXMuZXZlbnRzYCBpbnRvIHNvbWV0aGluZyB0aGF0XHJcbiAgLy8gY2FuIGJlIGRpc3BsYXllZCB0byB0aGUgdXNlci4gIFRoaXMgaXMgdGhlIG1vZGVsIGZvciB0aGUgbGl2ZS9zdW1tYXJ5IHZpZXdzLlxyXG4gIHB1YmxpYyBwYXJzZVJlcG9ydExpbmVzKCk6IFBhcnNlZERlYXRoUmVwb3J0TGluZVtdIHtcclxuICAgIGlmICh0aGlzLnBhcnNlZFJlcG9ydExpbmVzKVxyXG4gICAgICByZXR1cm4gdGhpcy5wYXJzZWRSZXBvcnRMaW5lcztcclxuXHJcbiAgICB0aGlzLnBhcnNlZFJlcG9ydExpbmVzID0gW107XHJcblxyXG4gICAgbGV0IGxhc3RDZXJ0YWluSHA6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuICAgIGxldCBjdXJyZW50SHA6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuICAgIGxldCBkZWF0aFJlYXNvbklkeDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgdGhpcy5ldmVudHMpIHtcclxuICAgICAgbGV0IHBhcnNlZDogUGFyc2VkRGVhdGhSZXBvcnRMaW5lIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ0FiaWxpdHknKVxyXG4gICAgICAgIHBhcnNlZCA9IHRoaXMucHJvY2Vzc0FiaWxpdHkoZXZlbnQpO1xyXG4gICAgICBlbHNlIGlmIChldmVudC50eXBlID09PSAnSG9URG9UJylcclxuICAgICAgICBwYXJzZWQgPSB0aGlzLnByb2Nlc3NIb1REb1QoZXZlbnQpO1xyXG4gICAgICBlbHNlIGlmIChldmVudC50eXBlID09PSAnTWlzc2VkQWJpbGl0eScgfHwgZXZlbnQudHlwZSA9PT0gJ01pc3NlZEVmZmVjdCcpXHJcbiAgICAgICAgcGFyc2VkID0gdGhpcy5wcm9jZXNzTWlzc2VkQnVmZihldmVudCk7XHJcbiAgICAgIGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdNaXN0YWtlJylcclxuICAgICAgICBwYXJzZWQgPSB0aGlzLnByb2Nlc3NNaXN0YWtlKGV2ZW50KTtcclxuICAgICAgZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ0RlYXRoUmVhc29uJylcclxuICAgICAgICBwYXJzZWQgPSB0aGlzLnByb2Nlc3NEZWF0aFJlYXNvbihldmVudCk7XHJcblxyXG4gICAgICAvLyBBZnRlciB0aGlzIHBvaW50LCB3ZSB3aWxsIGFsd2F5cyBhcHBlbmQgdGhpcyBldmVudCxcclxuICAgICAgLy8gYnV0IHN0aWxsIGhhdmUgc29tZSBwb3N0LXByb2Nlc3NpbmcgdG8gZG8uXHJcbiAgICAgIGlmICghcGFyc2VkKVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIGV2ZW50LnR5cGUgPT09ICdBYmlsaXR5JyAmJlxyXG4gICAgICAgIHBhcnNlZC5hbW91bnQgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgIHBhcnNlZC5hbW91bnQgPCAwICYmXHJcbiAgICAgICAgZGVhdGhSZWFzb25JZHggIT09IHVuZGVmaW5lZFxyXG4gICAgICApIHtcclxuICAgICAgICAvLyBGb3VuZCBkYW1hZ2UgYWZ0ZXIgYSBEZWF0aFJlYXNvbiwgcmVtb3ZlIHByZXZpb3VzIERlYXRoUmVhc29uLlxyXG4gICAgICAgIHRoaXMucGFyc2VkUmVwb3J0TGluZXMuc3BsaWNlKGRlYXRoUmVhc29uSWR4KTtcclxuICAgICAgICBkZWF0aFJlYXNvbklkeCA9IHVuZGVmaW5lZDtcclxuICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAnRGVhdGhSZWFzb24nKSB7XHJcbiAgICAgICAgLy8gRm91bmQgYSBuZXcgRGVhdGhSZWFzb24sIHRyYWNrIHRoaXMgaW5kZXggaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZW1vdmVkLlxyXG4gICAgICAgIGRlYXRoUmVhc29uSWR4ID0gdGhpcy5wYXJzZWRSZXBvcnRMaW5lcy5sZW5ndGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRvdWNoIHVwIHRoZSBocCBzbyBpdCBsb29rcyBtb3JlIHZhbGlkLiAgVGhlcmUgYXJlIG9ubHkgaHAgZmllbGRzIG9uIGNlcnRhaW5cclxuICAgICAgLy8gbG9nIGxpbmVzLCBhbmQgbW9yZSBpbXBvcnRhbnRseSBpdCBpcyBwb2xsZWQgZnJvbSBtZW1vcnkuICBUaGVyZWZvcmUsIGlmIGFcclxuICAgICAgLy8gcGxheWVyIHRha2VzIGEgYnVuY2ggb2YgYXR0YWNrcyBzaW11bHRhbmVvdXNseSwgdGhlIGhwIHdpbGwgYmUgdGhlIHNhbWUgb25cclxuICAgICAgLy8gZXZlcnkgbGluZS4gIFRoaXMgbG9va3MgaW5jb3JyZWN0LCBzbyBkbyBvdXIgYmVzdCB0byBmaXggdGhpcyB1cC5cclxuICAgICAgaWYgKGN1cnJlbnRIcCA9PT0gdW5kZWZpbmVkIHx8IGxhc3RDZXJ0YWluSHAgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIC8vIElmIHdlIGhhdmVuJ3Qgc2VlbiBhbnkgbG9nIGxpbmVzIHdpdGggaHAgeWV0LCB0cnkgdG8gc2V0IGl0IGFzIGFuIGluaXRpYWwgZ3Vlc3MuXHJcbiAgICAgICAgY3VycmVudEhwID0gcGFyc2VkLmN1cnJlbnRIcDtcclxuICAgICAgICBsYXN0Q2VydGFpbkhwID0gcGFyc2VkLmN1cnJlbnRIcDtcclxuICAgICAgfSBlbHNlIGlmIChwYXJzZWQuY3VycmVudEhwICE9PSBsYXN0Q2VydGFpbkhwKSB7XHJcbiAgICAgICAgLy8gSWYgd2Ugc2VlIGEgbmV3IGhwIHZhbHVlLCB0aGVuIHRoaXMgaXMgbGlrZWx5IHZhbGlkLlxyXG4gICAgICAgIGN1cnJlbnRIcCA9IGxhc3RDZXJ0YWluSHAgPSBwYXJzZWQuY3VycmVudEhwO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZvciBsb2cgbGluZXMgdGhhdCBkb24ndCBoYXZlIGEgaGl0cG9pbnRzIGxpbmUsIGZpbGwgaW4gb3VyIGJlc3QgZ3Vlc3MuXHJcbiAgICAgICAgLy8gT3IsIHdlJ3JlIHNlZWluZyBhbiBpZGVudGljYWwgaHAgdmFsdWUsIHNvIHVzZSBwcmV2aW91c2x5IGFkanVzdGVkIGFtb3VudC5cclxuICAgICAgICBwYXJzZWQuY3VycmVudEhwID0gY3VycmVudEhwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBOb3RlOiBwYXJzZWQuYW1vdW50IDwgMCBpcyBkYW1hZ2UsIHBhcnNlZC5hbW91bnQgPiAwIGlzIGhlYWxzLlxyXG4gICAgICBpZiAoY3VycmVudEhwICE9PSB1bmRlZmluZWQgJiYgcGFyc2VkLmFtb3VudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgLy8gSWYgdGhpcyBhdHRhY2sga2lsbGVkIHNvbWVib2R5IChvciB0aGlzIGlzIG92ZXJraWxsKSwgc2V0IGFuIGljb24gdW5sZXNzIHRoZXJlJ3NcclxuICAgICAgICAvLyBhbHJlYWR5IGEgbWlzdGFrZSBpY29uIHNldC4gIERvbid0IGRvIHRoaXMgZm9yIGJlbGF0ZWQgaGVhbHMgYmVjYXVzZSBpdCBsb29rcyB3ZWlyZC5cclxuICAgICAgICBpZiAocGFyc2VkLmFtb3VudCA8IDAgJiYgY3VycmVudEhwICsgcGFyc2VkLmFtb3VudCA8PSAwKVxyXG4gICAgICAgICAgcGFyc2VkLmljb24gPz89ICdkZWF0aCc7XHJcblxyXG4gICAgICAgIC8vIFRPRE86IG1heWJlIHVzZSBtYXggaHAgaGVyZSB0byBjbGFtcCB0aGlzP1xyXG4gICAgICAgIGN1cnJlbnRIcCArPSBwYXJzZWQuYW1vdW50O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnBhcnNlZFJlcG9ydExpbmVzLnB1c2gocGFyc2VkKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5wYXJzZWRSZXBvcnRMaW5lcztcclxuICB9XHJcblxyXG4gIHByb2Nlc3NHYWluc0VmZmVjdChldmVudDogVHJhY2tlZExpbmVFdmVudCk6IFBhcnNlZERlYXRoUmVwb3J0TGluZSB7XHJcbiAgICAvLyBUT0RPOiB3ZSBhbHNvIG5lZWQgdG8gZmlsdGVyIGVmZmVjdHMgdGhhdCB3ZSBkb24ndCBjYXJlIGFib3V0LCBlLmcuIHN3aWZ0Y2FzdD9cclxuICAgIGNvbnN0IGVmZmVjdE5hbWUgPSBldmVudC5zcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuR2FpbnNFZmZlY3QuZmllbGRzLmVmZmVjdF0gPz8gJz8/Pyc7XHJcblxyXG4gICAgY29uc3QgdGV4dCA9IFRyYW5zbGF0ZSh0aGlzLmxhbmcsIHtcclxuICAgICAgZW46IGBHYWluOiAke2VmZmVjdE5hbWV9YCxcclxuICAgICAgZGU6IGBFcmhhbHRlbjogJHtlZmZlY3ROYW1lfWAsXHJcbiAgICAgIGZyOiBgR2FnbmU6ICR7ZWZmZWN0TmFtZX1gLFxyXG4gICAgICBqYTogYOeNsuW+lzogJHtlZmZlY3ROYW1lfWAsXHJcbiAgICAgIGNuOiBg6I635b6XOiAke2VmZmVjdE5hbWV9YCxcclxuICAgICAga286IGDslrvsnYw6ICR7ZWZmZWN0TmFtZX1gLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0aW1lc3RhbXA6IGV2ZW50LnRpbWVzdGFtcCxcclxuICAgICAgdGltZXN0YW1wU3RyOiB0aGlzLm1ha2VSZWxhdGl2ZVRpbWVTdHJpbmcoZXZlbnQudGltZXN0YW1wKSxcclxuICAgICAgdHlwZTogZXZlbnQudHlwZSxcclxuICAgICAgdGV4dDogdGV4dCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzTG9zZXNFZmZlY3QoZXZlbnQ6IFRyYWNrZWRMaW5lRXZlbnQpOiBQYXJzZWREZWF0aFJlcG9ydExpbmUge1xyXG4gICAgLy8gVE9ETzogd2UgYWxzbyBuZWVkIHRvIGZpbHRlciBlZmZlY3RzIHRoYXQgd2UgZG9uJ3QgY2FyZSBhYm91dCwgZS5nLiBzd2lmdGNhc3Q/XHJcbiAgICBjb25zdCBlZmZlY3ROYW1lID0gZXZlbnQuc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkxvc2VzRWZmZWN0LmZpZWxkcy5lZmZlY3RdID8/ICc/Pz8nO1xyXG5cclxuICAgIGNvbnN0IHRleHQgPSBUcmFuc2xhdGUodGhpcy5sYW5nLCB7XHJcbiAgICAgIGVuOiBgTG9zZTogJHtlZmZlY3ROYW1lfWAsXHJcbiAgICAgIGRlOiBgVmVybG9yZW46ICR7ZWZmZWN0TmFtZX1gLFxyXG4gICAgICBmcjogYFBlcmQ6ICR7ZWZmZWN0TmFtZX1gLFxyXG4gICAgICBqYTogYOWkseOBhjogJHtlZmZlY3ROYW1lfWAsXHJcbiAgICAgIGNuOiBg5aSx5Y67OiAke2VmZmVjdE5hbWV9YCxcclxuICAgICAga286IGDsnoPsnYw6ICR7ZWZmZWN0TmFtZX1gLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0aW1lc3RhbXA6IGV2ZW50LnRpbWVzdGFtcCxcclxuICAgICAgdGltZXN0YW1wU3RyOiB0aGlzLm1ha2VSZWxhdGl2ZVRpbWVTdHJpbmcoZXZlbnQudGltZXN0YW1wKSxcclxuICAgICAgdHlwZTogZXZlbnQudHlwZSxcclxuICAgICAgdGV4dDogdGV4dCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByb2Nlc3NBYmlsaXR5KGV2ZW50OiBUcmFja2VkTGluZUV2ZW50KTogUGFyc2VkRGVhdGhSZXBvcnRMaW5lIHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IHNwbGl0TGluZSA9IGV2ZW50LnNwbGl0TGluZTtcclxuICAgIGNvbnN0IGFiaWxpdHkgPSBwcm9jZXNzQWJpbGl0eUxpbmUoc3BsaXRMaW5lKTtcclxuXHJcbiAgICAvLyBaZXJvIGRhbWFnZSBhYmlsaXRpZXMgY2FuIGJlIG5vaXN5IGFuZCBkb24ndCBjb250cmlidXRlIG11Y2ggaW5mb3JtYXRpb24sIHNvIHNraXAuXHJcbiAgICBpZiAoYWJpbGl0eS5hbW91bnQgPT09IDApXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBsZXQgYW1vdW50O1xyXG5cclxuICAgIGxldCBhbW91bnRDbGFzczogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgbGV0IGFtb3VudFN0cjogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgaWYgKGFiaWxpdHkuaXNIZWFsKSB7XHJcbiAgICAgIGFtb3VudENsYXNzID0gJ2hlYWwnO1xyXG4gICAgICBhbW91bnRTdHIgPSBhYmlsaXR5LmFtb3VudCA+IDAgPyBgKyR7YWJpbGl0eS5hbW91bnQudG9TdHJpbmcoKX1gIDogYWJpbGl0eS5hbW91bnQudG9TdHJpbmcoKTtcclxuICAgICAgYW1vdW50ID0gYWJpbGl0eS5hbW91bnQ7XHJcbiAgICB9IGVsc2UgaWYgKGFiaWxpdHkuaXNBdHRhY2spIHtcclxuICAgICAgYW1vdW50Q2xhc3MgPSAnZGFtYWdlJztcclxuICAgICAgYW1vdW50U3RyID0gYWJpbGl0eS5hbW91bnQgPiAwID8gYC0ke2FiaWxpdHkuYW1vdW50LnRvU3RyaW5nKCl9YCA6IGFiaWxpdHkuYW1vdW50LnRvU3RyaW5nKCk7XHJcbiAgICAgIGFtb3VudCA9IC0xICogYWJpbGl0eS5hbW91bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWdub3JlIGFiaWxpdGllcyB0aGF0IGFyZSBub3QgZGFtYWdlIG9yIGhlYWxzLiAgQW55IGltcG9ydGFudCBhYmlsaXRpZXMgc2hvdWxkIGdlbmVyYXRlIGFuXHJcbiAgICAvLyBlZmZlY3QuXHJcbiAgICBpZiAoYW1vdW50Q2xhc3MgPT09IHVuZGVmaW5lZCB8fCBhbW91bnRTdHIgPT09IHVuZGVmaW5lZClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGFiaWxpdHlOYW1lID0gc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkFiaWxpdHkuZmllbGRzLmFiaWxpdHldID8/ICc/Pz8nO1xyXG4gICAgY29uc3QgY3VycmVudEhwU3RyID0gc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkFiaWxpdHkuZmllbGRzLnRhcmdldEN1cnJlbnRIcF07XHJcbiAgICBjb25zdCBjdXJyZW50SHAgPSBjdXJyZW50SHBTdHIgIT09IHVuZGVmaW5lZCA/IHBhcnNlSW50KGN1cnJlbnRIcFN0cikgOiAwO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGltZXN0YW1wOiBldmVudC50aW1lc3RhbXAsXHJcbiAgICAgIHRpbWVzdGFtcFN0cjogdGhpcy5tYWtlUmVsYXRpdmVUaW1lU3RyaW5nKGV2ZW50LnRpbWVzdGFtcCksXHJcbiAgICAgIHR5cGU6IGV2ZW50LnR5cGUsXHJcbiAgICAgIGN1cnJlbnRIcDogY3VycmVudEhwLFxyXG4gICAgICBhbW91bnQ6IGFtb3VudCxcclxuICAgICAgYW1vdW50U3RyOiBhbW91bnRTdHIsXHJcbiAgICAgIGFtb3VudENsYXNzOiBhbW91bnRDbGFzcyxcclxuICAgICAgaWNvbjogZXZlbnQubWlzdGFrZSxcclxuICAgICAgdGV4dDogZXZlbnQubWlzdGFrZVRleHQgPz8gYWJpbGl0eU5hbWUsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwcm9jZXNzSG9URG9UKGV2ZW50OiBUcmFja2VkTGluZUV2ZW50KTogUGFyc2VkRGVhdGhSZXBvcnRMaW5lIHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IHdoaWNoID0gZXZlbnQuc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLk5ldHdvcmtEb1QuZmllbGRzLndoaWNoXTtcclxuICAgIGNvbnN0IGlzSGVhbCA9IHdoaWNoID09PSAnSG9UJztcclxuXHJcbiAgICAvLyBOb3RlOiB0aGlzIGFtb3VudCBpcyBqdXN0IHJhdyBieXRlcywgYW5kIG5vdCB0aGUgVW5zY3JhbWJsZURhbWFnZSB2ZXJzaW9uLlxyXG4gICAgbGV0IGFtb3VudCA9IHBhcnNlSW50KGV2ZW50LnNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5OZXR3b3JrRG9ULmZpZWxkcy5kYW1hZ2VdID8/ICcnLCAxNik7XHJcbiAgICBpZiAoYW1vdW50IDw9IDApXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBsZXQgYW1vdW50Q2xhc3M6IHN0cmluZztcclxuICAgIGxldCBhbW91bnRTdHI6IHN0cmluZztcclxuICAgIGlmIChpc0hlYWwpIHtcclxuICAgICAgYW1vdW50Q2xhc3MgPSAnaGVhbCc7XHJcbiAgICAgIGFtb3VudFN0ciA9IGFtb3VudCA+IDAgPyBgKyR7YW1vdW50LnRvU3RyaW5nKCl9YCA6IGFtb3VudC50b1N0cmluZygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYW1vdW50Q2xhc3MgPSAnZGFtYWdlJztcclxuICAgICAgYW1vdW50U3RyID0gYW1vdW50ID4gMCA/IGAtJHthbW91bnQudG9TdHJpbmcoKX1gIDogYW1vdW50LnRvU3RyaW5nKCk7XHJcbiAgICAgIGFtb3VudCAqPSAtMTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjdXJyZW50SHBTdHIgPSBldmVudC5zcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuTmV0d29ya0RvVC5maWVsZHMuY3VycmVudEhwXTtcclxuICAgIGNvbnN0IGN1cnJlbnRIcCA9IGN1cnJlbnRIcFN0ciAhPT0gdW5kZWZpbmVkID8gcGFyc2VJbnQoY3VycmVudEhwU3RyKSA6IDA7XHJcblxyXG4gICAgLy8gVE9ETzogdGhpcyBsaW5lIGhhcyBhbiBlZmZlY3QgaWQsIGJ1dCB3ZSBkb24ndCBoYXZlIGFuIGlkIC0+IHN0cmluZyBtYXBwaW5nIGZvciBhbGwgaWRzLlxyXG4gICAgLy8gV2UgY291bGQgY29uc2lkZXIgbG9va2luZyB0aGlzIHVwIGluIGVmZmVjdHMgdG8gdHJ5IHRvIGZpbmQgYSBuYW1lLCBidXQgY29tbW9uIG9uZXNcclxuICAgIC8vIGxpa2UgUmVnZW4gb3IgQXN5bHVtIGFyZW4ndCBtYXBwZWQgdGhlcmUuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0aW1lc3RhbXA6IGV2ZW50LnRpbWVzdGFtcCxcclxuICAgICAgdGltZXN0YW1wU3RyOiB0aGlzLm1ha2VSZWxhdGl2ZVRpbWVTdHJpbmcoZXZlbnQudGltZXN0YW1wKSxcclxuICAgICAgdHlwZTogZXZlbnQudHlwZSxcclxuICAgICAgY3VycmVudEhwOiBjdXJyZW50SHAsXHJcbiAgICAgIGFtb3VudDogYW1vdW50LFxyXG4gICAgICBhbW91bnRTdHI6IGFtb3VudFN0cixcclxuICAgICAgYW1vdW50Q2xhc3M6IGFtb3VudENsYXNzLFxyXG4gICAgICB0ZXh0OiB3aGljaCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByb2Nlc3NNaXNzZWRCdWZmKGV2ZW50OiBUcmFja2VkTGluZUV2ZW50KTogUGFyc2VkRGVhdGhSZXBvcnRMaW5lIHwgdW5kZWZpbmVkIHtcclxuICAgIGxldCBidWZmTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgbGV0IHNvdXJjZU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ01pc3NlZEFiaWxpdHknKSB7XHJcbiAgICAgIGJ1ZmZOYW1lID0gZXZlbnQuc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkFiaWxpdHkuZmllbGRzLmFiaWxpdHldO1xyXG4gICAgICBzb3VyY2VOYW1lID0gZXZlbnQuc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkFiaWxpdHkuZmllbGRzLnNvdXJjZV07XHJcbiAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdNaXNzZWRFZmZlY3QnKSB7XHJcbiAgICAgIGJ1ZmZOYW1lID0gZXZlbnQuc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkdhaW5zRWZmZWN0LmZpZWxkcy5lZmZlY3RdO1xyXG4gICAgICBzb3VyY2VOYW1lID0gZXZlbnQuc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkdhaW5zRWZmZWN0LmZpZWxkcy5zb3VyY2VdO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghYnVmZk5hbWUgfHwgIXNvdXJjZU5hbWUpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCB0ZXh0ID0gVHJhbnNsYXRlKHRoaXMubGFuZywge1xyXG4gICAgICBlbjogYE1pc3NlZCAke2J1ZmZOYW1lfSAoJHtzb3VyY2VOYW1lfSlgLFxyXG4gICAgICBkZTogYCR7YnVmZk5hbWV9IHZlcmZlaGx0ZSAoJHtzb3VyY2VOYW1lfSlgLFxyXG4gICAgICBmcjogYCR7YnVmZk5hbWV9IG1hbnF1w6koZSkgKCR7c291cmNlTmFtZX0pYCxcclxuICAgICAgamE6IGAke2J1ZmZOYW1lfeOCkuODn+OCueOBl+OBnyAoJHtzb3VyY2VOYW1lfeOBi+OCiSlgLFxyXG4gICAgICBjbjogYOayoeWQg+WIsCAke2J1ZmZOYW1lfSAo5p2l6IeqJHtzb3VyY2VOYW1lfSlgLFxyXG4gICAgICBrbzogYCR7YnVmZk5hbWV9IOuGk+y5qCAoJHtzb3VyY2VOYW1lfSlgLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0aW1lc3RhbXA6IGV2ZW50LnRpbWVzdGFtcCxcclxuICAgICAgdGltZXN0YW1wU3RyOiB0aGlzLm1ha2VSZWxhdGl2ZVRpbWVTdHJpbmcoZXZlbnQudGltZXN0YW1wKSxcclxuICAgICAgdHlwZTogZXZlbnQudHlwZSxcclxuICAgICAgaWNvbjogJ2hlYWwnLFxyXG4gICAgICB0ZXh0OiBUcmFuc2xhdGUodGhpcy5sYW5nLCB0ZXh0KSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByb2Nlc3NNaXN0YWtlKGV2ZW50OiBUcmFja2VkTWlzdGFrZUV2ZW50KTogUGFyc2VkRGVhdGhSZXBvcnRMaW5lIHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IG1pc3Rha2UgPSBldmVudC5taXN0YWtlRXZlbnQ7XHJcbiAgICBjb25zdCB0cmlnZ2VyVHlwZSA9IG1pc3Rha2UudHJpZ2dlclR5cGU7XHJcblxyXG4gICAgLy8gQnVmZnMgYXJlIGhhbmRsZWQgc2VwYXJhdGVseSwgYW5kIERhbWFnZSB0eXBlcyBhcmUgYW5ub3RhdGVkIGRpcmVjdGx5IG9uIHRoZSBsaW5lc1xyXG4gICAgLy8gd2hlcmUgdGhlcmUgaXMgZGFtYWdlLCByYXRoZXIgdGhhbiBoYXZpbmcgYSBzZXBhcmF0ZSBsaW5lLiAgU29sby9TaGFyZSBtaXN0YWtlc1xyXG4gICAgLy8gYXJlIG1lcmdlZCB3aXRoIHRoZWlyIGFiaWxpdHkgdmlhIGBtaXN0YWtlVGV4dGAuXHJcbiAgICBpZiAoXHJcbiAgICAgIHRyaWdnZXJUeXBlID09PSAnQnVmZicgfHxcclxuICAgICAgdHJpZ2dlclR5cGUgPT09ICdEYW1hZ2UnIHx8XHJcbiAgICAgIHRyaWdnZXJUeXBlID09PSAnU29sbycgfHxcclxuICAgICAgdHJpZ2dlclR5cGUgPT09ICdTaGFyZSdcclxuICAgIClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHRleHQgPSBUcmFuc2xhdGUodGhpcy5sYW5nLCBtaXN0YWtlLnRleHQpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGltZXN0YW1wOiBldmVudC50aW1lc3RhbXAsXHJcbiAgICAgIHRpbWVzdGFtcFN0cjogdGhpcy5tYWtlUmVsYXRpdmVUaW1lU3RyaW5nKGV2ZW50LnRpbWVzdGFtcCksXHJcbiAgICAgIHR5cGU6IGV2ZW50LnR5cGUsXHJcbiAgICAgIGljb246IG1pc3Rha2UudHlwZSxcclxuICAgICAgdGV4dDogdGV4dCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByb2Nlc3NEZWF0aFJlYXNvbihldmVudDogVHJhY2tlZERlYXRoUmVhc29uRXZlbnQpOiBQYXJzZWREZWF0aFJlcG9ydExpbmUgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGltZXN0YW1wOiBldmVudC50aW1lc3RhbXAsXHJcbiAgICAgIHRpbWVzdGFtcFN0cjogdGhpcy5tYWtlUmVsYXRpdmVUaW1lU3RyaW5nKGV2ZW50LnRpbWVzdGFtcCksXHJcbiAgICAgIHR5cGU6IGV2ZW50LnR5cGUsXHJcbiAgICAgIGljb246ICdkZWF0aCcsXHJcbiAgICAgIHRleHQ6IGV2ZW50LnRleHQsXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgbG9nRGVmaW5pdGlvbnMgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL25ldGxvZ19kZWZzJztcclxuXHJcbmltcG9ydCB7IE1pc3NhYmxlQWJpbGl0eSwgTWlzc2FibGVFZmZlY3QgfSBmcm9tICcuL2J1ZmZfbWFwJztcclxuXHJcbi8vIEFiaWxpdGllcyBzZWVtIHJvdWdobHkgaW5zdGFudC5cclxuLy8gT2JzZXJ2YXRpb246IHVwIHRvIH4xLjIgc2Vjb25kcyBmb3IgYW4gZWZmZWN0IHRvIHJvbGwgdGhyb3VnaCB0aGUgcGFydHkuXHJcbmNvbnN0IGRlZmF1bHRDb2xsZWN0U2Vjb25kcyA9IDAuNTtcclxuXHJcbmV4cG9ydCB0eXBlIENvbGxlY3RlZEJ1ZmYgPSB7XHJcbiAgdGltZXN0YW1wOiBudW1iZXI7XHJcbiAgZXhwaXJlVGltZXN0YW1wOiBudW1iZXI7XHJcbiAgc291cmNlSWQ6IHN0cmluZztcclxuICBidWZmTmFtZTogc3RyaW5nO1xyXG4gIHRhcmdldElkczogc3RyaW5nW107XHJcbiAgc3BsaXRMaW5lOiBzdHJpbmdbXTtcclxuICBidWZmOiBNaXNzYWJsZUFiaWxpdHkgfCBNaXNzYWJsZUVmZmVjdDtcclxuICBleHBpcmVDYWxsYmFjazogKHRpbWVzdGFtcDogbnVtYmVyKSA9PiB2b2lkO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgUmVxdWVzdFRpbWVzdGFtcENhbGxiYWNrID0gKFxyXG4gIHRpbWVzdGFtcDogbnVtYmVyLFxyXG4gIGNhbGxiYWNrOiAodGltZXN0YW1wOiBudW1iZXIpID0+IHZvaWQsXHJcbikgPT4gdm9pZDtcclxudHlwZSBDb2xsZWN0ZWRCdWZmQ2FsbGJhY2sgPSAodGltZXN0YW1wOiBudW1iZXIsIGJ1ZmY6IENvbGxlY3RlZEJ1ZmYpID0+IHZvaWQ7XHJcblxyXG4vLyBIYW5kbGVzIHRyYWNraW5nIHdoZXRoZXIgZXZlcnlib2R5IHJlY2VpdmVkIGEgYnVmZiBvciBub3QuXHJcbi8vIEluIHJlc3BvbnNlIHRvIG1pc3NlZCBidWZmcywgY2FsbHMgYGNvbGxlY3RlZEJ1ZmZDYWxsYmFja2Agd2hlbiB0aW1lc3RhbXBzIGhhdmUgZXhwaXJlZC5cclxuZXhwb3J0IGNsYXNzIE1pc3NlZEJ1ZmZDb2xsZWN0b3Ige1xyXG4gIHByaXZhdGUgYnVmZnM6IHsgW3NvdXJjZUlkOiBzdHJpbmddOiB7IFtidWZmSWQ6IHN0cmluZ106IENvbGxlY3RlZEJ1ZmYgfSB9ID0ge307XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZXF1ZXN0VGltZXN0YW1wQ2FsbGJhY2s6IFJlcXVlc3RUaW1lc3RhbXBDYWxsYmFjayxcclxuICAgIHByaXZhdGUgY29sbGVjdGVkQnVmZkNhbGxiYWNrOiBDb2xsZWN0ZWRCdWZmQ2FsbGJhY2ssXHJcbiAgKSB7XHJcbiAgfVxyXG5cclxuICAvLyBUT0RPOiBjYWxsIHNvbWV0aGluZyBsaWtlIHRoaXMgb24gem9uZSBjaGFuZ2UsIGV0Yz9cclxuICBFeHBpcmVCdWZmc0lmTmVlZGVkKHRpbWVzdGFtcDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBmb3IgKGNvbnN0IGJ1ZmZMaXN0IG9mIE9iamVjdC52YWx1ZXModGhpcy5idWZmcykpIHtcclxuICAgICAgZm9yIChjb25zdCBidWZmSWQgb2YgT2JqZWN0LmtleXMoYnVmZkxpc3QpKSB7XHJcbiAgICAgICAgY29uc3QgY29sbGVjdGVkQnVmZiA9IGJ1ZmZMaXN0W2J1ZmZJZF07XHJcbiAgICAgICAgaWYgKCFjb2xsZWN0ZWRCdWZmKVxyXG4gICAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICAgIGlmICh0aW1lc3RhbXAgPiBjb2xsZWN0ZWRCdWZmLnRpbWVzdGFtcClcclxuICAgICAgICAgIGNvbGxlY3RlZEJ1ZmYuZXhwaXJlQ2FsbGJhY2sodGltZXN0YW1wKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ2FsbGVyIGhhcyB2ZXR0ZWQgdGhhdCB3ZSBjYXJlIGFib3V0IHRoZSB0YXJnZXQsIHNvIHdlIGRvbid0IG5lZWQgdG8gZG8gdGhhdCBoZXJlLlxyXG4gIC8vIE1vc3QgKGFsbCkgYnVmZnMgb25seSBoaXQgdGhlIHBhcnR5LCBhbmQgc28gbm8gbmVlZCB0byB2ZXQgdGhhdCB0aGUgc291cmNlIGlzIGluIHRoZSBwYXJ0eS5cclxuICBPbkFiaWxpdHlCdWZmKHNwbGl0TGluZTogc3RyaW5nW10sIGJ1ZmY6IE1pc3NhYmxlQWJpbGl0eSk6IHZvaWQge1xyXG4gICAgY29uc3Qgc291cmNlSWQgPSBzcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuQWJpbGl0eS5maWVsZHMuc291cmNlSWRdO1xyXG4gICAgY29uc3QgdGFyZ2V0SWQgPSBzcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuQWJpbGl0eS5maWVsZHMudGFyZ2V0SWRdO1xyXG4gICAgY29uc3QgYnVmZk5hbWUgPSBzcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuQWJpbGl0eS5maWVsZHMuYWJpbGl0eV07XHJcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBzcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuQWJpbGl0eS5maWVsZHMudGltZXN0YW1wXTtcclxuICAgIGlmIChcclxuICAgICAgc291cmNlSWQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXRJZCA9PT0gdW5kZWZpbmVkIHx8IGJ1ZmZOYW1lID09PSB1bmRlZmluZWQgfHxcclxuICAgICAgdGltZXN0YW1wID09PSB1bmRlZmluZWRcclxuICAgIClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIHRoaXMuT25CdWZmKG5ldyBEYXRlKHRpbWVzdGFtcCkuZ2V0VGltZSgpLCBzcGxpdExpbmUsIGJ1ZmYsIGJ1ZmZOYW1lLCBzb3VyY2VJZCwgdGFyZ2V0SWQpO1xyXG4gIH1cclxuXHJcbiAgT25FZmZlY3RCdWZmKHNwbGl0TGluZTogc3RyaW5nW10sIGJ1ZmY6IE1pc3NhYmxlRWZmZWN0KTogdm9pZCB7XHJcbiAgICBjb25zdCBzb3VyY2VJZCA9IHNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5HYWluc0VmZmVjdC5maWVsZHMuc291cmNlSWRdO1xyXG4gICAgY29uc3QgdGFyZ2V0SWQgPSBzcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuR2FpbnNFZmZlY3QuZmllbGRzLnRhcmdldElkXTtcclxuICAgIGNvbnN0IGJ1ZmZOYW1lID0gc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkdhaW5zRWZmZWN0LmZpZWxkcy5lZmZlY3RdO1xyXG4gICAgY29uc3QgdGltZXN0YW1wID0gc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkdhaW5zRWZmZWN0LmZpZWxkcy50aW1lc3RhbXBdO1xyXG4gICAgaWYgKFxyXG4gICAgICBzb3VyY2VJZCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldElkID09PSB1bmRlZmluZWQgfHwgYnVmZk5hbWUgPT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICB0aW1lc3RhbXAgPT09IHVuZGVmaW5lZFxyXG4gICAgKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgdGhpcy5PbkJ1ZmYobmV3IERhdGUodGltZXN0YW1wKS5nZXRUaW1lKCksIHNwbGl0TGluZSwgYnVmZiwgYnVmZk5hbWUsIHNvdXJjZUlkLCB0YXJnZXRJZCk7XHJcbiAgfVxyXG5cclxuICBPbkJ1ZmYoXHJcbiAgICB0aW1lc3RhbXA6IG51bWJlcixcclxuICAgIHNwbGl0TGluZTogc3RyaW5nW10sXHJcbiAgICBidWZmOiBNaXNzYWJsZUFiaWxpdHkgfCBNaXNzYWJsZUVmZmVjdCxcclxuICAgIGJ1ZmZOYW1lOiBzdHJpbmcsXHJcbiAgICBzb3VyY2VJZDogc3RyaW5nLFxyXG4gICAgdGFyZ2V0SWQ6IHN0cmluZyxcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IGJ1ZmZMaXN0ID0gdGhpcy5idWZmc1tzb3VyY2VJZF0gPz89IHt9O1xyXG5cclxuICAgIC8vIEV4cGlyZSB0aGlzIGJ1ZmYgaWYgbmVlZGVkLlxyXG4gICAgY29uc3QgZXhwaXJlZEJ1ZmYgPSBidWZmTGlzdFtidWZmLmlkXTtcclxuICAgIGlmIChleHBpcmVkQnVmZiAmJiB0aW1lc3RhbXAgPiBleHBpcmVkQnVmZi5leHBpcmVUaW1lc3RhbXApIHtcclxuICAgICAgLy8gSGFuZGxlIGFuZCByZW1vdmUgdGhpcyBidWZmIGlmIGl0IGhhcyBleHBpcmVkLlxyXG4gICAgICBleHBpcmVkQnVmZi5leHBpcmVDYWxsYmFjayh0aW1lc3RhbXApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHdlJ3JlIGFscmVhZHkgdHJhY2tpbmcsIGFuZCBpdCBoYXNuJ3QgZXhwaXJlZCwganVzdCBhcHBlbmQgdGhlIHRhcmdldElkLlxyXG4gICAgY29uc3QgY29sbGVjdGVkQnVmZiA9IGJ1ZmZMaXN0W2J1ZmYuaWRdO1xyXG4gICAgaWYgKGNvbGxlY3RlZEJ1ZmYpIHtcclxuICAgICAgY29sbGVjdGVkQnVmZi50YXJnZXRJZHMucHVzaCh0YXJnZXRJZCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBPdGhlcndpc2UsIHdlJ3JlIHRyYWNraW5nIGEgbmV3IGJ1ZmYuXHJcbiAgICBjb25zdCBjb2xsZWN0U2Vjb25kcyA9IGJ1ZmYuY29sbGVjdFNlY29uZHMgPz8gZGVmYXVsdENvbGxlY3RTZWNvbmRzO1xyXG4gICAgY29uc3QgZXhwaXJlVGltZXN0YW1wID0gdGltZXN0YW1wICsgY29sbGVjdFNlY29uZHMgKiAxMDAwO1xyXG5cclxuICAgIGNvbnN0IGV4cGlyZUNhbGxiYWNrID0gKHRpbWVzdGFtcDogbnVtYmVyKSA9PiB7XHJcbiAgICAgIC8vIFJlLWdldCB0aGUgYnVmZiBmcm9tIHRoZSBtYXAsIHNvIHRoYXQgcmVwZWF0ZWQgY2FsbHMgdG8gZXhwaXJlQ2FsbGJhY2sgd2lsbCBub3RcclxuICAgICAgLy8gY2FsbCB0aGUgY29sbGVjdGVkQnVmZkNhbGxiYWNrIG11bHRpcGxlIHRpbWVzLlxyXG4gICAgICBjb25zdCBleHBpcmVkQnVmZiA9IHRoaXMuYnVmZnNbc291cmNlSWRdPy5bYnVmZi5pZF07XHJcbiAgICAgIGlmICghZXhwaXJlZEJ1ZmYpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB0aGlzLmNvbGxlY3RlZEJ1ZmZDYWxsYmFjayh0aW1lc3RhbXAsIGV4cGlyZWRCdWZmKTtcclxuICAgICAgZGVsZXRlIHRoaXMuYnVmZnNbc291cmNlSWRdPy5bYnVmZi5pZF07XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIElmIHdlIGdldCBoZXJlLCB0aGlzIGJ1ZmYgaXMgbm90IGJlaW5nIHRyYWNrZWQgeWV0LlxyXG4gICAgYnVmZkxpc3RbYnVmZi5pZF0gPSB7XHJcbiAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLFxyXG4gICAgICBzcGxpdExpbmU6IHNwbGl0TGluZSxcclxuICAgICAgZXhwaXJlVGltZXN0YW1wOiBleHBpcmVUaW1lc3RhbXAsXHJcbiAgICAgIHNvdXJjZUlkOiBzb3VyY2VJZCxcclxuICAgICAgYnVmZk5hbWU6IGJ1ZmZOYW1lLFxyXG4gICAgICB0YXJnZXRJZHM6IFt0YXJnZXRJZF0sXHJcbiAgICAgIGJ1ZmY6IGJ1ZmYsXHJcbiAgICAgIGV4cGlyZUNhbGxiYWNrOiBleHBpcmVDYWxsYmFjayxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZXF1ZXN0VGltZXN0YW1wQ2FsbGJhY2soZXhwaXJlVGltZXN0YW1wLCBleHBpcmVDYWxsYmFjayk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBsb2dEZWZpbml0aW9ucyBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbmV0bG9nX2RlZnMnO1xyXG5pbXBvcnQgeyBVbnJlYWNoYWJsZUNvZGUgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbm90X3JlYWNoZWQnO1xyXG5pbXBvcnQgUGFydHlUcmFja2VyIGZyb20gJy4uLy4uL3Jlc291cmNlcy9wYXJ0eSc7XHJcbmltcG9ydCB7IFBhcnR5IH0gZnJvbSAnLi4vLi4vdHlwZXMvZXZlbnQnO1xyXG5pbXBvcnQge1xyXG4gIERlYXRoUmVwb3J0RGF0YSxcclxuICBPb3BzeURlYXRoUmVhc29uLFxyXG4gIE9vcHN5TWlzdGFrZSxcclxuICBPb3BzeU1pc3Rha2VUeXBlLFxyXG59IGZyb20gJy4uLy4uL3R5cGVzL29vcHN5JztcclxuXHJcbmltcG9ydCB7XHJcbiAgTWlzc2FibGVBYmlsaXR5LFxyXG4gIE1pc3NhYmxlRWZmZWN0LFxyXG4gIG1pc3NlZEFiaWxpdHlCdWZmTWFwLFxyXG4gIG1pc3NlZEVmZmVjdEJ1ZmZNYXAsXHJcbn0gZnJvbSAnLi9idWZmX21hcCc7XHJcbmltcG9ydCB7IFByb2Nlc3NlZE9vcHN5VHJpZ2dlclNldCB9IGZyb20gJy4vZGFtYWdlX3RyYWNrZXInO1xyXG5pbXBvcnQgeyBEZWF0aFJlcG9ydCB9IGZyb20gJy4vZGVhdGhfcmVwb3J0JztcclxuaW1wb3J0IHtcclxuICBDb2xsZWN0ZWRCdWZmLFxyXG4gIE1pc3NlZEJ1ZmZDb2xsZWN0b3IsXHJcbiAgUmVxdWVzdFRpbWVzdGFtcENhbGxiYWNrLFxyXG59IGZyb20gJy4vbWlzc2VkX2J1ZmZfY29sbGVjdG9yJztcclxuaW1wb3J0IHsgTWlzdGFrZUNvbGxlY3RvciB9IGZyb20gJy4vbWlzdGFrZV9jb2xsZWN0b3InO1xyXG5pbXBvcnQge1xyXG4gIEdldFNoYXJlTWlzdGFrZVRleHQsXHJcbiAgR2V0U29sb01pc3Rha2VUZXh0LFxyXG4gIElzUGxheWVySWQsXHJcbiAgU2hvcnROYW1pZnksXHJcbiAgVHJhbnNsYXRlLFxyXG59IGZyb20gJy4vb29wc3lfY29tbW9uJztcclxuaW1wb3J0IHsgT29wc3lPcHRpb25zIH0gZnJvbSAnLi9vb3BzeV9vcHRpb25zJztcclxuXHJcbmNvbnN0IGVtcHR5SWQgPSAnRTAwMDAwMDAnO1xyXG5jb25zdCB0aW1lc3RhbXBGaWVsZElkeCA9IDE7XHJcblxyXG4vLyBUT0RPOiBhZGQgdGhpcyB0byBlZmZlY3RfaWQudHM/XHJcbmNvbnN0IHJhaXNlRWZmZWN0SWQgPSAnOTQnO1xyXG5cclxuY29uc3QgZ2V0VGltZXN0YW1wID0gKHNwbGl0TGluZTogc3RyaW5nW10pOiBudW1iZXIgPT4ge1xyXG4gIGNvbnN0IHRpbWVzdGFtcEZpZWxkID0gc3BsaXRMaW5lW3RpbWVzdGFtcEZpZWxkSWR4XTtcclxuICBpZiAodGltZXN0YW1wRmllbGQgPT09IHVuZGVmaW5lZClcclxuICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wRmllbGQpLmdldFRpbWUoKTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFRyYWNrZWRMaW5lRXZlbnRUeXBlID1cclxuICB8ICdBYmlsaXR5J1xyXG4gIHwgJ0dhaW5zRWZmZWN0J1xyXG4gIHwgJ0xvc2VzRWZmZWN0J1xyXG4gIHwgJ0hvVERvVCdcclxuICB8ICdNaXNzZWRBYmlsaXR5J1xyXG4gIHwgJ01pc3NlZEVmZmVjdCc7XHJcblxyXG5leHBvcnQgdHlwZSBUcmFja2VkTGluZUV2ZW50ID0ge1xyXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xyXG4gIHR5cGU6IFRyYWNrZWRMaW5lRXZlbnRUeXBlO1xyXG4gIHRhcmdldElkOiBzdHJpbmc7XHJcbiAgLy8gQW5ub3RhdGUgdGhpcyBsaW5lIHdpdGggYSBtaXN0YWtlIGljb24uXHJcbiAgbWlzdGFrZT86IE9vcHN5TWlzdGFrZVR5cGU7XHJcbiAgLy8gT3ZlcnJpZGUgdGhlIHRleHQgZnJvbSB0aGUgc3BsaXRMaW5lIHdpdGggZXhwbGljaXQgdGV4dCAoZS5nLiBzb2xvL3NoYXJlIG1pc3Rha2UpLlxyXG4gIG1pc3Rha2VUZXh0Pzogc3RyaW5nO1xyXG4gIHNwbGl0TGluZTogc3RyaW5nW107XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBUcmFja2VkRGVhdGhSZWFzb25FdmVudCA9IHtcclxuICB0aW1lc3RhbXA6IG51bWJlcjtcclxuICB0eXBlOiAnRGVhdGhSZWFzb24nO1xyXG4gIHRhcmdldElkOiBzdHJpbmc7XHJcbiAgdGV4dDogc3RyaW5nO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgVHJhY2tlZE1pc3Rha2VFdmVudCA9IHtcclxuICB0aW1lc3RhbXA6IG51bWJlcjtcclxuICB0eXBlOiAnTWlzdGFrZSc7XHJcbiAgdGFyZ2V0SWQ6IHN0cmluZztcclxuICBtaXN0YWtlRXZlbnQ6IE9vcHN5TWlzdGFrZTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFRyYWNrZWRFdmVudCA9IFRyYWNrZWRMaW5lRXZlbnQgfCBUcmFja2VkRGVhdGhSZWFzb25FdmVudCB8IFRyYWNrZWRNaXN0YWtlRXZlbnQ7XHJcbmV4cG9ydCB0eXBlIFRyYWNrZWRFdmVudFR5cGUgPSBUcmFja2VkRXZlbnRbJ3R5cGUnXTtcclxuXHJcbi8vICogVHJhY2tzIHZhcmlvdXMgc3RhdGUgYWJvdXQgdGhlIHBhcnR5IChwYXJ0eSwgcGV0cywgYnVmZnMsIGRlYXRocykuXHJcbi8vICogR2VuZXJhdGVzIHNvbWUgaW50ZXJuYWwgbWlzdGFrZXMgdGhhdCBuZWVkIGV4dHJhIHRyYWNraW5nIChtaXNzZWQgYnVmZnMsIGRlYXRocylcclxuLy8gKiBUcmFja3MgZXZlbnRzIGluIGB0cmFja2VkRXZlbnRzYCB0aGF0IGNhbiBiZSBoYW5kZWQgdG8gRGVhdGhSZXBvcnRzIGZvciBwcm9jZXNzaW5nLlxyXG5leHBvcnQgY2xhc3MgUGxheWVyU3RhdGVUcmFja2VyIHtcclxuICBwdWJsaWMgcGFydHlUcmFja2VyOiBQYXJ0eVRyYWNrZXI7XHJcblxyXG4gIHByaXZhdGUgbWlzc2VkQnVmZkNvbGxlY3RvcjtcclxuICBwcml2YXRlIHRyaWdnZXJTZXRzOiBQcm9jZXNzZWRPb3BzeVRyaWdnZXJTZXRbXSA9IFtdO1xyXG4gIHByaXZhdGUgcGFydHlJZHM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xyXG4gIHByaXZhdGUgZGVhZElkczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XHJcbiAgcHJpdmF0ZSBpZFRvUGFydHlJbmZvOiB7IFtjb21iYXRhbnRJZDogc3RyaW5nXTogUGFydHkgfSA9IHt9O1xyXG4gIHByaXZhdGUgcGV0SWRUb093bmVySWQ6IHsgW3BldElkOiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xyXG4gIHByaXZhdGUgYWJpbGl0eUlkVG9CdWZmOiB7IFthYmlsaXR5SWQ6IHN0cmluZ106IE1pc3NhYmxlQWJpbGl0eSB9ID0ge307XHJcbiAgcHJpdmF0ZSBlZmZlY3RJZFRvQnVmZjogeyBbZWZmZWN0SWQ6IHN0cmluZ106IE1pc3NhYmxlRWZmZWN0IH0gPSB7fTtcclxuICBwcml2YXRlIHRyYWNrZWRFdmVudHM6IFRyYWNrZWRFdmVudFtdID0gW107XHJcbiAgcHJpdmF0ZSB0cmFja2VkRWZmZWN0TWFwOiB7IFt0YXJnZXRJZDogc3RyaW5nXTogeyBbZWZmZWN0SWQ6IHN0cmluZ106IFRyYWNrZWRFdmVudCB9IH0gPSB7fTtcclxuICAvLyBUaGUgbWluaW11bSBhbW91bnQgb2YgdGltZSB0byBrZWVwIGV2ZW50cyBmb3IuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudFdpbmRvd01zID0gMjAgKiAxMDAwO1xyXG4gIC8vIFRoZSB0aW1lIGRlbHRhIGluIHRoZSBmdXR1cmUgdG8gcmVxdWVzdCBjbGVhbmluZyB1cCBldmVudHMgZnJvbSB0aGUgcGFzdCwgYWZ0ZXIgYSBjbGVhbnVwLlxyXG4gIC8vIFRoZSBsYXJnZXIgdGhpcyBpcywgdGhlIG1vcmUgaXQgZXhjaGFuZ2VzIG1lbW9yeSBmb3IgY3B1LCB0byBrZWVwIG1vcmUgZXZlbnRzIHJhdGhlciB0aGFuXHJcbiAgLy8gY29uc3RhbnRseSBjeWNsaW5nIGB0cmFja2VkRXZlbnRzYC4gIDAgPSBjbGVhbiB1cCBpbW1lZGlhdGVseS5cclxuICBwcml2YXRlIHJlYWRvbmx5IGNsZWFudXBXaW5kb3dNcyA9IHRoaXMuZXZlbnRXaW5kb3dNcyAqIDI7XHJcbiAgcHJpdmF0ZSBuZXh0UHJ1bmVUaW1lc3RhbXA/OiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBiYXNlVGltZT86IG51bWJlcjtcclxuICBwcml2YXRlIG15UGxheWVySWQ/OiBzdHJpbmc7XHJcblxyXG4gIC8vIENhY2hlZCBhYmlsaXR5IC0+IG1pc3Rha2UgaWNvbiB0eXBlcyBmb3IgXCJzaW1wbGVcIiBtaXN0YWtlcy5cclxuICBwcml2YXRlIG1pc3Rha2VEYW1hZ2VNYXA6IHsgW2lkOiBzdHJpbmddOiBPb3BzeU1pc3Rha2VUeXBlIH0gPSB7fTtcclxuICBwcml2YXRlIG1pc3Rha2VTaGFyZU1hcDogeyBbaWQ6IHN0cmluZ106IE9vcHN5TWlzdGFrZVR5cGUgfSA9IHt9O1xyXG4gIHByaXZhdGUgbWlzdGFrZVNvbG9NYXA6IHsgW2lkOiBzdHJpbmddOiBPb3BzeU1pc3Rha2VUeXBlIH0gPSB7fTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIG9wdGlvbnM6IE9vcHN5T3B0aW9ucyxcclxuICAgIHByaXZhdGUgY29sbGVjdG9yOiBNaXN0YWtlQ29sbGVjdG9yLFxyXG4gICAgcmVxdWVzdFRpbWVzdGFtcENhbGxiYWNrOiBSZXF1ZXN0VGltZXN0YW1wQ2FsbGJhY2ssXHJcbiAgKSB7XHJcbiAgICB0aGlzLnBhcnR5VHJhY2tlciA9IG5ldyBQYXJ0eVRyYWNrZXIoKTtcclxuICAgIHRoaXMubWlzc2VkQnVmZkNvbGxlY3RvciA9IG5ldyBNaXNzZWRCdWZmQ29sbGVjdG9yKFxyXG4gICAgICByZXF1ZXN0VGltZXN0YW1wQ2FsbGJhY2ssXHJcbiAgICAgICh0aW1lc3RhbXAsIGJ1ZmYpID0+IHRoaXMuT25CdWZmQ29sbGVjdGVkKHRpbWVzdGFtcCwgYnVmZiksXHJcbiAgICApO1xyXG5cclxuICAgIC8vIEJ1aWxkIG1hcHMgb2YgaWRzIHRvIGJ1ZmZzIGZvciBlYXNlIG9mIHVzZS5cclxuICAgIGZvciAoY29uc3QgYnVmZiBvZiBtaXNzZWRBYmlsaXR5QnVmZk1hcCkge1xyXG4gICAgICBpZiAodHlwZW9mIGJ1ZmYuYWJpbGl0eUlkID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHRoaXMuYWJpbGl0eUlkVG9CdWZmW2J1ZmYuYWJpbGl0eUlkXSA9IGJ1ZmY7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBpZCBvZiBidWZmLmFiaWxpdHlJZClcclxuICAgICAgICAgIHRoaXMuYWJpbGl0eUlkVG9CdWZmW2lkXSA9IGJ1ZmY7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgYnVmZiBvZiBtaXNzZWRFZmZlY3RCdWZmTWFwKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgYnVmZi5lZmZlY3RJZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICB0aGlzLmVmZmVjdElkVG9CdWZmW2J1ZmYuZWZmZWN0SWRdID0gYnVmZjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGJ1ZmYuZWZmZWN0SWQpXHJcbiAgICAgICAgICB0aGlzLmVmZmVjdElkVG9CdWZmW2lkXSA9IGJ1ZmY7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLk9uUGFydHlDaGFuZ2VkKCk7XHJcbiAgfVxyXG5cclxuICBPblN0YXJ0RW5jb3VudGVyKHRpbWVzdGFtcDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLmJhc2VUaW1lID0gdGltZXN0YW1wO1xyXG4gICAgdGhpcy5jb2xsZWN0b3IuU3RhcnRFbmNvdW50ZXIodGltZXN0YW1wKTtcclxuICB9XHJcblxyXG4gIE9uU3RvcEVuY291bnRlcihfdGltZXN0YW1wOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8vIFRPRE86IGZvcndhcmQgdGhpcyBhbG9uZyB0byBNaXN0YWtlT2JzZXJ2ZXJcclxuICB9XHJcblxyXG4gIFB1c2hUcmlnZ2VyU2V0KHNldDogUHJvY2Vzc2VkT29wc3lUcmlnZ2VyU2V0KTogdm9pZCB7XHJcbiAgICB0aGlzLnRyaWdnZXJTZXRzLnB1c2goc2V0KTtcclxuICAgIGZvciAoY29uc3Qgc2V0IG9mIHRoaXMudHJpZ2dlclNldHMpIHtcclxuICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBPYmplY3QudmFsdWVzKHNldC5kYW1hZ2VXYXJuID8/IHt9KSlcclxuICAgICAgICB0aGlzLm1pc3Rha2VEYW1hZ2VNYXBbdmFsdWVdID0gJ3dhcm4nO1xyXG4gICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIE9iamVjdC52YWx1ZXMoc2V0LmRhbWFnZUZhaWwgPz8ge30pKVxyXG4gICAgICAgIHRoaXMubWlzdGFrZURhbWFnZU1hcFt2YWx1ZV0gPSAnZmFpbCc7XHJcbiAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhzZXQuc2hhcmVXYXJuID8/IHt9KSlcclxuICAgICAgICB0aGlzLm1pc3Rha2VTaGFyZU1hcFt2YWx1ZV0gPSAnd2Fybic7XHJcbiAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhzZXQuc2hhcmVGYWlsID8/IHt9KSlcclxuICAgICAgICB0aGlzLm1pc3Rha2VTaGFyZU1hcFt2YWx1ZV0gPSAnZmFpbCc7XHJcbiAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhzZXQuc29sb1dhcm4gPz8ge30pKVxyXG4gICAgICAgIHRoaXMubWlzdGFrZVNvbG9NYXBbdmFsdWVdID0gJ3dhcm4nO1xyXG4gICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIE9iamVjdC52YWx1ZXMoc2V0LnNvbG9GYWlsID8/IHt9KSlcclxuICAgICAgICB0aGlzLm1pc3Rha2VTb2xvTWFwW3ZhbHVlXSA9ICdmYWlsJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIENsZWFyVHJpZ2dlclNldHMoKTogdm9pZCB7XHJcbiAgICB0aGlzLnRyaWdnZXJTZXRzID0gW107XHJcbiAgICB0aGlzLm1pc3Rha2VEYW1hZ2VNYXAgPSB7fTtcclxuICAgIHRoaXMubWlzdGFrZVNoYXJlTWFwID0ge307XHJcbiAgICB0aGlzLm1pc3Rha2VTb2xvTWFwID0ge307XHJcbiAgfVxyXG5cclxuICAvLyBDYWxsZWQgdG8gdXBkYXRlIHRoZSBsaXN0IG9mIHBsYXllciBpZHMgd2UgY2FyZSBhYm91dC5cclxuICBPblBhcnR5Q2hhbmdlZCgpOiB2b2lkIHtcclxuICAgIC8vIFRPRE86IGRvIHdlIG5lZWQgdG8gY2xlYW4gYW55dGhpbmcgZWxzZSB1cCBoZXJlIGlmIHRoaXMgY2hhbmdlcz9cclxuICAgIC8vIE9yLCBkbyB3ZSBqdXN0IGFzc3VtZSBwYXJ0eSBkb2Vzbid0IGNoYW5nZSB1bmxlc3MgYXQgem9uZSBjaGFuZ2UsIHNvIGlnbm9yZSBlZGdlIGNhc2VzP1xyXG4gICAgY29uc3QgYXJyID0gWy4uLnRoaXMucGFydHlUcmFja2VyLnBhcnR5SWRzXTtcclxuXHJcbiAgICAvLyBJbmNsdWRlIHRoZSBwbGF5ZXIgaW4gdGhlIHBhcnR5IGZvciBtaXN0YWtlcyBldmVuIGlmIHRoZXJlIGlzIG5vIHBhcnR5LlxyXG4gICAgaWYgKHRoaXMubXlQbGF5ZXJJZCAmJiAhYXJyLmluY2x1ZGVzKHRoaXMubXlQbGF5ZXJJZCkpXHJcbiAgICAgIGFyci5wdXNoKHRoaXMubXlQbGF5ZXJJZCk7XHJcblxyXG4gICAgdGhpcy5wYXJ0eUlkcyA9IG5ldyBTZXQoYXJyKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgUmVzZXQoKTogdm9pZCB7XHJcbiAgICAvLyBEZWxpYmVyYXRlbHkgZG8gbm90IGNsZWFyIGlkVG9QYXJ0eUluZm8gaGVyZS5cclxuICAgIHRoaXMucGV0SWRUb093bmVySWQgPSB7fTtcclxuICAgIHRoaXMuZGVhZElkcy5jbGVhcigpO1xyXG4gICAgdGhpcy50cmFja2VkRXZlbnRzID0gW107XHJcbiAgICB0aGlzLmJhc2VUaW1lID0gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgT25DaGFuZ2Vab25lKHRpbWVzdGFtcDogbnVtYmVyLCB6b25lTmFtZTogc3RyaW5nLCB6b25lSWQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5SZXNldCgpO1xyXG4gICAgLy8gY29tYmF0YW50cyBhbmQgcGFydHkgaW5mbyBhcmUgcmUtc2VudCBvbiB6b25lIGNoYW5nZSwgc28gY2xlYXIgaGVyZVxyXG4gICAgLy8gdG8gcGVyaW9kaWNhbGx5IHRyaW0gdGhpcy5cclxuICAgIHRoaXMuaWRUb1BhcnR5SW5mbyA9IHt9O1xyXG4gICAgdGhpcy5jb2xsZWN0b3IuT25DaGFuZ2Vab25lKHRpbWVzdGFtcCwgem9uZU5hbWUsIHpvbmVJZCk7XHJcbiAgfVxyXG5cclxuICBPbkFkZGVkQ29tYmF0YW50KF9saW5lOiBzdHJpbmcsIHNwbGl0TGluZTogc3RyaW5nW10pOiB2b2lkIHtcclxuICAgIGNvbnN0IGlkID0gc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkFkZGVkQ29tYmF0YW50LmZpZWxkcy5pZF07XHJcbiAgICBjb25zdCBuYW1lID0gc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkFkZGVkQ29tYmF0YW50LmZpZWxkcy5uYW1lXTtcclxuICAgIGNvbnN0IHdvcmxkSWRTdHIgPSBzcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuQWRkZWRDb21iYXRhbnQuZmllbGRzLndvcmxkSWRdO1xyXG4gICAgY29uc3Qgam9iU3RyID0gc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkFkZGVkQ29tYmF0YW50LmZpZWxkcy5qb2JdO1xyXG4gICAgaWYgKFxyXG4gICAgICBpZCAhPT0gdW5kZWZpbmVkICYmIG5hbWUgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICB3b3JsZElkU3RyICE9PSB1bmRlZmluZWQgJiYgam9iU3RyICE9PSB1bmRlZmluZWRcclxuICAgICkge1xyXG4gICAgICAvLyBHZW5lcmF0ZSB0aGUgcGFydHkgaW5mbyB3ZSB3b3VsZCBnZXQgZnJvbSBPdmVybGF5UGx1Z2luIHZpYSBsb2dzLlxyXG4gICAgICBjb25zdCB3b3JsZElkID0gcGFyc2VJbnQod29ybGRJZFN0cik7XHJcbiAgICAgIGNvbnN0IGpvYiA9IHBhcnNlSW50KGpvYlN0cik7XHJcbiAgICAgIC8vIENvbnNpZGVyIGV2ZXJ5Ym9keSBpbiB0aGUgcGFydHkgZm9yIG5vdyBhbmQgd2UnbGwgZmlndXJlIGl0IG91dCBsYXRlci5cclxuICAgICAgY29uc3QgaW5QYXJ0eSA9IHRydWU7XHJcbiAgICAgIHRoaXMuaWRUb1BhcnR5SW5mb1tpZF0gPSB7IGlkLCBuYW1lLCB3b3JsZElkLCBqb2IsIGluUGFydHkgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUcmFjayBwZXQgb3duZXJzIGFzIHdlbGwuXHJcbiAgICBjb25zdCBwZXRJZCA9IHNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5BZGRlZENvbWJhdGFudC5maWVsZHMuaWRdO1xyXG4gICAgY29uc3Qgb3duZXJJZCA9IHNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5BZGRlZENvbWJhdGFudC5maWVsZHMub3duZXJJZF07XHJcbiAgICBpZiAocGV0SWQgPT09IHVuZGVmaW5lZCB8fCBvd25lcklkID09PSB1bmRlZmluZWQpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGlmIChvd25lcklkID09PSAnMCcgfHwgb3duZXJJZCA9PT0gJzAwMDAnKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgLy8gRml4IGFueSBsb3dlcmNhc2UgaWRzLlxyXG4gICAgdGhpcy5wZXRJZFRvT3duZXJJZFtwZXRJZC50b1VwcGVyQ2FzZSgpXSA9IG93bmVySWQudG9VcHBlckNhc2UoKTtcclxuICB9XHJcblxyXG4gIE9uUGFydHlMaXN0KF9saW5lOiBzdHJpbmcsIHNwbGl0TGluZTogc3RyaW5nW10pOiB2b2lkIHtcclxuICAgIC8vIFNvIHRoYXQgcGFydHkgbGlzdHMgY2FuIGJlIHVzZWQgZnJvbSBsb2dzLCB3ZSB3aWxsIGZha2UgYG9uUGFydHlDaGFuZ2VkYCBldmVudHNcclxuICAgIC8vIHVzaW5nIGxvZyBpbmZvcm1hdGlvbi4gIEFkZGVkQ29tYmF0YW50IHNlZW1zIHRvIGNvbWUgYmVmb3JlIFBhcnR5TGlzdCBsaW5lcyxcclxuICAgIC8vIHNvIHdlIGFjY3VtdWxhdGUgdGhvc2UgYW5kIHRoZW4gZ2VuZXJhdGUgdGhlIHBhcnR5IGluZm8gZnJvbSBoZXJlLlxyXG5cclxuICAgIC8vIFN0YXJ0IGZyb20gaWQwIGFuZCBkcm9wIHRoZSBoYXNoIGF0IHRoZSBlbmQuXHJcbiAgICBjb25zdCBjb3VudCA9IHBhcnNlSW50KHNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5QYXJ0eUxpc3QuZmllbGRzLnBhcnR5Q291bnRdID8/ICcnKTtcclxuICAgIGlmIChpc05hTihjb3VudCkpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBpZHMgPSBzcGxpdExpbmUuc2xpY2UobG9nRGVmaW5pdGlvbnMuUGFydHlMaXN0LmZpZWxkcy5pZDAsIC0xKTtcclxuICAgIGNvbnN0IHBhcnR5OiBQYXJ0eVtdID0gW107XHJcbiAgICBpZHMuZm9yRWFjaCgoaWQsIGlkeCkgPT4ge1xyXG4gICAgICBjb25zdCBwID0gdGhpcy5pZFRvUGFydHlJbmZvW2lkXTtcclxuICAgICAgaWYgKCFwKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgLy8gY291bnQgaXMgMS1pbmRleGVkIGFuZCBpZHggaXMgMC1pbmRleGVkLlxyXG4gICAgICBwLmluUGFydHkgPSBpZHggPCBjb3VudDtcclxuICAgICAgcGFydHkucHVzaChwKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5wYXJ0eVRyYWNrZXIub25QYXJ0eUNoYW5nZWQoeyBwYXJ0eSB9KTtcclxuICAgIHRoaXMuT25QYXJ0eUNoYW5nZWQoKTtcclxuICB9XHJcblxyXG4gIE9uQ2hhbmdlZFBsYXllcihfbGluZTogc3RyaW5nLCBzcGxpdExpbmU6IHN0cmluZ1tdKTogdm9pZCB7XHJcbiAgICBjb25zdCBpZCA9IHNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5DaGFuZ2VkUGxheWVyLmZpZWxkcy5pZF07XHJcbiAgICBpZiAoaWQpXHJcbiAgICAgIHRoaXMuU2V0UGxheWVySWQoaWQpO1xyXG4gIH1cclxuXHJcbiAgU2V0UGxheWVySWQoaWQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubXlQbGF5ZXJJZCA9PT0gaWQpXHJcbiAgICAgIHJldHVybjtcclxuICAgIHRoaXMubXlQbGF5ZXJJZCA9IGlkO1xyXG4gICAgdGhpcy5PblBhcnR5Q2hhbmdlZCgpO1xyXG4gIH1cclxuXHJcbiAgSXNJblBhcnR5KGlkPzogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoaWQgPT09IHVuZGVmaW5lZClcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgcmV0dXJuIHRoaXMucGFydHlJZHMuaGFzKHRoaXMucGV0SWRUb093bmVySWRbaWRdID8/IGlkKTtcclxuICB9XHJcblxyXG4gIElzUGxheWVySW5QYXJ0eShpZD86IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKGlkID09PSB1bmRlZmluZWQpXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHJldHVybiB0aGlzLnBhcnR5SWRzLmhhcyhpZCk7XHJcbiAgfVxyXG5cclxuICBPbkFiaWxpdHkoX2xpbmU6IHN0cmluZywgc3BsaXRMaW5lOiBzdHJpbmdbXSk6IHZvaWQge1xyXG4gICAgLy8gQWJpbGl0aWVzIGNhbiBub3QgbWlzcyBldmVyeWJvZHkgKGUuZy4gQmF0dGxlIFZvaWNlIG5ldmVyIGhpdHRpbmcgdGhlIHNvdXJjZSlcclxuICAgIC8vIHNvIGNoZWNrIGJvdGggdGFyZ2V0IGFuZCBzb3VyY2UuXHJcbiAgICBjb25zdCB0YXJnZXRJZCA9IHNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5BYmlsaXR5LmZpZWxkcy50YXJnZXRJZF07XHJcbiAgICBjb25zdCBzb3VyY2VJZCA9IHNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5BYmlsaXR5LmZpZWxkcy5zb3VyY2VJZF07XHJcbiAgICBjb25zdCB0YXJnZXRJblBhcnR5ID0gdGhpcy5Jc0luUGFydHkodGFyZ2V0SWQpO1xyXG4gICAgY29uc3Qgc291cmNlSW5QYXJ0eSA9IHRoaXMuSXNJblBhcnR5KHNvdXJjZUlkKTtcclxuICAgIGlmIChzb3VyY2VJZCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldElkID09PSB1bmRlZmluZWQpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICAvLyBKdXN0IGluIGNhc2UsIGlmIGEgdGFyZ2V0IGlzIHBlcmZvcm1pbmcgYWN0aW9ucywgdGhlbiB0aGV5IGFyZSBhbGl2ZS5cclxuICAgIGlmIChzb3VyY2VJblBhcnR5KVxyXG4gICAgICB0aGlzLmRlYWRJZHMuZGVsZXRlKHNvdXJjZUlkKTtcclxuXHJcbiAgICBjb25zdCBhYmlsaXR5SWQgPSBzcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuQWJpbGl0eS5maWVsZHMuaWRdO1xyXG4gICAgaWYgKGFiaWxpdHlJZCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgLy8gT25seSB0cmFjayBldmVudHMgb24gcGxheWVycy4gIElkZWFsbHksIGl0J2QgYmUgbmljZSB0byBvbmx5IGluY2x1ZGVcclxuICAgIC8vIHBhcnR5IG1lbWJlcnMgaW4gdHJhY2tlZCBldmVudHMsIGJ1dCB0aGlzIGlzIHVzZWQgZm9yIGRlYXRoIHJlcG9ydHNcclxuICAgIC8vIG9uIGRlYWQgbm9uLXBhcnR5IG1lbWJlcnMuXHJcbiAgICAvLyBUT0RPOiBtYXliZSBvb3BzeSBzaG91bGQgb25seSByZXBvcnQgcGFydHkgZmFpbHVyZXM/XHJcbiAgICBpZiAoSXNQbGF5ZXJJZCh0YXJnZXRJZCkpIHtcclxuICAgICAgdGhpcy50cmFja2VkRXZlbnRzLnB1c2goe1xyXG4gICAgICAgIHRpbWVzdGFtcDogZ2V0VGltZXN0YW1wKHNwbGl0TGluZSksXHJcbiAgICAgICAgdHlwZTogJ0FiaWxpdHknLFxyXG4gICAgICAgIHRhcmdldElkOiB0YXJnZXRJZCxcclxuICAgICAgICBzcGxpdExpbmU6IHNwbGl0TGluZSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVwb3J0IG1pc3NlZCBidWZmcyBvbiB0aGUgcGFydHkuXHJcbiAgICBpZiAoIXRhcmdldEluUGFydHkgJiYgIXNvdXJjZUluUGFydHkpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGNvbnN0IGJ1ZmYgPSB0aGlzLmFiaWxpdHlJZFRvQnVmZlthYmlsaXR5SWRdO1xyXG4gICAgaWYgKGJ1ZmYpXHJcbiAgICAgIHRoaXMubWlzc2VkQnVmZkNvbGxlY3Rvci5PbkFiaWxpdHlCdWZmKHNwbGl0TGluZSwgYnVmZik7XHJcbiAgfVxyXG5cclxuICBPbkdhaW5zRWZmZWN0KF9saW5lOiBzdHJpbmcsIHNwbGl0TGluZTogc3RyaW5nW10pOiB2b2lkIHtcclxuICAgIGNvbnN0IHRhcmdldElkID0gc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkdhaW5zRWZmZWN0LmZpZWxkcy50YXJnZXRJZF07XHJcbiAgICAvLyBEbyBub3QgY29uc2lkZXIgcGV0cyBnYWluaW5nIGVmZmVjdHMgaGVyZS5cclxuICAgIC8vIFN1bW1vbmVyIHBldHMgKGUuZy4gRGVtaS1QaG9lbml4KSBnYWluIHBhcnR5IGJ1ZmZzIChlLmcuIEVtYm9sZGVuKSwgd2l0aCBubyBzb3VyY2VJZC9zb3VyY2UuXHJcbiAgICBpZiAoIXRhcmdldElkIHx8ICF0aGlzLklzUGxheWVySW5QYXJ0eSh0YXJnZXRJZCkpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBlZmZlY3RJZCA9IHNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5HYWluc0VmZmVjdC5maWVsZHMuZWZmZWN0SWRdO1xyXG4gICAgaWYgKGVmZmVjdElkID09PSB1bmRlZmluZWQpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBnZXRUaW1lc3RhbXAoc3BsaXRMaW5lKTtcclxuXHJcbiAgICAvLyBXZSBuZWVkIHRvIHJlcXVlc3QgYSBjbGVhbnVwIHNvbWV3aGVyZS4gIEFzc3VtZSB0aGF0IHNvbWVib2R5IHdpbGwgZ2FpbiBhbiBlZmZlY3RcclxuICAgIC8vIGF0IHNvbWUgcG9pbnQuICBUaGVzZSBoYXBwZW4gbGVzcyBvZnRlbiB0aGFuIGFiaWxpdGllcywgc28gd2UgZG8gaXQgaGVyZSBqdXN0XHJcbiAgICAvLyB0byByZWR1Y2UgcGVyLWxvZyBvdmVyaGVhZC5cclxuICAgIGlmICh0aGlzLm5leHRQcnVuZVRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMubmV4dFBydW5lVGltZXN0YW1wID0gdGltZXN0YW1wICsgdGhpcy5jbGVhbnVwV2luZG93TXM7XHJcbiAgICB9IGVsc2UgaWYgKHRpbWVzdGFtcCA+IHRoaXMubmV4dFBydW5lVGltZXN0YW1wKSB7XHJcbiAgICAgIHRoaXMuUHJ1bmVUcmFja2VkRXZlbnRzKHRpbWVzdGFtcCAtIHRoaXMuZXZlbnRXaW5kb3dNcyk7XHJcbiAgICAgIHRoaXMubmV4dFBydW5lVGltZXN0YW1wID0gdGltZXN0YW1wICsgdGhpcy5jbGVhbnVwV2luZG93TXM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVXBvbiBjb21pbmcgYmFjayB0byBsaWZlLCBwbGF5ZXJzIGdldCBUcmFuc2NlbmRlbnQgLyBXZWFrbmVzcyAvIEJyaW5rIG9mIERlYXRoLlxyXG4gICAgLy8gSG93ZXZlciwgdGhleSBhbHNvIGdldCBhIFJhaXNlIGVmZmVjdCBwcmlvciB0byBjb21pbmcgYmFjayB0byBsaWZlLlxyXG4gICAgaWYgKGVmZmVjdElkICE9PSByYWlzZUVmZmVjdElkKVxyXG4gICAgICB0aGlzLmRlYWRJZHMuZGVsZXRlKHRhcmdldElkKTtcclxuXHJcbiAgICAvLyBLZWVwIHRyYWNrIG9mIGFjdGl2ZSBidWZmcyBpbiBjYXNlIHRoZXkgaGF2ZSBhIHZlcnkgbG9uZyBkdXJhdGlvbiBhbmQgZmFsbCBvdXRzaWRlIHRoZVxyXG4gICAgLy8gd2luZG93IG9mIHRoaXMudHJhY2tlZEVmZmVjdHMuXHJcbiAgICBjb25zdCBldmVudDogVHJhY2tlZEV2ZW50ID0ge1xyXG4gICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcCxcclxuICAgICAgdHlwZTogJ0dhaW5zRWZmZWN0JyxcclxuICAgICAgdGFyZ2V0SWQ6IHRhcmdldElkLFxyXG4gICAgICBzcGxpdExpbmU6IHNwbGl0TGluZSxcclxuICAgIH07XHJcblxyXG4gICAgKHRoaXMudHJhY2tlZEVmZmVjdE1hcFt0YXJnZXRJZF0gPz89IHt9KVtlZmZlY3RJZF0gPSBldmVudDtcclxuICAgIHRoaXMudHJhY2tlZEV2ZW50cy5wdXNoKGV2ZW50KTtcclxuXHJcbiAgICBjb25zdCBidWZmID0gdGhpcy5lZmZlY3RJZFRvQnVmZltlZmZlY3RJZC50b1VwcGVyQ2FzZSgpXTtcclxuICAgIGlmIChidWZmKVxyXG4gICAgICB0aGlzLm1pc3NlZEJ1ZmZDb2xsZWN0b3IuT25FZmZlY3RCdWZmKHNwbGl0TGluZSwgYnVmZik7XHJcbiAgfVxyXG5cclxuICBPbkxvc2VzRWZmZWN0KF9saW5lOiBzdHJpbmcsIHNwbGl0TGluZTogc3RyaW5nW10pOiB2b2lkIHtcclxuICAgIGNvbnN0IHRhcmdldElkID0gc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkdhaW5zRWZmZWN0LmZpZWxkcy50YXJnZXRJZF07XHJcbiAgICBpZiAoIXRhcmdldElkIHx8ICF0aGlzLklzUGxheWVySW5QYXJ0eSh0YXJnZXRJZCkpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBlZmZlY3RJZCA9IHNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5HYWluc0VmZmVjdC5maWVsZHMuZWZmZWN0SWRdO1xyXG4gICAgaWYgKGVmZmVjdElkID09PSB1bmRlZmluZWQpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICB0aGlzLnRyYWNrZWRFdmVudHMucHVzaCh7XHJcbiAgICAgIHRpbWVzdGFtcDogZ2V0VGltZXN0YW1wKHNwbGl0TGluZSksXHJcbiAgICAgIHR5cGU6ICdMb3Nlc0VmZmVjdCcsXHJcbiAgICAgIHRhcmdldElkOiB0YXJnZXRJZCxcclxuICAgICAgc3BsaXRMaW5lOiBzcGxpdExpbmUsXHJcbiAgICB9KTtcclxuXHJcbiAgICBkZWxldGUgdGhpcy50cmFja2VkRWZmZWN0TWFwW3RhcmdldElkXT8uW2VmZmVjdElkXTtcclxuICB9XHJcblxyXG4gIE9uRGVhdGhSZWFzb24odGltZXN0YW1wOiBudW1iZXIsIHJlYXNvbjogT29wc3lEZWF0aFJlYXNvbik6IHZvaWQge1xyXG4gICAgY29uc3QgdGFyZ2V0SWQgPSByZWFzb24uaWQ7XHJcbiAgICBpZiAoIXRhcmdldElkIHx8ICFJc1BsYXllcklkKHRhcmdldElkKSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHRleHQgPSBUcmFuc2xhdGUodGhpcy5vcHRpb25zLkRpc3BsYXlMYW5ndWFnZSwgcmVhc29uLnRleHQpO1xyXG4gICAgaWYgKCF0ZXh0KVxyXG4gICAgICByZXR1cm47XHJcbiAgICB0aGlzLnRyYWNrZWRFdmVudHMucHVzaCh7XHJcbiAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLFxyXG4gICAgICB0eXBlOiAnRGVhdGhSZWFzb24nLFxyXG4gICAgICB0YXJnZXRJZDogdGFyZ2V0SWQsXHJcbiAgICAgIHRleHQ6IHRleHQsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIE9uTWlzdGFrZU9iaih0aW1lc3RhbXA6IG51bWJlciwgbWlzdGFrZTogT29wc3lNaXN0YWtlKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbGxlY3Rvci5Pbk1pc3Rha2VPYmoodGltZXN0YW1wLCBtaXN0YWtlKTtcclxuXHJcbiAgICBjb25zdCB0YXJnZXRJZCA9IG1pc3Rha2UucmVwb3J0SWQ7XHJcbiAgICBpZiAoIXRhcmdldElkIHx8ICFJc1BsYXllcklkKHRhcmdldElkKSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIHRoaXMudHJhY2tlZEV2ZW50cy5wdXNoKHtcclxuICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAsXHJcbiAgICAgIHR5cGU6ICdNaXN0YWtlJyxcclxuICAgICAgdGFyZ2V0SWQ6IHRhcmdldElkLFxyXG4gICAgICBtaXN0YWtlRXZlbnQ6IG1pc3Rha2UsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIFJldHVybnMgYW4gZXZlbnQgZm9yIHdoeSB0aGlzIHBlcnNvbiBkaWVkLlxyXG4gIE9uRGVmZWF0ZWQoX2xpbmU6IHN0cmluZywgc3BsaXRMaW5lOiBzdHJpbmdbXSk6IHZvaWQge1xyXG4gICAgY29uc3QgdGFyZ2V0SWQgPSBzcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuV2FzRGVmZWF0ZWQuZmllbGRzLnRhcmdldElkXTtcclxuICAgIGlmICghdGFyZ2V0SWQgfHwgIUlzUGxheWVySWQodGFyZ2V0SWQpKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc3QgdGFyZ2V0SW5QYXJ0eSA9IHRoaXMuSXNJblBhcnR5KHRhcmdldElkKTtcclxuICAgIGlmICh0YXJnZXRJblBhcnR5KVxyXG4gICAgICB0aGlzLmRlYWRJZHMuYWRkKHRhcmdldElkKTtcclxuXHJcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBnZXRUaW1lc3RhbXAoc3BsaXRMaW5lKTtcclxuICAgIGNvbnN0IGZpcnN0VGltZXN0YW1wID0gdGltZXN0YW1wIC0gdGhpcy5ldmVudFdpbmRvd01zO1xyXG4gICAgY29uc3QgZXZlbnRzID0gdGhpcy50cmFja2VkRXZlbnRzLmZpbHRlcigoZXZlbnQpID0+IHtcclxuICAgICAgcmV0dXJuIGV2ZW50LnRpbWVzdGFtcCA+PSBmaXJzdFRpbWVzdGFtcCAmJiBldmVudC50YXJnZXRJZCA9PT0gdGFyZ2V0SWQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBNYXJrIHNpbXBsZSBtaXN0YWtlcyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBzaW5nbGUgYWJpbGl0eSBpZHMuXHJcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xyXG4gICAgICBpZiAoZXZlbnQudHlwZSAhPT0gJ0FiaWxpdHknKVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICBjb25zdCBpZCA9IGV2ZW50LnNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5BYmlsaXR5LmZpZWxkcy5pZF07XHJcbiAgICAgIGlmICghaWQpXHJcbiAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICBjb25zdCB0eXBlID0gZXZlbnQuc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLk5vbmUuZmllbGRzLnR5cGVdO1xyXG4gICAgICBjb25zdCB0YXJnZXRDb3VudFN0ciA9IGV2ZW50LnNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5BYmlsaXR5LmZpZWxkcy50YXJnZXRDb3VudF07XHJcbiAgICAgIGNvbnN0IHRhcmdldENvdW50ID0gcGFyc2VJbnQodGFyZ2V0Q291bnRTdHIgPz8gJzEnKTtcclxuICAgICAgLy8gU29tZSBhYmlsaXRpZXMgKGUuZy4gS2FtcGVvcyBIYXJtYSA2ODI2KSBhcmUgQU9FIEFiaWxpdHkgdHlwZXMgYnV0IG9ubHkgaGl0IG9uZSBwZXJzb24uXHJcbiAgICAgIC8vIFRoZSByZXZlcnNlIChBYmlsaXR5LnR5cGUgYnV0IHRhcmdldENvdW50ID4gMSkgaXMgbm90IHBvc3NpYmxlLlxyXG4gICAgICBjb25zdCBpc1NoYXJlZERhbWFnZSA9IHR5cGUgPT09IGxvZ0RlZmluaXRpb25zLk5ldHdvcmtBT0VBYmlsaXR5LnR5cGUgJiYgdGFyZ2V0Q291bnQgIT09IDE7XHJcblxyXG4gICAgICAvLyBDb21iaW5pbmcgc2hhcmUvc29sbyBtaXN0YWtlIGxpbmVzIHdpdGggYWJpbGl0eSBkYW1hZ2UgbGluZXMgaXMgYSBiaXQgb2ZcclxuICAgICAgLy8gZHVwbGljYXRpb24sIGJ1dCB1bmxlc3MgUGxheWVyU3RhdGVUcmFja2VyIGdlbmVyYXRlZCBzaGFyZS9zb2xvL2RhbWFnZSBtaXN0YWtlc1xyXG4gICAgICAvLyBpdHNlbGYsIHRoZXJlJ3Mgbm8gd2F5IHRvIHVuZG8gdGhlIG1pc3Rha2UgKyBhYmlsaXR5LiAgU28sIHdlJ2xsIGFkZCB0aGVcclxuICAgICAgLy8gbWlzdGFrZSB0ZXh0IGludG8gdGhlIFRyYWNrZWRFdmVudExpbmUgZm9yIHRoZSBhYmlsaXR5IGFuZCBoaWRlIHRoZSBtaXN0YWtlLlxyXG4gICAgICBpZiAoaWQgaW4gdGhpcy5taXN0YWtlRGFtYWdlTWFwKSB7XHJcbiAgICAgICAgZXZlbnQubWlzdGFrZSA9IHRoaXMubWlzdGFrZURhbWFnZU1hcFtpZF07XHJcbiAgICAgIH0gZWxzZSBpZiAoaXNTaGFyZWREYW1hZ2UgJiYgaWQgaW4gdGhpcy5taXN0YWtlU2hhcmVNYXApIHtcclxuICAgICAgICBldmVudC5taXN0YWtlID0gdGhpcy5taXN0YWtlU2hhcmVNYXBbaWRdO1xyXG4gICAgICAgIGNvbnN0IGFiaWxpdHkgPSBldmVudC5zcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuQWJpbGl0eS5maWVsZHMuYWJpbGl0eV0gPz8gJz8/Pyc7XHJcbiAgICAgICAgZXZlbnQubWlzdGFrZVRleHQgPSBUcmFuc2xhdGUoXHJcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuRGlzcGxheUxhbmd1YWdlLFxyXG4gICAgICAgICAgR2V0U2hhcmVNaXN0YWtlVGV4dChhYmlsaXR5LCB0YXJnZXRDb3VudCksXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIGlmICghaXNTaGFyZWREYW1hZ2UgJiYgaWQgaW4gdGhpcy5taXN0YWtlU29sb01hcCkge1xyXG4gICAgICAgIGV2ZW50Lm1pc3Rha2UgPSB0aGlzLm1pc3Rha2VTb2xvTWFwW2lkXTtcclxuICAgICAgICBjb25zdCBhYmlsaXR5ID0gZXZlbnQuc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkFiaWxpdHkuZmllbGRzLmFiaWxpdHldID8/ICc/Pz8nO1xyXG4gICAgICAgIGV2ZW50Lm1pc3Rha2VUZXh0ID0gVHJhbnNsYXRlKHRoaXMub3B0aW9ucy5EaXNwbGF5TGFuZ3VhZ2UsIEdldFNvbG9NaXN0YWtlVGV4dChhYmlsaXR5KSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0YXJnZXROYW1lID0gc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLldhc0RlZmVhdGVkLmZpZWxkcy50YXJnZXRdID8/ICc/Pz8nO1xyXG4gICAgY29uc3QgcmVwb3J0RGF0YTogRGVhdGhSZXBvcnREYXRhID0ge1xyXG4gICAgICBsYW5nOiB0aGlzLm9wdGlvbnMuRGlzcGxheUxhbmd1YWdlLFxyXG4gICAgICBiYXNlVGltZXN0YW1wOiB0aGlzLmJhc2VUaW1lLFxyXG4gICAgICBkZWF0aFRpbWVzdGFtcDogdGltZXN0YW1wLFxyXG4gICAgICB0YXJnZXRJZDogdGFyZ2V0SWQsXHJcbiAgICAgIHRhcmdldE5hbWU6IHRhcmdldE5hbWUsXHJcbiAgICAgIGV2ZW50czogZXZlbnRzLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBtaXN0YWtlID0gRGVhdGhSZXBvcnQuZ2VuZXJhdGVNaXN0YWtlKHJlcG9ydERhdGEpO1xyXG4gICAgdGhpcy5jb2xsZWN0b3IuT25NaXN0YWtlT2JqKHRpbWVzdGFtcCwgbWlzdGFrZSk7XHJcbiAgfVxyXG5cclxuICBPbkhvVERvVChfbGluZTogc3RyaW5nLCBzcGxpdExpbmU6IHN0cmluZ1tdKTogdm9pZCB7XHJcbiAgICBjb25zdCB0YXJnZXRJZCA9IHNwbGl0TGluZVtsb2dEZWZpbml0aW9ucy5OZXR3b3JrRG9ULmZpZWxkcy5pZF07XHJcbiAgICBpZiAoIXRhcmdldElkIHx8ICF0aGlzLklzSW5QYXJ0eSh0YXJnZXRJZCkpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICB0aGlzLnRyYWNrZWRFdmVudHMucHVzaCh7XHJcbiAgICAgIHRpbWVzdGFtcDogZ2V0VGltZXN0YW1wKHNwbGl0TGluZSksXHJcbiAgICAgIHR5cGU6ICdIb1REb1QnLFxyXG4gICAgICB0YXJnZXRJZDogdGFyZ2V0SWQsXHJcbiAgICAgIHNwbGl0TGluZTogc3BsaXRMaW5lLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBPbldpcGUoX2xpbmU6IHN0cmluZywgX3NwbGl0TGluZTogc3RyaW5nW10pOiB2b2lkIHtcclxuICAgIHRoaXMuUmVzZXQoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgT25CdWZmQ29sbGVjdGVkKHRpbWVzdGFtcDogbnVtYmVyLCBjb2xsZWN0ZWQ6IENvbGxlY3RlZEJ1ZmYpOiB2b2lkIHtcclxuICAgIC8vIFRPRE86IG1heWJlICdtaXRpZ2F0aW9uJyBzaG91bGQgYmVjb21lIGEgc2VwYXJhdGUgbWlzdGFrZSB0eXBlP1xyXG4gICAgY29uc3QgdHlwZTogT29wc3lNaXN0YWtlVHlwZSA9IGNvbGxlY3RlZC5idWZmLnR5cGUgPT09ICdtaXRpZ2F0aW9uJ1xyXG4gICAgICA/ICdoZWFsJ1xyXG4gICAgICA6IGNvbGxlY3RlZC5idWZmLnR5cGU7XHJcblxyXG4gICAgY29uc3Qgb3duZXJJZCA9IHRoaXMucGV0SWRUb093bmVySWRbY29sbGVjdGVkLnNvdXJjZUlkXTtcclxuICAgIGNvbnN0IGJsYW1lSWQgPSBvd25lcklkID8/IGNvbGxlY3RlZC5zb3VyY2VJZDtcclxuICAgIGNvbnN0IHNvdXJjZU5hbWUgPSB0aGlzLnBhcnR5VHJhY2tlci5uYW1lRnJvbUlkKGJsYW1lSWQpO1xyXG4gICAgaWYgKHNvdXJjZU5hbWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zdCBsaW5lID0gSlNPTi5zdHJpbmdpZnkoY29sbGVjdGVkLnNwbGl0TGluZSk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYENvdWxkbid0IGZpbmQgbmFtZSBmb3IgJHtibGFtZUlkfSAob3duZXI6ICR7b3duZXJJZCA/PyAnbm9uZSd9KSwgJHtsaW5lfWApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZ290QnVmZk1hcDogeyBbaWQ6IHN0cmluZ106IGJvb2xlYW4gfSA9IHt9O1xyXG4gICAgaWYgKGNvbGxlY3RlZC5idWZmLmlnbm9yZVNlbGYpXHJcbiAgICAgIGdvdEJ1ZmZNYXBbYmxhbWVJZF0gPSB0cnVlO1xyXG5cclxuICAgIGZvciAoY29uc3QgaWQgb2YgY29sbGVjdGVkLnRhcmdldElkcylcclxuICAgICAgZ290QnVmZk1hcFtpZF0gPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0IG1pc3NlZElkcyA9IHRoaXMucGFydHlUcmFja2VyLnBhcnR5SWRzLmZpbHRlcigoaWQpID0+IHtcclxuICAgICAgLy8gRmlsdGVyIG91dCBhbnkgZW1wdHkgaWRzIGhlcmUuXHJcbiAgICAgIGlmIChpZCA9PT0gZW1wdHlJZClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIC8vIEEgcGxheWVyIGlzIG1pc3NlZCBpZiB0aGV5IGRpZG4ndCBnZXQgdGhlIGJ1ZmYgYW5kIGFyZW4ndCBkZWFkLlxyXG4gICAgICByZXR1cm4gIWdvdEJ1ZmZNYXBbaWRdICYmICF0aGlzLmRlYWRJZHMuaGFzKGlkKTtcclxuICAgIH0pO1xyXG4gICAgaWYgKG1pc3NlZElkcy5sZW5ndGggPT09IDApXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICAvLyBBcHBlbmQgZXZlbnRzIGZvciBlYWNoIG1pc3NlZCBwbGF5ZXIgZm9yIGRlYXRoIHJlcG9ydHMuXHJcbiAgICAvLyBXaGVyZWFzIHRoZSBgT25NaXN0YWtlT2JqYCBjYWxsIGJsYW1lcyB0aGUgc291cmNlIGZvciBtaXNzaW5nIGEgbnVtYmVyIG9mIHRhcmdldHMsXHJcbiAgICAvLyBgdGhpcy50cmFja2VkRXZlbnRzYCBpbmZvcm1zIGEgdGFyZ2V0IGluIGEgZGVhdGggcmVwb3J0IHRoYXQgdGhleSB3ZXJlIG1pc3NlZCBieSBhIHNvdXJjZS5cclxuICAgIGlmIChjb2xsZWN0ZWQuYnVmZi50eXBlID09PSAnaGVhbCcgfHwgY29sbGVjdGVkLmJ1ZmYudHlwZSA9PT0gJ21pdGlnYXRpb24nKSB7XHJcbiAgICAgIGZvciAoY29uc3QgdGFyZ2V0SWQgb2YgbWlzc2VkSWRzKSB7XHJcbiAgICAgICAgdGhpcy50cmFja2VkRXZlbnRzLnB1c2goe1xyXG4gICAgICAgICAgdGltZXN0YW1wOiBnZXRUaW1lc3RhbXAoY29sbGVjdGVkLnNwbGl0TGluZSksXHJcbiAgICAgICAgICB0eXBlOiAnYWJpbGl0eUlkJyBpbiBjb2xsZWN0ZWQuYnVmZiA/ICdNaXNzZWRBYmlsaXR5JyA6ICdNaXNzZWRFZmZlY3QnLFxyXG4gICAgICAgICAgdGFyZ2V0SWQ6IHRhcmdldElkLFxyXG4gICAgICAgICAgc3BsaXRMaW5lOiBjb2xsZWN0ZWQuc3BsaXRMaW5lLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbWlzc2VkTmFtZXMgPSBtaXNzZWRJZHMubWFwKChpZCkgPT4ge1xyXG4gICAgICBjb25zdCBuYW1lID0gdGhpcy5wYXJ0eVRyYWNrZXIubmFtZUZyb21JZChpZCk7XHJcbiAgICAgIGlmICghbmFtZSkge1xyXG4gICAgICAgIGNvbnN0IGxpbmUgPSBKU09OLnN0cmluZ2lmeShjb2xsZWN0ZWQuc3BsaXRMaW5lKTtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBDb3VsZG4ndCBmaW5kIG5hbWUgZm9yICR7aWR9LCAke2xpbmV9YCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG5hbWUgPz8gJz8/Pyc7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBUT0RPOiBvb3BzeSBjb3VsZCByZWFsbHkgdXNlIG1vdXNlb3ZlciBwb3B1cHMgZm9yIGRldGFpbHMuXHJcbiAgICBpZiAobWlzc2VkTmFtZXMubGVuZ3RoIDwgNCkge1xyXG4gICAgICBjb25zdCBuYW1lTGlzdCA9IG1pc3NlZE5hbWVzLm1hcCgobmFtZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBTaG9ydE5hbWlmeShuYW1lLCB0aGlzLm9wdGlvbnMuUGxheWVyTmlja3MpO1xyXG4gICAgICB9KS5qb2luKCcsICcpO1xyXG5cclxuICAgICAgLy8gQXMgYSBUcmFja2VkTGluZUV2ZW50IGhhcyBiZWVuIHB1c2hlZCBmb3IgZWFjaCBwZXJzb24gbWlzc2VkIGFscmVhZHksXHJcbiAgICAgIC8vIGV4cGxpY2l0bHkgZG9uJ3QgYWRkIGEgYHJlcG9ydElkYCBmaWVsZCBvbiB0aGVzZSBtaXN0YWtlcy5cclxuICAgICAgdGhpcy5Pbk1pc3Rha2VPYmoodGltZXN0YW1wLCB7XHJcbiAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICBibGFtZTogc291cmNlTmFtZSxcclxuICAgICAgICB0cmlnZ2VyVHlwZTogJ0J1ZmYnLFxyXG4gICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgIGVuOiBgJHtjb2xsZWN0ZWQuYnVmZk5hbWV9IG1pc3NlZCAke25hbWVMaXN0fWAsXHJcbiAgICAgICAgICBkZTogYCR7Y29sbGVjdGVkLmJ1ZmZOYW1lfSB2ZXJmZWhsdCAke25hbWVMaXN0fWAsXHJcbiAgICAgICAgICBmcjogYCR7Y29sbGVjdGVkLmJ1ZmZOYW1lfSBtYW5xdcOpKGUpIHN1ciAke25hbWVMaXN0fWAsXHJcbiAgICAgICAgICBqYTogYCgke25hbWVMaXN0fSkg44GMJHtjb2xsZWN0ZWQuYnVmZk5hbWV944KS5Y+X44GR44Gq44GL44Gj44GfYCxcclxuICAgICAgICAgIGNuOiBgJHtuYW1lTGlzdH0g5rKh5Y+X5YiwICR7Y29sbGVjdGVkLmJ1ZmZOYW1lfWAsXHJcbiAgICAgICAgICBrbzogYCR7Y29sbGVjdGVkLmJ1ZmZOYW1lfSAke25hbWVMaXN0feyXkOqyjCDsoIHsmqnslYjrkKhgLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgdGhlcmUncyB0b28gbWFueSBwZW9wbGUsIGp1c3QgbGlzdCB0aGUgbnVtYmVyIG9mIHBlb3BsZSBtaXNzZWQuXHJcbiAgICAvLyBUT0RPOiB3ZSBjb3VsZCBhbHNvIGxpc3QgZXZlcnlib2R5IG9uIHNlcGFyYXRlIGxpbmVzP1xyXG4gICAgdGhpcy5Pbk1pc3Rha2VPYmoodGltZXN0YW1wLCB7XHJcbiAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgIGJsYW1lOiBzb3VyY2VOYW1lLFxyXG4gICAgICB0cmlnZ2VyVHlwZTogJ0J1ZmYnLFxyXG4gICAgICB0ZXh0OiB7XHJcbiAgICAgICAgZW46IGAke2NvbGxlY3RlZC5idWZmTmFtZX0gbWlzc2VkICR7bWlzc2VkTmFtZXMubGVuZ3RofSBwZW9wbGVgLFxyXG4gICAgICAgIGRlOiBgJHtjb2xsZWN0ZWQuYnVmZk5hbWV9IHZlcmZlaGx0ZSAke21pc3NlZE5hbWVzLmxlbmd0aH0gUGVyc29uZW5gLFxyXG4gICAgICAgIGZyOiBgJHtjb2xsZWN0ZWQuYnVmZk5hbWV9IG1hbnF1w6koZSkgc3VyICR7bWlzc2VkTmFtZXMubGVuZ3RofSBwZXJzb25uZXNgLFxyXG4gICAgICAgIGphOiBgJHttaXNzZWROYW1lcy5sZW5ndGh95Lq644GMJHtjb2xsZWN0ZWQuYnVmZk5hbWV944KS5Y+X44GR44Gq44GL44Gj44GfYCxcclxuICAgICAgICBjbjogYOaciSR7bWlzc2VkTmFtZXMubGVuZ3RofeS6uuayoeWPl+WIsCAke2NvbGxlY3RlZC5idWZmTmFtZX1gLFxyXG4gICAgICAgIGtvOiBgJHtjb2xsZWN0ZWQuYnVmZk5hbWV9ICR7bWlzc2VkTmFtZXMubGVuZ3RofeuqheyXkOqyjCDsoIHsmqnslYjrkKhgLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIFBydW5lVHJhY2tlZEV2ZW50cyh0aW1lc3RhbXA6IG51bWJlcikge1xyXG4gICAgLy8gUmVtb3ZlIGFueSB0cmFja2VkIGV2ZW50cyB0aGF0IG9jY3VycmVkIHByaW9yIHRvIGB0aW1lc3RhbXBgLlxyXG4gICAgY29uc3QgaWR4ID0gdGhpcy50cmFja2VkRXZlbnRzLmZpbmRJbmRleCgoZXZlbnQpID0+IGV2ZW50LnRpbWVzdGFtcCA+PSB0aW1lc3RhbXApO1xyXG4gICAgaWYgKGlkeCA9PT0gLTEpXHJcbiAgICAgIHJldHVybjtcclxuICAgIHRoaXMudHJhY2tlZEV2ZW50cyA9IHRoaXMudHJhY2tlZEV2ZW50cy5zbGljZShpZHgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgbG9nRGVmaW5pdGlvbnMgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL25ldGxvZ19kZWZzJztcclxuaW1wb3J0IE5ldFJlZ2V4ZXMgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL25ldHJlZ2V4ZXMnO1xyXG5pbXBvcnQgeyBQbGF5ZXJDaGFuZ2VkRGV0YWlsIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3BsYXllcl9vdmVycmlkZSc7XHJcbmltcG9ydCBSZWdleGVzIGZyb20gJy4uLy4uL3Jlc291cmNlcy9yZWdleGVzJztcclxuaW1wb3J0IHsgTG9jYWxlTmV0UmVnZXggfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvdHJhbnNsYXRpb25zJztcclxuaW1wb3J0IFV0aWwgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3V0aWwnO1xyXG5pbXBvcnQgWm9uZUlkIGZyb20gJy4uLy4uL3Jlc291cmNlcy96b25lX2lkJztcclxuaW1wb3J0IFpvbmVJbmZvIGZyb20gJy4uLy4uL3Jlc291cmNlcy96b25lX2luZm8nO1xyXG5pbXBvcnQgeyBPb3BzeURhdGEgfSBmcm9tICcuLi8uLi90eXBlcy9kYXRhJztcclxuaW1wb3J0IHsgRXZlbnRSZXNwb25zZXMgfSBmcm9tICcuLi8uLi90eXBlcy9ldmVudCc7XHJcbmltcG9ydCB7IEpvYiwgUm9sZSB9IGZyb20gJy4uLy4uL3R5cGVzL2pvYic7XHJcbmltcG9ydCB7IE1hdGNoZXMsIE5ldE1hdGNoZXMgfSBmcm9tICcuLi8uLi90eXBlcy9uZXRfbWF0Y2hlcyc7XHJcbmltcG9ydCB7IENhY3Rib3RCYXNlUmVnRXhwIH0gZnJvbSAnLi4vLi4vdHlwZXMvbmV0X3RyaWdnZXInO1xyXG5pbXBvcnQge1xyXG4gIExvb3NlT29wc3lUcmlnZ2VyLFxyXG4gIExvb3NlT29wc3lUcmlnZ2VyU2V0LFxyXG4gIE1pc3Rha2VNYXAsXHJcbiAgT29wc3lEZWF0aFJlYXNvbixcclxuICBPb3BzeUZpZWxkLFxyXG4gIE9vcHN5RmlsZURhdGEsXHJcbiAgT29wc3lNaXN0YWtlLFxyXG4gIE9vcHN5TWlzdGFrZVR5cGUsXHJcbiAgT29wc3lUcmlnZ2VyLFxyXG4gIE9vcHN5VHJpZ2dlckZpZWxkLFxyXG59IGZyb20gJy4uLy4uL3R5cGVzL29vcHN5JztcclxuaW1wb3J0IHsgWm9uZUlkVHlwZSB9IGZyb20gJy4uLy4uL3R5cGVzL3RyaWdnZXInO1xyXG5cclxuaW1wb3J0IHsgQ29tYmF0U3RhdGUgfSBmcm9tICcuL2NvbWJhdF9zdGF0ZSc7XHJcbmltcG9ydCB7IE1pc3Rha2VDb2xsZWN0b3IgfSBmcm9tICcuL21pc3Rha2VfY29sbGVjdG9yJztcclxuaW1wb3J0IHtcclxuICBHZXRTaGFyZU1pc3Rha2VUZXh0LFxyXG4gIEdldFNvbG9NaXN0YWtlVGV4dCxcclxuICBJc1BsYXllcklkLFxyXG4gIElzVHJpZ2dlckVuYWJsZWQsXHJcbiAga0F0dGFja0ZsYWdzLFxyXG4gIGtGaWVsZEZsYWdzLFxyXG4gIGtTaGlmdEZsYWdWYWx1ZXMsXHJcbiAgcGxheWVyRGFtYWdlRmllbGRzLFxyXG4gIFNob3J0TmFtaWZ5LFxyXG4gIFRyYW5zbGF0ZSxcclxuICBVbnNjcmFtYmxlRGFtYWdlLFxyXG59IGZyb20gJy4vb29wc3lfY29tbW9uJztcclxuaW1wb3J0IHsgT29wc3lPcHRpb25zIH0gZnJvbSAnLi9vb3BzeV9vcHRpb25zJztcclxuaW1wb3J0IHsgUGxheWVyU3RhdGVUcmFja2VyIH0gZnJvbSAnLi9wbGF5ZXJfc3RhdGVfdHJhY2tlcic7XHJcblxyXG5jb25zdCBhY3RvckNvbnRyb2xGYWRlSW5Db21tYW5kID0gJzQwMDAwMDEwJztcclxuXHJcbmNvbnN0IHBhcnR5V2lwZVRleHQgPSB7XHJcbiAgZW46ICdQYXJ0eSBXaXBlJyxcclxuICBkZTogJ0dydXBwZSBhdXNnZWzDtnNjaHQnLFxyXG4gIGZyOiAnUGFydHkgV2lwZScsXHJcbiAgamE6ICfjg6/jgqTjg5cnLFxyXG4gIGNuOiAn5Zui54GtJyxcclxuICBrbzogJ+2MjO2LsCDsoITrqbgnLFxyXG59O1xyXG5cclxuY29uc3QgZWFybHlQdWxsVGV4dCA9IHtcclxuICBlbjogJ2Vhcmx5IHB1bGwnLFxyXG4gIGRlOiAnenUgZnLDvGggYW5nZWdyaWZmZW4nLFxyXG4gIGZyOiAnZWFybHkgcHVsbCcsXHJcbiAgamE6ICfjgr/jgrLlj5bjgorml6njgYQnLFxyXG4gIGNuOiAn5oqi5byAJyxcclxuICBrbzogJ+2SgOungSDruaDrpoQnLFxyXG59O1xyXG5cclxuY29uc3QgbGF0ZVB1bGxUZXh0ID0ge1xyXG4gIGVuOiAnbGF0ZSBwdWxsJyxcclxuICBkZTogJ3p1IHNww6R0IGFuZ2VncmlmZmVuJyxcclxuICBmcjogJ2xhdGUgcHVsbCcsXHJcbiAgamE6ICfjgr/jgrLlj5bjgorpgYXjgYQnLFxyXG4gIGNuOiAn5pma5byAJyxcclxuICBrbzogJ+2SgOungSDriqbsnYwnLFxyXG59O1xyXG5cclxuLy8gSW50ZXJuYWwgdHJpZ2dlciBpZCBmb3IgZWFybHkgcHVsbFxyXG5leHBvcnQgY29uc3QgZWFybHlQdWxsVHJpZ2dlcklkID0gJ0dlbmVyYWwgRWFybHkgUHVsbCc7XHJcblxyXG5jb25zdCBpc09vcHN5TWlzdGFrZSA9ICh4OiBPb3BzeU1pc3Rha2UgfCBPb3BzeURlYXRoUmVhc29uKTogeCBpcyBPb3BzeU1pc3Rha2UgPT4gJ3R5cGUnIGluIHg7XHJcblxyXG5leHBvcnQgdHlwZSBQcm9jZXNzZWRPb3BzeVRyaWdnZXJTZXQgPSBMb29zZU9vcHN5VHJpZ2dlclNldCAmIHtcclxuICBmaWxlbmFtZT86IHN0cmluZztcclxufTtcclxuXHJcbnR5cGUgUHJvY2Vzc2VkT29wc3lUcmlnZ2VyID0gTG9vc2VPb3BzeVRyaWdnZXIgJiB7XHJcbiAgbG9jYWxSZWdleDogUmVnRXhwO1xyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIERhbWFnZVRyYWNrZXIge1xyXG4gIHByaXZhdGUgdHJpZ2dlclNldHM/OiBQcm9jZXNzZWRPb3BzeVRyaWdnZXJTZXRbXTtcclxuICBwcml2YXRlIGluQ29tYmF0ID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBpZ25vcmVab25lID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSB0aW1lcnM6IG51bWJlcltdID0gW107XHJcbiAgcHJpdmF0ZSB0cmlnZ2VyczogUHJvY2Vzc2VkT29wc3lUcmlnZ2VyW10gPSBbXTtcclxuICBwcml2YXRlIHBsYXllclN0YXRlVHJhY2tlcjogUGxheWVyU3RhdGVUcmFja2VyO1xyXG4gIHByaXZhdGUgY291bnRkb3duRW5nYWdlUmVnZXg6IFJlZ0V4cDtcclxuICBwcml2YXRlIGNvdW50ZG93blN0YXJ0UmVnZXg6IFJlZ0V4cDtcclxuICBwcml2YXRlIGNvdW50ZG93bkNhbmNlbFJlZ2V4OiBSZWdFeHA7XHJcbiAgcHJpdmF0ZSBhYmlsaXR5RnVsbFJlZ2V4OiBDYWN0Ym90QmFzZVJlZ0V4cDwnQWJpbGl0eSc+O1xyXG4gIHByaXZhdGUgd2lwZUNhY3Rib3RFY2hvOiBDYWN0Ym90QmFzZVJlZ0V4cDwnR2FtZUxvZyc+O1xyXG4gIHByaXZhdGUgd2lwZUVuZEVjaG86IENhY3Rib3RCYXNlUmVnRXhwPCdHYW1lTG9nJz47XHJcbiAgcHJpdmF0ZSBjb21iYXRTdGF0ZSA9IG5ldyBDb21iYXRTdGF0ZSh0aGlzKTtcclxuICBwcml2YXRlIGVuZ2FnZVRpbWU/OiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBmaXJzdFB1bGxlcj86IHN0cmluZztcclxuICBwcml2YXRlIGxhc3RUaW1lc3RhbXAgPSAwO1xyXG4gIHByaXZhdGUgdHJpZ2dlclN1cHByZXNzOiB7IFt0cmlnZ2VySWQ6IHN0cmluZ106IG51bWJlciB9ID0ge307XHJcbiAgcHJpdmF0ZSBkYXRhOiBPb3BzeURhdGE7XHJcbiAgcHJpdmF0ZSB0aW1lc3RhbXBDYWxsYmFja3M6IHtcclxuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xyXG4gICAgY2FsbGJhY2s6ICh0aW1lc3RhbXA6IG51bWJlcikgPT4gdm9pZDtcclxuICB9W10gPSBbXTtcclxuXHJcbiAgcHJpdmF0ZSBqb2I6IEpvYiA9ICdOT05FJztcclxuICBwcml2YXRlIHJvbGU6IFJvbGUgPSAnbm9uZSc7XHJcbiAgcHJpdmF0ZSBtZSA9ICcnO1xyXG4gIHByaXZhdGUgem9uZU5hbWU/OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSB6b25lSWQ6IFpvbmVJZFR5cGUgPSBab25lSWQuTWF0Y2hBbGw7XHJcbiAgcHJpdmF0ZSBjb250ZW50VHlwZSA9IDA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBvcHRpb25zOiBPb3BzeU9wdGlvbnMsXHJcbiAgICBwcml2YXRlIGNvbGxlY3RvcjogTWlzdGFrZUNvbGxlY3RvcixcclxuICAgIHByaXZhdGUgZGF0YUZpbGVzOiBPb3BzeUZpbGVEYXRhLFxyXG4gICkge1xyXG4gICAgY29uc3QgdGltZXN0YW1wQ2FsbGJhY2sgPSAodGltZXN0YW1wOiBudW1iZXIsIGNhbGxiYWNrOiAodGltZXN0YW1wOiBudW1iZXIpID0+IHZvaWQpID0+XHJcbiAgICAgIHRoaXMuT25SZXF1ZXN0VGltZXN0YW1wQ2FsbGJhY2sodGltZXN0YW1wLCBjYWxsYmFjayk7XHJcbiAgICB0aGlzLnBsYXllclN0YXRlVHJhY2tlciA9IG5ldyBQbGF5ZXJTdGF0ZVRyYWNrZXIoXHJcbiAgICAgIHRoaXMub3B0aW9ucyxcclxuICAgICAgdGhpcy5jb2xsZWN0b3IsXHJcbiAgICAgIHRpbWVzdGFtcENhbGxiYWNrLFxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBsYW5nID0gdGhpcy5vcHRpb25zLlBhcnNlckxhbmd1YWdlO1xyXG4gICAgdGhpcy5jb3VudGRvd25FbmdhZ2VSZWdleCA9IExvY2FsZU5ldFJlZ2V4LmNvdW50ZG93bkVuZ2FnZVtsYW5nXTtcclxuICAgIHRoaXMuY291bnRkb3duU3RhcnRSZWdleCA9IExvY2FsZU5ldFJlZ2V4LmNvdW50ZG93blN0YXJ0W2xhbmddO1xyXG4gICAgdGhpcy5jb3VudGRvd25DYW5jZWxSZWdleCA9IExvY2FsZU5ldFJlZ2V4LmNvdW50ZG93bkNhbmNlbFtsYW5nXTtcclxuICAgIHRoaXMuYWJpbGl0eUZ1bGxSZWdleCA9IE5ldFJlZ2V4ZXMuYWJpbGl0eUZ1bGwoKTtcclxuICAgIHRoaXMud2lwZUNhY3Rib3RFY2hvID0gTmV0UmVnZXhlcy5lY2hvKHsgbGluZTogJ2NhY3Rib3Qgd2lwZS4qPycgfSk7XHJcbiAgICB0aGlzLndpcGVFbmRFY2hvID0gTmV0UmVnZXhlcy5lY2hvKHsgbGluZTogJ2VuZCcgfSk7XHJcblxyXG4gICAgdGhpcy5kYXRhID0gdGhpcy5HZXREYXRhT2JqZWN0KCk7XHJcbiAgICB0aGlzLlJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICBPblJlcXVlc3RUaW1lc3RhbXBDYWxsYmFjayh0aW1lc3RhbXA6IG51bWJlciwgY2FsbGJhY2s6ICh0aW1lc3RhbXA6IG51bWJlcikgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy50aW1lc3RhbXBDYWxsYmFja3MucHVzaCh7XHJcbiAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLFxyXG4gICAgICBjYWxsYmFjazogY2FsbGJhY2ssXHJcbiAgICB9KTtcclxuICAgIC8vIFNvcnQgZWFybGllc3QgdG8gbGF0ZXN0LlxyXG4gICAgdGhpcy50aW1lc3RhbXBDYWxsYmFja3Muc29ydCgoYSwgYikgPT4gYS50aW1lc3RhbXAgLSBiLnRpbWVzdGFtcCk7XHJcbiAgfVxyXG5cclxuICBHZXREYXRhT2JqZWN0KCk6IE9vcHN5RGF0YSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtZTogdGhpcy5tZSxcclxuICAgICAgam9iOiB0aGlzLmpvYixcclxuICAgICAgcm9sZTogdGhpcy5yb2xlLFxyXG4gICAgICBwYXJ0eTogdGhpcy5wbGF5ZXJTdGF0ZVRyYWNrZXIucGFydHlUcmFja2VyLFxyXG4gICAgICBpbkNvbWJhdDogdGhpcy5pbkNvbWJhdCxcclxuICAgICAgU2hvcnROYW1lOiAobmFtZT86IHN0cmluZykgPT4gU2hvcnROYW1pZnkobmFtZSwgdGhpcy5vcHRpb25zLlBsYXllck5pY2tzKSxcclxuICAgICAgSXNQbGF5ZXJJZDogSXNQbGF5ZXJJZCxcclxuICAgICAgRGFtYWdlRnJvbU1hdGNoZXM6IChtYXRjaGVzOiBOZXRNYXRjaGVzWydBYmlsaXR5J10pID0+IFVuc2NyYW1ibGVEYW1hZ2UobWF0Y2hlcz8uZGFtYWdlKSxcclxuICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxyXG5cclxuICAgICAgLy8gRGVwcmVjYXRlZC5cclxuICAgICAgUGFyc2VMb2NhbGVGbG9hdDogcGFyc2VGbG9hdCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBUT0RPOiB0aGlzIHNob3VsZG4ndCBjbGVhciB0aW1lcnMgYW5kIHRyaWdnZXJzXHJcbiAgLy8gVE9ETzogc2VlbXMgbGlrZSBzb21lIHJlbG9hZHMgYXJlIGNhdXNpbmcgdGhlIC9wb2tlIHRlc3QgdG8gZ2V0IHVuZGVmaW5lZFxyXG4gIFJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5kYXRhID0gdGhpcy5HZXREYXRhT2JqZWN0KCk7XHJcbiAgICB0aGlzLnRyaWdnZXJTdXBwcmVzcyA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3QgdGltZXIgb2YgdGhpcy50aW1lcnMpXHJcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpO1xyXG4gICAgdGhpcy50aW1lcnMgPSBbXTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgT25FbmdhZ2UodGltZXN0YW1wOiBudW1iZXIpIHtcclxuICAgIHRoaXMuZW5nYWdlVGltZSA9IHRpbWVzdGFtcDtcclxuXHJcbiAgICBpZiAoIXRoaXMuZmlyc3RQdWxsZXIgfHwgIXRoaXMuY29tYmF0U3RhdGUuc3RhcnRUaW1lKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc3Qgc2Vjb25kcyA9ICh0aW1lc3RhbXAgLSB0aGlzLmNvbWJhdFN0YXRlLnN0YXJ0VGltZSkgLyAxMDAwO1xyXG4gICAgaWYgKHNlY29uZHMgPj0gdGhpcy5vcHRpb25zLk1pbmltdW1UaW1lRm9yUHVsbE1pc3Rha2UpIHtcclxuICAgICAgY29uc3QgbWlzdGFrZVN0ciA9IFRyYW5zbGF0ZSh0aGlzLm9wdGlvbnMuRGlzcGxheUxhbmd1YWdlLCBlYXJseVB1bGxUZXh0KSA/PyAnJztcclxuICAgICAgY29uc3QgdGV4dCA9IGAke21pc3Rha2VTdHJ9ICgke3NlY29uZHMudG9GaXhlZCgxKX1zKWA7XHJcbiAgICAgIGlmIChJc1RyaWdnZXJFbmFibGVkKHRoaXMub3B0aW9ucywgZWFybHlQdWxsVHJpZ2dlcklkKSkge1xyXG4gICAgICAgIHRoaXMucGxheWVyU3RhdGVUcmFja2VyLk9uTWlzdGFrZU9iaih0aW1lc3RhbXAsIHtcclxuICAgICAgICAgIHR5cGU6ICdwdWxsJyxcclxuICAgICAgICAgIG5hbWU6IHRoaXMuZmlyc3RQdWxsZXIsXHJcbiAgICAgICAgICBibGFtZTogdGhpcy5maXJzdFB1bGxlcixcclxuICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgVXBkYXRlTGFzdFRpbWVzdGFtcChzcGxpdExpbmU6IHN0cmluZ1tdKTogdm9pZCB7XHJcbiAgICBjb25zdCB0aW1lRmllbGQgPSBzcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuTm9uZS5maWVsZHMudGltZXN0YW1wXTtcclxuICAgIGlmICh0aW1lRmllbGQpXHJcbiAgICAgIHRoaXMubGFzdFRpbWVzdGFtcCA9IG5ldyBEYXRlKHRpbWVGaWVsZCkuZ2V0VGltZSgpO1xyXG4gIH1cclxuXHJcbiAgT25OZXRMb2coZTogRXZlbnRSZXNwb25zZXNbJ0xvZ0xpbmUnXSk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuaWdub3JlWm9uZSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGxpbmUgPSBlLnJhd0xpbmU7XHJcbiAgICBjb25zdCBzcGxpdExpbmUgPSBlLmxpbmU7XHJcbiAgICBjb25zdCB0eXBlID0gc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLk5vbmUuZmllbGRzLnR5cGVdO1xyXG5cclxuICAgIC8vIElmIHdlJ3JlIHdhaXRpbmcgb24gYSB0aW1lc3RhbXAgY2FsbGJhY2ssIGNoZWNrIGlmIGFueSBoYXZlIHBhc3NlZCB3aXRoIHRoaXMgbGluZS5cclxuICAgIC8vIElnbm9yZSBnYW1lIGxvZyBsaW5lcywgd2hpY2ggZG9uJ3QgdHJhY2sgbWlsbGlzZWNvbmRzLlxyXG4gICAgaWYgKHR5cGUgIT09IGxvZ0RlZmluaXRpb25zLkdhbWVMb2cudHlwZSkge1xyXG4gICAgICB0aGlzLlVwZGF0ZUxhc3RUaW1lc3RhbXAoc3BsaXRMaW5lKTtcclxuICAgICAgbGV0IHRpbWVzdGFtcENhbGxiYWNrID0gdGhpcy50aW1lc3RhbXBDYWxsYmFja3NbMF07XHJcbiAgICAgIHdoaWxlICh0aW1lc3RhbXBDYWxsYmFjaykge1xyXG4gICAgICAgIGlmICh0aGlzLmxhc3RUaW1lc3RhbXAgPCB0aW1lc3RhbXBDYWxsYmFjay50aW1lc3RhbXApXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgdGltZXN0YW1wQ2FsbGJhY2suY2FsbGJhY2sodGhpcy5sYXN0VGltZXN0YW1wKTtcclxuICAgICAgICB0aGlzLnRpbWVzdGFtcENhbGxiYWNrcy5zaGlmdCgpO1xyXG4gICAgICAgIHRpbWVzdGFtcENhbGxiYWNrID0gdGhpcy50aW1lc3RhbXBDYWxsYmFja3NbMF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgY2FzZSBsb2dEZWZpbml0aW9ucy5HYW1lTG9nLnR5cGU6XHJcbiAgICAgICAgaWYgKHRoaXMuY291bnRkb3duRW5nYWdlUmVnZXgudGVzdChsaW5lKSkge1xyXG4gICAgICAgICAgLy8gSXQgd291bGQgYmUgaWRlYWwgaWYgd2UgY291bGQgdXNlIHRoZSBsb2cgdGltZXN0YW1wLCBidXQgbWFueSBlYXJseS9sYXRlIHB1bGxzIGFyZSA8MXMsXHJcbiAgICAgICAgICAvLyBhbmQgdGhlIGFjY3VyYWN5IG9mIGdhbWUgbG9nIGxpbmVzIGlzIGFsc28gYXQgbW9zdCAxcyBvZmYgZnJvbSByZWFsIHRpbWUuXHJcbiAgICAgICAgICB0aGlzLk9uRW5nYWdlKERhdGUubm93KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb3VudGRvd25TdGFydFJlZ2V4LnRlc3QobGluZSkgfHwgdGhpcy5jb3VudGRvd25DYW5jZWxSZWdleC50ZXN0KGxpbmUpKVxyXG4gICAgICAgICAgdGhpcy5jb21iYXRTdGF0ZS5SZXNldCgpO1xyXG4gICAgICAgIGlmICh0aGlzLndpcGVDYWN0Ym90RWNoby50ZXN0KGxpbmUpIHx8IHRoaXMud2lwZUVuZEVjaG8udGVzdChsaW5lKSlcclxuICAgICAgICAgIHRoaXMuV2lwZSh0aGlzLmxhc3RUaW1lc3RhbXApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIGxvZ0RlZmluaXRpb25zLkNoYW5nZVpvbmUudHlwZTpcclxuICAgICAgICB7XHJcbiAgICAgICAgICBjb25zdCBuYW1lID0gc3BsaXRMaW5lW2xvZ0RlZmluaXRpb25zLkNoYW5nZVpvbmUuZmllbGRzLm5hbWVdO1xyXG4gICAgICAgICAgY29uc3QgaWQgPSBzcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuQ2hhbmdlWm9uZS5maWVsZHMuaWRdO1xyXG4gICAgICAgICAgaWYgKG5hbWUgIT09IHVuZGVmaW5lZCAmJiBpZCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aGlzLlNldFpvbmUodGhpcy5sYXN0VGltZXN0YW1wLCBuYW1lLCBwYXJzZUludChpZCwgMTYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgbG9nRGVmaW5pdGlvbnMuUGFydHlMaXN0LnR5cGU6XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJTdGF0ZVRyYWNrZXIuT25QYXJ0eUxpc3QobGluZSwgc3BsaXRMaW5lKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBsb2dEZWZpbml0aW9ucy5DaGFuZ2VkUGxheWVyLnR5cGU6XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJTdGF0ZVRyYWNrZXIuT25DaGFuZ2VkUGxheWVyKGxpbmUsIHNwbGl0TGluZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgbG9nRGVmaW5pdGlvbnMuQWRkZWRDb21iYXRhbnQudHlwZTpcclxuICAgICAgICB0aGlzLnBsYXllclN0YXRlVHJhY2tlci5PbkFkZGVkQ29tYmF0YW50KGxpbmUsIHNwbGl0TGluZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgbG9nRGVmaW5pdGlvbnMuQWJpbGl0eS50eXBlOlxyXG4gICAgICBjYXNlIGxvZ0RlZmluaXRpb25zLk5ldHdvcmtBT0VBYmlsaXR5LnR5cGU6XHJcbiAgICAgICAgdGhpcy5PbkFiaWxpdHlFdmVudChsaW5lLCBzcGxpdExpbmUpO1xyXG4gICAgICAgIHRoaXMucGxheWVyU3RhdGVUcmFja2VyLk9uQWJpbGl0eShsaW5lLCBzcGxpdExpbmUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIGxvZ0RlZmluaXRpb25zLldhc0RlZmVhdGVkLnR5cGU6XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJTdGF0ZVRyYWNrZXIuT25EZWZlYXRlZChsaW5lLCBzcGxpdExpbmUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIGxvZ0RlZmluaXRpb25zLkdhaW5zRWZmZWN0LnR5cGU6XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJTdGF0ZVRyYWNrZXIuT25HYWluc0VmZmVjdChsaW5lLCBzcGxpdExpbmUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIGxvZ0RlZmluaXRpb25zLkxvc2VzRWZmZWN0LnR5cGU6XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJTdGF0ZVRyYWNrZXIuT25Mb3Nlc0VmZmVjdChsaW5lLCBzcGxpdExpbmUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIGxvZ0RlZmluaXRpb25zLk5ldHdvcmtEb1QudHlwZTpcclxuICAgICAgICB0aGlzLnBsYXllclN0YXRlVHJhY2tlci5PbkhvVERvVChsaW5lLCBzcGxpdExpbmUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIGxvZ0RlZmluaXRpb25zLkFjdG9yQ29udHJvbC50eXBlOlxyXG4gICAgICAgIGlmIChzcGxpdExpbmVbbG9nRGVmaW5pdGlvbnMuQWN0b3JDb250cm9sLmZpZWxkcy5jb21tYW5kXSA9PT0gYWN0b3JDb250cm9sRmFkZUluQ29tbWFuZCkge1xyXG4gICAgICAgICAgdGhpcy5XaXBlKHRoaXMubGFzdFRpbWVzdGFtcCk7XHJcbiAgICAgICAgICB0aGlzLnBsYXllclN0YXRlVHJhY2tlci5PbldpcGUobGluZSwgc3BsaXRMaW5lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJvY2VzcyB0cmlnZ2VycyBhZnRlciBhYmlsaXRpZXMsIHNvIHRoYXQgZGVhdGggcmVhc29ucyBmb3IgYWJpbGl0aWVzIHRoYXQgZG8gZGFtYWdlIGdldFxyXG4gICAgLy8gbGlzdGVkIGFmdGVyIHRoZSBkYW1hZ2UgZnJvbSB0aGF0IGFiaWxpdHkuXHJcbiAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2YgdGhpcy50cmlnZ2Vycykge1xyXG4gICAgICBjb25zdCBtYXRjaGVzID0gdHJpZ2dlci5sb2NhbFJlZ2V4LmV4ZWMobGluZSk7XHJcbiAgICAgIGlmIChtYXRjaGVzKVxyXG4gICAgICAgIHRoaXMuT25UcmlnZ2VyKHRyaWdnZXIsIG1hdGNoZXMsIHRoaXMubGFzdFRpbWVzdGFtcCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIE9uQWJpbGl0eUV2ZW50KGxpbmU6IHN0cmluZywgc3BsaXRMaW5lOiBzdHJpbmdbXSk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuZmlyc3RQdWxsZXIgfHwgdGhpcy5jb21iYXRTdGF0ZS5zdGFydFRpbWUpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICAvLyBUaGlzIGlzIGtpbmQgb2Ygb2Jub3hpb3VzIHRvIGhhdmUgdG8gcmVnZXggbWF0Y2ggZXZlcnkgYWJpbGl0eSBsaW5lIHRoYXQncyBhbHJlYWR5IHNwbGl0LlxyXG4gICAgLy8gQnV0LCBpdCB0dXJucyBpdCBpbnRvIGEgdXNhYmxlIG1hdGNoIG9iamVjdC5cclxuICAgIC8vIFRPRE86IHVzZSBsb2cgZGVmaW5pdGlvbnMgaGVyZT8/XHJcbiAgICBjb25zdCBsaW5lTWF0Y2hlcyA9IHRoaXMuYWJpbGl0eUZ1bGxSZWdleC5leGVjKGxpbmUpO1xyXG4gICAgaWYgKCFsaW5lTWF0Y2hlcyB8fCAhbGluZU1hdGNoZXMuZ3JvdXBzKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc3QgbWF0Y2hlcyA9IGxpbmVNYXRjaGVzLmdyb3VwcztcclxuXHJcbiAgICAvLyBTaGlmdCBkYW1hZ2UgYW5kIGZsYWdzIGZvcndhcmQgZm9yIG15c3RlcmlvdXMgc3B1cmlvdXMgOjNFOjA6LlxyXG4gICAgLy8gUGxlbmFyeSBJbmR1bGdlbmNlIGFsc28gYXBwZWFycyB0byBwcmVwZW5kIGNvbmZlc3Npb24gc3RhY2tzLlxyXG4gICAgLy8gVU5LTk9XTjogQ2FuIHRoZXNlIHR3byBoYXBwZW4gYXQgdGhlIHNhbWUgdGltZT9cclxuICAgIGNvbnN0IG9yaWdGbGFncyA9IHNwbGl0TGluZVtrRmllbGRGbGFnc107XHJcbiAgICBpZiAob3JpZ0ZsYWdzICYmIGtTaGlmdEZsYWdWYWx1ZXMuaW5jbHVkZXMob3JpZ0ZsYWdzKSkge1xyXG4gICAgICBtYXRjaGVzLmZsYWdzID0gc3BsaXRMaW5lW2tGaWVsZEZsYWdzICsgMl0gPz8gbWF0Y2hlcy5mbGFncztcclxuICAgICAgbWF0Y2hlcy5kYW1hZ2UgPSBzcGxpdExpbmVba0ZpZWxkRmxhZ3MgKyAzXSA/PyBtYXRjaGVzLmRhbWFnZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBMZW5ndGggMSBvciAyLlxyXG4gICAgbGV0IGxvd0J5dGUgPSBtYXRjaGVzLmZsYWdzLnN1YnN0cigtMik7XHJcbiAgICBpZiAobG93Qnl0ZS5sZW5ndGggPT09IDEpXHJcbiAgICAgIGxvd0J5dGUgPSAnMCcgKyBsb3dCeXRlO1xyXG5cclxuICAgIGlmICgha0F0dGFja0ZsYWdzLmluY2x1ZGVzKGxvd0J5dGUpKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgLy8gU3RhcnQgY29tYmF0IGZpcnN0IHByaW9yIHRvIHNlbmRpbmcgYSBsYXRlIHB1bGwgbWlzdGFrZSxcclxuICAgIC8vIGFzIHN0YXJ0aW5nIGEgbmV3IGNvbWJhdCBjYW4gcmVzZXQgdGhlIGxpdmUgbGlzdC5cclxuICAgIHRoaXMuY29tYmF0U3RhdGUuU3RhcnRDb21iYXQodGhpcy5sYXN0VGltZXN0YW1wKTtcclxuXHJcbiAgICBpZiAoSXNQbGF5ZXJJZChtYXRjaGVzLnNvdXJjZUlkKSlcclxuICAgICAgdGhpcy5maXJzdFB1bGxlciA9IG1hdGNoZXMuc291cmNlO1xyXG4gICAgZWxzZSBpZiAoSXNQbGF5ZXJJZChtYXRjaGVzLnRhcmdldElkKSlcclxuICAgICAgdGhpcy5maXJzdFB1bGxlciA9IG1hdGNoZXMudGFyZ2V0O1xyXG4gICAgZWxzZVxyXG4gICAgICB0aGlzLmZpcnN0UHVsbGVyID0gJz8/Pyc7XHJcblxyXG4gICAgaWYgKHRoaXMuZW5nYWdlVGltZSkge1xyXG4gICAgICBjb25zdCBzZWNvbmRzID0gKChEYXRlLm5vdygpIC0gdGhpcy5lbmdhZ2VUaW1lKSAvIDEwMDApO1xyXG4gICAgICBpZiAoc2Vjb25kcyA+PSB0aGlzLm9wdGlvbnMuTWluaW11bVRpbWVGb3JQdWxsTWlzdGFrZSkge1xyXG4gICAgICAgIGNvbnN0IG1pc3Rha2VTdHIgPSBUcmFuc2xhdGUodGhpcy5vcHRpb25zLkRpc3BsYXlMYW5ndWFnZSwgbGF0ZVB1bGxUZXh0KSA/PyAnJztcclxuICAgICAgICBjb25zdCB0ZXh0ID0gYCR7bWlzdGFrZVN0cn0gKCR7c2Vjb25kcy50b0ZpeGVkKDEpfXMpYDtcclxuICAgICAgICBpZiAoSXNUcmlnZ2VyRW5hYmxlZCh0aGlzLm9wdGlvbnMsIGVhcmx5UHVsbFRyaWdnZXJJZCkpIHtcclxuICAgICAgICAgIHRoaXMucGxheWVyU3RhdGVUcmFja2VyLk9uTWlzdGFrZU9iaih0aGlzLmxhc3RUaW1lc3RhbXAsIHtcclxuICAgICAgICAgICAgdHlwZTogJ3B1bGwnLFxyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLmZpcnN0UHVsbGVyLFxyXG4gICAgICAgICAgICBibGFtZTogdGhpcy5maXJzdFB1bGxlcixcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgT25TdGFydEVuY291bnRlcih0aW1lc3RhbXA6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5wbGF5ZXJTdGF0ZVRyYWNrZXIuT25TdGFydEVuY291bnRlcih0aW1lc3RhbXApO1xyXG4gIH1cclxuXHJcbiAgT25TdG9wRW5jb3VudGVyKHRpbWVzdGFtcDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLnBsYXllclN0YXRlVHJhY2tlci5PblN0b3BFbmNvdW50ZXIodGltZXN0YW1wKTtcclxuICAgIHRoaXMuZmlyc3RQdWxsZXIgPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLmVuZ2FnZVRpbWUgPSB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBPblRyaWdnZXIodHJpZ2dlcjogTG9vc2VPb3BzeVRyaWdnZXIsIGV4ZWNNYXRjaGVzOiBSZWdFeHBFeGVjQXJyYXksIHRpbWVzdGFtcDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCB0cmlnZ2VyVGltZSA9IERhdGUubm93KCk7XHJcblxyXG4gICAgLy8gVE9ETzogdHVybiB0aGlzIGludG8gYSBoZWxwZXI/PyB0aGlzIHdhcyBjb3BpZWQvcGFzdGVkIGZyb20gcG9wdXAtdGV4dC5qc1xyXG5cclxuICAgIC8vIElmIHVzaW5nIG5hbWVkIGdyb3VwcywgdHJlYXQgbWF0Y2hlcy5ncm91cHMgYXMgbWF0Y2hlc1xyXG4gICAgLy8gc28gdHJpZ2dlcnMgY2FuIGRvIHRoaW5ncyBsaWtlIG1hdGNoZXMudGFyZ2V0LlxyXG4gICAgbGV0IG1hdGNoZXM6IE1hdGNoZXMgPSB7fTtcclxuICAgIC8vIElmIHVzaW5nIG5hbWVkIGdyb3VwcywgdHJlYXQgbWF0Y2hlcy5ncm91cHMgYXMgbWF0Y2hlc1xyXG4gICAgLy8gc28gdHJpZ2dlcnMgY2FuIGRvIHRoaW5ncyBsaWtlIG1hdGNoZXMudGFyZ2V0LlxyXG4gICAgaWYgKGV4ZWNNYXRjaGVzLmdyb3Vwcykge1xyXG4gICAgICBtYXRjaGVzID0gZXhlY01hdGNoZXMuZ3JvdXBzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIG1hdGNoaW5nIGdyb3VwcywgcmVwcm9kdWNlIHRoZSBvbGQganMgbG9naWMgd2hlcmVcclxuICAgICAgLy8gZ3JvdXBzIGVuZGVkIHVwIGFzIHRoZSBvcmlnaW5hbCBSZWdFeHBFeGVjQXJyYXkgb2JqZWN0XHJcbiAgICAgIGV4ZWNNYXRjaGVzLmZvckVhY2goKHZhbHVlLCBpZHgpID0+IHtcclxuICAgICAgICBtYXRjaGVzW2lkeF0gPSB2YWx1ZTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRyaWdnZXIuaWQpIHtcclxuICAgICAgaWYgKCFJc1RyaWdnZXJFbmFibGVkKHRoaXMub3B0aW9ucywgdHJpZ2dlci5pZCkpXHJcbiAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgaWYgKHRyaWdnZXIuaWQgaW4gdGhpcy50cmlnZ2VyU3VwcHJlc3MpIHtcclxuICAgICAgICBjb25zdCBzdXBwcmVzc1RpbWUgPSB0aGlzLnRyaWdnZXJTdXBwcmVzc1t0cmlnZ2VyLmlkXTtcclxuICAgICAgICBpZiAoc3VwcHJlc3NUaW1lICYmIHN1cHByZXNzVGltZSA+IHRyaWdnZXJUaW1lKVxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnRyaWdnZXJTdXBwcmVzc1t0cmlnZ2VyLmlkXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IFZhbHVlT3JGdW5jdGlvbiA9IChcclxuICAgICAgZjogT29wc3lUcmlnZ2VyRmllbGQ8T29wc3lEYXRhLCBNYXRjaGVzLCBPb3BzeUZpZWxkPixcclxuICAgICAgbWF0Y2hlczogTWF0Y2hlcyxcclxuICAgICkgPT4ge1xyXG4gICAgICByZXR1cm4gKHR5cGVvZiBmID09PSAnZnVuY3Rpb24nKSA/IGYodGhpcy5kYXRhLCBtYXRjaGVzKSA6IGY7XHJcbiAgICB9O1xyXG5cclxuICAgIGlmICgnY29uZGl0aW9uJyBpbiB0cmlnZ2VyKSB7XHJcbiAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IFZhbHVlT3JGdW5jdGlvbih0cmlnZ2VyLmNvbmRpdGlvbiwgbWF0Y2hlcyk7XHJcbiAgICAgIGlmIChjb25kaXRpb24gPT09IHVuZGVmaW5lZCB8fCBjb25kaXRpb24gPT09IG51bGwgfHwgY29uZGl0aW9uID09PSBmYWxzZSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGVsYXlGaWVsZCA9ICdkZWxheVNlY29uZHMnIGluIHRyaWdnZXJcclxuICAgICAgPyBWYWx1ZU9yRnVuY3Rpb24odHJpZ2dlci5kZWxheVNlY29uZHMsIG1hdGNoZXMpXHJcbiAgICAgIDogMDtcclxuICAgIGNvbnN0IGRlbGF5U2Vjb25kcyA9IGRlbGF5RmllbGQgPT09IHVuZGVmaW5lZCB8fCBkZWxheUZpZWxkID09PSBudWxsIHx8IGRlbGF5RmllbGQgPT09IGZhbHNlIHx8XHJcbiAgICAgICAgdHlwZW9mIGRlbGF5RmllbGQgIT09ICdudW1iZXInXHJcbiAgICAgID8gMFxyXG4gICAgICA6IGRlbGF5RmllbGQ7XHJcblxyXG4gICAgY29uc3Qgc3VwcHJlc3MgPSAnc3VwcHJlc3NTZWNvbmRzJyBpbiB0cmlnZ2VyXHJcbiAgICAgID8gVmFsdWVPckZ1bmN0aW9uKHRyaWdnZXIuc3VwcHJlc3NTZWNvbmRzLCBtYXRjaGVzKVxyXG4gICAgICA6IDA7XHJcbiAgICBpZiAodHJpZ2dlci5pZCAmJiB0eXBlb2Ygc3VwcHJlc3MgPT09ICdudW1iZXInICYmIHN1cHByZXNzID4gMClcclxuICAgICAgdGhpcy50cmlnZ2VyU3VwcHJlc3NbdHJpZ2dlci5pZF0gPSB0cmlnZ2VyVGltZSArIChzdXBwcmVzcyAqIDEwMDApO1xyXG5cclxuICAgIGNvbnN0IGYgPSAoKCkgPT4ge1xyXG4gICAgICBpZiAoJ21pc3Rha2UnIGluIHRyaWdnZXIpIHtcclxuICAgICAgICBjb25zdCBtID0gVmFsdWVPckZ1bmN0aW9uKHRyaWdnZXIubWlzdGFrZSwgbWF0Y2hlcyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgY29uc3QgbWlzdGFrZVRpbWVzdGFtcCA9IHRpbWVzdGFtcCArIGRlbGF5U2Vjb25kcyAqIDEwMDA7XHJcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtKSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1pc3Rha2Ugb2YgbSlcclxuICAgICAgICAgICAgICB0aGlzLnBsYXllclN0YXRlVHJhY2tlci5Pbk1pc3Rha2VPYmoobWlzdGFrZVRpbWVzdGFtcCwgbWlzdGFrZSk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzT29wc3lNaXN0YWtlKG0pKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyU3RhdGVUcmFja2VyLk9uTWlzdGFrZU9iaihtaXN0YWtlVGltZXN0YW1wLCBtKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCdkZWF0aFJlYXNvbicgaW4gdHJpZ2dlcikge1xyXG4gICAgICAgIGNvbnN0IHJldCA9IFZhbHVlT3JGdW5jdGlvbih0cmlnZ2VyLmRlYXRoUmVhc29uLCBtYXRjaGVzKTtcclxuICAgICAgICBpZiAocmV0ICE9PSBudWxsICYmIHR5cGVvZiByZXQgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJldCkpIHtcclxuICAgICAgICAgIGlmICghaXNPb3BzeU1pc3Rha2UocmV0KSlcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJTdGF0ZVRyYWNrZXIuT25EZWF0aFJlYXNvbih0aW1lc3RhbXAsIHJldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICgncnVuJyBpbiB0cmlnZ2VyKVxyXG4gICAgICAgIFZhbHVlT3JGdW5jdGlvbih0cmlnZ2VyLnJ1biwgbWF0Y2hlcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoZGVsYXlTZWNvbmRzIDw9IDApXHJcbiAgICAgIGYoKTtcclxuICAgIGVsc2VcclxuICAgICAgdGhpcy50aW1lcnMucHVzaCh3aW5kb3cuc2V0VGltZW91dChmLCBkZWxheVNlY29uZHMgKiAxMDAwKSk7XHJcbiAgfVxyXG5cclxuICBXaXBlKHRpbWVzdGFtcDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLnBsYXllclN0YXRlVHJhY2tlci5Pbk1pc3Rha2VPYmoodGltZXN0YW1wLCB7XHJcbiAgICAgIHR5cGU6ICd3aXBlJyxcclxuICAgICAgdGV4dDogcGFydHlXaXBlVGV4dCxcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuUmVzZXQoKTtcclxuICAgIHRoaXMuY29tYmF0U3RhdGUuU3RvcENvbWJhdCh0aW1lc3RhbXApO1xyXG4gIH1cclxuXHJcbiAgLy8gU2ltaWxhciB0byBQbGF5ZXJTdGF0ZVRyYWNrZXIgaGFuZGxpbmcgT25QbGF5ZXJDaGFuZ2VkIGV2ZW50cyBwbHVzIENoYW5nZWRQbGF5ZXIgbGluZXMsXHJcbiAgLy8gaGFuZGxpbmcgdGhpcyBldmVudCBpcyBleHRyYSBpbnN1cmFuY2UgZm9yIHJlbG9hZHMgaW4gdGhlIG1pZGRsZSBvZiBhIHpvbmUgd2hlblxyXG4gIC8vIHRoZXJlIHdvbid0IGJlIENoYW5nZVpvbmUgbGluZXMgdG8gZG8gaXQgbW9yZSBuYXR1cmFsbHkuXHJcbiAgT25DaGFuZ2Vab25lKGU6IEV2ZW50UmVzcG9uc2VzWydDaGFuZ2Vab25lJ10pOiB2b2lkIHtcclxuICAgIHRoaXMuU2V0Wm9uZSh0aGlzLmxhc3RUaW1lc3RhbXAsIGUuem9uZU5hbWUsIGUuem9uZUlEKTtcclxuICB9XHJcblxyXG4gIFNldFpvbmUodGltZXN0YW1wOiBudW1iZXIsIHpvbmVOYW1lOiBzdHJpbmcsIHpvbmVJZDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy56b25lSWQgPT09IHpvbmVJZClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIHRoaXMuem9uZU5hbWUgPSB6b25lTmFtZTtcclxuICAgIHRoaXMuem9uZUlkID0gem9uZUlkO1xyXG5cclxuICAgIGNvbnN0IHpvbmVJbmZvID0gWm9uZUluZm9bdGhpcy56b25lSWRdO1xyXG4gICAgdGhpcy5jb250ZW50VHlwZSA9IHpvbmVJbmZvPy5jb250ZW50VHlwZSA/PyAwO1xyXG5cclxuICAgIHRoaXMuY29tYmF0U3RhdGUuU3RvcENvbWJhdCh0aW1lc3RhbXApO1xyXG4gICAgdGhpcy5jb21iYXRTdGF0ZS5SZXNldCgpO1xyXG4gICAgdGhpcy5wbGF5ZXJTdGF0ZVRyYWNrZXIuQ2xlYXJUcmlnZ2VyU2V0cygpO1xyXG4gICAgdGhpcy5wbGF5ZXJTdGF0ZVRyYWNrZXIuT25DaGFuZ2Vab25lKHRpbWVzdGFtcCwgem9uZU5hbWUsIHpvbmVJZCk7XHJcbiAgICB0aGlzLlJlbG9hZFRyaWdnZXJzKCk7XHJcbiAgfVxyXG5cclxuICBPbkluQ29tYmF0Q2hhbmdlZEV2ZW50KGU6IEV2ZW50UmVzcG9uc2VzWydvbkluQ29tYmF0Q2hhbmdlZEV2ZW50J10pOiB2b2lkIHtcclxuICAgIC8vIERvbid0IHNlbmQgU3RhcnRDb21iYXQgd2l0aCBhIHRpbWVzdGFtcD0wIGJlZm9yZSB3ZSd2ZSBzZWVuIGFueVxyXG4gICAgLy8gbG9nIG1lc3NhZ2VzLiAgVGhpcyBjYW4gaGFwcGVuIGlmIHlvdSByZWxvYWQgd2hpbGUgaW4gY29tYmF0LlxyXG4gICAgLy8gV2UnbGwgc2VlIGFuIGFjdGlvbiBldmVudCBzb29uIGVub3VnaCB0byBhbHNvIHN0YXJ0IGNvbWJhdC5cclxuICAgIGlmICghdGhpcy5sYXN0VGltZXN0YW1wKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgaWYgKHRoaXMuaW5Db21iYXQgIT09IGUuZGV0YWlsLmluR2FtZUNvbWJhdCkge1xyXG4gICAgICBpZiAoZS5kZXRhaWwuaW5HYW1lQ29tYmF0KVxyXG4gICAgICAgIHRoaXMuY29tYmF0U3RhdGUuU3RhcnRDb21iYXQodGhpcy5sYXN0VGltZXN0YW1wKTtcclxuICAgICAgZWxzZVxyXG4gICAgICAgIHRoaXMuY29tYmF0U3RhdGUuU3RvcENvbWJhdCh0aGlzLmxhc3RUaW1lc3RhbXApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaW5Db21iYXQgPSBlLmRldGFpbC5pbkdhbWVDb21iYXQ7XHJcbiAgICB0aGlzLmRhdGEuaW5Db21iYXQgPSB0aGlzLmluQ29tYmF0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBBZGREYW1hZ2VUcmlnZ2Vycyh0eXBlOiBPb3BzeU1pc3Rha2VUeXBlLCBkaWN0PzogTWlzdGFrZU1hcCk6IHZvaWQge1xyXG4gICAgaWYgKCFkaWN0KVxyXG4gICAgICByZXR1cm47XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBkaWN0KSB7XHJcbiAgICAgIGNvbnN0IGlkID0gZGljdFtrZXldO1xyXG4gICAgICBjb25zdCB0cmlnZ2VyOiBPb3BzeVRyaWdnZXI8T29wc3lEYXRhPiA9IHtcclxuICAgICAgICBpZDoga2V5LFxyXG4gICAgICAgIHR5cGU6ICdBYmlsaXR5JyxcclxuICAgICAgICBuZXRSZWdleDogTmV0UmVnZXhlcy5hYmlsaXR5RnVsbCh7IGlkOiBpZCwgLi4ucGxheWVyRGFtYWdlRmllbGRzIH0pLFxyXG4gICAgICAgIG1pc3Rha2U6IChfZGF0YSwgbWF0Y2hlcykgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgYmxhbWU6IG1hdGNoZXMudGFyZ2V0LFxyXG4gICAgICAgICAgICByZXBvcnRJZDogbWF0Y2hlcy50YXJnZXRJZCxcclxuICAgICAgICAgICAgdHJpZ2dlclR5cGU6ICdEYW1hZ2UnLFxyXG4gICAgICAgICAgICB0ZXh0OiBtYXRjaGVzLmFiaWxpdHksXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuUHJvY2Vzc1RyaWdnZXIodHJpZ2dlcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIEFkZEdhaW5zRWZmZWN0VHJpZ2dlcnModHlwZTogT29wc3lNaXN0YWtlVHlwZSwgZGljdD86IE1pc3Rha2VNYXApOiB2b2lkIHtcclxuICAgIGlmICghZGljdClcclxuICAgICAgcmV0dXJuO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGljdCkge1xyXG4gICAgICBjb25zdCBpZCA9IGRpY3Rba2V5XTtcclxuICAgICAgY29uc3QgdHJpZ2dlcjogT29wc3lUcmlnZ2VyPE9vcHN5RGF0YT4gPSB7XHJcbiAgICAgICAgaWQ6IGtleSxcclxuICAgICAgICB0eXBlOiAnR2FpbnNFZmZlY3QnLFxyXG4gICAgICAgIG5ldFJlZ2V4OiBOZXRSZWdleGVzLmdhaW5zRWZmZWN0KHsgZWZmZWN0SWQ6IGlkIH0pLFxyXG4gICAgICAgIG1pc3Rha2U6IChfZGF0YSwgbWF0Y2hlcykgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgYmxhbWU6IG1hdGNoZXMudGFyZ2V0LFxyXG4gICAgICAgICAgICByZXBvcnRJZDogbWF0Y2hlcy50YXJnZXRJZCxcclxuICAgICAgICAgICAgdHJpZ2dlclR5cGU6ICdHYWluc0VmZmVjdCcsXHJcbiAgICAgICAgICAgIHRleHQ6IG1hdGNoZXMuZWZmZWN0LFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLlByb2Nlc3NUcmlnZ2VyKHRyaWdnZXIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gSGVscGVyIGZ1bmN0aW9uIGZvciBcImRvdWJsZSB0YXBcIiBzaGFyZXMgd2hlcmUgbXVsdGlwbGUgcGxheWVycyBzaGFyZVxyXG4gIC8vIGRhbWFnZSB3aGVuIGl0IHNob3VsZCBvbmx5IGJlIG9uIG9uZSBwZXJzb24sIHN1Y2ggYXMgYSBzcHJlYWQgbWVjaGFuaWMuXHJcbiAgQWRkU2hhcmVUcmlnZ2Vycyh0eXBlOiBPb3BzeU1pc3Rha2VUeXBlLCBkaWN0PzogTWlzdGFrZU1hcCk6IHZvaWQge1xyXG4gICAgaWYgKCFkaWN0KVxyXG4gICAgICByZXR1cm47XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBkaWN0KSB7XHJcbiAgICAgIGNvbnN0IGlkID0gZGljdFtrZXldO1xyXG4gICAgICBjb25zdCB0cmlnZ2VyOiBPb3BzeVRyaWdnZXI8T29wc3lEYXRhPiA9IHtcclxuICAgICAgICBpZDoga2V5LFxyXG4gICAgICAgIHR5cGU6ICdBYmlsaXR5JyxcclxuICAgICAgICBuZXRSZWdleDogTmV0UmVnZXhlcy5hYmlsaXR5KHsgdHlwZTogJzIyJywgaWQ6IGlkLCAuLi5wbGF5ZXJEYW1hZ2VGaWVsZHMgfSksXHJcbiAgICAgICAgbWlzdGFrZTogKF9kYXRhLCBtYXRjaGVzKSA9PiB7XHJcbiAgICAgICAgICAvLyBTb21lIHNpbmdsZSB0YXJnZXQgZGFtYWdlIGlzIHN0aWxsIG1hcmtlZCBhcyBBT0VBY3Rpb25FZmZlY3QgdHlwZSAyMiwgc28gY2hlY2tcclxuICAgICAgICAgIC8vIHRoZSBudW1iZXIgb2YgdGFyZ2V0cyB0aGF0IGl0IGhpdHMuXHJcbiAgICAgICAgICBjb25zdCBudW1UYXJnZXRzID0gcGFyc2VJbnQobWF0Y2hlcy50YXJnZXRDb3VudCk7XHJcbiAgICAgICAgICBpZiAobnVtVGFyZ2V0cyA9PT0gMSB8fCBpc05hTihudW1UYXJnZXRzKSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgYmxhbWU6IG1hdGNoZXMudGFyZ2V0LFxyXG4gICAgICAgICAgICByZXBvcnRJZDogbWF0Y2hlcy50YXJnZXRJZCxcclxuICAgICAgICAgICAgdHJpZ2dlclR5cGU6ICdTaGFyZScsXHJcbiAgICAgICAgICAgIHRleHQ6IEdldFNoYXJlTWlzdGFrZVRleHQobWF0Y2hlcy5hYmlsaXR5LCBudW1UYXJnZXRzKSxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgICAgdGhpcy5Qcm9jZXNzVHJpZ2dlcih0cmlnZ2VyKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEFkZFNvbG9UcmlnZ2Vycyh0eXBlOiBPb3BzeU1pc3Rha2VUeXBlLCBkaWN0PzogTWlzdGFrZU1hcCk6IHZvaWQge1xyXG4gICAgaWYgKCFkaWN0KVxyXG4gICAgICByZXR1cm47XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBkaWN0KSB7XHJcbiAgICAgIGNvbnN0IGlkID0gZGljdFtrZXldO1xyXG4gICAgICBjb25zdCB0cmlnZ2VyOiBPb3BzeVRyaWdnZXI8T29wc3lEYXRhPiA9IHtcclxuICAgICAgICBpZDoga2V5LFxyXG4gICAgICAgIHR5cGU6ICdBYmlsaXR5JyxcclxuICAgICAgICBuZXRSZWdleDogTmV0UmVnZXhlcy5hYmlsaXR5RnVsbCh7IHR5cGU6ICcyMScsIGlkOiBpZCwgLi4ucGxheWVyRGFtYWdlRmllbGRzIH0pLFxyXG4gICAgICAgIG1pc3Rha2U6IChfZGF0YSwgbWF0Y2hlcykgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgYmxhbWU6IG1hdGNoZXMudGFyZ2V0LFxyXG4gICAgICAgICAgICByZXBvcnRJZDogbWF0Y2hlcy50YXJnZXRJZCxcclxuICAgICAgICAgICAgdHJpZ2dlclR5cGU6ICdTb2xvJyxcclxuICAgICAgICAgICAgdGV4dDogR2V0U29sb01pc3Rha2VUZXh0KG1hdGNoZXMuYWJpbGl0eSksXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuUHJvY2Vzc1RyaWdnZXIodHJpZ2dlcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBSZWxvYWRUcmlnZ2VycygpOiB2b2lkIHtcclxuICAgIHRoaXMuUHJvY2Vzc0RhdGFGaWxlcygpO1xyXG5cclxuICAgIC8vIFdhaXQgZm9yIGRhdGFmaWxlcyAvIGpvYnMgLyB6b25lIGV2ZW50cyAvIGxvY2FsaXphdGlvbi5cclxuICAgIGlmICghdGhpcy50cmlnZ2VyU2V0cyB8fCAhdGhpcy56b25lTmFtZSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIHRoaXMuUmVzZXQoKTtcclxuXHJcbiAgICB0aGlzLnRyaWdnZXJzID0gW107XHJcblxyXG4gICAgdGhpcy5pZ25vcmVab25lID0gdGhpcy5vcHRpb25zLklnbm9yZUNvbnRlbnRUeXBlcy5pbmNsdWRlcyh0aGlzLmNvbnRlbnRUeXBlKSB8fFxyXG4gICAgICB0aGlzLm9wdGlvbnMuSWdub3JlWm9uZUlkcy5pbmNsdWRlcyh0aGlzLnpvbmVJZCk7XHJcbiAgICBpZiAodGhpcy5pZ25vcmVab25lKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgZm9yIChjb25zdCBzZXQgb2YgdGhpcy50cmlnZ2VyU2V0cykge1xyXG4gICAgICBpZiAoJ3pvbmVJZCcgaW4gc2V0KSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgc2V0LnpvbmVJZCAhPT0gWm9uZUlkLk1hdGNoQWxsICYmIHNldC56b25lSWQgIT09IHRoaXMuem9uZUlkICYmXHJcbiAgICAgICAgICAhKHR5cGVvZiBzZXQuem9uZUlkID09PSAnb2JqZWN0JyAmJiBzZXQuem9uZUlkLmluY2x1ZGVzKHRoaXMuem9uZUlkKSlcclxuICAgICAgICApXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgfSBlbHNlIGlmICgnem9uZVJlZ2V4JyBpbiBzZXQpIHtcclxuICAgICAgICBjb25zdCB6b25lRXJyb3IgPSAoczogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGAke3N9OiAke0pTT04uc3RyaW5naWZ5KHNldC56b25lUmVnZXgpfSBpbiAke3NldC5maWxlbmFtZSA/PyAnPz8/J31gKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsZXQgem9uZVJlZ2V4ID0gc2V0LnpvbmVSZWdleDtcclxuICAgICAgICBpZiAodHlwZW9mIHpvbmVSZWdleCAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgIHpvbmVFcnJvcignem9uZVJlZ2V4IG11c3QgYmUgdHJhbnNsYXRhYmxlIG9iamVjdCBvciByZWdleHAnKTtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoISh6b25lUmVnZXggaW5zdGFuY2VvZiBSZWdFeHApKSB7XHJcbiAgICAgICAgICBjb25zdCBwYXJzZXJMYW5nID0gdGhpcy5vcHRpb25zLlBhcnNlckxhbmd1YWdlIHx8ICdlbic7XHJcbiAgICAgICAgICBpZiAocGFyc2VyTGFuZyBpbiB6b25lUmVnZXgpIHtcclxuICAgICAgICAgICAgem9uZVJlZ2V4ID0gem9uZVJlZ2V4W3BhcnNlckxhbmddO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICgnZW4nIGluIHpvbmVSZWdleCkge1xyXG4gICAgICAgICAgICB6b25lUmVnZXggPSB6b25lUmVnZXhbJ2VuJ107XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB6b25lRXJyb3IoJ3Vua25vd24gem9uZVJlZ2V4IGxhbmd1YWdlJyk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICghKHpvbmVSZWdleCBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcclxuICAgICAgICAgICAgem9uZUVycm9yKCd6b25lUmVnZXggbXVzdCBiZSByZWdleHAnKTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy56b25lTmFtZS5zZWFyY2goUmVnZXhlcy5wYXJzZSh6b25lUmVnZXgpKSA8IDApXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuRGVidWcpIHtcclxuICAgICAgICBpZiAoc2V0LmZpbGVuYW1lKVxyXG4gICAgICAgICAgY29uc29sZS5sb2coYExvYWRpbmcgJHtzZXQuZmlsZW5hbWV9YCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ0xvYWRpbmcgdXNlciB0cmlnZ2VycyBmb3Igem9uZScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLkFkZERhbWFnZVRyaWdnZXJzKCd3YXJuJywgc2V0LmRhbWFnZVdhcm4pO1xyXG4gICAgICB0aGlzLkFkZERhbWFnZVRyaWdnZXJzKCdmYWlsJywgc2V0LmRhbWFnZUZhaWwpO1xyXG4gICAgICB0aGlzLkFkZEdhaW5zRWZmZWN0VHJpZ2dlcnMoJ3dhcm4nLCBzZXQuZ2FpbnNFZmZlY3RXYXJuKTtcclxuICAgICAgdGhpcy5BZGRHYWluc0VmZmVjdFRyaWdnZXJzKCdmYWlsJywgc2V0LmdhaW5zRWZmZWN0RmFpbCk7XHJcbiAgICAgIHRoaXMuQWRkU2hhcmVUcmlnZ2Vycygnd2FybicsIHNldC5zaGFyZVdhcm4pO1xyXG4gICAgICB0aGlzLkFkZFNoYXJlVHJpZ2dlcnMoJ2ZhaWwnLCBzZXQuc2hhcmVGYWlsKTtcclxuICAgICAgdGhpcy5BZGRTb2xvVHJpZ2dlcnMoJ3dhcm4nLCBzZXQuc29sb1dhcm4pO1xyXG4gICAgICB0aGlzLkFkZFNvbG9UcmlnZ2VycygnZmFpbCcsIHNldC5zb2xvRmFpbCk7XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2Ygc2V0LnRyaWdnZXJzID8/IFtdKVxyXG4gICAgICAgIHRoaXMuUHJvY2Vzc1RyaWdnZXIodHJpZ2dlcik7XHJcblxyXG4gICAgICB0aGlzLnBsYXllclN0YXRlVHJhY2tlci5QdXNoVHJpZ2dlclNldChzZXQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgUHJvY2Vzc1RyaWdnZXIodHJpZ2dlcjogT29wc3lUcmlnZ2VyPE9vcHN5RGF0YT4pOiB2b2lkIHtcclxuICAgIC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLCBidXQgTG9vc2VPb3BzeVRyaWdnZXIgZXh0ZW5kcyBPb3BzeVRyaWdnZXI8T29wc3lEYXRhPlxyXG4gICAgLy8gYnV0IG5vdCB2aWNlIHZlcnNhLiAgQmVjYXVzZSB0aGUgTmV0TWF0Y2hlc1snQWJpbGl0eSddIHJlcXVpcmVzIGEgbnVtYmVyXHJcbiAgICAvLyBvZiBmaWVsZHMsIE1hdGNoZXMgY2Fubm90IGJlIGFzc2lnbmVkIHRvIE1hdGNoZXMgJiBOZXRNYXRjaGVzWydBYmlsaXR5J10uXHJcbiAgICBjb25zdCBsb29zZVRyaWdnZXIgPSB0cmlnZ2VyIGFzIExvb3NlT29wc3lUcmlnZ2VyO1xyXG5cclxuICAgIGNvbnN0IHJlZ2V4ID0gbG9vc2VUcmlnZ2VyLm5ldFJlZ2V4O1xyXG4gICAgLy8gU29tZSBvb3BzeSB0cmlnZ2VycyAoZS5nLiBlYXJseSBwdWxsKSBoYXZlIG9ubHkgYW4gaWQuXHJcbiAgICBpZiAoIXJlZ2V4KVxyXG4gICAgICByZXR1cm47XHJcbiAgICB0aGlzLnRyaWdnZXJzLnB1c2goe1xyXG4gICAgICAuLi5sb29zZVRyaWdnZXIsXHJcbiAgICAgIGxvY2FsUmVnZXg6IFJlZ2V4ZXMucGFyc2UoQXJyYXkuaXNBcnJheShyZWdleCkgPyBSZWdleGVzLmFueU9mKHJlZ2V4KSA6IHJlZ2V4KSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgT25QbGF5ZXJDaGFuZ2UoZTogUGxheWVyQ2hhbmdlZERldGFpbCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuam9iID09PSBlLmRldGFpbC5qb2IgJiYgdGhpcy5tZSA9PT0gZS5kZXRhaWwubmFtZSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIHRoaXMubWUgPSBlLmRldGFpbC5uYW1lO1xyXG4gICAgdGhpcy5qb2IgPSBlLmRldGFpbC5qb2I7XHJcbiAgICB0aGlzLnJvbGUgPSBVdGlsLmpvYlRvUm9sZSh0aGlzLmpvYik7XHJcbiAgICB0aGlzLlJlbG9hZFRyaWdnZXJzKCk7XHJcbiAgICB0aGlzLnBsYXllclN0YXRlVHJhY2tlci5TZXRQbGF5ZXJJZChlLmRldGFpbC5pZC50b1N0cmluZygxNikpO1xyXG4gIH1cclxuXHJcbiAgUHJvY2Vzc0RhdGFGaWxlcygpOiB2b2lkIHtcclxuICAgIC8vIE9ubHkgcnVuIHRoaXMgb25jZS5cclxuICAgIGlmICh0aGlzLnRyaWdnZXJTZXRzKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgdGhpcy50cmlnZ2VyU2V0cyA9IHRoaXMub3B0aW9ucy5UcmlnZ2VycztcclxuICAgIGZvciAoY29uc3QgW2ZpbGVuYW1lLCBqc29uXSBvZiBPYmplY3QuZW50cmllczxMb29zZU9vcHN5VHJpZ2dlclNldD4odGhpcy5kYXRhRmlsZXMpKSB7XHJcbiAgICAgIGlmICh0eXBlb2YganNvbiAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdVbmV4cGVjdGVkIEpTT04gZnJvbSAnICsgZmlsZW5hbWUgKyAnLCBleHBlY3RlZCBhbiBvYmplY3QnKTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBoYXNab25lUmVnZXggPSAnem9uZVJlZ2V4JyBpbiBqc29uO1xyXG4gICAgICBjb25zdCBoYXNab25lSWQgPSAnem9uZUlkJyBpbiBqc29uO1xyXG4gICAgICBpZiAoIWhhc1pvbmVSZWdleCAmJiAhaGFzWm9uZUlkIHx8IGhhc1pvbmVSZWdleCAmJiBoYXNab25lSWQpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdVbmV4cGVjdGVkIEpTT04gZnJvbSAnICsgZmlsZW5hbWUgKyAnLCBuZWVkIG9uZSBvZiB6b25lUmVnZXgvem9uZUlEJyk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICgndHJpZ2dlcnMnIGluIGpzb24pIHtcclxuICAgICAgICBpZiAodHlwZW9mIGpzb24udHJpZ2dlcnMgIT09ICdvYmplY3QnIHx8ICEoanNvbi50cmlnZ2Vycy5sZW5ndGggPj0gMCkpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgSlNPTiBmcm9tICcgKyBmaWxlbmFtZSArICcsIGV4cGVjdGVkIHRyaWdnZXJzIHRvIGJlIGFuIGFycmF5Jyk7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHNldCA9IHtcclxuICAgICAgICBmaWxlbmFtZTogZmlsZW5hbWUsXHJcbiAgICAgICAgLi4uanNvbixcclxuICAgICAgfTtcclxuICAgICAgdGhpcy50cmlnZ2VyU2V0cy5wdXNoKHNldCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLlJlbG9hZFRyaWdnZXJzKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNhbGxPdmVybGF5SGFuZGxlciB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9vdmVybGF5X3BsdWdpbl9hcGknO1xyXG5pbXBvcnQgeyBFdmVudFJlc3BvbnNlcyB9IGZyb20gJy4uLy4uL3R5cGVzL2V2ZW50JztcclxuaW1wb3J0IHsgT29wc3lNaXN0YWtlIH0gZnJvbSAnLi4vLi4vdHlwZXMvb29wc3knO1xyXG5cclxuaW1wb3J0IHsgTWlzdGFrZU9ic2VydmVyLCBWaWV3RXZlbnQgfSBmcm9tICcuL21pc3Rha2Vfb2JzZXJ2ZXInO1xyXG5pbXBvcnQgeyBPb3BzeU9wdGlvbnMgfSBmcm9tICcuL29vcHN5X29wdGlvbnMnO1xyXG5cclxuY29uc3QgYnJvYWRjYXN0U291cmNlID0gJ29vcHN5cmFpZHN5JztcclxuY29uc3QgbXNnU3luY1JlcXVlc3RUeXBlID0gJ1N5bmNSZXF1ZXN0JztcclxuY29uc3QgbXNnU3luY1Jlc3BvbnNlVHlwZSA9ICdTeW5jUmVzcG9uc2UnO1xyXG5cclxuLy8gTWlzdGFrZUZvcndhcmRlciBmb3J3YXJkcyBvYnNlcnZlciBjYWxscyB0byBhbGwgb2JzZXJ2ZXJzLlxyXG4vLyBJdCBhbHNvIGNvbGxlY3RzIGFsbCBldmVudHMgaW4gY2FzZSBhIGJyb2FkY2FzdCBzeW5jIGlzIHJlcXVlc3RlZC5cclxuZXhwb3J0IGNsYXNzIE1pc3Rha2VDb2xsZWN0b3IgaW1wbGVtZW50cyBNaXN0YWtlT2JzZXJ2ZXIge1xyXG4gIHByaXZhdGUgb2JzZXJ2ZXJzOiBNaXN0YWtlT2JzZXJ2ZXJbXSA9IFtdO1xyXG4gIHByaXZhdGUgZXZlbnRzOiBWaWV3RXZlbnRbXSA9IFtdO1xyXG5cclxuICBwcml2YXRlIGNyZWF0aW9uVGltZSA9IERhdGUubm93KCk7XHJcbiAgcHJpdmF0ZSBsYXRlc3RTeW5jVGltZXN0YW1wPzogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wdGlvbnM6IE9vcHN5T3B0aW9ucywgcHJpdmF0ZSBzaG91bGRTeW5jOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLkFkZE9ic2VydmVyKHRoaXMpO1xyXG4gICAgdGhpcy5SZXF1ZXN0U3luYygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBEZWJ1Z1ByaW50KHN0cjogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5vcHRpb25zLkRlYnVnKVxyXG4gICAgICBjb25zb2xlLmVycm9yKHN0cik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIFJlcXVlc3RTeW5jKCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLnNob3VsZFN5bmMpXHJcbiAgICAgIHJldHVybjtcclxuICAgIHRoaXMuRGVidWdQcmludChgUmVxdWVzdFN5bmM6ICR7dGhpcy5jcmVhdGlvblRpbWV9YCk7XHJcbiAgICB2b2lkIGNhbGxPdmVybGF5SGFuZGxlcih7XHJcbiAgICAgIGNhbGw6ICdicm9hZGNhc3QnLFxyXG4gICAgICBzb3VyY2U6IGJyb2FkY2FzdFNvdXJjZSxcclxuICAgICAgbXNnOiB7XHJcbiAgICAgICAgdHlwZTogbXNnU3luY1JlcXVlc3RUeXBlLFxyXG4gICAgICAgIGlkOiB0aGlzLmNyZWF0aW9uVGltZSxcclxuICAgICAgICB0aW1lc3RhbXA6IHRoaXMuY3JlYXRpb25UaW1lLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIFNlbmRTeW5jUmVzcG9uc2UoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuc2hvdWxkU3luYylcclxuICAgICAgcmV0dXJuO1xyXG4gICAgdGhpcy5EZWJ1Z1ByaW50KGBTZW5kU3luY1Jlc3BvbnNlOiAke3RoaXMuY3JlYXRpb25UaW1lfWApO1xyXG4gICAgdm9pZCBjYWxsT3ZlcmxheUhhbmRsZXIoe1xyXG4gICAgICBjYWxsOiAnYnJvYWRjYXN0JyxcclxuICAgICAgc291cmNlOiBicm9hZGNhc3RTb3VyY2UsXHJcbiAgICAgIG1zZzoge1xyXG4gICAgICAgIHR5cGU6IG1zZ1N5bmNSZXNwb25zZVR5cGUsXHJcbiAgICAgICAgaWQ6IHRoaXMuY3JlYXRpb25UaW1lLFxyXG4gICAgICAgIHRpbWVzdGFtcDogdGhpcy5jcmVhdGlvblRpbWUsXHJcbiAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkodGhpcy5ldmVudHMpLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIFJlY2VpdmVTeW5jUmVzcG9uc2UodGltZXN0YW1wOiBudW1iZXIsIGRhdGE6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5EZWJ1Z1ByaW50KGBSZWNlaXZlU3luY1Jlc3BvbnNlOiAke3RpbWVzdGFtcH0gKHByZXY6ICR7dGhpcy5sYXRlc3RTeW5jVGltZXN0YW1wID8/ICcnfSlgKTtcclxuICAgIHRoaXMubGF0ZXN0U3luY1RpbWVzdGFtcCA9IHRpbWVzdGFtcDtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKGRhdGEpIGFzIHVua25vd247XHJcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShwYXJzZWQpKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignTWFsZm9ybWVkIHN5bmMgcmVzcG9uc2UnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRPRE86IGdpYW50IGhhY2t5IHR5cGUgYXNzZXJ0aW9uIGhlcmUgYmVjYXVzZSB0eXBlIGd1YXJkaW5nIHRoaXMgc2VlbXMgY29tcGxpY2F0ZWQuXHJcbiAgICAgIC8vIFRPRE86IG1heWJlIHRoZXJlJ3Mgc29tZSBhdXRvbWF0ZWQgdG9vbGluZyB3ZSBjb3VsZCB1c2UgZm9yIHRoaXM/XHJcbiAgICAgIGNvbnN0IGV2ZW50czogVmlld0V2ZW50W10gPSBwYXJzZWQgYXMgVmlld0V2ZW50W107XHJcbiAgICAgIGZvciAoY29uc3Qgb2JzZXJ2ZXIgb2YgdGhpcy5vYnNlcnZlcnMpXHJcbiAgICAgICAgb2JzZXJ2ZXIuT25TeW5jRXZlbnRzKGV2ZW50cyk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBPbkJyb2FkY2FzdE1lc3NhZ2UoZTogRXZlbnRSZXNwb25zZXNbJ0Jyb2FkY2FzdE1lc3NhZ2UnXSk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLnNob3VsZFN5bmMpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGlmIChlLnNvdXJjZSAhPT0gYnJvYWRjYXN0U291cmNlKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBjb25zdCBtc2cgPSBlLm1zZztcclxuICAgIGlmIChtc2cgPT09IG51bGwgfHwgdHlwZW9mIG1zZyAhPT0gJ29iamVjdCcpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICAvLyBUdXJuIGFuIHVua25vd24gaW50byBhbiBpbmRleGFibGUgb2JqZWN0LlxyXG4gICAgLy8gVE9ETzogaXMgdGhlcmUgc29tZSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXM/XHJcbiAgICBjb25zdCBvYmo6IHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhtc2cgPz8ge30pKVxyXG4gICAgICBvYmpba2V5XSA9IHZhbHVlO1xyXG5cclxuICAgIC8vIElnbm9yZSBtZXNzYWdlcyBmcm9tIG91cnNlbHZlcy5cclxuICAgIC8vIFRPRE86IGRvIHdlIGFjdHVhbGx5IHJlY2VpdmUgYnJvYWRjYXN0IG1lc3NhZ2VzIGZyb20gb3Vyc2VsdmVzLCBpZiBzdWJzY3JpYmVkP1xyXG4gICAgaWYgKG9iai5pZCA9PT0gdGhpcy5jcmVhdGlvblRpbWUgfHwgb2JqLmlkID09PSB1bmRlZmluZWQpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBpZiAob2JqLnR5cGUgPT09IG1zZ1N5bmNSZXF1ZXN0VHlwZSkge1xyXG4gICAgICAvLyBJZiB0aGlzIGNvbGxlY3RvciB3YXMgY3JlYXRlZCBhZnRlciB0aGlzIHRpbWVzdGFtcCByZXF1ZXN0LCBpZ25vcmUgaXQuXHJcbiAgICAgIGlmICh0eXBlb2Ygb2JqLnRpbWVzdGFtcCAhPT0gJ251bWJlcicgfHwgb2JqLnRpbWVzdGFtcCA8IHRoaXMuY3JlYXRpb25UaW1lKSB7XHJcbiAgICAgICAgdGhpcy5EZWJ1Z1ByaW50KFxyXG4gICAgICAgICAgYE9uQnJvYWRjYXN0TWVzc2FnZTogaWdub3Jpbmc6IChwYXN0IGNyZWF0aW9uKTogJHtvYmoudGltZXN0YW1wIGFzIHN0cmluZ31gLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuU2VuZFN5bmNSZXNwb25zZSgpO1xyXG4gICAgfSBlbHNlIGlmIChvYmoudHlwZSA9PT0gbXNnU3luY1Jlc3BvbnNlVHlwZSkge1xyXG4gICAgICBpZiAodHlwZW9mIG9iai50aW1lc3RhbXAgIT09ICdudW1iZXInKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgLy8gSWYgd2UgaGF2ZSBkYXRhIGZyb20gZnVydGhlciBpbiB0aGUgcGFzdCwgZG9uJ3Qgb3ZlcndyaXRlIHdpdGggcGFydGlhbCBmdXR1cmUgZGF0YS5cclxuICAgICAgaWYgKHRoaXMubGF0ZXN0U3luY1RpbWVzdGFtcCAmJiB0aGlzLmxhdGVzdFN5bmNUaW1lc3RhbXAgPD0gb2JqLnRpbWVzdGFtcCkge1xyXG4gICAgICAgIHRoaXMuRGVidWdQcmludChgT25Ccm9hZGNhc3RNZXNzYWdlOiBpZ25vcmluZyAocGFzdCBkYXRhKTogJHtvYmoudGltZXN0YW1wfWApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBkYXRhID0gb2JqLmRhdGE7XHJcbiAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgdGhpcy5SZWNlaXZlU3luY1Jlc3BvbnNlKG9iai50aW1lc3RhbXAsIGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgT25FdmVudChldmVudDogVmlld0V2ZW50KTogdm9pZCB7XHJcbiAgICB0aGlzLmV2ZW50cy5wdXNoKGV2ZW50KTtcclxuICB9XHJcblxyXG4gIE9uU3luY0V2ZW50cyhldmVudHM6IFZpZXdFdmVudFtdKTogdm9pZCB7XHJcbiAgICAvLyBDbG9iYmVyIG91ciBjdXJyZW50IHNldCBvZiBldmVudHMgd2l0aCBzeW5jZWQgZXZlbnRzLlxyXG4gICAgLy9cclxuICAgIC8vIFRPRE86IHRoZXJlIGNvdWxkIGJlIHNvbWUgcmFjaW5lc3MgaGVyZSB3aGVyZSBpZiB5b3Ugb3BlbiB1cCB0aGUgc3VtbWFyeVxyXG4gICAgLy8gbWlkLWZpZ2h0LCB0aGVuIGFuIGV2ZW50IGNvdWxkIGdldCBkcm9wcGVkIHRoYXQgb2NjdXJyZWQgYWZ0ZXIgdGhlIHN5bmNcclxuICAgIC8vIHJlcXVlc3QgYnV0IGJlZm9yZSB0aGUgc3luYyByZXNwb25zZSB3YXMgcmVjZWl2ZWQuICBUaGlzIGlzIG5vdCB3b3J0aFxyXG4gICAgLy8gc29sdmluZyBhdCB0aGUgbW9tZW50IHRob3VnaC5cclxuICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xyXG4gIH1cclxuXHJcbiAgQWRkT2JzZXJ2ZXIob2JzZXJ2ZXI6IE1pc3Rha2VPYnNlcnZlcik6IHZvaWQge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XHJcbiAgfVxyXG5cclxuICBPbk1pc3Rha2VPYmoodGltZXN0YW1wOiBudW1iZXIsIG0/OiBPb3BzeU1pc3Rha2UpOiB2b2lkIHtcclxuICAgIGlmICghbSlcclxuICAgICAgcmV0dXJuO1xyXG4gICAgZm9yIChjb25zdCBvYnNlcnZlciBvZiB0aGlzLm9ic2VydmVycykge1xyXG4gICAgICBvYnNlcnZlci5PbkV2ZW50KHtcclxuICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcCxcclxuICAgICAgICB0eXBlOiAnTWlzdGFrZScsXHJcbiAgICAgICAgbWlzdGFrZTogbSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBTdGFydEVuY291bnRlcih0aW1lc3RhbXA6IG51bWJlcik6IHZvaWQge1xyXG4gICAgZm9yIChjb25zdCBvYnNlcnZlciBvZiB0aGlzLm9ic2VydmVycykge1xyXG4gICAgICBvYnNlcnZlci5PbkV2ZW50KHtcclxuICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcCxcclxuICAgICAgICB0eXBlOiAnU3RhcnRFbmNvdW50ZXInLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIE9uQ2hhbmdlWm9uZSh0aW1lc3RhbXA6IG51bWJlciwgem9uZU5hbWU6IHN0cmluZywgem9uZUlkOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGZvciAoY29uc3Qgb2JzZXJ2ZXIgb2YgdGhpcy5vYnNlcnZlcnMpIHtcclxuICAgICAgb2JzZXJ2ZXIuT25FdmVudCh7XHJcbiAgICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAsXHJcbiAgICAgICAgdHlwZTogJ0NoYW5nZVpvbmUnLFxyXG4gICAgICAgIHpvbmVOYW1lOiB6b25lTmFtZSxcclxuICAgICAgICB6b25lSWQ6IHpvbmVJZCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFVucmVhY2hhYmxlQ29kZSB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9ub3RfcmVhY2hlZCc7XHJcbmltcG9ydCB7IGNhbGxPdmVybGF5SGFuZGxlciB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9vdmVybGF5X3BsdWdpbl9hcGknO1xyXG5pbXBvcnQgeyBPb3BzeU1pc3Rha2UgfSBmcm9tICcuLi8uLi90eXBlcy9vb3BzeSc7XHJcblxyXG5pbXBvcnQgeyBEZWF0aFJlcG9ydCB9IGZyb20gJy4vZGVhdGhfcmVwb3J0JztcclxuaW1wb3J0IHsgTWlzdGFrZU9ic2VydmVyLCBWaWV3RXZlbnQgfSBmcm9tICcuL21pc3Rha2Vfb2JzZXJ2ZXInO1xyXG5pbXBvcnQgeyBHZXRGb3JtYXR0ZWRUaW1lLCBTaG9ydE5hbWlmeSwgVHJhbnNsYXRlIH0gZnJvbSAnLi9vb3BzeV9jb21tb24nO1xyXG5pbXBvcnQgeyBPb3BzeU9wdGlvbnMgfSBmcm9tICcuL29vcHN5X29wdGlvbnMnO1xyXG5cclxuY29uc3Qga0NvcGllZE1lc3NhZ2UgPSB7XHJcbiAgZW46ICdDb3BpZWQhJyxcclxuICBkZTogJ0tvcGllcnQhJyxcclxuICBmcjogJ0NvcGnDqSAhJyxcclxuICBqYTogJ+OCs+ODlOODvOOBl+OBn++8gScsXHJcbiAgY246ICflt7LlpI3liLbvvIEnLFxyXG4gIGtvOiAn67O17IKsIOyZhOujjCEnLFxyXG59O1xyXG5cclxuY29uc3QgZXJyb3JNZXNzYWdlRW5hYmxlQUNUV1MgPSB7XHJcbiAgZW46ICdQbHVnaW5zIC0+IE92ZXJsYXlQbHVnaW4gV1NTZXJ2ZXIgLT4gU3RyZWFtL0xvY2FsIE92ZXJsYXkgLT4gU3RhcnQnLFxyXG4gIGRlOiAnUGx1Z2lucyAtPiBPdmVybGF5UGx1Z2luIFdTU2VydmVyIC0+IFN0cmVhbS9Mb2NhbCBPdmVybGF5IC0+IFN0YXJ0JyxcclxuICBmcjogJ1BsdWdpbnMgLT4gT3ZlcmxheVBsdWdpbiBXU1NlcnZlciAtPiBTdHJlYW0vTG9jYWwgT3ZlcmxheSAtPiBTdGFydCcsXHJcbiAgY246ICdQbHVnaW5zIC0+IE92ZXJsYXlQbHVnaW4gV1NTZXJ2ZXIgLT4g55u05pKtL+acrOWcsOaCrOa1rueqlyAtPiDlkK/nlKgnLFxyXG4gIGtvOiAnUGx1Z2lucyAtPiBPdmVybGF5UGx1Z2luIFdTU2VydmVyIC0+IFN0cmVhbS9Mb2NhbCDsmKTrsoTroIjsnbQgLT4g7Iuc7J6RJyxcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBEZWF0aFJlcG9ydExpdmUge1xyXG4gIHByaXZhdGUgcmVwb3J0UXVldWU6IERlYXRoUmVwb3J0W10gPSBbXTtcclxuICBwcml2YXRlIHF1ZXVlVGltZW91dEhhbmRsZSA9IDA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3B0aW9uczogT29wc3lPcHRpb25zLCBwcml2YXRlIHJlcG9ydEVsZW06IEhUTUxFbGVtZW50KSB7fVxyXG5cclxuICAvLyBCcmllZmx5IHNob3dzIGEgZGVhdGggcmVwb3J0IG9uIHNjcmVlbiBmb3IgYSBmZXcgc2Vjb25kcyB3aGlsZSBpbiBjb21iYXQuXHJcbiAgLy8gSWYgb25lIGlzIGFscmVhZHkgc2hvd2luZywgcXVldWVzIGl0IHVwIHRvIGRpc3BsYXkgYWZ0ZXIuXHJcbiAgLy8gVE9ETzogYWRkIHNvbWUgQ1NTIGFuaW1hdGlvbiBoZXJlIHRvIGZhZGUgaXQgaW4vb3V0P1xyXG4gIC8vIFRPRE86IHNob3VsZCB3ZSBzaG93IHRoZSBwbGF5ZXIncyBkZWF0aCByZXBvcnQgd2l0aCBubyB0aW1lciB3aGlsZSB0aGV5IGFyZSBkZWFkP1xyXG4gIHB1YmxpYyBxdWV1ZShyZXBvcnQ6IERlYXRoUmVwb3J0KTogdm9pZCB7XHJcbiAgICBjb25zdCB0aW1lb3V0TXMgPSB0aGlzLm9wdGlvbnMuVGltZVRvU2hvd0RlYXRoUmVwb3J0TXM7XHJcbiAgICBpZiAodGltZW91dE1zIDw9IDApXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBpc0ZpcnN0UmVwb3J0ID0gdGhpcy5yZXBvcnRRdWV1ZS5sZW5ndGggPT09IDA7XHJcbiAgICB0aGlzLnJlcG9ydFF1ZXVlLnB1c2gocmVwb3J0KTtcclxuXHJcbiAgICBpZiAoaXNGaXJzdFJlcG9ydCkge1xyXG4gICAgICB0aGlzLnNldERlYXRoUmVwb3J0KHJlcG9ydCk7XHJcbiAgICAgIHRoaXMucXVldWVUaW1lb3V0SGFuZGxlID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5oYW5kbGVRdWV1ZSgpLCB0aW1lb3V0TXMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVRdWV1ZSgpOiB2b2lkIHtcclxuICAgIGNvbnN0IHIgPSB0aGlzLnJlcG9ydFF1ZXVlLnNoaWZ0KCk7XHJcbiAgICBpZiAoIXIpIHtcclxuICAgICAgdGhpcy5jYW5jZWxRdWV1ZSgpO1xyXG4gICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0RGVhdGhSZXBvcnQocik7XHJcbiAgICB0aGlzLnF1ZXVlVGltZW91dEhhbmRsZSA9IHdpbmRvdy5zZXRUaW1lb3V0KFxyXG4gICAgICAoKSA9PiB0aGlzLmhhbmRsZVF1ZXVlKCksXHJcbiAgICAgIHRoaXMub3B0aW9ucy5UaW1lVG9TaG93RGVhdGhSZXBvcnRNcyxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBDYW5jZWxzIHRoZSBxdWV1ZSBvZiBkZWF0aCByZXBvcnRzIGFuZCBzaG93cyB0aGlzIG9uZSBpbW1lZGlhdGVseS5cclxuICBwdWJsaWMgc2hvdyhyZXBvcnQ6IERlYXRoUmVwb3J0KTogdm9pZCB7XHJcbiAgICB0aGlzLmNhbmNlbFF1ZXVlKCk7XHJcbiAgICB0aGlzLnNldERlYXRoUmVwb3J0KHJlcG9ydCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbW91c2VPdmVyKHJlcG9ydDogRGVhdGhSZXBvcnQsIGluQ29tYmF0OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAvLyBXaGlsZSBpbiBjb21iYXQsIG1vdXNlb3ZlcnMgaW50ZXJydXB0IHRoZSBxdWV1ZSBhbmQgdGVtcG9yYXJpbHkgc2hvd1xyXG4gICAgLy8gVE9ETzogc2hvdWxkIHRoZXJlIGJlIG5vIHRpbWVyIGFuZCB3ZSBqdXN0IHNob3cgd2hpbGUgbW91c2VvdmVyaW5nP1xyXG4gICAgaWYgKGluQ29tYmF0KSB7XHJcbiAgICAgIHRoaXMuY2FuY2VsUXVldWUoKTtcclxuICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgIHRoaXMucXVldWUocmVwb3J0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2hvdyhyZXBvcnQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGhpZGUoKTogdm9pZCB7XHJcbiAgICB3aGlsZSAodGhpcy5yZXBvcnRFbGVtLmxhc3RDaGlsZClcclxuICAgICAgdGhpcy5yZXBvcnRFbGVtLnJlbW92ZUNoaWxkKHRoaXMucmVwb3J0RWxlbS5sYXN0Q2hpbGQpO1xyXG4gICAgdGhpcy5jYW5jZWxRdWV1ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjYW5jZWxRdWV1ZSgpOiB2b2lkIHtcclxuICAgIHRoaXMucmVwb3J0UXVldWUgPSBbXTtcclxuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5xdWV1ZVRpbWVvdXRIYW5kbGUpO1xyXG4gICAgdGhpcy5xdWV1ZVRpbWVvdXRIYW5kbGUgPSAwO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXREZWF0aFJlcG9ydChyZXBvcnQ6IERlYXRoUmVwb3J0KSB7XHJcbiAgICB0aGlzLmhpZGUoKTtcclxuXHJcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdsaXZlbGlzdC1zaGFkb3cnKTtcclxuICAgIHRoaXMucmVwb3J0RWxlbS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xyXG5cclxuICAgIGNvbnN0IHRpdGxlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB0aXRsZURpdi5jbGFzc0xpc3QuYWRkKCdkZWF0aC10aXRsZScpO1xyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRpdGxlRGl2KTtcclxuXHJcbiAgICBjb25zdCB0aXRsZUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRpdGxlSWNvbi5jbGFzc0xpc3QuYWRkKCdkZWF0aC10aXRsZS1pY29uJywgJ21pc3Rha2UtaWNvbicsICdkZWF0aCcpO1xyXG4gICAgdGl0bGVEaXYuYXBwZW5kQ2hpbGQodGl0bGVJY29uKTtcclxuXHJcbiAgICBjb25zdCB0aXRsZVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRpdGxlVGV4dC5jbGFzc0xpc3QuYWRkKCdkZWF0aC10aXRsZS10ZXh0Jyk7XHJcbiAgICB0aXRsZVRleHQuaW5uZXJIVE1MID0gcmVwb3J0LnRhcmdldE5hbWU7XHJcbiAgICB0aXRsZURpdi5hcHBlbmRDaGlsZCh0aXRsZVRleHQpO1xyXG5cclxuICAgIGNvbnN0IGNsb3NlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjbG9zZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdkZWF0aC10aXRsZS1jbG9zZScsICdtaXN0YWtlLWljb24nLCAnaWNvbi1lbnRyeScsICdpY29uLWNsb3NlJyk7XHJcbiAgICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgLy8gQ2xpY2tpbmcgdGhlIGNsb3NlIGJ1dHRvbiBhbHNvIGNhbmNlbHMgdGhlIHF1ZXVlLiAgT3RoZXJ3aXNlLCB5b3VcclxuICAgICAgLy8gY2xvc2Ugb25lIGFuZCB0aGVuIGFub3RoZXIgYXBwZWFycyBzZWNvbmRzIGxhdGVyLCB3aGljaCBzZWVtcyBpbmNvcnJlY3QuXHJcbiAgICAgIHRoaXMuY2FuY2VsUXVldWUoKTtcclxuICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICB9KTtcclxuICAgIHRpdGxlRGl2LmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uKTtcclxuXHJcbiAgICBjb25zdCBkZXRhaWxzRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBkZXRhaWxzRGl2LmNsYXNzTGlzdC5hZGQoJ2RlYXRoLWRldGFpbHMnKTtcclxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkZXRhaWxzRGl2KTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIHJlcG9ydC5wYXJzZVJlcG9ydExpbmVzKCkpIHtcclxuICAgICAgdGhpcy5BcHBlbmREZXRhaWxzKFxyXG4gICAgICAgIGRldGFpbHNEaXYsXHJcbiAgICAgICAgZXZlbnQudGltZXN0YW1wU3RyLFxyXG4gICAgICAgIGV2ZW50LmN1cnJlbnRIcD8udG9TdHJpbmcoKSxcclxuICAgICAgICBldmVudC5hbW91bnRTdHIsXHJcbiAgICAgICAgZXZlbnQuYW1vdW50Q2xhc3MsXHJcbiAgICAgICAgZXZlbnQuaWNvbixcclxuICAgICAgICBldmVudC50ZXh0LFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBBcHBlbmREZXRhaWxzKFxyXG4gICAgZGV0YWlsc0RpdjogSFRNTEVsZW1lbnQsXHJcbiAgICB0aW1lc3RhbXBTdHI6IHN0cmluZyxcclxuICAgIGN1cnJlbnRIcD86IHN0cmluZyxcclxuICAgIGFtb3VudD86IHN0cmluZyxcclxuICAgIGFtb3VudENsYXNzPzogc3RyaW5nLFxyXG4gICAgaWNvbj86IHN0cmluZyxcclxuICAgIHRleHQ/OiBzdHJpbmcsXHJcbiAgKTogdm9pZCB7XHJcbiAgICBjb25zdCBocEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGhwRWxlbS5jbGFzc0xpc3QuYWRkKCdkZWF0aC1yb3ctaHAnKTtcclxuICAgIGlmIChjdXJyZW50SHAgIT09IHVuZGVmaW5lZClcclxuICAgICAgaHBFbGVtLmlubmVyVGV4dCA9IGN1cnJlbnRIcDtcclxuICAgIGRldGFpbHNEaXYuYXBwZW5kQ2hpbGQoaHBFbGVtKTtcclxuXHJcbiAgICBjb25zdCBkYW1hZ2VFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBkYW1hZ2VFbGVtLmNsYXNzTGlzdC5hZGQoJ2RlYXRoLXJvdy1hbW91bnQnKTtcclxuICAgIGlmIChhbW91bnRDbGFzcylcclxuICAgICAgZGFtYWdlRWxlbS5jbGFzc0xpc3QuYWRkKGFtb3VudENsYXNzKTtcclxuICAgIGlmIChhbW91bnQgIT09IHVuZGVmaW5lZClcclxuICAgICAgZGFtYWdlRWxlbS5pbm5lclRleHQgPSBhbW91bnQ7XHJcbiAgICBkZXRhaWxzRGl2LmFwcGVuZENoaWxkKGRhbWFnZUVsZW0pO1xyXG5cclxuICAgIGNvbnN0IGljb25FbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBpY29uRWxlbS5jbGFzc0xpc3QuYWRkKCdkZWF0aC1yb3ctaWNvbicpO1xyXG4gICAgaWYgKGljb24gIT09IHVuZGVmaW5lZClcclxuICAgICAgaWNvbkVsZW0uY2xhc3NMaXN0LmFkZCgnbWlzdGFrZS1pY29uJywgaWNvbik7XHJcbiAgICBkZXRhaWxzRGl2LmFwcGVuZENoaWxkKGljb25FbGVtKTtcclxuXHJcbiAgICBjb25zdCB0ZXh0RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdGV4dEVsZW0uY2xhc3NMaXN0LmFkZCgnZGVhdGgtcm93LXRleHQnKTtcclxuICAgIGlmICh0ZXh0ICE9PSB1bmRlZmluZWQpXHJcbiAgICAgIHRleHRFbGVtLmlubmVySFRNTCA9IHRleHQ7XHJcbiAgICBkZXRhaWxzRGl2LmFwcGVuZENoaWxkKHRleHRFbGVtKTtcclxuXHJcbiAgICBjb25zdCB0aW1lRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdGltZUVsZW0uY2xhc3NMaXN0LmFkZCgnZGVhdGgtcm93LXRpbWUnKTtcclxuICAgIHRpbWVFbGVtLmlubmVyVGV4dCA9IHRpbWVzdGFtcFN0cjtcclxuICAgIGRldGFpbHNEaXYuYXBwZW5kQ2hpbGQodGltZUVsZW0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE9vcHN5TGl2ZUxpc3QgaW1wbGVtZW50cyBNaXN0YWtlT2JzZXJ2ZXIge1xyXG4gIHByaXZhdGUgY29udGFpbmVyOiBFbGVtZW50O1xyXG4gIHByaXZhdGUgaWNvbkNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBpbkNvbWJhdCA9IGZhbHNlO1xyXG4gIHByaXZhdGUgbnVtSXRlbXMgPSAwO1xyXG4gIHByaXZhdGUgaXRlbXM6IEhUTUxFbGVtZW50W10gPSBbXTtcclxuICBwcml2YXRlIGJhc2VUaW1lPzogbnVtYmVyO1xyXG4gIHByaXZhdGUgZGVhdGhSZXBvcnQ/OiBEZWF0aFJlcG9ydExpdmU7XHJcbiAgcHJpdmF0ZSBpdGVtSWR4VG9MaXN0ZW5lcjogeyBbaXRlbUlkeDogbnVtYmVyXTogKCkgPT4gdm9pZCB9ID0ge307XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3B0aW9uczogT29wc3lPcHRpb25zLCBwcml2YXRlIHNjcm9sbGVyOiBIVE1MRWxlbWVudCkge1xyXG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5zY3JvbGxlci5jaGlsZHJlblswXTtcclxuICAgIGlmICghY29udGFpbmVyKVxyXG4gICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuXHJcbiAgICBjb25zdCByZXBvcnREaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVhdGgtcmVwb3J0Jyk7XHJcbiAgICBpZiAoIXJlcG9ydERpdilcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbnMuRGVhdGhSZXBvcnRTaWRlICE9PSAnZGlzYWJsZWQnKVxyXG4gICAgICB0aGlzLmRlYXRoUmVwb3J0ID0gbmV3IERlYXRoUmVwb3J0TGl2ZShvcHRpb25zLCByZXBvcnREaXYpO1xyXG5cclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChgcmVwb3J0LXNpZGUtJHt0aGlzLm9wdGlvbnMuRGVhdGhSZXBvcnRTaWRlfWApO1xyXG5cclxuICAgIGNvbnN0IGljb25Db250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWNvbi1jb250YWluZXInKTtcclxuICAgIGlmICghaWNvbkNvbnRhaW5lcilcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gICAgdGhpcy5pY29uQ29udGFpbmVyID0gaWNvbkNvbnRhaW5lcjtcclxuXHJcbiAgICBjb25zdCBjbG9zZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpY29uLWNsb3NlJyk7XHJcbiAgICBpZiAoIWNsb3NlRGl2KVxyXG4gICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcbiAgICBjbG9zZURpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgdGhpcy5SZXNldCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3Qgc3VtbWFyeURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpY29uLXN1bW1hcnknKTtcclxuICAgIGlmICghc3VtbWFyeURpdilcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gICAgc3VtbWFyeURpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgY29uc3QgcmVnZXggPSAvXFx3Ki5odG1sJC87XHJcbiAgICAgIGlmICghcmVnZXguZXhlYyh3aW5kb3cubG9jYXRpb24uaHJlZikpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBVbmFibGUgdG8gcGFyc2UgbG9jYXRpb24gZm9yIHN1bW1hcnk6ICR7d2luZG93LmxvY2F0aW9uLmhyZWZ9YCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UocmVnZXgsICdvb3BzeV9zdW1tYXJ5Lmh0bWwnKTtcclxuICAgICAgY2FsbE92ZXJsYXlIYW5kbGVyKHsgY2FsbDogJ29wZW5XZWJzaXRlV2l0aFdTJywgdXJsOiB1cmwgfSkuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBvcGVuIHN1bW1hcnlgKTtcclxuICAgICAgICB0aGlzLk9uTWlzdGFrZU9iaihEYXRlLm5vdygpLCB7XHJcbiAgICAgICAgICB0eXBlOiAnZmFpbCcsXHJcbiAgICAgICAgICB0ZXh0OiBlcnJvck1lc3NhZ2VFbmFibGVBQ1RXUyxcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLlJlc2V0KCk7XHJcbiAgICB0aGlzLlNldEluQ29tYmF0KGZhbHNlKTtcclxuICB9XHJcblxyXG4gIFNldEluQ29tYmF0KGluQ29tYmF0OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAvLyBGb3IgdXNhYmlsaXR5IHNha2U6XHJcbiAgICAvLyAgIC0gdG8gYXZvaWQgZHVuZ2VvbiB0cmFzaCBzdGFydGluZyBzdG9wcGluZyBjb21iYXQgYW5kIHJlc2V0dGluZyB0aGVcclxuICAgIC8vICAgICBsaXN0IHJlcGVhdGVkbHksIG9ubHkgcmVzZXQgd2hlbiBBQ1Qgc3RhcnRzIGEgbmV3IGVuY291bnRlci5cclxuICAgIC8vICAgLSBmb3IgY29uc2lzdGVuY3kgd2l0aCBEUFMgbWV0ZXJzLCBmZmxvZ3MsIGV0YywgdXNlIEFDVCdzIGVuY291bnRlclxyXG4gICAgLy8gICAgIHRpbWUgYXMgdGhlIHN0YXJ0IHRpbWUsIG5vdCB3aGVuIGdhbWUgY29tYmF0IGJlY29tZXMgdHJ1ZS5cclxuICAgIC8vICAgLSB0byBtYWtlIGl0IG1vcmUgcmVhZGFibGUsIHNob3cvaGlkZSBvbGQgbWlzdGFrZXMgb3V0IG9mIGdhbWVcclxuICAgIC8vICAgICBjb21iYXQsIGFuZCBjb25zaWRlciBlYXJseSBwdWxscyBzdGFydGluZyBnYW1lIGNvbWJhdCBlYXJseS4gIFRoaXNcclxuICAgIC8vICAgICBhbGxvd3MgZm9yIG9uZSBsb25nIGR1bmdlb24gQUNUIGVuY291bnRlciB0byBoYXZlIG11bHRpcGxlIGVhcmx5XHJcbiAgICAvLyAgICAgb3IgbGF0ZSBwdWxscy5cclxuICAgIGlmICh0aGlzLmluQ29tYmF0ID09PSBpbkNvbWJhdClcclxuICAgICAgcmV0dXJuO1xyXG4gICAgdGhpcy5pbkNvbWJhdCA9IGluQ29tYmF0O1xyXG4gICAgaWYgKGluQ29tYmF0KSB7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnb3V0LW9mLWNvbWJhdCcpO1xyXG4gICAgICB0aGlzLkhpZGVPbGRJdGVtcygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gVE9ETzogQWRkIGFuIFggYnV0dG9uIHRvIGhpZGUvY2xlYXIgdGhlIGxpc3QuXHJcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnb3V0LW9mLWNvbWJhdCcpO1xyXG4gICAgICB0aGlzLlNob3dBbGxJdGVtcygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgT25NaXN0YWtlT2JqKHRpbWVzdGFtcDogbnVtYmVyLCBtOiBPb3BzeU1pc3Rha2UpOiB2b2lkIHtcclxuICAgIGNvbnN0IHJlcG9ydCA9IG0ucmVwb3J0ID8gbmV3IERlYXRoUmVwb3J0KG0ucmVwb3J0KSA6IHVuZGVmaW5lZDtcclxuICAgIGlmIChyZXBvcnQpXHJcbiAgICAgIHRoaXMuZGVhdGhSZXBvcnQ/LnF1ZXVlKHJlcG9ydCk7XHJcblxyXG4gICAgY29uc3QgaWNvbkNsYXNzID0gbS50eXBlO1xyXG4gICAgY29uc3QgYmxhbWUgPSBtLm5hbWUgPz8gbS5ibGFtZTtcclxuICAgIGNvbnN0IGJsYW1lVGV4dCA9IGJsYW1lID8gU2hvcnROYW1pZnkoYmxhbWUsIHRoaXMub3B0aW9ucy5QbGF5ZXJOaWNrcykgKyAnOiAnIDogJyc7XHJcbiAgICBjb25zdCB0cmFuc2xhdGVkVGV4dCA9IFRyYW5zbGF0ZSh0aGlzLm9wdGlvbnMuRGlzcGxheUxhbmd1YWdlLCBtLnRleHQpO1xyXG4gICAgaWYgKCF0cmFuc2xhdGVkVGV4dClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHRpbWUgPSBHZXRGb3JtYXR0ZWRUaW1lKHRoaXMuYmFzZVRpbWUsIHRpbWVzdGFtcCk7XHJcbiAgICBjb25zdCB0ZXh0ID0gYCR7YmxhbWVUZXh0fSR7dHJhbnNsYXRlZFRleHR9YDtcclxuICAgIGNvbnN0IG1heEl0ZW1zID0gdGhpcy5vcHRpb25zLk51bUxpdmVMaXN0SXRlbXNJbkNvbWJhdDtcclxuXHJcbiAgICAvLyBHZXQgYW4gZXhpc3Rpbmcgcm93IG9yIGNyZWF0ZSBhIG5ldyBvbmUuXHJcbiAgICBsZXQgcm93RGl2O1xyXG4gICAgY29uc3QgaXRlbUlkeCA9IHRoaXMubnVtSXRlbXM7XHJcbiAgICBpZiAoaXRlbUlkeCA8IHRoaXMuaXRlbXMubGVuZ3RoKVxyXG4gICAgICByb3dEaXYgPSB0aGlzLml0ZW1zW2l0ZW1JZHhdO1xyXG4gICAgaWYgKCFyb3dEaXYpXHJcbiAgICAgIHJvd0RpdiA9IHRoaXMuTWFrZVJvdygpO1xyXG5cclxuICAgIC8vIENsZWFuIHVwIC8gYWRkIGFueSBldmVudCBsaXN0ZW5lcnMuXHJcbiAgICBjb25zdCBsaXN0ZW5lciA9IHRoaXMuaXRlbUlkeFRvTGlzdGVuZXJbaXRlbUlkeF07XHJcbiAgICBpZiAobGlzdGVuZXIpIHtcclxuICAgICAgcm93RGl2LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGxpc3RlbmVyKTtcclxuICAgICAgZGVsZXRlIHRoaXMuaXRlbUlkeFRvTGlzdGVuZXJbaXRlbUlkeF07XHJcbiAgICB9XHJcbiAgICBpZiAocmVwb3J0KSB7XHJcbiAgICAgIGNvbnN0IGZ1bmMgPSAoKSA9PiB0aGlzLmRlYXRoUmVwb3J0Py5tb3VzZU92ZXIocmVwb3J0LCB0aGlzLmluQ29tYmF0KTtcclxuICAgICAgcm93RGl2LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmMpO1xyXG4gICAgICB0aGlzLml0ZW1JZHhUb0xpc3RlbmVyW2l0ZW1JZHhdID0gZnVuYztcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm51bUl0ZW1zKys7XHJcblxyXG4gICAgY29uc3QgaWNvbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgaWNvbkRpdi5jbGFzc0xpc3QuYWRkKCdtaXN0YWtlLWljb24nKTtcclxuICAgIGljb25EaXYuY2xhc3NMaXN0LmFkZChpY29uQ2xhc3MpO1xyXG4gICAgcm93RGl2LmFwcGVuZENoaWxkKGljb25EaXYpO1xyXG4gICAgY29uc3QgdGV4dERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdGV4dERpdi5jbGFzc0xpc3QuYWRkKCdtaXN0YWtlLXRleHQnKTtcclxuICAgIHRleHREaXYuaW5uZXJIVE1MID0gdGV4dDtcclxuICAgIHJvd0Rpdi5hcHBlbmRDaGlsZCh0ZXh0RGl2KTtcclxuICAgIGNvbnN0IHRpbWVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRpbWVEaXYuY2xhc3NMaXN0LmFkZCgnbWlzdGFrZS10aW1lJyk7XHJcbiAgICB0aW1lRGl2LmlubmVySFRNTCA9IHRpbWU7XHJcbiAgICByb3dEaXYuYXBwZW5kQ2hpbGQodGltZURpdik7XHJcblxyXG4gICAgLy8gSGlkZSBhbnl0aGluZyBvdmVyIHRoZSBsaW1pdCBmcm9tIHRoZSBwYXN0LlxyXG4gICAgaWYgKHRoaXMuaW5Db21iYXQpIHtcclxuICAgICAgaWYgKHRoaXMubnVtSXRlbXMgPiBtYXhJdGVtcylcclxuICAgICAgICB0aGlzLml0ZW1zW3RoaXMubnVtSXRlbXMgLSBtYXhJdGVtcyAtIDFdPy5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2hvdyBhbmQgc2Nyb2xsIHRvIGJvdHRvbS5cclxuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcclxuICAgIHRoaXMuaWNvbkNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XHJcbiAgICB0aGlzLnNjcm9sbGVyLnNjcm9sbFRvcCA9IHRoaXMuc2Nyb2xsZXIuc2Nyb2xsSGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBNYWtlUm93KCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoJ21pc3Rha2Utcm93Jyk7XHJcblxyXG4gICAgLy8gY2xpY2stdG8tY29weSBmdW5jdGlvblxyXG4gICAgZGl2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBtaXN0YWtlVGV4dCA9IGRpdi5jaGlsZE5vZGVzWzFdPy50ZXh0Q29udGVudCA/PyAnJztcclxuICAgICAgY29uc3QgbWlzdGFrZVRpbWUgPSBkaXYuY2hpbGROb2Rlc1syXT8udGV4dENvbnRlbnQ7XHJcbiAgICAgIGNvbnN0IHN0ciA9IG1pc3Rha2VUaW1lID8gYFske21pc3Rha2VUaW1lfV0gJHttaXN0YWtlVGV4dH1gIDogbWlzdGFrZVRleHQ7XHJcbiAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcclxuICAgICAgZWwudmFsdWUgPSBzdHI7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpO1xyXG4gICAgICBlbC5zZWxlY3QoKTtcclxuICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcclxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbCk7XHJcblxyXG4gICAgICAvLyBjb3BpZWQgbWVzc2FnZVxyXG4gICAgICBjb25zdCBtc2cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgbXNnLmNsYXNzTGlzdC5hZGQoJ2NvcGllZC1tc2cnKTtcclxuICAgICAgbXNnLmlubmVyVGV4dCA9IGtDb3BpZWRNZXNzYWdlW3RoaXMub3B0aW9ucy5EaXNwbGF5TGFuZ3VhZ2VdIHx8IGtDb3BpZWRNZXNzYWdlWydlbiddO1xyXG4gICAgICBtc2cuc3R5bGUud2lkdGggPSBgJHtkaXYuY2xpZW50V2lkdGh9cHhgO1xyXG4gICAgICBtc2cuc3R5bGUuaGVpZ2h0ID0gYCR7ZGl2LmNsaWVudEhlaWdodH1weGA7XHJcblxyXG4gICAgICBkaXYuYXBwZW5kQ2hpbGQobXNnKTtcclxuICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vIG9vcHN5IGxpdmUgbGlzdCBtYXkgaGF2ZSBiZWVuIGhpZGRlbi9kZXN0cm95ZWQgYmVmb3JlIHRoZSB0aW1lb3V0IGhhcHBlbnMuXHJcbiAgICAgICAgaWYgKG1zZy5wYXJlbnROb2RlKVxyXG4gICAgICAgICAgZGl2LnJlbW92ZUNoaWxkKG1zZyk7XHJcbiAgICAgIH0sIDEwMDApO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLml0ZW1zLnB1c2goZGl2KTtcclxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdik7XHJcbiAgICByZXR1cm4gZGl2O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBTaG93QWxsSXRlbXMoKTogdm9pZCB7XHJcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcylcclxuICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XHJcblxyXG4gICAgdGhpcy5zY3JvbGxlci5zY3JvbGxUb3AgPSB0aGlzLnNjcm9sbGVyLnNjcm9sbEhlaWdodDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgSGlkZU9sZEl0ZW1zKCk6IHZvaWQge1xyXG4gICAgY29uc3QgbWF4SXRlbXMgPSB0aGlzLm9wdGlvbnMuTnVtTGl2ZUxpc3RJdGVtc0luQ29tYmF0O1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aCAtIG1heEl0ZW1zOyArK2kpXHJcbiAgICAgIHRoaXMuaXRlbXNbaV0/LmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcclxuICB9XHJcblxyXG4gIFJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xyXG4gICAgdGhpcy5pY29uQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcclxuICAgIHRoaXMuaXRlbXMgPSBbXTtcclxuICAgIHRoaXMubnVtSXRlbXMgPSAwO1xyXG4gICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICB0aGlzLml0ZW1JZHhUb0xpc3RlbmVyID0ge307XHJcbiAgICB0aGlzLmRlYXRoUmVwb3J0Py5oaWRlKCk7XHJcbiAgfVxyXG5cclxuICBPbkV2ZW50KGV2ZW50OiBWaWV3RXZlbnQpOiB2b2lkIHtcclxuICAgIGlmIChldmVudC50eXBlID09PSAnTWlzdGFrZScpXHJcbiAgICAgIHRoaXMuT25NaXN0YWtlT2JqKGV2ZW50LnRpbWVzdGFtcCwgZXZlbnQubWlzdGFrZSk7XHJcbiAgICBlbHNlIGlmIChldmVudC50eXBlID09PSAnU3RhcnRFbmNvdW50ZXInKVxyXG4gICAgICB0aGlzLlN0YXJ0RW5jb3VudGVyKGV2ZW50LnRpbWVzdGFtcCk7XHJcbiAgICBlbHNlIGlmIChldmVudC50eXBlID09PSAnQ2hhbmdlWm9uZScpXHJcbiAgICAgIHRoaXMuT25DaGFuZ2Vab25lKCk7XHJcbiAgfVxyXG5cclxuICBPblN5bmNFdmVudHMoX2V2ZW50czogVmlld0V2ZW50W10pOiB2b2lkIHtcclxuICAgIC8vIGRvbid0IGJvdGhlciBzeW5jaW5nIGZvciB0aGUgbGl2ZSBsaXN0XHJcbiAgfVxyXG5cclxuICBTdGFydEVuY291bnRlcih0aW1lc3RhbXA6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5SZXNldCgpO1xyXG4gICAgdGhpcy5iYXNlVGltZSA9IHRpbWVzdGFtcDtcclxuICB9XHJcblxyXG4gIE9uQ2hhbmdlWm9uZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuUmVzZXQoKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGFiaWxpdHlOYW1lTWFwOiB7IFtpZDogc3RyaW5nXTogc3RyaW5nIH0gPSB7XHJcbiAgJzVDNic6ICdBdHRhY2snLFxyXG4gICc1QzcnOiAnQXR0YWNrJyxcclxuICAnNUM4JzogJ0F0dGFjaycsXHJcbiAgJzVDOSc6ICdBdHRhY2snLFxyXG4gICcxOUU3JzogJ0F0dGFjaycsXHJcbiAgJzFBRTInOiAnQXR0YWNrJyxcclxuICAnMUFGRSc6ICdBdHRhY2snLFxyXG4gICcxQzk3JzogJ0F0dGFjaycsXHJcbiAgJzFDQjcnOiAnQXR0YWNrJyxcclxuICAnMjE1Nyc6ICdMYWtzaG1pIEF1dG8nLFxyXG4gICcyMUM1JzogJ0F0dGFjaycsXHJcbiAgJzIyRUEnOiAnQXR0YWNrJyxcclxuICAnMjNGMic6ICdFeGRlYXRoIEF1dG8nLFxyXG4gICcyNDlGJzogJ0F0dGFjaycsXHJcbiAgJzI0RTEnOiAnQXR0YWNrJyxcclxuICAnMjRFMic6ICdBdHRhY2snLFxyXG4gICcyNEU4JzogJ0F0dGFjaycsXHJcbiAgJzI1QjYnOiAnQXR0YWNrJyxcclxuICAnMjZBNyc6ICdUd2luIEF1dG8nLFxyXG4gICcyNkI0JzogJ05hZWwgQXV0bycsXHJcbiAgJzI2RDAnOiAnQmFoYSBBdXRvJyxcclxuICAnMjcwNSc6ICdBdHRhY2snLFxyXG4gICcyN0ZDJzogJ0F0dGFjaycsXHJcbiAgJzI3RkQnOiAnQXR0YWNrJyxcclxuICAnMjdGRSc6ICdBdHRhY2snLFxyXG4gICcyN0ZGJzogJ0F0dGFjaycsXHJcbiAgJzI4QzEnOiAnQXR0YWNrJyxcclxuICAnMkIzRSc6ICdBdHRhY2snLFxyXG5cclxuICAvLyB1d3UgdGVtcFxyXG4gICcyQjUxJzogJ0F0dGFjaycsXHJcbiAgJzJCNTMnOiAnU2xpcHN0cmVhbScsXHJcbiAgJzJCNDInOiAnTWlzdHJhbCBTb25nJyxcclxuICAnMkI0MSc6ICdHcmFuZCBXaGlybHdpbmQnLFxyXG4gICcyQjUwJzogJ0Rvd25idXJzdCcsXHJcbiAgJzJCNDUnOiAnQ3ljbG9uZScsXHJcbiAgJzJCNDYnOiAnR2lnYWJ1cnN0JyxcclxuICAnMkI0RCc6ICdGZWF0aGVyIFJhaW4nLFxyXG4gICcyQjU0JzogJ01pc3RyYWwgU2hyaWVrJyxcclxuICAnMkI0OCc6ICdGcmljdGlvbicsXHJcbiAgJzJCQjUnOiAnU3VwZXIgQ3ljbG9uZScsXHJcbiAgJzJCNDcnOiAnU3VwZXIgQ3ljbG9uZScsXHJcbiAgJzJCNTUnOiAnQWVyaWFsIEJsYXN0JyxcclxuICAnMkI0Qic6ICdNaXN0cmFsIFNvbmcnLFxyXG4gICcyQjUyJzogJ0V5ZSBPZiBUaGUgU3Rvcm0nLFxyXG4gICcyQjRFJzogJ1dpY2tlZCBXaGVlbCcsXHJcbiAgJzJCNEYnOiAnV2lja2VkIFRvcm5hZG8nLFxyXG4gICcyQjVGJzogJ0NyaW1zb24gQ3ljbG9uZScsXHJcbiAgJzJCNjEnOiAnUmFkaWFudCBQbHVtZScsXHJcbiAgJzJCNTcnOiAnVnVsY2FuIEJ1cnN0JyxcclxuICAnMkI1Nic6ICdJbmNpbmVyYXRlJyxcclxuICAnMkI0OSc6ICdNZXNvaGlnaCcsXHJcbiAgJzFDRCc6ICdOYWlsIEFkZHMnLFxyXG4gICcyQzE5JzogJ0luZmVybmFsIEZldHRlcnMnLFxyXG4gICcyQjVBJzogJ0VydXB0aW9uJyxcclxuICAnMkI1Qic6ICdJbmZlcm5vIEhvd2wnLFxyXG4gICcyQjVDJzogJ1NlYXJpbmcgV2luZCcsXHJcbiAgJzJCNUUnOiAnSGVsbGZpcmUnLFxyXG4gICcyQjVEJzogJ0ZsYW1pbmcgQ3J1c2gnLFxyXG4gICcyQ0ZEJzogJ0dlb2NydXNoJyxcclxuICAnMkI5MCc6ICdFYXJ0aGVuIEZ1cnknLFxyXG4gICcyQjU4JzogJ0luZmVybmFsIFN1cmdlJyxcclxuICAnMkI2Mic6ICdSb2NrIEJ1c3RlcicsXHJcbiAgJzJCNjMnOiAnTW91bnRhaW4gQnVzdGVyJyxcclxuICAnMkI2NCc6ICdXZWlnaHQgT2YgVGhlIExhbmQnLFxyXG4gICcyQjY1JzogJ1dlaWdodCBPZiBUaGUgTGFuZCcsXHJcbiAgJzJCNjYnOiAnSnVtcCcsXHJcbiAgJzJCNjcnOiAnVXBoZWF2YWwnLFxyXG4gICcyQjY4JzogJ0dlb2NydXNoJyxcclxuICAnMkI2OSc6ICdCdXJ5JyxcclxuICAnMkI2QSc6ICdEZXRvbmF0aW9uJyxcclxuICAnMkI2Qic6ICdSb2NrIFRocm93JyxcclxuICAnMkI2Qyc6ICdSb2NrIFRocm93JyxcclxuICAnMkI2RCc6ICdHcmFuaXRlIEltcGFjdCcsXHJcbiAgJzJCNkUnOiAnRnJlZWZpcmUnLFxyXG4gICcyQjZGJzogJ0xhbmRzbGlkZScsXHJcbiAgJzJCNzAnOiAnTGFuZHNsaWRlJyxcclxuICAnMkI3MSc6ICdMYW5kc2xpZGUnLFxyXG4gICcyQzE4JzogJ1R1bXVsdCcsXHJcblxyXG4gIC8vIFRFQVxyXG4gICc0OTc4JzogJ0F0dGFjaycsXHJcbiAgJzQ5NzknOiAnQXR0YWNrJyxcclxufTtcclxuIiwiaW1wb3J0IENvbnRlbnRUeXBlIGZyb20gJy4uLy4uL3Jlc291cmNlcy9jb250ZW50X3R5cGUnO1xyXG5pbXBvcnQgVXNlckNvbmZpZyBmcm9tICcuLi8uLi9yZXNvdXJjZXMvdXNlcl9jb25maWcnO1xyXG5pbXBvcnQgWm9uZUlkIGZyb20gJy4uLy4uL3Jlc291cmNlcy96b25lX2lkJztcclxuaW1wb3J0IHsgQmFzZU9wdGlvbnMgfSBmcm9tICcuLi8uLi90eXBlcy9kYXRhJztcclxuaW1wb3J0IHsgTG9vc2VPb3BzeVRyaWdnZXJTZXQgfSBmcm9tICcuLi8uLi90eXBlcy9vb3BzeSc7XHJcbmltcG9ydCB7IFpvbmVJZFR5cGUgfSBmcm9tICcuLi8uLi90eXBlcy90cmlnZ2VyJztcclxuXHJcbmltcG9ydCB7IGFiaWxpdHlOYW1lTWFwIH0gZnJvbSAnLi9hYmlsaXR5X25hbWVfbWFwJztcclxuXHJcbmV4cG9ydCB0eXBlIERpc2FibGVkVHJpZ2dlcnMgPSB7IFt0cmlnZ2VySWQ6IHN0cmluZ106IGJvb2xlYW4gfTtcclxuZXhwb3J0IHR5cGUgVHJpZ2dlckF1dG9Db25maWcgPSB7IGVuYWJsZWQ6IGJvb2xlYW4gfTtcclxuZXhwb3J0IHR5cGUgUGVyVHJpZ2dlckF1dG9Db25maWcgPSB7IFt0cmlnZ2VySWQ6IHN0cmluZ106IFRyaWdnZXJBdXRvQ29uZmlnIH07XHJcblxyXG50eXBlIE9vcHN5Tm9uQ29uZmlnT3B0aW9ucyA9IHtcclxuICBUcmlnZ2VyczogTG9vc2VPb3BzeVRyaWdnZXJTZXRbXTtcclxuICBQbGF5ZXJOaWNrczogeyBbZ2FtZU5hbWU6IHN0cmluZ106IHN0cmluZyB9O1xyXG4gIERpc2FibGVkVHJpZ2dlcnM6IERpc2FibGVkVHJpZ2dlcnM7XHJcbiAgLy8gVE9ETzogc2hvdWxkIGNvbnRlbnRfdHlwZSBleHBvcnQgd2hhdCB0eXBlIGl0IGlzP1xyXG4gIElnbm9yZUNvbnRlbnRUeXBlczogbnVtYmVyW107XHJcbiAgSWdub3JlWm9uZUlkczogWm9uZUlkVHlwZVtdO1xyXG4gIEFiaWxpdHlJZE5hbWVNYXA6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmcgfTtcclxuICBQZXJUcmlnZ2VyQXV0b0NvbmZpZzogUGVyVHJpZ2dlckF1dG9Db25maWc7XHJcbn07XHJcblxyXG5jb25zdCBkZWZhdWx0T29wc3lOb25Db25maWdPcHRpb25zOiBPb3BzeU5vbkNvbmZpZ09wdGlvbnMgPSB7XHJcbiAgVHJpZ2dlcnM6IFtdLFxyXG4gIFBsYXllck5pY2tzOiB7fSxcclxuICBEaXNhYmxlZFRyaWdnZXJzOiB7fSxcclxuICBJZ25vcmVDb250ZW50VHlwZXM6IFtcclxuICAgIENvbnRlbnRUeXBlLlB2cCxcclxuICAgIENvbnRlbnRUeXBlLkV1cmVrYSxcclxuICBdLFxyXG4gIElnbm9yZVpvbmVJZHM6IFtcclxuICAgIC8vIEJvemphIHpvbmVzIGhhdmUgYW4gKHVubmFtZWQpIGNvbnRlbnQgdHlwZSBvZiAyOSB3aGljaCBhbHNvIGFwcGxpZXNcclxuICAgIC8vIHRvIERlbHVicnVtIFJlZ2luYWUgKHdoaWNoIHdlIHdhbnQgb29wc3kgb24pLiAgU28sIGlnbm9yZSBieSB6b25lLlxyXG4gICAgWm9uZUlkLlRoZUJvemphblNvdXRoZXJuRnJvbnQsXHJcbiAgICBab25lSWQuWmFkbm9yLFxyXG4gIF0sXHJcblxyXG4gIEFiaWxpdHlJZE5hbWVNYXA6IGFiaWxpdHlOYW1lTWFwLFxyXG4gIFBlclRyaWdnZXJBdXRvQ29uZmlnOiB7fSxcclxufTtcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgaG93IHRvIGdldCB0aGlzIHR5cGUgZnJvbSBvb3BzeXJhaWRzeV9jb25maWc/P1xyXG4vLyBUaGVzZSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuIGFuZCBhcmUganVzdCBoZXJlIGZvciB0eXBpbmcuXHJcblxyXG5leHBvcnQgdHlwZSBEZWF0aFJlcG9ydFNpZGUgPSAnbGVmdCcgfCAncmlnaHQnIHwgJ2Rpc2FibGVkJztcclxuXHJcbnR5cGUgT29wc3lDb25maWdPcHRpb25zID0ge1xyXG4gIE51bUxpdmVMaXN0SXRlbXNJbkNvbWJhdDogbnVtYmVyO1xyXG4gIE1pbmltdW1UaW1lRm9yUHVsbE1pc3Rha2U6IG51bWJlcjtcclxuICBUaW1lVG9TaG93RGVhdGhSZXBvcnRNczogbnVtYmVyO1xyXG4gIERlYXRoUmVwb3J0U2lkZTogRGVhdGhSZXBvcnRTaWRlO1xyXG59O1xyXG5cclxuY29uc3QgZGVmYXVsdE9vcHN5Q29uZmlnT3B0aW9uczogT29wc3lDb25maWdPcHRpb25zID0ge1xyXG4gIE51bUxpdmVMaXN0SXRlbXNJbkNvbWJhdDogNSxcclxuICBNaW5pbXVtVGltZUZvclB1bGxNaXN0YWtlOiAwLjQsXHJcbiAgVGltZVRvU2hvd0RlYXRoUmVwb3J0TXM6IDQwMDAsXHJcbiAgRGVhdGhSZXBvcnRTaWRlOiAnbGVmdCcsXHJcbn07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE9vcHN5T3B0aW9ucyBleHRlbmRzIEJhc2VPcHRpb25zLCBPb3BzeU5vbkNvbmZpZ09wdGlvbnMsIE9vcHN5Q29uZmlnT3B0aW9ucyB7fVxyXG5cclxuLy8gU2VlIHVzZXIvcmFpZGJvc3MtZXhhbXBsZS5qcyBmb3IgZG9jdW1lbnRhdGlvbi5cclxuY29uc3QgT3B0aW9uczogT29wc3lPcHRpb25zID0ge1xyXG4gIC4uLlVzZXJDb25maWcuZ2V0RGVmYXVsdEJhc2VPcHRpb25zKCksXHJcbiAgLi4uZGVmYXVsdE9vcHN5Tm9uQ29uZmlnT3B0aW9ucyxcclxuICAuLi5kZWZhdWx0T29wc3lDb25maWdPcHRpb25zLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgT3B0aW9ucztcclxuIiwiaW1wb3J0IHsgT29wc3lNaXN0YWtlIH0gZnJvbSAnLi4vLi4vdHlwZXMvb29wc3knO1xyXG5cclxuaW1wb3J0IHsgRGVhdGhSZXBvcnQgfSBmcm9tICcuL2RlYXRoX3JlcG9ydCc7XHJcbmltcG9ydCB7IE1pc3Rha2VPYnNlcnZlciwgVmlld0V2ZW50IH0gZnJvbSAnLi9taXN0YWtlX29ic2VydmVyJztcclxuaW1wb3J0IHsgR2V0Rm9ybWF0dGVkVGltZSwgU2hvcnROYW1pZnksIFRyYW5zbGF0ZSB9IGZyb20gJy4vb29wc3lfY29tbW9uJztcclxuaW1wb3J0IHsgT29wc3lPcHRpb25zIH0gZnJvbSAnLi9vb3BzeV9vcHRpb25zJztcclxuXHJcbnR5cGUgVGFibGVFbnRyeSA9IHtcclxuICBjb3VudDogbnVtYmVyO1xyXG4gIGVsZW06IEhUTUxFbGVtZW50O1xyXG59O1xyXG5cclxudHlwZSBUYWJsZVJvdyA9IHtcclxuICBuYW1lRWxlbTogSFRNTEVsZW1lbnQ7XHJcbiAgZW50cmllczoge1xyXG4gICAgW3R5cGU6IHN0cmluZ106IFRhYmxlRW50cnk7XHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBPb3BzeVN1bW1hcnlUYWJsZSBpbXBsZW1lbnRzIE1pc3Rha2VPYnNlcnZlciB7XHJcbiAgcHJpdmF0ZSBtaXN0YWtlcz86IHtcclxuICAgIFtuYW1lOiBzdHJpbmddOiBUYWJsZVJvdztcclxuICB9O1xyXG4gIC8vIFRPRE86IHNob3VsZCB0aGlzIGNvbWUgZnJvbSBvcHRpb25zP1xyXG4gIHByaXZhdGUgdHlwZXM6IHJlYWRvbmx5IHN0cmluZ1tdID0gWydkZWF0aCcsICdmYWlsJywgJ3dhcm4nLCAncHVsbCddO1xyXG4gIHByaXZhdGUgc29ydENvbCA9ICdkZWF0aCc7XHJcbiAgcHJpdmF0ZSBzb3J0QXNjID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3B0aW9uczogT29wc3lPcHRpb25zLCBwcml2YXRlIHRhYmxlOiBIVE1MRWxlbWVudCkge1xyXG4gICAgLy8gdGhpcy50YWJsZSBoYXMgb25lIGNvbHVtbiBmb3IgbmFtZSwgYW5kIHRoZW4gb25lIGZvciBlYWNoIG9mIHRoZSB0eXBlcy5cclxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS10YWJsZS1jb2xzJywgKHRoaXMudHlwZXMubGVuZ3RoICsgMSkudG9TdHJpbmcoKSk7XHJcbiAgfVxyXG5cclxuICBSZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMubWlzdGFrZXMgPSB1bmRlZmluZWQ7XHJcbiAgICB3aGlsZSAodGhpcy50YWJsZT8ubGFzdENoaWxkKVxyXG4gICAgICB0aGlzLnRhYmxlLnJlbW92ZUNoaWxkKHRoaXMudGFibGUubGFzdENoaWxkKTtcclxuICB9XHJcblxyXG4gIEJ1aWxkSGVhZGVyUm93KHBhcmVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGR1bW15Rmlyc3REaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGR1bW15Rmlyc3REaXYuY2xhc3NMaXN0LmFkZCgnaGVhZGVyJywgJ25hbWUnKTtcclxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChkdW1teUZpcnN0RGl2KTtcclxuICAgIGZvciAoY29uc3QgdHlwZSBvZiB0aGlzLnR5cGVzKSB7XHJcbiAgICAgIGNvbnN0IHR5cGVFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHR5cGVFbGVtLmNsYXNzTGlzdC5hZGQoJ2hlYWRlcicsICdtaXN0YWtlLWljb24nLCB0eXBlKTtcclxuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHR5cGVFbGVtKTtcclxuXHJcbiAgICAgIHR5cGVFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNvcnRDb2wgPT09IHR5cGUpIHtcclxuICAgICAgICAgIHRoaXMuc29ydEFzYyA9ICF0aGlzLnNvcnRBc2M7XHJcbiAgICAgICAgICB0aGlzLlNvcnRUYWJsZSgpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNvcnRBc2MgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNvcnRDb2wgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMuU29ydFRhYmxlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQnVpbGRQbGF5ZXJSb3cocGFyZW50OiBIVE1MRWxlbWVudCwgbmFtZTogc3RyaW5nKTogVGFibGVSb3cge1xyXG4gICAgY29uc3QgbmFtZUVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIG5hbWVFbGVtLmNsYXNzTGlzdC5hZGQoJ25hbWUnKTtcclxuICAgIG5hbWVFbGVtLmlubmVyVGV4dCA9IG5hbWU7XHJcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQobmFtZUVsZW0pO1xyXG5cclxuICAgIGNvbnN0IHJvdzogVGFibGVSb3cgPSB7IG5hbWVFbGVtOiBuYW1lRWxlbSwgZW50cmllczoge30gfTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdGhpcy50eXBlcykge1xyXG4gICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZCgnbnVtYmVyJyk7XHJcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbGVtKTtcclxuICAgICAgcm93LmVudHJpZXNbdHlwZV0gPSB7XHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgZWxlbTogZWxlbSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcm93O1xyXG4gIH1cclxuXHJcbiAgT25NaXN0YWtlT2JqKG06IE9vcHN5TWlzdGFrZSk6IHZvaWQge1xyXG4gICAgY29uc3QgbG9uZ05hbWUgPSBtLm5hbWUgPz8gbS5ibGFtZTtcclxuICAgIGlmICghbG9uZ05hbWUpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGNvbnN0IG5hbWUgPSBTaG9ydE5hbWlmeShsb25nTmFtZSwgdGhpcy5vcHRpb25zLlBsYXllck5pY2tzKTtcclxuXHJcbiAgICAvLyBEb24ndCBjcmVhdGUgYSBwbGF5ZXIgcm93IGlmIHRoZSBzdW1tYXJ5IGRvZXNuJ3QgY2FyZSBhYm91dCB0aGlzIHR5cGUgb2YgbWlzdGFrZS5cclxuICAgIGlmICghdGhpcy50eXBlcy5pbmNsdWRlcyhtLnR5cGUpKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgaWYgKCF0aGlzLm1pc3Rha2VzKSB7XHJcbiAgICAgIC8vIFdhaXQgdW50aWwgd2UndmUgc2VlbiBhbnkgbWlzdGFrZXMgdG8gc3RhcnQgdGhlIHRhYmxlLlxyXG4gICAgICB0aGlzLkJ1aWxkSGVhZGVyUm93KHRoaXMudGFibGUpO1xyXG4gICAgICB0aGlzLm1pc3Rha2VzID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgcm93ID0gdGhpcy5taXN0YWtlc1tuYW1lXSA/Pz0gdGhpcy5CdWlsZFBsYXllclJvdyh0aGlzLnRhYmxlLCBuYW1lKTtcclxuXHJcbiAgICBjb25zdCBlbnRyeSA9IHJvdy5lbnRyaWVzW20udHlwZV07XHJcbiAgICBpZiAoIWVudHJ5KVxyXG4gICAgICByZXR1cm47XHJcbiAgICBlbnRyeS5jb3VudCsrO1xyXG4gICAgZW50cnkuZWxlbS5pbm5lclRleHQgPSBlbnRyeS5jb3VudC50b1N0cmluZygpO1xyXG5cclxuICAgIGlmIChtLnR5cGUgPT09IHRoaXMuc29ydENvbClcclxuICAgICAgdGhpcy5Tb3J0VGFibGUoKTtcclxuICB9XHJcblxyXG4gIFNvcnRUYWJsZSgpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5taXN0YWtlcylcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIC8vIEdlbmVyYXRlIGNvdW50cy5cclxuICAgIGNvbnN0IGNvdW50czogeyBbbmFtZTogc3RyaW5nXTogbnVtYmVyIH0gPSB7fTtcclxuICAgIGZvciAoY29uc3QgW25hbWUsIHJvd10gb2YgT2JqZWN0LmVudHJpZXModGhpcy5taXN0YWtlcykpIHtcclxuICAgICAgY29uc3QgZW50cnkgPSByb3cuZW50cmllc1t0aGlzLnNvcnRDb2xdO1xyXG4gICAgICBjb3VudHNbbmFtZV0gPSBlbnRyeT8uY291bnQgPz8gMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTb3J0IG5hbWVzIGJ5IGNvdW50cy5cclxuICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoY291bnRzKTtcclxuICAgIGlmICh0aGlzLnNvcnRBc2MpXHJcbiAgICAgIG5hbWVzLnNvcnQoKGEsIGIpID0+IChjb3VudHNbYV0gPz8gLTEpIC0gKGNvdW50c1tiXSA/PyAtMSkpO1xyXG4gICAgZWxzZVxyXG4gICAgICBuYW1lcy5zb3J0KChhLCBiKSA9PiAoY291bnRzW2JdID8/IC0xKSAtIChjb3VudHNbYV0gPz8gLTEpKTtcclxuXHJcbiAgICAvLyBBcHBseSBzdHlsZSB0byBzb3J0IGJ5IG9yZGVyaW5nLlxyXG4gICAgZm9yIChjb25zdCBbbmFtZSwgcm93XSBvZiBPYmplY3QuZW50cmllcyh0aGlzLm1pc3Rha2VzKSkge1xyXG4gICAgICBjb25zdCBpZHggPSBuYW1lcy5pbmRleE9mKG5hbWUpLnRvU3RyaW5nKCk7XHJcbiAgICAgIHJvdy5uYW1lRWxlbS5zdHlsZS5zZXRQcm9wZXJ0eSgnb3JkZXInLCBpZHgpO1xyXG4gICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIE9iamVjdC52YWx1ZXMocm93LmVudHJpZXMpKVxyXG4gICAgICAgIGVudHJ5LmVsZW0uc3R5bGUuc2V0UHJvcGVydHkoJ29yZGVyJywgaWR4KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIE9uRXZlbnQoZXZlbnQ6IFZpZXdFdmVudCk6IHZvaWQge1xyXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdNaXN0YWtlJylcclxuICAgICAgdGhpcy5Pbk1pc3Rha2VPYmooZXZlbnQubWlzdGFrZSk7XHJcbiAgfVxyXG5cclxuICBPblN5bmNFdmVudHMoZXZlbnRzOiBWaWV3RXZlbnRbXSk6IHZvaWQge1xyXG4gICAgdGhpcy5SZXNldCgpO1xyXG4gICAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpXHJcbiAgICAgIHRoaXMuT25FdmVudChldmVudCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgT29wc3lTdW1tYXJ5TGlzdCBpbXBsZW1lbnRzIE1pc3Rha2VPYnNlcnZlciB7XHJcbiAgcHJpdmF0ZSBwdWxsSWR4ID0gMDtcclxuICBwcml2YXRlIHpvbmVOYW1lPzogc3RyaW5nO1xyXG4gIHByaXZhdGUgY3VycmVudERpdjogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIGJhc2VUaW1lPzogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wdGlvbnM6IE9vcHN5T3B0aW9ucywgcHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50KSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XHJcbiAgfVxyXG5cclxuICBSZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMucHVsbElkeCA9IDA7XHJcbiAgICB0aGlzLmJhc2VUaW1lID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5jdXJyZW50RGl2ID0gbnVsbDtcclxuICAgIHdoaWxlICh0aGlzLmNvbnRhaW5lcj8ubGFzdENoaWxkKVxyXG4gICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLmNvbnRhaW5lci5sYXN0Q2hpbGQpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBHZXRUaW1lU3RyKGQ6IERhdGUpOiBzdHJpbmcge1xyXG4gICAgLy8gSVNPLTg2MDEgb3IgZGVhdGguXHJcbiAgICBjb25zdCBtb250aCA9IGAwJHtkLmdldE1vbnRoKCkgKyAxfWAuc2xpY2UoLTIpO1xyXG4gICAgY29uc3QgZGF5ID0gYDAke2QuZ2V0RGF0ZSgpfWAuc2xpY2UoLTIpO1xyXG4gICAgY29uc3QgaG91cnMgPSBgMDAke2QuZ2V0SG91cnMoKX1gLnNsaWNlKC0yKTtcclxuICAgIGNvbnN0IG1pbnV0ZXMgPSBgMDAke2QuZ2V0TWludXRlcygpfWAuc2xpY2UoLTIpO1xyXG4gICAgcmV0dXJuIGAke2QuZ2V0RnVsbFllYXIoKX0tJHttb250aH0tJHtkYXl9ICR7aG91cnN9OiR7bWludXRlc31gO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBTdGFydE5ld1NlY3Rpb25JZk5lZWRlZCh0aW1lc3RhbXA6IG51bWJlcik6IEhUTUxFbGVtZW50IHtcclxuICAgIGlmICh0aGlzLmN1cnJlbnREaXYpXHJcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnREaXY7XHJcblxyXG4gICAgY29uc3Qgc2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgc2VjdGlvbi5jbGFzc0xpc3QuYWRkKCdzZWN0aW9uJyk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uKTtcclxuXHJcbiAgICBjb25zdCBoZWFkZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGhlYWRlckRpdi5jbGFzc0xpc3QuYWRkKCdzZWN0aW9uLWhlYWRlcicpO1xyXG4gICAgc2VjdGlvbi5hcHBlbmRDaGlsZChoZWFkZXJEaXYpO1xyXG5cclxuICAgIC8vIFRPRE86IEl0IHdvdWxkIGtpbmQgb2YgYmUgbmljZSB0byBzeW5jIHRoaXMgd2l0aCBwdWxsY291bnRlcixcclxuICAgIC8vIGJ1dCBpdCdzIG5vdCBjbGVhciBob3cgdG8gY29ubmVjdCB0aGVzZSB0d28uXHJcbiAgICB0aGlzLnB1bGxJZHgrKztcclxuXHJcbiAgICBjb25zdCBwdWxsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBwdWxsRGl2LmlubmVyVGV4dCA9IGBQdWxsICR7dGhpcy5wdWxsSWR4fWA7XHJcbiAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQocHVsbERpdik7XHJcbiAgICBjb25zdCB6b25lRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBpZiAodGhpcy56b25lTmFtZSlcclxuICAgICAgem9uZURpdi5pbm5lclRleHQgPSBgKCR7dGhpcy56b25lTmFtZX0pYDtcclxuICAgIGhlYWRlckRpdi5hcHBlbmRDaGlsZCh6b25lRGl2KTtcclxuICAgIGNvbnN0IHRpbWVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRpbWVEaXYuaW5uZXJUZXh0ID0gdGhpcy5HZXRUaW1lU3RyKG5ldyBEYXRlKHRpbWVzdGFtcCkpO1xyXG4gICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKHRpbWVEaXYpO1xyXG5cclxuICAgIGNvbnN0IHJvd0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgcm93Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3NlY3Rpb24tcm93cycpO1xyXG4gICAgc2VjdGlvbi5hcHBlbmRDaGlsZChyb3dDb250YWluZXIpO1xyXG5cclxuICAgIHRoaXMuY3VycmVudERpdiA9IHJvd0NvbnRhaW5lcjtcclxuICAgIHJldHVybiB0aGlzLmN1cnJlbnREaXY7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIEVuZFNlY3Rpb24oKTogdm9pZCB7XHJcbiAgICB0aGlzLmN1cnJlbnREaXYgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgT25NaXN0YWtlT2JqKHRpbWVzdGFtcDogbnVtYmVyLCBtOiBPb3BzeU1pc3Rha2UpOiB2b2lkIHtcclxuICAgIGNvbnN0IGljb25DbGFzcyA9IG0udHlwZTtcclxuICAgIGNvbnN0IGJsYW1lID0gbS5uYW1lID8/IG0uYmxhbWU7XHJcbiAgICBjb25zdCBibGFtZVRleHQgPSBibGFtZSA/IGAke1Nob3J0TmFtaWZ5KGJsYW1lLCB0aGlzLm9wdGlvbnMuUGxheWVyTmlja3MpfTogYCA6ICcnO1xyXG4gICAgY29uc3QgdGV4dCA9IFRyYW5zbGF0ZSh0aGlzLm9wdGlvbnMuRGlzcGxheUxhbmd1YWdlLCBtLnRleHQpO1xyXG4gICAgaWYgKCF0ZXh0KVxyXG4gICAgICByZXR1cm47XHJcbiAgICB0aGlzLkFkZExpbmUobSwgaWNvbkNsYXNzLCBgJHtibGFtZVRleHR9ICR7dGV4dH1gLCBHZXRGb3JtYXR0ZWRUaW1lKHRoaXMuYmFzZVRpbWUsIHRpbWVzdGFtcCkpO1xyXG4gIH1cclxuXHJcbiAgQWRkTGluZShtOiBPb3BzeU1pc3Rha2UsIGljb25DbGFzczogc3RyaW5nLCB0ZXh0OiBzdHJpbmcsIHRpbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgY3VycmVudFNlY3Rpb24gPSB0aGlzLlN0YXJ0TmV3U2VjdGlvbklmTmVlZGVkKHRoaXMuYmFzZVRpbWUgPz8gRGF0ZS5ub3coKSk7XHJcblxyXG4gICAgY29uc3Qgcm93RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICByb3dEaXYuY2xhc3NMaXN0LmFkZCgnbWlzdGFrZS1yb3cnKTtcclxuICAgIGN1cnJlbnRTZWN0aW9uLmFwcGVuZENoaWxkKHJvd0Rpdik7XHJcblxyXG4gICAgLy8gVE9ETzogbWF5YmUgY29tYmluZSB0aGlzIHdpdGggT29wc3lMaXZlTGlzdC5cclxuICAgIGNvbnN0IGljb25EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGljb25EaXYuY2xhc3NMaXN0LmFkZCgnbWlzdGFrZS1pY29uJyk7XHJcbiAgICBpY29uRGl2LmNsYXNzTGlzdC5hZGQoaWNvbkNsYXNzKTtcclxuICAgIHJvd0Rpdi5hcHBlbmRDaGlsZChpY29uRGl2KTtcclxuICAgIGNvbnN0IHRleHREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRleHREaXYuY2xhc3NMaXN0LmFkZCgnbWlzdGFrZS10ZXh0Jyk7XHJcbiAgICB0ZXh0RGl2LmlubmVySFRNTCA9IHRleHQ7XHJcbiAgICByb3dEaXYuYXBwZW5kQ2hpbGQodGV4dERpdik7XHJcbiAgICBjb25zdCB0aW1lRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB0aW1lRGl2LmNsYXNzTGlzdC5hZGQoJ21pc3Rha2UtdGltZScpO1xyXG4gICAgdGltZURpdi5pbm5lckhUTUwgPSB0aW1lO1xyXG4gICAgcm93RGl2LmFwcGVuZENoaWxkKHRpbWVEaXYpO1xyXG5cclxuICAgIGlmICghbS5yZXBvcnQpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBjb2xsYXBzZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbGxhcHNlckRpdi5jbGFzc0xpc3QuYWRkKCdtaXN0YWtlLWNvbGxhcHNlcicpO1xyXG4gICAgcm93RGl2LmFwcGVuZENoaWxkKGNvbGxhcHNlckRpdik7XHJcblxyXG4gICAgY29uc3QgZGV0YWlsc0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGV0YWlsc0Rpdi5jbGFzc0xpc3QuYWRkKCdkZWF0aC1kZXRhaWxzJyk7XHJcbiAgICBjdXJyZW50U2VjdGlvbi5hcHBlbmRDaGlsZChkZXRhaWxzRGl2KTtcclxuXHJcbiAgICBsZXQgZXhwYW5kZWQgPSBmYWxzZTtcclxuICAgIHJvd0Rpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgZXhwYW5kZWQgPSAhZXhwYW5kZWQ7XHJcbiAgICAgIGlmIChleHBhbmRlZCkge1xyXG4gICAgICAgIGNvbGxhcHNlckRpdi5jbGFzc0xpc3QuYWRkKCdleHBhbmRlZCcpO1xyXG4gICAgICAgIGRldGFpbHNEaXYuY2xhc3NMaXN0LmFkZCgnZXhwYW5kZWQnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb2xsYXBzZXJEaXYuY2xhc3NMaXN0LnJlbW92ZSgnZXhwYW5kZWQnKTtcclxuICAgICAgICBkZXRhaWxzRGl2LmNsYXNzTGlzdC5yZW1vdmUoJ2V4cGFuZGVkJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlcG9ydCA9IG5ldyBEZWF0aFJlcG9ydChtLnJlcG9ydCk7XHJcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIHJlcG9ydC5wYXJzZVJlcG9ydExpbmVzKCkpIHtcclxuICAgICAgY29uc3QgaHBFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGhwRWxlbS5jbGFzc0xpc3QuYWRkKCdkZWF0aC1yb3ctaHAnKTtcclxuICAgICAgaWYgKGV2ZW50LmN1cnJlbnRIcCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIGhwRWxlbS5pbm5lclRleHQgPSBldmVudC5jdXJyZW50SHAudG9TdHJpbmcoKTtcclxuICAgICAgZGV0YWlsc0Rpdi5hcHBlbmRDaGlsZChocEVsZW0pO1xyXG5cclxuICAgICAgY29uc3QgZGFtYWdlRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBkYW1hZ2VFbGVtLmNsYXNzTGlzdC5hZGQoJ2RlYXRoLXJvdy1hbW91bnQnKTtcclxuICAgICAgaWYgKGV2ZW50LmFtb3VudENsYXNzKVxyXG4gICAgICAgIGRhbWFnZUVsZW0uY2xhc3NMaXN0LmFkZChldmVudC5hbW91bnRDbGFzcyk7XHJcbiAgICAgIGlmIChldmVudC5hbW91bnRTdHIgIT09IHVuZGVmaW5lZClcclxuICAgICAgICBkYW1hZ2VFbGVtLmlubmVyVGV4dCA9IGV2ZW50LmFtb3VudFN0cjtcclxuICAgICAgZGV0YWlsc0Rpdi5hcHBlbmRDaGlsZChkYW1hZ2VFbGVtKTtcclxuXHJcbiAgICAgIGNvbnN0IGljb25FbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGljb25FbGVtLmNsYXNzTGlzdC5hZGQoJ2RlYXRoLXJvdy1pY29uJyk7XHJcbiAgICAgIGlmIChldmVudC5pY29uICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgaWNvbkVsZW0uY2xhc3NMaXN0LmFkZCgnbWlzdGFrZS1pY29uJywgZXZlbnQuaWNvbik7XHJcbiAgICAgIGRldGFpbHNEaXYuYXBwZW5kQ2hpbGQoaWNvbkVsZW0pO1xyXG5cclxuICAgICAgY29uc3QgdGV4dEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGV4dEVsZW0uY2xhc3NMaXN0LmFkZCgnZGVhdGgtcm93LXRleHQnKTtcclxuICAgICAgaWYgKGV2ZW50LnRleHQgIT09IHVuZGVmaW5lZClcclxuICAgICAgICB0ZXh0RWxlbS5pbm5lckhUTUwgPSBldmVudC50ZXh0O1xyXG4gICAgICBkZXRhaWxzRGl2LmFwcGVuZENoaWxkKHRleHRFbGVtKTtcclxuXHJcbiAgICAgIGNvbnN0IHRpbWVFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRpbWVFbGVtLmNsYXNzTGlzdC5hZGQoJ2RlYXRoLXJvdy10aW1lJyk7XHJcbiAgICAgIHRpbWVFbGVtLmlubmVyVGV4dCA9IGV2ZW50LnRpbWVzdGFtcFN0cjtcclxuICAgICAgZGV0YWlsc0Rpdi5hcHBlbmRDaGlsZCh0aW1lRWxlbSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBPbkV2ZW50KGV2ZW50OiBWaWV3RXZlbnQpOiB2b2lkIHtcclxuICAgIGlmIChldmVudC50eXBlID09PSAnTWlzdGFrZScpXHJcbiAgICAgIHRoaXMuT25NaXN0YWtlT2JqKGV2ZW50LnRpbWVzdGFtcCwgZXZlbnQubWlzdGFrZSk7XHJcbiAgICBlbHNlIGlmIChldmVudC50eXBlID09PSAnU3RhcnRFbmNvdW50ZXInKVxyXG4gICAgICB0aGlzLlN0YXJ0RW5jb3VudGVyKGV2ZW50LnRpbWVzdGFtcCk7XHJcbiAgICBlbHNlIGlmIChldmVudC50eXBlID09PSAnQ2hhbmdlWm9uZScpXHJcbiAgICAgIHRoaXMuT25DaGFuZ2Vab25lKGV2ZW50LnpvbmVOYW1lKTtcclxuICB9XHJcblxyXG4gIE9uU3luY0V2ZW50cyhldmVudHM6IFZpZXdFdmVudFtdKTogdm9pZCB7XHJcbiAgICB0aGlzLlJlc2V0KCk7XHJcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cylcclxuICAgICAgdGhpcy5PbkV2ZW50KGV2ZW50KTtcclxuICB9XHJcblxyXG4gIFN0YXJ0RW5jb3VudGVyKHRpbWVzdGFtcDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAvLyBUT0RPOiBJZiB5b3UgcmVsb2FkIHRoZSBzdW1tYXJ5IHdoaWxlIGluIGNvbWJhdCwgdGhlbiB0aGUgT25JbkNvbWJhdENoYW5nZWRFdmVudFxyXG4gICAgLy8gZm9yIHRoZSBjdXJyZW50IGNvbWJhdCB3aWxsIHNlbmQgYSBuZXcgU3RhcnRFbmNvdW50ZXIgKGNyZWF0aW5nIGEgbmV3IHNlY3Rpb24pXHJcbiAgICAvLyBldmVuIHRob3VnaCB0aGUgY3VycmVudCBjb21iYXQgaXMgc3RpbGwgb25nb2luZy4gIFdlIGNvdWxkIHRyeSB0byBoYW5kbGUgdGhpc1xyXG4gICAgLy8gYnkgZXhwbGljaXRseSBoYXZpbmcgU3RhcnRFbmNvdW50ZXIvU3RvcEVuY291bnRlciBob3dldmVyIHRoaXMgcmVxdWlyZXMgYSBiaXRcclxuICAgIC8vIG9mIHdyYW5nbGluZyB0byBnZXQgcmlnaHQuICBGb3Igbm93LCBkb24ndCByZWxvYWQgdGhlIHN1bW1hcnkgd2hpbGUgaW4gY29tYmF0LiAgOylcclxuICAgIHRoaXMuRW5kU2VjdGlvbigpO1xyXG4gICAgdGhpcy5iYXNlVGltZSA9IHRpbWVzdGFtcDtcclxuICAgIHRoaXMuU3RhcnROZXdTZWN0aW9uSWZOZWVkZWQodGltZXN0YW1wKTtcclxuICB9XHJcblxyXG4gIE9uQ2hhbmdlWm9uZSh6b25lTmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLnpvbmVOYW1lID0gem9uZU5hbWU7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFVucmVhY2hhYmxlQ29kZSB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9ub3RfcmVhY2hlZCc7XHJcbmltcG9ydCBVc2VyQ29uZmlnLCB7IE9wdGlvbnNUZW1wbGF0ZSwgVXNlckZpbGVDYWxsYmFjayB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy91c2VyX2NvbmZpZyc7XHJcbmltcG9ydCB7IEJhc2VPcHRpb25zIH0gZnJvbSAnLi4vLi4vdHlwZXMvZGF0YSc7XHJcbmltcG9ydCB7IExvb3NlT29wc3lUcmlnZ2VyU2V0LCBPb3BzeUZpbGVEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvb29wc3knO1xyXG5pbXBvcnQge1xyXG4gIENhY3Rib3RDb25maWd1cmF0b3IsXHJcbiAgQ29uZmlnTG9vc2VPb3BzeVRyaWdnZXJTZXQsXHJcbiAgQ29uZmlnUHJvY2Vzc2VkRmlsZSxcclxuICBDb25maWdQcm9jZXNzZWRGaWxlTWFwLFxyXG59IGZyb20gJy4uL2NvbmZpZy9jb25maWcnO1xyXG5cclxuaW1wb3J0IHsgZ2VuZXJhdGVCdWZmVHJpZ2dlcklkcyB9IGZyb20gJy4vYnVmZl9tYXAnO1xyXG5pbXBvcnQgb29wc3lGaWxlRGF0YSBmcm9tICcuL2RhdGEvb29wc3lfbWFuaWZlc3QudHh0JztcclxuaW1wb3J0IHsgT29wc3lPcHRpb25zIH0gZnJvbSAnLi9vb3BzeV9vcHRpb25zJztcclxuXHJcbmNvbnN0IG9vcHN5SGVscGVyczogKGtleW9mIExvb3NlT29wc3lUcmlnZ2VyU2V0KVtdID0gW1xyXG4gICdkYW1hZ2VXYXJuJyxcclxuICAnZGFtYWdlRmFpbCcsXHJcbiAgJ3NoYXJlV2FybicsXHJcbiAgJ3NoYXJlRmFpbCcsXHJcbiAgJ2dhaW5zRWZmZWN0V2FybicsXHJcbiAgJ2dhaW5zRWZmZWN0RmFpbCcsXHJcbl07XHJcblxyXG4vLyBUaGlzIGNvdWxkIGJlIGEgY2hlY2tib3gsIGJ1dCBpdCdzIHBvc3NpYmxlIHdlIGNvdWxkIGFkZCBtb3JlIHRoaW5ncyBoZXJlLFxyXG4vLyBsaWtlIGNoYW5naW5nIGZhaWwtPndhcm5pbmcgb3Igd2hvIGtub3dzIHdoYXQuXHJcbmNvbnN0IGtUcmlnZ2VyT3B0aW9ucyA9IHtcclxuICBkZWZhdWx0OiB7XHJcbiAgICBsYWJlbDoge1xyXG4gICAgICBlbjogJ+KclCBEZWZhdWx0cycsXHJcbiAgICAgIGRlOiAn4pyUIFN0YW5kYXJkcycsXHJcbiAgICAgIGZyOiAn4pyUIETDqWZhdXRzJyxcclxuICAgICAgamE6ICfinJQg5Yid5pyf6Kit5a6aJyxcclxuICAgICAgY246ICfinJQg6buY6K6k6K6+572uJyxcclxuICAgICAga286ICfinJQg6riw67O4JyxcclxuICAgIH0sXHJcbiAgfSxcclxuICBkaXNhYmxlZDoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICfinYwgRGlzYWJsZWQnLFxyXG4gICAgICBkZTogJ+KdjCBEZWFrdGl2aWVydCcsXHJcbiAgICAgIGZyOiAn4p2MIETDqXNhY3RpdsOpJyxcclxuICAgICAgamE6ICfinYwg54Sh5Yq5JyxcclxuICAgICAgY246ICfinYwg56aB55SoJyxcclxuICAgICAga286ICfinYwg67mE7Zmc7ISx7ZmUJyxcclxuICAgIH0sXHJcbiAgfSxcclxufTtcclxuXHJcbmNsYXNzIE9vcHN5Q29uZmlndXJhdG9yIHtcclxuICBwcml2YXRlIGJhc2U6IENhY3Rib3RDb25maWd1cmF0b3I7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25LZXkgPSAnb29wc3lyYWlkc3knO1xyXG5cclxuICBjb25zdHJ1Y3RvcihjYWN0Ym90Q29uZmlndXJhdG9yOiBDYWN0Ym90Q29uZmlndXJhdG9yKSB7XHJcbiAgICB0aGlzLmJhc2UgPSBjYWN0Ym90Q29uZmlndXJhdG9yO1xyXG4gIH1cclxuXHJcbiAgYnVpbGRVSShjb250YWluZXI6IEhUTUxFbGVtZW50LCBmaWxlczogT29wc3lGaWxlRGF0YSkge1xyXG4gICAgY29uc3QgZmlsZU1hcCA9IHRoaXMucHJvY2Vzc09vcHN5RmlsZXMoZmlsZXMpO1xyXG5cclxuICAgIGNvbnN0IGV4cGFuc2lvbkRpdnM6IHsgW2V4cGFuc2lvbjogc3RyaW5nXTogSFRNTEVsZW1lbnQgfSA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3QgaW5mbyBvZiBPYmplY3QudmFsdWVzKGZpbGVNYXApKSB7XHJcbiAgICAgIGNvbnN0IGV4cGFuc2lvbiA9IGluZm8ucHJlZml4O1xyXG5cclxuICAgICAgaWYgKCFpbmZvLnRyaWdnZXJzIHx8IE9iamVjdC5rZXlzKGluZm8udHJpZ2dlcnMpLmxlbmd0aCA9PT0gMClcclxuICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgIGxldCBleHBhbnNpb25EaXYgPSBleHBhbnNpb25EaXZzW2V4cGFuc2lvbl07XHJcbiAgICAgIGlmICghZXhwYW5zaW9uRGl2KSB7XHJcbiAgICAgICAgY29uc3QgZXhwYW5zaW9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZXhwYW5zaW9uQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItZXhwYW5zaW9uLWNvbnRhaW5lcicsICdjb2xsYXBzZWQnKTtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZXhwYW5zaW9uQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgY29uc3QgZXhwYW5zaW9uSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZXhwYW5zaW9uSGVhZGVyLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItZXhwYW5zaW9uLWhlYWRlcicpO1xyXG4gICAgICAgIGV4cGFuc2lvbkhlYWRlci5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgZXhwYW5zaW9uQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2NvbGxhcHNlZCcpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZXhwYW5zaW9uSGVhZGVyLmlubmVyVGV4dCA9IGV4cGFuc2lvbjtcclxuICAgICAgICBleHBhbnNpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoZXhwYW5zaW9uSGVhZGVyKTtcclxuXHJcbiAgICAgICAgZXhwYW5zaW9uRGl2ID0gZXhwYW5zaW9uRGl2c1tleHBhbnNpb25dID0gZXhwYW5zaW9uQ29udGFpbmVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCB0cmlnZ2VyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRyaWdnZXJDb250YWluZXIuY2xhc3NMaXN0LmFkZCgndHJpZ2dlci1maWxlLWNvbnRhaW5lcicsICdjb2xsYXBzZWQnKTtcclxuICAgICAgZXhwYW5zaW9uRGl2LmFwcGVuZENoaWxkKHRyaWdnZXJDb250YWluZXIpO1xyXG5cclxuICAgICAgY29uc3QgaGVhZGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGhlYWRlckRpdi5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWZpbGUtaGVhZGVyJyk7XHJcbiAgICAgIGhlYWRlckRpdi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgIHRyaWdnZXJDb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgnY29sbGFwc2VkJyk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCBwYXJ0cyA9IFtpbmZvLnRpdGxlLCBpbmZvLnR5cGUsIGV4cGFuc2lvbl07XHJcbiAgICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xyXG4gICAgICAgIGlmICghcGFydClcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIGNvbnN0IHBhcnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBwYXJ0RGl2LmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItZmlsZS1oZWFkZXItcGFydCcpO1xyXG4gICAgICAgIHBhcnREaXYuaW5uZXJUZXh0ID0gcGFydDtcclxuICAgICAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQocGFydERpdik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRyaWdnZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoaGVhZGVyRGl2KTtcclxuXHJcbiAgICAgIGNvbnN0IHRyaWdnZXJPcHRpb25zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRyaWdnZXJPcHRpb25zLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItZmlsZS1vcHRpb25zJyk7XHJcbiAgICAgIHRyaWdnZXJDb250YWluZXIuYXBwZW5kQ2hpbGQodHJpZ2dlck9wdGlvbnMpO1xyXG5cclxuICAgICAgZm9yIChjb25zdCBpZCBvZiBPYmplY3Qua2V5cyhpbmZvLnRyaWdnZXJzID8/IHt9KSkge1xyXG4gICAgICAgIC8vIEJ1aWxkIHRoZSB0cmlnZ2VyIGxhYmVsLlxyXG4gICAgICAgIGNvbnN0IHRyaWdnZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0cmlnZ2VyRGl2LmlubmVySFRNTCA9IGlkO1xyXG4gICAgICAgIHRyaWdnZXJEaXYuY2xhc3NMaXN0LmFkZCgndHJpZ2dlcicpO1xyXG4gICAgICAgIHRyaWdnZXJPcHRpb25zLmFwcGVuZENoaWxkKHRyaWdnZXJEaXYpO1xyXG5cclxuICAgICAgICAvLyBDb250YWluZXIgZm9yIHRoZSByaWdodCBzaWRlIHVpIChzZWxlY3QgYm94ZXMsIGFsbCBvZiB0aGUgaW5mbykuXHJcbiAgICAgICAgY29uc3QgdHJpZ2dlckRldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0cmlnZ2VyRGV0YWlscy5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWRldGFpbHMnKTtcclxuICAgICAgICB0cmlnZ2VyT3B0aW9ucy5hcHBlbmRDaGlsZCh0cmlnZ2VyRGV0YWlscyk7XHJcblxyXG4gICAgICAgIHRyaWdnZXJEZXRhaWxzLmFwcGVuZENoaWxkKHRoaXMuYnVpbGRUcmlnZ2VyT3B0aW9ucyhpZCwgdHJpZ2dlckRpdikpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBidWlsZFRyaWdnZXJPcHRpb25zKGlkOiBzdHJpbmcsIGxhYmVsRGl2OiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGtGaWVsZCA9ICdPdXRwdXQnO1xyXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBkaXYuY2xhc3NMaXN0LmFkZCgndHJpZ2dlci1vcHRpb25zJyk7XHJcblxyXG4gICAgY29uc3QgdXBkYXRlTGFiZWwgPSAoaW5wdXQ6IEhUTUxPcHRpb25FbGVtZW50IHwgSFRNTFNlbGVjdEVsZW1lbnQpID0+IHtcclxuICAgICAgaWYgKGlucHV0LnZhbHVlID09PSAnaGlkZGVuJyB8fCBpbnB1dC52YWx1ZSA9PT0gJ2Rpc2FibGVkJylcclxuICAgICAgICBsYWJlbERpdi5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgbGFiZWxEaXYuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcclxuICAgIGRpdi5hcHBlbmRDaGlsZChpbnB1dCk7XHJcblxyXG4gICAgY29uc3Qgc2VsZWN0VmFsdWUgPSB0aGlzLmJhc2UuZ2V0T3B0aW9uKHRoaXMub3B0aW9uS2V5LCBbJ3RyaWdnZXJzJywgaWQsIGtGaWVsZF0sICdkZWZhdWx0Jyk7XHJcblxyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoa1RyaWdnZXJPcHRpb25zKSkge1xyXG4gICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgIGVsZW0uaW5uZXJIVE1MID0gdGhpcy5iYXNlLnRyYW5zbGF0ZSh2YWx1ZS5sYWJlbCk7XHJcbiAgICAgIGVsZW0udmFsdWUgPSBrZXk7XHJcbiAgICAgIGVsZW0uc2VsZWN0ZWQgPSBrZXkgPT09IHNlbGVjdFZhbHVlO1xyXG4gICAgICBpbnB1dC5hcHBlbmRDaGlsZChlbGVtKTtcclxuXHJcbiAgICAgIHVwZGF0ZUxhYmVsKGlucHV0KTtcclxuXHJcbiAgICAgIGlucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgIHVwZGF0ZUxhYmVsKGlucHV0KTtcclxuICAgICAgICBsZXQgdmFsdWUgPSBpbnB1dC52YWx1ZTtcclxuICAgICAgICBpZiAodmFsdWUuaW5jbHVkZXMoJ2RlZmF1bHQnKSlcclxuICAgICAgICAgIHZhbHVlID0gJ2RlZmF1bHQnO1xyXG4gICAgICAgIHRoaXMuYmFzZS5zZXRPcHRpb24odGhpcy5vcHRpb25LZXksIFsndHJpZ2dlcnMnLCBpZCwga0ZpZWxkXSwgaW5wdXQudmFsdWUpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkaXY7XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzT29wc3lGaWxlcyhmaWxlczogT29wc3lGaWxlRGF0YSk6IENvbmZpZ1Byb2Nlc3NlZEZpbGVNYXA8TG9vc2VPb3BzeVRyaWdnZXJTZXQ+IHtcclxuICAgIGNvbnN0IG1hcCA9IHRoaXMuYmFzZS5wcm9jZXNzRmlsZXMoZmlsZXMpO1xyXG5cclxuICAgIC8vIEhhY2tpbHkgaW5zZXJ0IFwibWlzc2VkIGJ1ZmZzXCIgaW50byB0aGUgbGlzdCBvZiB0cmlnZ2Vycy5cclxuICAgIGNvbnN0IGdlbmVyYWxFbnRyeSA9IG1hcFsnMDAtbWlzYy1nZW5lcmFsJ107XHJcbiAgICBpZiAoIWdlbmVyYWxFbnRyeSlcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gICAgY29uc3QgZmFrZUJ1ZmZzOiBDb25maWdQcm9jZXNzZWRGaWxlPExvb3NlT29wc3lUcmlnZ2VyU2V0PiA9IHtcclxuICAgICAgLi4uZ2VuZXJhbEVudHJ5LFxyXG4gICAgICBmaWxlS2V5OiAnMDAtbWlzYy1idWZmcycsXHJcbiAgICAgIGZpbGVuYW1lOiAnYnVmZl9tYXAudHMnLFxyXG4gICAgICB0aXRsZTogdGhpcy5iYXNlLnRyYW5zbGF0ZSh7XHJcbiAgICAgICAgZW46ICdNaXNzZWQgQnVmZnMnLFxyXG4gICAgICAgIGRlOiAnVmVyZmVobHRlIEJ1ZmZzJyxcclxuICAgICAgICBmcjogJ0J1ZmZzIG1hbnF1w6lzJyxcclxuICAgICAgICBqYTogJ+asoOOBkeODkOODlScsXHJcbiAgICAgICAgY246ICfpgZfmvI9CdWZmJyxcclxuICAgICAgICBrbzogJ+uGk+y5nCDrsoTtlIQg7JWM66a8JyxcclxuICAgICAgfSksXHJcbiAgICAgIHRyaWdnZXJTZXQ6IHtcclxuICAgICAgICB0cmlnZ2VyczogZ2VuZXJhdGVCdWZmVHJpZ2dlcklkcygpLm1hcCgoaWQpID0+IHtcclxuICAgICAgICAgIHJldHVybiB7IGlkOiBpZCB9O1xyXG4gICAgICAgIH0pLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICAgIG1hcFtmYWtlQnVmZnMuZmlsZUtleV0gPSBmYWtlQnVmZnM7XHJcblxyXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIE9iamVjdC52YWx1ZXMobWFwKSkge1xyXG4gICAgICBpdGVtLnRyaWdnZXJzID0ge307XHJcbiAgICAgIGNvbnN0IHRyaWdnZXJTZXQgPSBpdGVtLnRyaWdnZXJTZXQ7XHJcbiAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBvb3BzeUhlbHBlcnMpIHtcclxuICAgICAgICBjb25zdCBvYmogPSB0cmlnZ2VyU2V0W3Byb3BdO1xyXG4gICAgICAgIGlmIChvYmogPT09IHVuZGVmaW5lZCB8fCBvYmogPT09IG51bGwpXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gb2JqKVxyXG4gICAgICAgICAgICBpdGVtLnRyaWdnZXJzW2lkXSA9IHsgaWQ6IGlkIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXRyaWdnZXJTZXQudHJpZ2dlcnMpXHJcbiAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2YgdHJpZ2dlclNldC50cmlnZ2Vycykge1xyXG4gICAgICAgIGlmICghdHJpZ2dlci5pZClcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIC8vIFNraXAgdHJpZ2dlcnMgdGhhdCBqdXN0IHNldCBkYXRhLCBidXQgaW5jbHVkZSB0cmlnZ2VycyB0aGF0IGFyZSBqdXN0IGlkcy5cclxuICAgICAgICBpZiAodHJpZ2dlci5ydW4gJiYgIXRyaWdnZXIubWlzdGFrZSlcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIGl0ZW0udHJpZ2dlcnNbdHJpZ2dlci5pZF0gPSB0cmlnZ2VyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWFwO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgdGVtcGxhdGVPcHRpb25zOiBPcHRpb25zVGVtcGxhdGUgPSB7XHJcbiAgYnVpbGRFeHRyYVVJOiAoYmFzZSwgY29udGFpbmVyKSA9PiB7XHJcbiAgICBjb25zdCBidWlsZGVyID0gbmV3IE9vcHN5Q29uZmlndXJhdG9yKGJhc2UpO1xyXG4gICAgYnVpbGRlci5idWlsZFVJKGNvbnRhaW5lciwgb29wc3lGaWxlRGF0YSk7XHJcbiAgfSxcclxuICBwcm9jZXNzRXh0cmFPcHRpb25zOiAoYmFzZU9wdGlvbnMsIHNhdmVkQ29uZmlnKSA9PiB7XHJcbiAgICAvLyBUT0RPOiBSZXdyaXRlIHVzZXJfY29uZmlnIHRvIGJlIHRlbXBsYXRlZCBvbiBvcHRpb24gdHlwZSBzbyB0aGF0IHRoaXMgZnVuY3Rpb24ga25vd3NcclxuICAgIC8vIHdoYXQgdHlwZSBvZiBvcHRpb25zIGl0IGlzIHVzaW5nLiAgV2l0aG91dCB0aGlzLCBwZXJUcmlnZ2VyQXV0b0NvbmZpZyBpcyB1bmtub3duLlxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IGJhc2VPcHRpb25zIGFzIE9vcHN5T3B0aW9ucztcclxuXHJcbiAgICBjb25zdCBwZXJUcmlnZ2VyQXV0b0NvbmZpZyA9IG9wdGlvbnNbJ1BlclRyaWdnZXJBdXRvQ29uZmlnJ10gPz89IHt9O1xyXG4gICAgaWYgKHR5cGVvZiBzYXZlZENvbmZpZyAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShzYXZlZENvbmZpZykpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGNvbnN0IHRyaWdnZXJzID0gc2F2ZWRDb25maWdbJ3RyaWdnZXJzJ107XHJcblxyXG4gICAgaWYgKHR5cGVvZiB0cmlnZ2VycyAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheSh0cmlnZ2VycykpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtpZCwgZW50cnldIG9mIE9iamVjdC5lbnRyaWVzKHRyaWdnZXJzKSkge1xyXG4gICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KGVudHJ5KSlcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgY29uc3Qgb3V0cHV0ID0gZW50cnlbJ091dHB1dCddO1xyXG4gICAgICBpZiAob3V0cHV0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICBwZXJUcmlnZ2VyQXV0b0NvbmZpZ1tpZF0gPSB7XHJcbiAgICAgICAgZW5hYmxlZDogb3V0cHV0ICE9PSAnZGlzYWJsZWQnLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgb3B0aW9uczogW1xyXG4gICAge1xyXG4gICAgICBpZDogJ0RlYnVnJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnRW5hYmxlIGRlYnVnIG1vZGUnLFxyXG4gICAgICAgIGRlOiAnQWt0aXZpZXJlIERlYnVnbW9kdXMnLFxyXG4gICAgICAgIGZyOiAnQWN0aXZlciBsZSBtb2RlIGRlYnVnJyxcclxuICAgICAgICBqYTogJ+ODh+ODkOODg+OCsOODouODvOODieOCkuacieWKueOBq+OBmeOCiycsXHJcbiAgICAgICAgY246ICflkK/nlKjosIPor5XmqKHlvI8nLFxyXG4gICAgICAgIGtvOiAn65SU67KE6re4IOuqqOuTnCDtmZzshLHtmZQnLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICBkZWJ1Z09ubHk6IHRydWUsXHJcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdOdW1MaXZlTGlzdEl0ZW1zSW5Db21iYXQnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdOdW1iZXIgb2YgbWlzdGFrZXMgdG8gc2hvdyBpbiBjb21iYXQnLFxyXG4gICAgICAgIGRlOiAnQW56YWhsIGRlciBGZWhsZXIsIGRpZSB3w6RocmVuZCBkZXMgS2FtcGZlcyBhbmdlemVpZ3Qgd2VyZGVuJyxcclxuICAgICAgICBmcjogJ05vbWJyZSBkZSBmYXV0ZXMgw6AgYWZmaWNoZXIgZW4gY29tYmF0JyxcclxuICAgICAgICBqYTogJ+aIpumXmOS4reOBq+ihqOekuuOBmeOCi+ODn+OCueOCkuOBl+OBn+WbnuaVsCcsXHJcbiAgICAgICAgY246ICfmiJjmlpfkuK3mmL7npLrnmoTplJnor6/mlbDph48nLFxyXG4gICAgICAgIGtvOiAn7KCE7YisIOykkSDtkZzsi5ztlaAg7Iuk7IiY65Ok7J2YIOqwnOyImCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcclxuICAgICAgZGVmYXVsdDogNSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnTWluaW11bVRpbWVGb3JQdWxsTWlzdGFrZScsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ01pbmltdW0gdGltZSB0byBzaG93IGVhcmx5IHB1bGwgKHNlY29uZHMpJyxcclxuICAgICAgICBkZTogJ01pbmltdW0gWmVpdCBpbiBkZXIgRWFybHktUHVsbHMgYW5nZXplaWd0IHdlcmRlbiAoaW4gU2VrdW5kZW4pJyxcclxuICAgICAgICBmcjogJ0R1csOpZSBtaW5pbWFsZSBwb3VyIGFmZmljaGVyIGxcXCdlYXJseSBwdWxsIChzZWNvbmRlcyknLFxyXG4gICAgICAgIGphOiAn44K/44Ky5Y+W44KL44Gu44GM5pep44GL44Gj44Gf44KJ44CB44Of44K544Go44GX44Gm6KGo56S644GZ44KL44CB44Kr44Km44Oz44OI44OA44Km44Oz44Go44Gu5pyA55+t5pmC6ZaTICjnp5IpJyxcclxuICAgICAgICBjbjogJ+aYvuekuuaPkOWJjeW8gOaAquacgOWwj+aXtumXtCAo56eSKScsXHJcbiAgICAgICAga286ICftkoDrp4HsnbQg67mg66W064uk6rOgIO2RnOyLnCDtlaAg7LWc7IaMIOyLnOqwhCAo7LSIKScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdmbG9hdCcsXHJcbiAgICAgIGRlZmF1bHQ6IDAuNCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnVGltZVRvU2hvd0RlYXRoUmVwb3J0U2Vjb25kcycsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ1NlY29uZHMgdG8gc2hvdyBkZWF0aCByZXBvcnQgb24gZGVhdGggKDA9bm9uZSknLFxyXG4gICAgICAgIGRlOiAnU2VrdW5kZW4gdW0gZGVuIFRvZGVzcmVwb3J0IGJlaW0gVG90IGFuenV6ZWlnZW4gKDA9bmllbWFscyknLFxyXG4gICAgICAgIGZyOiAnRHVyw6llIGTigJlhZmZpY2hhZ2UgKGVuIHNlY29uZGVzKSBkdSByYXBwb3J0IGRlIG1vcnQgKDAgPSBhdWN1biknLFxyXG4gICAgICAgIGphOiAn5YCS44KM44Gf5pmC44Gr44OH44K544Os44Od44O844OI44KS6KGo56S6ICgwPemdnuihqOekuiknLFxyXG4gICAgICAgIGNuOiAn5q275Lqh5pe25pi+56S65q275Lqh5oql5ZGK55qE56eS5pWwICgwPeS4jeaYvuekuiknLFxyXG4gICAgICAgIGtvOiAn7KO97JeI7J2EIOuVjCDsgqzrp50g67O06rOg7ISc66W8IOuztOyXrOyjvOuKlCDsi5zqsIQo7LSIKSAoMD3ruYTtmZzshLHtmZQpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogNCxcclxuICAgICAgc2V0dGVyRnVuYzogKG9wdGlvbnMsIHZhbHVlKSA9PiB7XHJcbiAgICAgICAgbGV0IHNlY29uZHM7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICBzZWNvbmRzID0gcGFyc2VGbG9hdCh2YWx1ZSk7XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgIHNlY29uZHMgPSB2YWx1ZTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgb3B0aW9uc1snVGltZVRvU2hvd0RlYXRoUmVwb3J0TXMnXSA9IHNlY29uZHMgKiAxMDAwO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdEZWF0aFJlcG9ydFNpZGUnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdIb3cgdG8gc2hvdyB0aGUgZGVhdGggcmVwb3J0JyxcclxuICAgICAgICBkZTogJ1dpZSB6ZWlnZSBpY2ggZGVuIFRvZGVzcmVwb3J0IGFuJyxcclxuICAgICAgICBmcjogJ0/DuSBhZmZpY2hlciBsZSByYXBwb3J0IGRlIG1vcnQnLFxyXG4gICAgICAgIGphOiAn44OH44K544Os44Od44O844OI44Gu6KGo56S65pa55rOVJyxcclxuICAgICAgICBjbjogJ+atu+S6oeaKpeWRiueahOaYvuekuuaWueW8jycsXHJcbiAgICAgICAga286ICfsgqzrp50g67O06rOg7IScIO2RnOyLnCDsnITsuZgnLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgIGVuOiB7XHJcbiAgICAgICAgICAnTGVmdCBTaWRlJzogJ2xlZnQnLFxyXG4gICAgICAgICAgJ1JpZ2h0IFNpZGUnOiAncmlnaHQnLFxyXG4gICAgICAgICAgJ+KdjCBEaXNhYmxlZCc6ICdkaXNhYmxlZCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZToge1xyXG4gICAgICAgICAgJ0xlZnQgU2lkZSc6ICdsaW5rcycsXHJcbiAgICAgICAgICAnUmlnaHQgU2lkZSc6ICdyZWNodHMnLFxyXG4gICAgICAgICAgJ+KdjCBEaXNhYmxlZCc6ICdkZWFrdGl2aWVydCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmcjoge1xyXG4gICAgICAgICAgJ0PDtHTDqSBnYXVjaGUnOiAnZ2F1Y2hlJyxcclxuICAgICAgICAgICdDw7R0w6kgZHJvaXQnOiAnZHJvaXRlJyxcclxuICAgICAgICAgICfinYwgRGlzYWJsZWQnOiAnZMOpc2FjdGl2w6knLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgamE6IHtcclxuICAgICAgICAgICflt6blgbQnOiAnbGVmdCcsXHJcbiAgICAgICAgICAn5Y+z5YG0JzogJ3JpZ2h0JyxcclxuICAgICAgICAgICfinYwg54Sh5Yq5JzogJ2Rpc2FibGVkJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNuOiB7XHJcbiAgICAgICAgICAn5bem5L6nJzogJ2xlZnQnLFxyXG4gICAgICAgICAgJ+WPs+S+pyc6ICdyaWdodCcsXHJcbiAgICAgICAgICAn4p2MIOemgeeUqCc6ICdkaXNhYmxlZCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBrbzoge1xyXG4gICAgICAgICAgJ+yZvOyqvSc6ICdsZWZ0JyxcclxuICAgICAgICAgICfsmKTrpbjsqr0nOiAncmlnaHQnLFxyXG4gICAgICAgICAgJ+KdjCDruYTtmZzshLHtmZQnOiAnZGlzYWJsZWQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIGRlZmF1bHQ6ICdsZWZ0JyxcclxuICAgIH0sXHJcbiAgXSxcclxufTtcclxuXHJcbmNvbnN0IHVzZXJGaWxlSGFuZGxlcjogVXNlckZpbGVDYWxsYmFjayA9IChcclxuICBuYW1lOiBzdHJpbmcsXHJcbiAgX2ZpbGVzOiB7IFtmaWxlbmFtZTogc3RyaW5nXTogc3RyaW5nIH0sXHJcbiAgYmFzZU9wdGlvbnM6IEJhc2VPcHRpb25zICYgUGFydGlhbDxPb3BzeU9wdGlvbnM+LFxyXG4gIGJhc2VQYXRoOiBzdHJpbmcsXHJcbikgPT4ge1xyXG4gIC8vIFRPRE86IFJld3JpdGUgdXNlcl9jb25maWcgdG8gYmUgdGVtcGxhdGVkIG9uIG9wdGlvbiB0eXBlIHNvIHRoYXQgdGhpcyBmdW5jdGlvbiBrbm93c1xyXG4gIC8vIHdoYXQgdHlwZSBvZiBvcHRpb25zIGl0IGlzIHVzaW5nLlxyXG4gIGlmICghYmFzZU9wdGlvbnMuVHJpZ2dlcnMpXHJcbiAgICByZXR1cm47XHJcblxyXG4gIGZvciAoY29uc3QgYmFzZVRyaWdnZXJTZXQgb2YgYmFzZU9wdGlvbnMuVHJpZ2dlcnMpIHtcclxuICAgIGNvbnN0IHNldDogQ29uZmlnTG9vc2VPb3BzeVRyaWdnZXJTZXQgPSBiYXNlVHJpZ2dlclNldDtcclxuXHJcbiAgICAvLyBBbm5vdGF0ZSB0cmlnZ2VycyB3aXRoIHdoZXJlIHRoZXkgY2FtZSBmcm9tLiAgTm90ZSwgb3B0aW9ucyBpcyBwYXNzZWQgaW4gcmVwZWF0ZWRseVxyXG4gICAgLy8gYXMgbXVsdGlwbGUgc2V0cyBvZiB1c2VyIGZpbGVzIGFkZCB0cmlnZ2Vycywgc28gb25seSBwcm9jZXNzIGVhY2ggZmlsZSBvbmNlLlxyXG4gICAgaWYgKHNldC5pc1VzZXJUcmlnZ2VyU2V0KVxyXG4gICAgICBjb250aW51ZTtcclxuXHJcbiAgICAvLyBgZmlsZW5hbWVgIGhlcmUgaXMganVzdCBjb3NtZXRpYyBmb3IgYmV0dGVyIGRlYnVnIHByaW50aW5nIHRvIG1ha2UgaXQgbW9yZSBjbGVhclxyXG4gICAgLy8gd2hlcmUgYSB0cmlnZ2VyIG9yIGFuIG92ZXJyaWRlIGlzIGNvbWluZyBmcm9tLlxyXG4gICAgc2V0LmZpbGVuYW1lID0gYCR7YmFzZVBhdGh9JHtuYW1lfWA7XHJcbiAgICBzZXQuaXNVc2VyVHJpZ2dlclNldCA9IHRydWU7XHJcbiAgfVxyXG59O1xyXG5cclxuVXNlckNvbmZpZy5yZWdpc3Rlck9wdGlvbnMoJ29vcHN5cmFpZHN5JywgdGVtcGxhdGVPcHRpb25zLCB1c2VyRmlsZUhhbmRsZXIpO1xyXG4iLCJpbXBvcnQgeyBVbnJlYWNoYWJsZUNvZGUgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbm90X3JlYWNoZWQnO1xyXG5pbXBvcnQgeyBhZGRPdmVybGF5TGlzdGVuZXIsIGNhbGxPdmVybGF5SGFuZGxlciB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9vdmVybGF5X3BsdWdpbl9hcGknO1xyXG5pbXBvcnQgVXNlckNvbmZpZyBmcm9tICcuLi8uLi9yZXNvdXJjZXMvdXNlcl9jb25maWcnO1xyXG5pbXBvcnQgeyBPb3BzeU1pc3Rha2VUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZXMvb29wc3knO1xyXG5cclxuaW1wb3J0IHsgRGFtYWdlVHJhY2tlciB9IGZyb20gJy4vZGFtYWdlX3RyYWNrZXInO1xyXG5pbXBvcnQgb29wc3lGaWxlRGF0YSBmcm9tICcuL2RhdGEvb29wc3lfbWFuaWZlc3QudHh0JztcclxuaW1wb3J0IHsgTWlzdGFrZUNvbGxlY3RvciB9IGZyb20gJy4vbWlzdGFrZV9jb2xsZWN0b3InO1xyXG5pbXBvcnQgeyBPb3BzeUxpdmVMaXN0IH0gZnJvbSAnLi9vb3BzeV9saXZlX2xpc3QnO1xyXG5pbXBvcnQgZGVmYXVsdE9wdGlvbnMgZnJvbSAnLi9vb3BzeV9vcHRpb25zJztcclxuaW1wb3J0IHsgT29wc3lTdW1tYXJ5TGlzdCwgT29wc3lTdW1tYXJ5VGFibGUgfSBmcm9tICcuL29vcHN5X3N1bW1hcnlfbGlzdCc7XHJcblxyXG5pbXBvcnQgJy4vb29wc3lyYWlkc3lfY29uZmlnJztcclxuXHJcbmltcG9ydCAnLi4vLi4vcmVzb3VyY2VzL2RlZmF1bHRzLmNzcyc7XHJcbmltcG9ydCAnLi9vb3BzeV9jb21tb24uY3NzJztcclxuXHJcbmV4cG9ydCBjb25zdCBhZGREZWJ1Z0luZm8gPSAoY29sbGVjdG9yOiBNaXN0YWtlQ29sbGVjdG9yLCBudW1NaXN0YWtlczogbnVtYmVyKTogdm9pZCA9PiB7XHJcbiAgLy8gVE9ETzogbWF5YmUgdGhpcyBzaG91bGQgdXNlIHRoZSBmYWtlX25hbWVfZ2VuZXJhdG9yLlxyXG4gIGNvbnN0IG5hbWVzID0gW1xyXG4gICAgJ1RpbmkgUG91dGluaScsXHJcbiAgICAnUG90YXRvIENoaXBweScsXHJcbiAgICAnUGFwYXMgRnJpdGFzJyxcclxuICAgICdUYXRlciBUb3QnLFxyXG4gICAgJ0hhc2ggQnJvd24nLFxyXG4gICAgJ0ZyZW5jaCBGcnknLFxyXG4gIF07XHJcbiAgY29uc3QgdHlwZXM6IE9vcHN5TWlzdGFrZVR5cGVbXSA9IFsnZGVhdGgnLCAnZmFpbCcsICd3YXJuJywgJ3B1bGwnXTtcclxuXHJcbiAgLy8gVE9ETzogdGhpcyBzaG91bGQgcHJvYmFibHkgc3RhcnQvc3RvcCBjb21iYXQgdG9vIGZvciB0aGUgc3VtbWFyeSBwYWdlP1xyXG4gIGxldCBmYWtlVGltZXN0YW1wID0gMDtcclxuICBjb2xsZWN0b3IuU3RhcnRFbmNvdW50ZXIoZmFrZVRpbWVzdGFtcCk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1NaXN0YWtlczsgKytpKSB7XHJcbiAgICBmYWtlVGltZXN0YW1wICs9IDEwMDA7XHJcbiAgICBjb2xsZWN0b3IuT25NaXN0YWtlT2JqKGZha2VUaW1lc3RhbXAsIHtcclxuICAgICAgdHlwZTogdHlwZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdHlwZXMubGVuZ3RoKV0gPz8gJ2dvb2QnLFxyXG4gICAgICBibGFtZTogbmFtZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbmFtZXMubGVuZ3RoKV0sXHJcbiAgICAgIHRleHQ6ICdzdHVmZicsXHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBOb3RlOiBjaGFuZ2VzIHRvIHRoaXMgc2V0dXAgZnVuY3Rpb24gc2hvdWxkIGJlIHJlZmxlY3RlZCBpblxyXG4vLyBvb3BzeV92aWV3ZXIgYXMgd2VsbC5cclxuVXNlckNvbmZpZy5nZXRVc2VyQ29uZmlnTG9jYXRpb24oJ29vcHN5cmFpZHN5JywgZGVmYXVsdE9wdGlvbnMsICgpID0+IHtcclxuICBjb25zdCBvcHRpb25zID0geyAuLi5kZWZhdWx0T3B0aW9ucyB9O1xyXG5cclxuICBjb25zdCBtaXN0YWtlQ29sbGVjdG9yID0gbmV3IE1pc3Rha2VDb2xsZWN0b3Iob3B0aW9ucywgdHJ1ZSk7XHJcbiAgY29uc3Qgc3VtbWFyeUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VtbWFyeScpO1xyXG4gIGNvbnN0IGxpdmVMaXN0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaXZlbGlzdCcpO1xyXG5cclxuICAvLyBDaG9vc2UgdGhlIHVpIGJhc2VkIG9uIHdoZXRoZXIgdGhpcyBpcyB0aGUgc3VtbWFyeSB2aWV3IG9yIHRoZSBsaXZlIGxpc3QuXHJcbiAgLy8gVGhleSBoYXZlIGRpZmZlcmVudCBlbGVtZW50cyBpbiB0aGUgZmlsZS5cclxuICBpZiAoc3VtbWFyeUVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGxpc3RWaWV3ID0gbmV3IE9vcHN5U3VtbWFyeUxpc3Qob3B0aW9ucywgc3VtbWFyeUVsZW1lbnQpO1xyXG4gICAgbWlzdGFrZUNvbGxlY3Rvci5BZGRPYnNlcnZlcihsaXN0Vmlldyk7XHJcblxyXG4gICAgY29uc3QgdGFibGVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pc3Rha2UtdGFibGUnKTtcclxuICAgIGlmICghdGFibGVFbGVtZW50KVxyXG4gICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcbiAgICBjb25zdCB0YWJsZSA9IG5ldyBPb3BzeVN1bW1hcnlUYWJsZShvcHRpb25zLCB0YWJsZUVsZW1lbnQpO1xyXG4gICAgbWlzdGFrZUNvbGxlY3Rvci5BZGRPYnNlcnZlcih0YWJsZSk7XHJcbiAgfSBlbHNlIGlmIChsaXZlTGlzdEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGxpc3RWaWV3ID0gbmV3IE9vcHN5TGl2ZUxpc3Qob3B0aW9ucywgbGl2ZUxpc3RFbGVtZW50KTtcclxuICAgIG1pc3Rha2VDb2xsZWN0b3IuQWRkT2JzZXJ2ZXIobGlzdFZpZXcpO1xyXG4gICAgYWRkT3ZlcmxheUxpc3RlbmVyKFxyXG4gICAgICAnb25JbkNvbWJhdENoYW5nZWRFdmVudCcsXHJcbiAgICAgIChlKSA9PiBsaXN0Vmlldy5TZXRJbkNvbWJhdChlLmRldGFpbC5pbkdhbWVDb21iYXQpLFxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gTk9URTogYWRkIFwiZGVidWc9MVwiIHVybCBwYXJhbWV0ZXIgdG8gYWRkIGV4dHJhIGV2ZW50cy5cclxuICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gIGlmIChwYXJhbXMuZ2V0KCdkZWJ1ZycpKVxyXG4gICAgYWRkRGVidWdJbmZvKG1pc3Rha2VDb2xsZWN0b3IsIDIyMDApO1xyXG5cclxuICBjb25zdCBkYW1hZ2VUcmFja2VyID0gbmV3IERhbWFnZVRyYWNrZXIob3B0aW9ucywgbWlzdGFrZUNvbGxlY3Rvciwgb29wc3lGaWxlRGF0YSk7XHJcblxyXG4gIGFkZE92ZXJsYXlMaXN0ZW5lcignTG9nTGluZScsIChlKSA9PiBkYW1hZ2VUcmFja2VyLk9uTmV0TG9nKGUpKTtcclxuICBhZGRPdmVybGF5TGlzdGVuZXIoJ29uUGxheWVyQ2hhbmdlZEV2ZW50JywgKGUpID0+IGRhbWFnZVRyYWNrZXIuT25QbGF5ZXJDaGFuZ2UoZSkpO1xyXG4gIGFkZE92ZXJsYXlMaXN0ZW5lcignQ2hhbmdlWm9uZScsIChlKSA9PiBkYW1hZ2VUcmFja2VyLk9uQ2hhbmdlWm9uZShlKSk7XHJcbiAgYWRkT3ZlcmxheUxpc3RlbmVyKCdvbkluQ29tYmF0Q2hhbmdlZEV2ZW50JywgKGUpID0+IHtcclxuICAgIGRhbWFnZVRyYWNrZXIuT25JbkNvbWJhdENoYW5nZWRFdmVudChlKTtcclxuICB9KTtcclxuICBhZGRPdmVybGF5TGlzdGVuZXIoJ0Jyb2FkY2FzdE1lc3NhZ2UnLCAoZSkgPT4gbWlzdGFrZUNvbGxlY3Rvci5PbkJyb2FkY2FzdE1lc3NhZ2UoZSkpO1xyXG5cclxuICB2b2lkIGNhbGxPdmVybGF5SGFuZGxlcih7IGNhbGw6ICdjYWN0Ym90UmVxdWVzdFBsYXllclVwZGF0ZScgfSk7XHJcbn0pO1xyXG4iLCJpbXBvcnQgJy4vb29wc3lyYWlkc3knO1xyXG5cclxuaW1wb3J0ICcuL29vcHN5X2xpdmUuY3NzJztcclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDEzNzogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5PLmogPSAoY2h1bmtJZCkgPT4gKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9PT0gMCk7XG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0aWYoY2h1bmtJZHMuc29tZSgoaWQpID0+IChpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwKSkpIHtcblx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR9XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0fVxuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHJlc3VsdCk7XG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rY2FjdGJvdFwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtjYWN0Ym90XCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCIiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGRlcGVuZHMgb24gb3RoZXIgbG9hZGVkIGNodW5rcyBhbmQgZXhlY3V0aW9uIG5lZWQgdG8gYmUgZGVsYXllZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbNzI3XSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oODc1KSkpXG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIiwiIl0sIm5hbWVzIjpbInRhcmdldElzWW91IiwiZGF0YSIsIm1hdGNoZXMiLCJtZSIsInRhcmdldCIsInRhcmdldElzTm90WW91IiwiY2FyZXNBYm91dEFPRSIsInJvbGUiLCJDYW5BZGRsZSIsImpvYiIsImNhcmVzQWJvdXRNYWdpY2FsIiwiY2FyZXNBYm91dFBoeXNpY2FsIiwiQ2FuRmVpbnQiLCJsYW5ndWFnZXMiLCJsYW5nTWFwIiwiZW4iLCJkZSIsImZyIiwiamEiLCJjbiIsImtvIiwiaXNMYW5nIiwibGFuZyIsImxhbmdTdHJzIiwidW5kZWZpbmVkIiwiaW5jbHVkZXMiLCJsYW5nVG9Mb2NhbGUiLCJsYXRlc3RMb2dEZWZpbml0aW9ucyIsIkdhbWVMb2ciLCJ0eXBlIiwibmFtZSIsIm1lc3NhZ2VUeXBlIiwiZmllbGRzIiwidGltZXN0YW1wIiwiY29kZSIsImxpbmUiLCJzdWJGaWVsZHMiLCJjYW5Bbm9ueW1pemUiLCJmaXJzdE9wdGlvbmFsRmllbGQiLCJDaGFuZ2Vab25lIiwiaWQiLCJsYXN0SW5jbHVkZSIsIkNoYW5nZWRQbGF5ZXIiLCJwbGF5ZXJJZHMiLCJBZGRlZENvbWJhdGFudCIsImxldmVsIiwib3duZXJJZCIsIndvcmxkSWQiLCJ3b3JsZCIsIm5wY05hbWVJZCIsIm5wY0Jhc2VJZCIsImN1cnJlbnRIcCIsImhwIiwiY3VycmVudE1wIiwibXAiLCJ4IiwieSIsInoiLCJoZWFkaW5nIiwiUmVtb3ZlZENvbWJhdGFudCIsIm93bmVyIiwiUGFydHlMaXN0IiwicGFydHlDb3VudCIsImlkMCIsImlkMSIsImlkMiIsImlkMyIsImlkNCIsImlkNSIsImlkNiIsImlkNyIsImlkOCIsImlkOSIsImlkMTAiLCJpZDExIiwiaWQxMiIsImlkMTMiLCJpZDE0IiwiaWQxNSIsImlkMTYiLCJpZDE3IiwiaWQxOCIsImlkMTkiLCJpZDIwIiwiaWQyMSIsImlkMjIiLCJpZDIzIiwiUGxheWVyU3RhdHMiLCJzdHJlbmd0aCIsImRleHRlcml0eSIsInZpdGFsaXR5IiwiaW50ZWxsaWdlbmNlIiwibWluZCIsInBpZXR5IiwiYXR0YWNrUG93ZXIiLCJkaXJlY3RIaXQiLCJjcml0aWNhbEhpdCIsImF0dGFja01hZ2ljUG90ZW5jeSIsImhlYWxNYWdpY1BvdGVuY3kiLCJkZXRlcm1pbmF0aW9uIiwic2tpbGxTcGVlZCIsInNwZWxsU3BlZWQiLCJ0ZW5hY2l0eSIsImxvY2FsQ29udGVudElkIiwiU3RhcnRzVXNpbmciLCJzb3VyY2VJZCIsInNvdXJjZSIsImFiaWxpdHkiLCJ0YXJnZXRJZCIsImNhc3RUaW1lIiwiYmxhbmtGaWVsZHMiLCJBYmlsaXR5IiwiZmxhZ3MiLCJkYW1hZ2UiLCJ0YXJnZXRDdXJyZW50SHAiLCJ0YXJnZXRNYXhIcCIsInRhcmdldEN1cnJlbnRNcCIsInRhcmdldE1heE1wIiwidGFyZ2V0WCIsInRhcmdldFkiLCJ0YXJnZXRaIiwidGFyZ2V0SGVhZGluZyIsIm1heEhwIiwibWF4TXAiLCJzZXF1ZW5jZSIsInRhcmdldEluZGV4IiwidGFyZ2V0Q291bnQiLCJmaXJzdFVua25vd25GaWVsZCIsIk5ldHdvcmtBT0VBYmlsaXR5IiwiTmV0d29ya0NhbmNlbEFiaWxpdHkiLCJyZWFzb24iLCJOZXR3b3JrRG9UIiwid2hpY2giLCJlZmZlY3RJZCIsIldhc0RlZmVhdGVkIiwiR2FpbnNFZmZlY3QiLCJlZmZlY3QiLCJkdXJhdGlvbiIsImNvdW50Iiwic291cmNlTWF4SHAiLCJIZWFkTWFya2VyIiwiTmV0d29ya1JhaWRNYXJrZXIiLCJvcGVyYXRpb24iLCJ3YXltYXJrIiwiTmV0d29ya1RhcmdldE1hcmtlciIsInRhcmdldE5hbWUiLCJMb3Nlc0VmZmVjdCIsIk5ldHdvcmtHYXVnZSIsImRhdGEwIiwiZGF0YTEiLCJkYXRhMiIsImRhdGEzIiwiTmV0d29ya1dvcmxkIiwiaXNVbmtub3duIiwiQWN0b3JDb250cm9sIiwiaW5zdGFuY2UiLCJjb21tYW5kIiwiTmFtZVRvZ2dsZSIsInRvZ2dsZSIsIlRldGhlciIsIkxpbWl0QnJlYWsiLCJ2YWx1ZUhleCIsImJhcnMiLCJOZXR3b3JrRWZmZWN0UmVzdWx0Iiwic2VxdWVuY2VJZCIsIlN0YXR1c0VmZmVjdCIsImpvYkxldmVsRGF0YSIsImRhdGE0IiwiZGF0YTUiLCJOZXR3b3JrVXBkYXRlSFAiLCJNYXAiLCJyZWdpb25OYW1lIiwicGxhY2VOYW1lIiwicGxhY2VOYW1lU3ViIiwiU3lzdGVtTG9nTWVzc2FnZSIsInBhcmFtMCIsInBhcmFtMSIsInBhcmFtMiIsIlN0YXR1c0xpc3QzIiwiUGFyc2VySW5mbyIsImdsb2JhbEluY2x1ZGUiLCJQcm9jZXNzSW5mbyIsIkRlYnVnIiwiUGFja2V0RHVtcCIsIlZlcnNpb24iLCJFcnJvciIsIk5vbmUiLCJsb2dEZWZpbml0aW9uc1ZlcnNpb25zIiwiYXNzZXJ0TG9nRGVmaW5pdGlvbnMiLCJjb25zb2xlIiwiYXNzZXJ0IiwiUmVnZXhlcyIsInNlcGFyYXRvciIsIm1hdGNoRGVmYXVsdCIsIm1hZ2ljVHJhbnNsYXRpb25TdHJpbmciLCJtYWdpY1N0cmluZ1JlZ2V4Iiwia2V5c1RoYXRSZXF1aXJlVHJhbnNsYXRpb24iLCJkZWZhdWx0UGFyYW1zIiwidmVyc2lvbiIsImluY2x1ZGUiLCJPYmplY3QiLCJrZXlzIiwicGFyYW1zIiwicHJvcCIsImluZGV4IiwiZW50cmllcyIsInBhcmFtIiwiZmllbGQiLCJvcHRpb25hbCIsInZhbHVlIiwicGFyc2VIZWxwZXIiLCJmdW5jTmFtZSIsInZhbGlkRmllbGRzIiwicHVzaCIsInZhbGlkYXRlUGFyYW1zIiwiY2FwdHVyZSIsInRydWVJZlVuZGVmaW5lZCIsImZpZWxkS2V5cyIsInNvcnQiLCJhIiwiYiIsInBhcnNlSW50IiwibWF4S2V5U3RyIiwia2V5IiwidG1wS2V5IiwicG9wIiwibGVuZ3RoIiwiZmllbGROYW1lIiwibWF4S2V5IiwidHJhbnNQYXJhbXMiLCJmaWx0ZXIiLCJrIiwibmVlZHNUcmFuc2xhdGlvbnMiLCJOZXRSZWdleGVzIiwiZmxhZ1RyYW5zbGF0aW9uc05lZWRlZCIsInN0ciIsImxhc3RLZXkiLCJrZXlTdHIiLCJtaXNzaW5nRmllbGRzIiwiSlNPTiIsInN0cmluZ2lmeSIsImZpZWxkVmFsdWUiLCJ0b1N0cmluZyIsIm1heWJlQ2FwdHVyZSIsInBhcnNlIiwibG9nVmVyc2lvbiIsInNldEZsYWdUcmFuc2xhdGlvbnNOZWVkZWQiLCJkb2VzTmV0UmVnZXhOZWVkVHJhbnNsYXRpb24iLCJyZWdleCIsImV4ZWMiLCJzdGFydHNVc2luZyIsImFiaWxpdHlGdWxsIiwiaGVhZE1hcmtlciIsImFkZGVkQ29tYmF0YW50IiwiYWRkZWRDb21iYXRhbnRGdWxsIiwicmVtb3ZpbmdDb21iYXRhbnQiLCJnYWluc0VmZmVjdCIsInN0YXR1c0VmZmVjdEV4cGxpY2l0IiwibG9zZXNFZmZlY3QiLCJ0ZXRoZXIiLCJ3YXNEZWZlYXRlZCIsImVjaG8iLCJnYW1lTG9nIiwiZGlhbG9nIiwibWVzc2FnZSIsImdhbWVOYW1lTG9nIiwic3RhdENoYW5nZSIsImNoYW5nZVpvbmUiLCJuZXR3b3JrNmQiLCJuYW1lVG9nZ2xlIiwibWFwIiwic3lzdGVtTG9nTWVzc2FnZSIsIlVucmVhY2hhYmxlQ29kZSIsImNvbnN0cnVjdG9yIiwibnVtYmVyVG9PdXRwdXRTdHJpbmciLCJuIiwiYW9lIiwiYmlnQW9lIiwidGFua0J1c3RlciIsIm1pbmlCdXN0ZXIiLCJ0YW5rQnVzdGVyT25QbGF5ZXIiLCJ0YW5rQnVzdGVyT25Zb3UiLCJ0YW5rQnVzdGVycyIsInRhbmtDbGVhdmUiLCJhdm9pZFRhbmtDbGVhdmUiLCJ0YW5rQ2xlYXZlT25Zb3UiLCJzaGFyZWRUYW5rYnVzdGVyIiwic2hhcmVkVGFua2J1c3Rlck9uWW91Iiwic2hhcmVkVGFua2J1c3Rlck9uUGxheWVyIiwidGFua1N3YXAiLCJzcHJlYWQiLCJzdGFja01hcmtlciIsImdldFRvZ2V0aGVyIiwic3RhY2tPbllvdSIsInN0YWNrT25QbGF5ZXIiLCJzdGFja01pZGRsZSIsImRvcml0b1N0YWNrIiwic3ByZWFkVGhlblN0YWNrIiwic3RhY2tUaGVuU3ByZWFkIiwiZHJhd0luIiwia25vY2tiYWNrIiwia25vY2tiYWNrT25Zb3UiLCJrbm9ja2JhY2tPblBsYXllciIsImxvb2tUb3dhcmRzQm9zcyIsImxvb2tBd2F5IiwibG9va0F3YXlGcm9tUGxheWVyIiwibG9va0F3YXlGcm9tVGFyZ2V0IiwiZ2V0QmVoaW5kIiwiZ29Gcm9udE9yU2lkZXMiLCJnb0Zyb250IiwiZ2V0VW5kZXIiLCJpbiIsIm91dCIsIm91dE9mTWVsZWUiLCJpblRoZW5PdXQiLCJvdXRUaGVuSW4iLCJiYWNrVGhlbkZyb250IiwiZnJvbnRUaGVuQmFjayIsImdvSW50b01pZGRsZSIsInJpZ2h0IiwibGVmdCIsImdldExlZnRBbmRXZXN0IiwiZ2V0UmlnaHRBbmRFYXN0IiwiZ29Gcm9udEJhY2siLCJzaWRlcyIsIm1pZGRsZSIsImtpbGxBZGRzIiwia2lsbEV4dHJhQWRkIiwiYXdheUZyb21Gcm9udCIsInNsZWVwVGFyZ2V0Iiwic3R1blRhcmdldCIsImludGVycnVwdFRhcmdldCIsInByZXlPbllvdSIsInByZXlPblBsYXllciIsImF3YXlGcm9tR3JvdXAiLCJhd2F5RnJvbVBsYXllciIsIm1ldGVvck9uWW91Iiwic3RvcE1vdmluZyIsInN0b3BFdmVyeXRoaW5nIiwibW92ZUF3YXkiLCJtb3ZlQXJvdW5kIiwiYnJlYWtDaGFpbnMiLCJtb3ZlQ2hhaW5zVG9nZXRoZXIiLCJlYXJ0aHNoYWtlck9uWW91Iiwid2FrZVVwIiwiY2xvc2VUZXRoZXJzV2l0aFBsYXllciIsImZhclRldGhlcnNXaXRoUGxheWVyIiwidW5rbm93biIsIm5vcnRoIiwic291dGgiLCJlYXN0Iiwid2VzdCIsIm5vcnRod2VzdCIsIm5vcnRoZWFzdCIsInNvdXRod2VzdCIsInNvdXRoZWFzdCIsImRpck4iLCJkaXJTIiwiZGlyRSIsImRpclciLCJkaXJOVyIsImRpck5FIiwiZGlyU1ciLCJkaXJTRSIsIm51bTAiLCJudW0xIiwibnVtMiIsIm51bTMiLCJudW00IiwibnVtNSIsIm51bTYiLCJudW03IiwibnVtOCIsIm51bTkiLCJpbml0ZWQiLCJ3c1VybCIsIndzIiwicXVldWUiLCJyc2VxQ291bnRlciIsInJlc3BvbnNlUHJvbWlzZXMiLCJzdWJzY3JpYmVycyIsInNlbmRNZXNzYWdlIiwibXNnIiwiY2IiLCJzZW5kIiwid2luZG93IiwiT3ZlcmxheVBsdWdpbkFwaSIsImNhbGxIYW5kbGVyIiwicHJvY2Vzc0V2ZW50IiwiaW5pdCIsInN1YnMiLCJmb3JFYWNoIiwic3ViIiwiZSIsImVycm9yIiwiZGlzcGF0Y2hPdmVybGF5RXZlbnQiLCJhZGRPdmVybGF5TGlzdGVuZXIiLCJldmVudCIsImNhbGwiLCJldmVudHMiLCJyZW1vdmVPdmVybGF5TGlzdGVuZXIiLCJsaXN0IiwicG9zIiwiaW5kZXhPZiIsInNwbGljZSIsImNhbGxPdmVybGF5SGFuZGxlckludGVybmFsIiwiX21zZyIsInJzZXEiLCJwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwYXJzZWQiLCJjYWxsT3ZlcmxheUhhbmRsZXJPdmVycmlkZU1hcCIsImNhbGxPdmVybGF5SGFuZGxlciIsImNhbGxGdW5jIiwic2V0T3ZlcmxheUhhbmRsZXJPdmVycmlkZSIsIm92ZXJyaWRlIiwiVVJMU2VhcmNoUGFyYW1zIiwibG9jYXRpb24iLCJzZWFyY2giLCJnZXQiLCJjb25uZWN0V3MiLCJXZWJTb2NrZXQiLCJhZGRFdmVudExpc3RlbmVyIiwibG9nIiwicSIsIkFycmF5IiwiaXNBcnJheSIsInByb21pc2VGdW5jcyIsInNldFRpbWVvdXQiLCJ3YWl0Rm9yQXBpIiwicmVhZHkiLCJfX092ZXJsYXlDYWxsYmFjayIsIml0ZW0iLCJsb2dEZWZpbml0aW9ucyIsIm1hdGNoV2l0aENvbG9uc0RlZmF1bHQiLCJmaWVsZHNXaXRoUG90ZW50aWFsQ29sb25zIiwiZGVmS2V5IiwiYWJpbGl0eU1lc3NhZ2VUeXBlIiwiYWJpbGl0eUhleENvZGUiLCJwcmVmaXgiLCJoZXhDb2RlIiwic2xpY2UiLCJ0b1VwcGVyQ2FzZSIsImZpZWxkRGVmYXVsdCIsImRlZmF1bHRWYWx1ZSIsImFueU9mIiwibmFtZWRDYXB0dXJlIiwiYXJncyIsImFueU9mQXJyYXkiLCJhcnJheSIsImVsZW0iLCJSZWdFeHAiLCJqb2luIiwicmVnZXhwU3RyaW5nIiwia0NhY3Rib3RDYXRlZ29yaWVzIiwiVGltZXN0YW1wIiwiTmV0VGltZXN0YW1wIiwiTmV0RmllbGQiLCJMb2dUeXBlIiwiQWJpbGl0eUNvZGUiLCJPYmplY3RJZCIsIk5hbWUiLCJGbG9hdCIsIm1vZGlmaWVycyIsImdsb2JhbCIsIm11bHRpbGluZSIsInJlcGxhY2UiLCJtYXRjaCIsImdyb3VwIiwicGFyc2VHbG9iYWwiLCJmIiwiT3V0cHV0cyIsInNldmVyaXR5TGlzdCIsImJ1aWx0SW5SZXNwb25zZVN0ciIsInRyaWdnZXJGdW5jdGlvbnMiLCJ0cmlnZ2VyVGV4dE91dHB1dEZ1bmN0aW9ucyIsInRyaWdnZXJPdXRwdXRGdW5jdGlvbnMiLCJzZXZlcml0eU1hcCIsImdldFRleHQiLCJzZXYiLCJkZWZhdWx0SW5mb1RleHQiLCJkZWZhdWx0QWxlcnRUZXh0IiwiZGVmYXVsdEFsYXJtVGV4dCIsImdldFRhcmdldCIsImdldFNvdXJjZSIsImNvbWJpbmVGdW5jcyIsInRleHQxIiwiZnVuYzEiLCJ0ZXh0MiIsImZ1bmMyIiwib2JqIiwib3V0cHV0IiwiaXNQbGF5ZXJJZCIsInN0YXRpY1Jlc3BvbnNlIiwidGV4dCIsIl9kYXRhIiwiX21hdGNoZXMiLCJyZXNwb25zZU91dHB1dFN0cmluZ3MiLCJSZXNwb25zZXMiLCJ0YXJnZXRTZXYiLCJvdGhlclNldiIsIm91dHB1dFN0cmluZ3MiLCJub1RhcmdldCIsImJ1c3Rlck9uWW91IiwiYnVzdGVyT25UYXJnZXQiLCJ0YXJnZXRGdW5jIiwib3RoZXJGdW5jIiwicGxheWVyIiwiU2hvcnROYW1lIiwiY29tYmluZWQiLCJ0YW5rQnVzdGVyU3dhcCIsImJ1c3RlclNldiIsInN3YXBTZXYiLCJ0YW5rU3dhcEZ1bmMiLCJidXN0ZXJGdW5jIiwiY2xlYXZlT25Zb3UiLCJjbGVhdmVOb1RhcmdldCIsImF2b2lkQ2xlYXZlIiwic2hhcmVkVGFua0J1c3RlciIsInNoYXJlZFRhbmtidXN0ZXJPblRhcmdldCIsInN0YWNrTWFya2VyT24iLCJzdGFja09uVGFyZ2V0Iiwia25vY2tiYWNrT24iLCJrbm9ja2JhY2tPblRhcmdldCIsImxvb2tUb3dhcmRzIiwibG9va0F3YXlGcm9tIiwibG9va0F3YXlGcm9tU291cmNlIiwiZ2V0SW4iLCJnZXRPdXQiLCJnZXRJblRoZW5PdXQiLCJnZXRPdXRUaGVuSW4iLCJnZXRCYWNrVGhlbkZyb250IiwiZ2V0RnJvbnRUaGVuQmFjayIsImdvTWlkZGxlIiwiZ29SaWdodCIsImdvTGVmdCIsImdvV2VzdCIsImdvRWFzdCIsImdvU2lkZXMiLCJzbGVlcCIsInN0dW5PckludGVycnVwdElmUG9zc2libGUiLCJzdHVuIiwiaW50ZXJydXB0IiwiQ2FuU2lsZW5jZSIsIkNhblN0dW4iLCJwcmV5T24iLCJwcmV5T25UYXJnZXQiLCJhd2F5RnJvbSIsImF3YXlGcm9tVGFyZ2V0IiwiZWFydGhzaGFrZXIiLCJyZXNwb25zZU1hcFR5cGVBc3NlcnRpb24iLCJfQ29uZGl0aW9ucyIsIkNvbmRpdGlvbnMiLCJfQ29udGVudFR5cGUiLCJDb250ZW50VHlwZSIsIl9OZXRSZWdleGVzIiwiX1JlZ2V4ZXMiLCJfUmVzcG9uc2VzIiwiX091dHB1dHMiLCJfVXRpbCIsIlV0aWwiLCJfWm9uZUlkIiwiWm9uZUlkIiwiX1pvbmVJbmZvIiwiWm9uZUluZm8iLCJVc2VyQ29uZmlnIiwib3B0aW9uVGVtcGxhdGVzIiwidXNlckZpbGVDYWxsYmFja3MiLCJzYXZlZENvbmZpZyIsImdldERlZmF1bHRCYXNlT3B0aW9ucyIsIlBhcnNlckxhbmd1YWdlIiwiU2hvcnRMb2NhbGUiLCJEaXNwbGF5TGFuZ3VhZ2UiLCJUZXh0QWxlcnRzRW5hYmxlZCIsIlNvdW5kQWxlcnRzRW5hYmxlZCIsIlNwb2tlbkFsZXJ0c0VuYWJsZWQiLCJHcm91cFNwb2tlbkFsZXJ0c0VuYWJsZWQiLCJTeXN0ZW1JbmZvIiwiY2FjdGJvdFZlcnNpb24iLCJvdmVybGF5UGx1Z2luVmVyc2lvbiIsImZmeGl2UGx1Z2luVmVyc2lvbiIsImFjdFZlcnNpb24iLCJnYW1lUmVnaW9uIiwiZXZhbFVzZXJGaWxlIiwiY29udGVudCIsIm9wdGlvbnMiLCJPcHRpb25zIiwiZXZhbCIsInJlZ2lzdGVyT3B0aW9ucyIsIm92ZXJsYXlOYW1lIiwib3B0aW9uVGVtcGxhdGUiLCJ1c2VyRmlsZUNhbGxiYWNrIiwic29ydFVzZXJGaWxlcyIsInNwbGl0S2V5TWFwIiwic3BsaXQiLCJrZXlBIiwia2V5QiIsImxpc3RBIiwibGlzdEIiLCJtYXhMZW4iLCJNYXRoIiwibWF4IiwiaWR4IiwiZW50cnlBIiwiZW50cnlCIiwiaXNMYXN0QSIsImlzTGFzdEIiLCJmaWxlQSIsImZpbGVCIiwiZmlsZW5hbWVPbmx5RGlmZiIsImxvY2FsZUNvbXBhcmUiLCJkaWZmIiwiZmlsdGVyVXNlckZpbGVzIiwicGF0aHMiLCJvcmlnT3ZlcmxheU5hbWUiLCJvcmlnRXh0ZW5zaW9uIiwiZXh0ZW5zaW9uIiwidG9Mb3dlckNhc2UiLCJvcmlnUGF0aCIsInBhdGgiLCJlbmRzV2l0aCIsInN0YXJ0c1dpdGgiLCJnZXRVc2VyQ29uZmlnTG9jYXRpb24iLCJjYWxsYmFjayIsImN1cnJlbnRseVJlbG9hZGluZyIsInJlbG9hZE9uY2UiLCJyZWxvYWQiLCJsb2FkVXNlckZpbGVzIiwicmVhZE9wdGlvbnMiLCJvdmVybGF5IiwibG9hZFVzZXIiLCJiYXNlUGF0aCIsImRldGFpbCIsInVzZXJMb2NhdGlvbiIsImxvY2FsRmlsZXMiLCJsb2NhbFVzZXJGaWxlcyIsImxhbmd1YWdlIiwicGFyc2VyTGFuZ3VhZ2UiLCJMYW5ndWFnZSIsInN5c3RlbUxvY2FsZSIsIlN5c3RlbUxvY2FsZSIsInNob3J0TG9jYWxlIiwic3Vic3RyaW5nIiwiZGlzcGxheUxhbmciLCJkaXNwbGF5TGFuZ3VhZ2UiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImFkZFVubG9ja1RleHQiLCJwcm9jZXNzT3B0aW9ucyIsImRlYnVnIiwicHJpbnRVc2VyRmlsZSIsIndhcm5PblZhcmlhYmxlUmVzZXRNYXAiLCJyYWlkYm9zcyIsInZhcmlhYmxlVHJhY2tlciIsInNvcnRlZEZpbGVzIiwianNGaWxlcyIsImNzc0ZpbGVzIiwianNGaWxlIiwiU2tpbiIsImhhbmRsZVNraW4iLCJjc3NGaWxlIiwidXNlckNzc1RleHQiLCJjcmVhdGVFbGVtZW50IiwiY29udGVudHMiLCJpbm5lclRleHQiLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhcHBlbmRDaGlsZCIsImhyZWYiLCJ0aGVuIiwicmVhZHlTdGF0ZSIsInNraW5OYW1lIiwic2xhc2hJZHgiLCJsYXN0SW5kZXhPZiIsInN1YnN0ciIsInNraW5IcmVmIiwiYXBwZW5kQ1NTTGluayIsImFwcGVuZEpTTGluayIsInNyYyIsInVzZXJKUyIsInNldEF0dHJpYnV0ZSIsInVzZXJDU1MiLCJ0ZW1wbGF0ZSIsInRlbXBsYXRlT3B0aW9ucyIsIm9wdCIsImRlZmF1bHQiLCJuZXdWYWx1ZSIsInNldHRlckZ1bmMiLCJmbG9vciIsInBhcnNlRmxvYXQiLCJwcm9jZXNzRXh0cmFPcHRpb25zIiwidW5sb2NrVGV4dCIsInRleHRFbGVtIiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJib2R5IiwiYXBwZW5kIiwiaW5uZXJIVE1MIiwiZG9jQ2xhc3NMaXN0IiwiaXNMb2NrZWQiLCJyZW1vdmUiLCJuYW1lVG9Kb2JFbnVtIiwiTk9ORSIsIkdMQSIsIlBHTCIsIk1SRCIsIkxOQyIsIkFSQyIsIkNOSiIsIlRITSIsIkNSUCIsIkJTTSIsIkFSTSIsIkdTTSIsIkxUVyIsIldWUiIsIkFMQyIsIkNVTCIsIk1JTiIsIkJUTiIsIkZTSCIsIlBMRCIsIk1OSyIsIldBUiIsIkRSRyIsIkJSRCIsIldITSIsIkJMTSIsIkFDTiIsIlNNTiIsIlNDSCIsIlJPRyIsIk5JTiIsIk1DSCIsIkRSSyIsIkFTVCIsIlNBTSIsIlJETSIsIkJMVSIsIkdOQiIsIkROQyIsIlJQUiIsIlNHRSIsImFsbEpvYnMiLCJhbGxSb2xlcyIsInRhbmtKb2JzIiwiaGVhbGVySm9icyIsIm1lbGVlRHBzSm9icyIsInJhbmdlZERwc0pvYnMiLCJjYXN0ZXJEcHNKb2JzIiwiZHBzSm9icyIsImNyYWZ0aW5nSm9icyIsImdhdGhlcmluZ0pvYnMiLCJzdHVuSm9icyIsInNpbGVuY2VKb2JzIiwic2xlZXBKb2JzIiwiZmVpbnRKb2JzIiwiYWRkbGVKb2JzIiwiY2xlYW5zZUpvYnMiLCJqb2JUb1JvbGVNYXAiLCJhZGRUb01hcCIsImpvYnMiLCJzZXQiLCJ3YXRjaENvbWJhdGFudE1hcCIsInNob3VsZENhbmNlbFdhdGNoIiwiZW50cnkiLCJjYW5jZWwiLCJtYXhEdXJhdGlvbiIsIkRhdGUiLCJub3ciLCJzdGFydCIsImRlZmF1bHRXYXRjaENvbWJhdGFudCIsImZ1bmMiLCJyZXMiLCJyZWoiLCJkZWxheSIsImlkcyIsIm5hbWVzIiwicHJvcHMiLCJjaGVja0Z1bmMiLCJyZXNwb25zZSIsIndhdGNoQ29tYmF0YW50T3ZlcnJpZGUiLCJjbGVhckNvbWJhdGFudHNPdmVycmlkZSIsImRlZmF1bHRDbGVhckNvbWJhdGFudHMiLCJ3YXRjaCIsIndhdGNoQ29tYmF0YW50Iiwiam9iRW51bVRvSm9iIiwiZmluZCIsImpvYlRvSm9iRW51bSIsImpvYlRvUm9sZSIsImdldEFsbFJvbGVzIiwiaXNUYW5rSm9iIiwiaXNIZWFsZXJKb2IiLCJpc01lbGVlRHBzSm9iIiwiaXNSYW5nZWREcHNKb2IiLCJpc0Nhc3RlckRwc0pvYiIsImlzRHBzSm9iIiwiaXNDcmFmdGluZ0pvYiIsImlzR2F0aGVyaW5nSm9iIiwiaXNDb21iYXRKb2IiLCJjYW5TdHVuIiwiY2FuU2lsZW5jZSIsImNhblNsZWVwIiwiY2FuQ2xlYW5zZSIsImNhbkZlaW50IiwiY2FuQWRkbGUiLCJjbGVhcldhdGNoQ29tYmF0YW50cyIsInNldFdhdGNoQ29tYmF0YW50T3ZlcnJpZGUiLCJ3YXRjaEZ1bmMiLCJjbGVhckZ1bmMiLCJrRmllbGRGbGFncyIsImtGaWVsZERhbWFnZSIsImtTaGlmdEZsYWdWYWx1ZXMiLCJrRmxhZ0luc3RhbnREZWF0aCIsImtBdHRhY2tGbGFncyIsImtIZWFsRmxhZ3MiLCJkYW1hZ2VGaWVsZHMiLCJwbGF5ZXJEYW1hZ2VGaWVsZHMiLCJTaG9ydE5hbWlmeSIsInBsYXllck5pY2tzIiwibmljayIsIlRyYW5zbGF0ZSIsIkdldEZvcm1hdHRlZFRpbWUiLCJiYXNlVGltZSIsInRpbWUiLCJ0b3RhbFNlY29uZHMiLCJzZWNvbmRzIiwibWludXRlcyIsIlVuc2NyYW1ibGVEYW1hZ2UiLCJsZW4iLCJyaWdodERhbWFnZSIsIklzUGxheWVySWQiLCJmaXJzdENoYXIiLCJJc1RyaWdnZXJFbmFibGVkIiwiRGlzYWJsZWRUcmlnZ2VycyIsImF1dG9Db25maWciLCJQZXJUcmlnZ2VyQXV0b0NvbmZpZyIsImVuYWJsZWQiLCJHZXRTb2xvTWlzdGFrZVRleHQiLCJHZXRTaGFyZU1pc3Rha2VUZXh0IiwibnVtVGFyZ2V0cyIsInN5bmNLZXlzIiwic2VhbCIsInVuc2VhbCIsImVuZ2FnZSIsInRleHRLZXlzIiwiRSIsIk4iLCJTIiwiVyIsIk5FIiwiTlciLCJTRSIsIlNXIiwiVGFuayIsIkhlYWxlciIsIkRQUyIsIk51bWJlciIsImNvbW1vblJlcGxhY2VtZW50IiwicmVwbGFjZVN5bmMiLCJyZXBsYWNlVGV4dCIsInBhcnRpYWxDb21tb25UaW1lbGluZVJlcGxhY2VtZW50S2V5cyIsInBhcnRpYWxDb21tb25UcmlnZ2VyUmVwbGFjZW1lbnRLZXlzIiwibG9jYWxlTGluZXMiLCJjb3VudGRvd25TdGFydCIsImNvdW50ZG93bkVuZ2FnZSIsImNvdW50ZG93bkNhbmNlbCIsImFyZWFTZWFsIiwiYXJlYVVuc2VhbCIsImNyYWZ0aW5nU3RhcnQiLCJ0cmlhbENyYWZ0aW5nU3RhcnQiLCJjcmFmdGluZ0ZpbmlzaCIsInRyaWFsQ3JhZnRpbmdGaW5pc2giLCJjcmFmdGluZ0ZhaWwiLCJ0cmlhbENyYWZ0aW5nRmFpbCIsImNyYWZ0aW5nQ2FuY2VsIiwidHJpYWxDcmFmdGluZ0NhbmNlbCIsIlJlZ2V4U2V0IiwibG9jYWxlUmVnZXgiLCJyZWdleGVzIiwiYnVpbGRMb2NhbGVSZWdleGVzIiwicyIsImxvY2FsZU5ldFJlZ2V4IiwibmV0UmVnZXhlcyIsImxvY2FsZXMiLCJidWlsZGVyIiwiZnJvbUVudHJpZXMiLCJsaW5lcyIsImJ1aWxkTG9jYWxlUmVnZXgiLCJyZWdleEVuIiwicmVnZXhTZXQiLCJMb2NhbGVSZWdleCIsIkxvY2FsZU5ldFJlZ2V4IiwidHJhbnNsYXRlV2l0aFJlcGxhY2VtZW50cyIsInJlcGxhY2VLZXkiLCJyZXBsYWNlTGFuZyIsInJlcGxhY2VtZW50cyIsImlzR2xvYmFsIiwid2FzVHJhbnNsYXRlZCIsInIiLCJsb2NhbGUiLCJyZXBzIiwicmVwbGFjZW1lbnQiLCJyZXBsIiwicGFydGlhbEtleXMiLCJpc1BhcnRpYWwiLCJwYXJ0aWFsS2V5IiwidGVzdCIsInRyYW5zbGF0ZVJlZ2V4IiwidHJhbnNsYXRlVGV4dCIsIkNvbWJhdFN0YXRlIiwiZGFtYWdlVHJhY2tlciIsIlJlc2V0Iiwic3RhcnRUaW1lIiwic3RvcFRpbWUiLCJTdGFydENvbWJhdCIsImtNaW5pbXVtU2Vjb25kc0FmdGVyV2lwZSIsIk9uU3RhcnRFbmNvdW50ZXIiLCJTdG9wQ29tYmF0IiwiT25TdG9wRW5jb3VudGVyIiwiZW1wdHlSb2xlVG9QYXJ0eU5hbWVzIiwidGFuayIsImhlYWxlciIsImRwcyIsImNyYWZ0ZXIiLCJnYXRoZXJlciIsIm5vbmUiLCJQYXJ0eVRyYWNrZXIiLCJkZXRhaWxzIiwicGFydHlOYW1lc18iLCJwYXJ0eUlkc18iLCJhbGxpYW5jZU5hbWVzXyIsImFsbGlhbmNlSWRzXyIsIm5hbWVUb1JvbGVfIiwiaWRUb05hbWVfIiwicm9sZVRvUGFydHlOYW1lc18iLCJvblBhcnR5Q2hhbmdlZCIsInJlc2V0IiwicGFydHkiLCJqb2JOYW1lIiwiaW5QYXJ0eSIsInBhcnR5TmFtZXMiLCJwYXJ0eUlkcyIsImFsbGlhbmNlTmFtZXMiLCJ0YW5rTmFtZXMiLCJoZWFsZXJOYW1lcyIsImRwc05hbWVzIiwiaXNSb2xlIiwiaXNUYW5rIiwiaXNIZWFsZXIiLCJpc0RQUyIsImluQWxsaWFuY2UiLCJvdGhlclRhbmsiLCJvdGhlckhlYWxlciIsInBhcnR5SW5kZXgiLCJuYW1lRnJvbUlkIiwibWlzc2VkRWZmZWN0QnVmZk1hcCIsImNvbGxlY3RTZWNvbmRzIiwiaWdub3JlU2VsZiIsIm1pc3NlZEFiaWxpdHlCdWZmTWFwIiwiYWJpbGl0eUlkIiwiZ2VuZXJhdGVCdWZmVHJpZ2dlcklkcyIsImJ1ZmZzIiwiYnVmZiIsInByb2Nlc3NBYmlsaXR5TGluZSIsInNwbGl0TGluZSIsImZsYWdJZHgiLCJhbW91bnQiLCJsb3dCeXRlIiwiaXNIZWFsIiwiaXNBdHRhY2siLCJEZWF0aFJlcG9ydCIsImJhc2VUaW1lc3RhbXAiLCJkZWF0aFRpbWVzdGFtcCIsImdlbmVyYXRlTWlzdGFrZSIsImkiLCJyZXBvcnQiLCJhYmlsaXR5TmFtZSIsIm1ha2VSZWxhdGl2ZVRpbWVTdHJpbmciLCJiYXNlIiwiZGVsdGFNcyIsImRlbHRhVG90YWxTZWNvbmRzIiwicm91bmQiLCJhYnMiLCJkZWx0YVNlY29uZHMiLCJkZWx0YU1pbnV0ZXMiLCJwYXJzZVJlcG9ydExpbmVzIiwicGFyc2VkUmVwb3J0TGluZXMiLCJsYXN0Q2VydGFpbkhwIiwiZGVhdGhSZWFzb25JZHgiLCJwcm9jZXNzQWJpbGl0eSIsInByb2Nlc3NIb1REb1QiLCJwcm9jZXNzTWlzc2VkQnVmZiIsInByb2Nlc3NNaXN0YWtlIiwicHJvY2Vzc0RlYXRoUmVhc29uIiwiaWNvbiIsInByb2Nlc3NHYWluc0VmZmVjdCIsImVmZmVjdE5hbWUiLCJ0aW1lc3RhbXBTdHIiLCJwcm9jZXNzTG9zZXNFZmZlY3QiLCJhbW91bnRDbGFzcyIsImFtb3VudFN0ciIsImN1cnJlbnRIcFN0ciIsIm1pc3Rha2UiLCJtaXN0YWtlVGV4dCIsImJ1ZmZOYW1lIiwic291cmNlTmFtZSIsIm1pc3Rha2VFdmVudCIsInRyaWdnZXJUeXBlIiwiZGVmYXVsdENvbGxlY3RTZWNvbmRzIiwiTWlzc2VkQnVmZkNvbGxlY3RvciIsInJlcXVlc3RUaW1lc3RhbXBDYWxsYmFjayIsImNvbGxlY3RlZEJ1ZmZDYWxsYmFjayIsIkV4cGlyZUJ1ZmZzSWZOZWVkZWQiLCJidWZmTGlzdCIsInZhbHVlcyIsImJ1ZmZJZCIsImNvbGxlY3RlZEJ1ZmYiLCJleHBpcmVDYWxsYmFjayIsIk9uQWJpbGl0eUJ1ZmYiLCJPbkJ1ZmYiLCJnZXRUaW1lIiwiT25FZmZlY3RCdWZmIiwiZXhwaXJlZEJ1ZmYiLCJleHBpcmVUaW1lc3RhbXAiLCJ0YXJnZXRJZHMiLCJlbXB0eUlkIiwidGltZXN0YW1wRmllbGRJZHgiLCJyYWlzZUVmZmVjdElkIiwiZ2V0VGltZXN0YW1wIiwidGltZXN0YW1wRmllbGQiLCJQbGF5ZXJTdGF0ZVRyYWNrZXIiLCJ0cmlnZ2VyU2V0cyIsIlNldCIsImRlYWRJZHMiLCJpZFRvUGFydHlJbmZvIiwicGV0SWRUb093bmVySWQiLCJhYmlsaXR5SWRUb0J1ZmYiLCJlZmZlY3RJZFRvQnVmZiIsInRyYWNrZWRFdmVudHMiLCJ0cmFja2VkRWZmZWN0TWFwIiwiZXZlbnRXaW5kb3dNcyIsImNsZWFudXBXaW5kb3dNcyIsIm1pc3Rha2VEYW1hZ2VNYXAiLCJtaXN0YWtlU2hhcmVNYXAiLCJtaXN0YWtlU29sb01hcCIsImNvbGxlY3RvciIsInBhcnR5VHJhY2tlciIsIm1pc3NlZEJ1ZmZDb2xsZWN0b3IiLCJPbkJ1ZmZDb2xsZWN0ZWQiLCJPblBhcnR5Q2hhbmdlZCIsIlN0YXJ0RW5jb3VudGVyIiwiX3RpbWVzdGFtcCIsIlB1c2hUcmlnZ2VyU2V0IiwiZGFtYWdlV2FybiIsImRhbWFnZUZhaWwiLCJzaGFyZVdhcm4iLCJzaGFyZUZhaWwiLCJzb2xvV2FybiIsInNvbG9GYWlsIiwiQ2xlYXJUcmlnZ2VyU2V0cyIsImFyciIsIm15UGxheWVySWQiLCJjbGVhciIsIk9uQ2hhbmdlWm9uZSIsInpvbmVOYW1lIiwiem9uZUlkIiwiT25BZGRlZENvbWJhdGFudCIsIl9saW5lIiwid29ybGRJZFN0ciIsImpvYlN0ciIsInBldElkIiwiT25QYXJ0eUxpc3QiLCJpc05hTiIsIk9uQ2hhbmdlZFBsYXllciIsIlNldFBsYXllcklkIiwiSXNJblBhcnR5IiwiaGFzIiwiSXNQbGF5ZXJJblBhcnR5IiwiT25BYmlsaXR5IiwidGFyZ2V0SW5QYXJ0eSIsInNvdXJjZUluUGFydHkiLCJkZWxldGUiLCJPbkdhaW5zRWZmZWN0IiwibmV4dFBydW5lVGltZXN0YW1wIiwiUHJ1bmVUcmFja2VkRXZlbnRzIiwiT25Mb3Nlc0VmZmVjdCIsIk9uRGVhdGhSZWFzb24iLCJPbk1pc3Rha2VPYmoiLCJyZXBvcnRJZCIsIk9uRGVmZWF0ZWQiLCJmaXJzdFRpbWVzdGFtcCIsInRhcmdldENvdW50U3RyIiwiaXNTaGFyZWREYW1hZ2UiLCJyZXBvcnREYXRhIiwiT25Ib1REb1QiLCJPbldpcGUiLCJfc3BsaXRMaW5lIiwiY29sbGVjdGVkIiwiYmxhbWVJZCIsImdvdEJ1ZmZNYXAiLCJtaXNzZWRJZHMiLCJtaXNzZWROYW1lcyIsIm5hbWVMaXN0IiwiUGxheWVyTmlja3MiLCJibGFtZSIsImZpbmRJbmRleCIsImFjdG9yQ29udHJvbEZhZGVJbkNvbW1hbmQiLCJwYXJ0eVdpcGVUZXh0IiwiZWFybHlQdWxsVGV4dCIsImxhdGVQdWxsVGV4dCIsImVhcmx5UHVsbFRyaWdnZXJJZCIsImlzT29wc3lNaXN0YWtlIiwiRGFtYWdlVHJhY2tlciIsImluQ29tYmF0IiwiaWdub3JlWm9uZSIsInRpbWVycyIsInRyaWdnZXJzIiwiY29tYmF0U3RhdGUiLCJsYXN0VGltZXN0YW1wIiwidHJpZ2dlclN1cHByZXNzIiwidGltZXN0YW1wQ2FsbGJhY2tzIiwiTWF0Y2hBbGwiLCJjb250ZW50VHlwZSIsImRhdGFGaWxlcyIsInRpbWVzdGFtcENhbGxiYWNrIiwiT25SZXF1ZXN0VGltZXN0YW1wQ2FsbGJhY2siLCJwbGF5ZXJTdGF0ZVRyYWNrZXIiLCJjb3VudGRvd25FbmdhZ2VSZWdleCIsImNvdW50ZG93blN0YXJ0UmVnZXgiLCJjb3VudGRvd25DYW5jZWxSZWdleCIsImFiaWxpdHlGdWxsUmVnZXgiLCJ3aXBlQ2FjdGJvdEVjaG8iLCJ3aXBlRW5kRWNobyIsIkdldERhdGFPYmplY3QiLCJEYW1hZ2VGcm9tTWF0Y2hlcyIsIlBhcnNlTG9jYWxlRmxvYXQiLCJ0aW1lciIsImNsZWFyVGltZW91dCIsIk9uRW5nYWdlIiwiZW5nYWdlVGltZSIsImZpcnN0UHVsbGVyIiwiTWluaW11bVRpbWVGb3JQdWxsTWlzdGFrZSIsIm1pc3Rha2VTdHIiLCJ0b0ZpeGVkIiwiVXBkYXRlTGFzdFRpbWVzdGFtcCIsInRpbWVGaWVsZCIsIk9uTmV0TG9nIiwicmF3TGluZSIsInNoaWZ0IiwiV2lwZSIsIlNldFpvbmUiLCJPbkFiaWxpdHlFdmVudCIsInRyaWdnZXIiLCJsb2NhbFJlZ2V4IiwiT25UcmlnZ2VyIiwibGluZU1hdGNoZXMiLCJncm91cHMiLCJvcmlnRmxhZ3MiLCJleGVjTWF0Y2hlcyIsInRyaWdnZXJUaW1lIiwic3VwcHJlc3NUaW1lIiwiVmFsdWVPckZ1bmN0aW9uIiwiY29uZGl0aW9uIiwiZGVsYXlGaWVsZCIsImRlbGF5U2Vjb25kcyIsInN1cHByZXNzIiwic3VwcHJlc3NTZWNvbmRzIiwibSIsIm1pc3Rha2VUaW1lc3RhbXAiLCJyZXQiLCJkZWF0aFJlYXNvbiIsInJ1biIsInpvbmVJRCIsInpvbmVJbmZvIiwiUmVsb2FkVHJpZ2dlcnMiLCJPbkluQ29tYmF0Q2hhbmdlZEV2ZW50IiwiaW5HYW1lQ29tYmF0IiwiQWRkRGFtYWdlVHJpZ2dlcnMiLCJkaWN0IiwibmV0UmVnZXgiLCJQcm9jZXNzVHJpZ2dlciIsIkFkZEdhaW5zRWZmZWN0VHJpZ2dlcnMiLCJBZGRTaGFyZVRyaWdnZXJzIiwiQWRkU29sb1RyaWdnZXJzIiwiUHJvY2Vzc0RhdGFGaWxlcyIsIklnbm9yZUNvbnRlbnRUeXBlcyIsIklnbm9yZVpvbmVJZHMiLCJ6b25lRXJyb3IiLCJ6b25lUmVnZXgiLCJmaWxlbmFtZSIsInBhcnNlckxhbmciLCJnYWluc0VmZmVjdFdhcm4iLCJnYWluc0VmZmVjdEZhaWwiLCJsb29zZVRyaWdnZXIiLCJPblBsYXllckNoYW5nZSIsIlRyaWdnZXJzIiwianNvbiIsImhhc1pvbmVSZWdleCIsImhhc1pvbmVJZCIsImJyb2FkY2FzdFNvdXJjZSIsIm1zZ1N5bmNSZXF1ZXN0VHlwZSIsIm1zZ1N5bmNSZXNwb25zZVR5cGUiLCJNaXN0YWtlQ29sbGVjdG9yIiwib2JzZXJ2ZXJzIiwiY3JlYXRpb25UaW1lIiwic2hvdWxkU3luYyIsIkFkZE9ic2VydmVyIiwiUmVxdWVzdFN5bmMiLCJEZWJ1Z1ByaW50IiwiU2VuZFN5bmNSZXNwb25zZSIsIlJlY2VpdmVTeW5jUmVzcG9uc2UiLCJsYXRlc3RTeW5jVGltZXN0YW1wIiwib2JzZXJ2ZXIiLCJPblN5bmNFdmVudHMiLCJPbkJyb2FkY2FzdE1lc3NhZ2UiLCJPbkV2ZW50Iiwia0NvcGllZE1lc3NhZ2UiLCJlcnJvck1lc3NhZ2VFbmFibGVBQ1RXUyIsIkRlYXRoUmVwb3J0TGl2ZSIsInJlcG9ydFF1ZXVlIiwicXVldWVUaW1lb3V0SGFuZGxlIiwicmVwb3J0RWxlbSIsInRpbWVvdXRNcyIsIlRpbWVUb1Nob3dEZWF0aFJlcG9ydE1zIiwiaXNGaXJzdFJlcG9ydCIsInNldERlYXRoUmVwb3J0IiwiaGFuZGxlUXVldWUiLCJjYW5jZWxRdWV1ZSIsImhpZGUiLCJzaG93IiwibW91c2VPdmVyIiwibGFzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJjb250YWluZXIiLCJ0aXRsZURpdiIsInRpdGxlSWNvbiIsInRpdGxlVGV4dCIsImNsb3NlQnV0dG9uIiwiZGV0YWlsc0RpdiIsIkFwcGVuZERldGFpbHMiLCJocEVsZW0iLCJkYW1hZ2VFbGVtIiwiaWNvbkVsZW0iLCJ0aW1lRWxlbSIsIk9vcHN5TGl2ZUxpc3QiLCJudW1JdGVtcyIsIml0ZW1zIiwiaXRlbUlkeFRvTGlzdGVuZXIiLCJzY3JvbGxlciIsImNoaWxkcmVuIiwicmVwb3J0RGl2IiwiRGVhdGhSZXBvcnRTaWRlIiwiZGVhdGhSZXBvcnQiLCJpY29uQ29udGFpbmVyIiwiY2xvc2VEaXYiLCJzdW1tYXJ5RGl2IiwidXJsIiwiY2F0Y2giLCJTZXRJbkNvbWJhdCIsIkhpZGVPbGRJdGVtcyIsIlNob3dBbGxJdGVtcyIsImljb25DbGFzcyIsImJsYW1lVGV4dCIsInRyYW5zbGF0ZWRUZXh0IiwibWF4SXRlbXMiLCJOdW1MaXZlTGlzdEl0ZW1zSW5Db21iYXQiLCJyb3dEaXYiLCJpdGVtSWR4IiwiTWFrZVJvdyIsImxpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImljb25EaXYiLCJ0ZXh0RGl2IiwidGltZURpdiIsInNjcm9sbFRvcCIsInNjcm9sbEhlaWdodCIsImRpdiIsImNoaWxkTm9kZXMiLCJ0ZXh0Q29udGVudCIsIm1pc3Rha2VUaW1lIiwiZWwiLCJzZWxlY3QiLCJleGVjQ29tbWFuZCIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJoZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJwYXJlbnROb2RlIiwiX2V2ZW50cyIsImFiaWxpdHlOYW1lTWFwIiwiZGVmYXVsdE9vcHN5Tm9uQ29uZmlnT3B0aW9ucyIsIlB2cCIsIkV1cmVrYSIsIlRoZUJvemphblNvdXRoZXJuRnJvbnQiLCJaYWRub3IiLCJBYmlsaXR5SWROYW1lTWFwIiwiZGVmYXVsdE9vcHN5Q29uZmlnT3B0aW9ucyIsIk9vcHN5U3VtbWFyeVRhYmxlIiwidHlwZXMiLCJzb3J0Q29sIiwic29ydEFzYyIsInRhYmxlIiwic2V0UHJvcGVydHkiLCJtaXN0YWtlcyIsIkJ1aWxkSGVhZGVyUm93IiwicGFyZW50IiwiZHVtbXlGaXJzdERpdiIsInR5cGVFbGVtIiwiU29ydFRhYmxlIiwiQnVpbGRQbGF5ZXJSb3ciLCJuYW1lRWxlbSIsInJvdyIsImxvbmdOYW1lIiwiY291bnRzIiwiT29wc3lTdW1tYXJ5TGlzdCIsInB1bGxJZHgiLCJjdXJyZW50RGl2IiwiR2V0VGltZVN0ciIsImQiLCJtb250aCIsImdldE1vbnRoIiwiZGF5IiwiZ2V0RGF0ZSIsImhvdXJzIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0RnVsbFllYXIiLCJTdGFydE5ld1NlY3Rpb25JZk5lZWRlZCIsInNlY3Rpb24iLCJoZWFkZXJEaXYiLCJwdWxsRGl2Iiwiem9uZURpdiIsInJvd0NvbnRhaW5lciIsIkVuZFNlY3Rpb24iLCJBZGRMaW5lIiwiY3VycmVudFNlY3Rpb24iLCJjb2xsYXBzZXJEaXYiLCJleHBhbmRlZCIsIm9vcHN5RmlsZURhdGEiLCJvb3BzeUhlbHBlcnMiLCJrVHJpZ2dlck9wdGlvbnMiLCJsYWJlbCIsImRpc2FibGVkIiwiT29wc3lDb25maWd1cmF0b3IiLCJvcHRpb25LZXkiLCJjYWN0Ym90Q29uZmlndXJhdG9yIiwiYnVpbGRVSSIsImZpbGVzIiwiZmlsZU1hcCIsInByb2Nlc3NPb3BzeUZpbGVzIiwiZXhwYW5zaW9uRGl2cyIsImluZm8iLCJleHBhbnNpb24iLCJleHBhbnNpb25EaXYiLCJleHBhbnNpb25Db250YWluZXIiLCJleHBhbnNpb25IZWFkZXIiLCJvbmNsaWNrIiwidHJpZ2dlckNvbnRhaW5lciIsInBhcnRzIiwidGl0bGUiLCJwYXJ0IiwicGFydERpdiIsInRyaWdnZXJPcHRpb25zIiwidHJpZ2dlckRpdiIsInRyaWdnZXJEZXRhaWxzIiwiYnVpbGRUcmlnZ2VyT3B0aW9ucyIsImxhYmVsRGl2Iiwia0ZpZWxkIiwidXBkYXRlTGFiZWwiLCJpbnB1dCIsInNlbGVjdFZhbHVlIiwiZ2V0T3B0aW9uIiwidHJhbnNsYXRlIiwic2VsZWN0ZWQiLCJvbmNoYW5nZSIsInNldE9wdGlvbiIsInByb2Nlc3NGaWxlcyIsImdlbmVyYWxFbnRyeSIsImZha2VCdWZmcyIsImZpbGVLZXkiLCJ0cmlnZ2VyU2V0IiwiYnVpbGRFeHRyYVVJIiwiYmFzZU9wdGlvbnMiLCJwZXJUcmlnZ2VyQXV0b0NvbmZpZyIsImRlYnVnT25seSIsInVzZXJGaWxlSGFuZGxlciIsIl9maWxlcyIsImJhc2VUcmlnZ2VyU2V0IiwiaXNVc2VyVHJpZ2dlclNldCIsImRlZmF1bHRPcHRpb25zIiwiYWRkRGVidWdJbmZvIiwibnVtTWlzdGFrZXMiLCJmYWtlVGltZXN0YW1wIiwicmFuZG9tIiwibWlzdGFrZUNvbGxlY3RvciIsInN1bW1hcnlFbGVtZW50IiwibGl2ZUxpc3RFbGVtZW50IiwibGlzdFZpZXciLCJ0YWJsZUVsZW1lbnQiXSwic291cmNlUm9vdCI6IiJ9